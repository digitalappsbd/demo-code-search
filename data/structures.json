[{"structure_type": "function", "name": "dispose", "docstring": "", "module": "ruqya", "file_path": "dua-app-flutter/lib/pages/ruqya/ruqya.dart", "file_name": "ruqya.dart", "line": 27, "line_from": 27, "line_to": 31, "snippet": "  void dispose() {\n    controller.stop();\n    print(\"======> ${controller.isPlaying.value} <=======}\");\n    super.dispose();\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "dua-app-flutter/lib/pages/home/widgets/mid_menu.dart", "file_name": "mid_menu.dart", "line": 24, "line_from": 24, "line_to": 188, "snippet": "  Widget build(BuildContext context) {\n    var size = MediaQuery.of(context).size;\n    return Container(\n        margin: EdgeInsets.only(bottom: size.width * .026),\n        width: size.width * 0.92,\n        height: size.width * 0.5,\n        decoration: BoxDecoration(\n            color: context.theme.cardColor,\n            borderRadius: BorderRadius.circular(7)),\n        child: GridView.builder(\n          padding: EdgeInsets.only(\n            bottom: size.width * 0.1,\n            top: size.width * 0.055,\n          ),\n          shrinkWrap: true,\n          physics: NeverScrollableScrollPhysics(),\n          itemCount: middleCategoryItem.length,\n          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n            childAspectRatio: 1.6,\n            crossAxisCount: 3,\n            crossAxisSpacing: 20.0,\n            mainAxisSpacing: 25.0,\n          ),\n          itemBuilder: (x, index) {\n            return InkWell(\n              splashColor: Colors.transparent,\n              highlightColor: Colors.transparent,\n              onTap: () {\n                FocusScopeNode currentFocus = FocusScope.of(context);\n                if (!currentFocus.hasPrimaryFocus) {\n                  currentFocus.unfocus();\n                }\n                hivedata.getData(\"LastReadIndex\") == null\n                    ? lastReadHasData = false\n                    : lastReadHasData = true;\n                List<List<Dua>> data = controller.duas\n                    .where((e) => e[0].catId == hivedata.getData(\"LastReadCat\"))\n                    .toList();\n\n                if (index == 0 && lastReadHasData) {\n                  Get.to(\n                    () => DuaDetails(\n                      hivedata.getData(\"LastReadIndex\"),\n                      data,\n                      catName: hivedata.getData(\"LastReadCat\"),\n                    ),\n                  );\n                }\n                if (index == 0 && !lastReadHasData) {\n                  Get.snackbar(\n                    \"Last Read\".tr,\n                    \"You haven't read any dua yet\".tr,\n                    duration: Duration(milliseconds: 2000),\n                    backgroundColor: Colors.white,\n                    overlayBlur: 3,\n                    margin: EdgeInsets.only(\n                        top: size.width * .08,\n                        left: size.width * .04,\n                        right: size.width * .04),\n                    titleText: Text(\n                      'Last Read'.tr,\n                      style: TextStyle(\n                          fontSize: size.width * .042,\n                          fontWeight: FontWeight.bold,\n                          color: Colors.black),\n                    ),\n                    messageText: Text(\n                      \"You haven't read any dua yet\".tr,\n                      style: TextStyle(\n                          fontSize: size.width * .04, color: Colors.black),\n                    ),\n                    borderRadius: size.width * .02,\n                  );\n                }\n\n                if (index == 1) {\n                  try {\n                    bottomcontroller.setSelectIndex(2);\n                    bottomcontroller.pageController.animateToPage(2,\n                        curve: Curves.ease,\n                        duration: Duration(milliseconds: 300));\n                  } catch (e) {\n                    Get.to(MemorizeTabPage());\n                  }\n                }\n\n                if (index == 2)\n                  Get.to(\n                    () => Ruqya(),\n                  );\n                if (index == 3)\n                  Get.to(\n                    () => DuaInfo(),\n                    // transition: Transition.cupertino,\n                    // duration: Duration(milliseconds: 500)\n                  );\n                if (index == 4)\n                  bookController.getBooks().then(\n                      (value) => Future.delayed(Duration(microseconds: 50), () {\n                            Get.to(\n                              () => Bookintro(),\n                              // transition: Transition.cupertino,\n                              // duration:\n                              //     Duration(milliseconds: 500)\n                            );\n                          }));\n                if (index == 5)\n                  Get.to(\n                    () => Sadqya(),\n                    // transition: Transition.cupertino,\n                    // duration: Duration(milliseconds: 500)\n                  );\n              },\n              child: Column(\n                children: [\n                  SvgPicture.asset(\n                    \"assets/icons/mid_box/${middleCategoryItem[index].icon}.svg\",\n                    height: size.width * 0.08,\n                  ),\n                  Spacer(),\n                  /*  SizedBox(\t\n                                    height: size.height * 0.01,\t\n                                  ), */\n                  Text(\n                    \"${middleCategoryItem[index].name}\".tr,\n                    style: TextStyle(\n                        shadows: <Shadow>[\n                          Shadow(\n                            offset: Offset(0.0, 0.0),\n                            blurRadius: 0.3,\n                            color: Color.fromARGB(255, 0, 0, 0),\n                          ),\n                        ],\n                        fontSize: hivedata.getData(\"lan\") == \"en\"\n                            ? size.width * 0.042\n                            : size.width * 0.042,\n                        color: hivedata.getData(\"isDarkMode\")\n                            ? Colors.white\n                            : Colors.black),\n                  ),\n                ],\n              ),\n            );\n          },\n        ));\n    ;\n  }\n\n  List<MiddleCat> middleCategoryItem = [\n    MiddleCat(\"reminder\", \"Last Read\", \"route\"),\n    MiddleCat(\"memorize\", \"Memorize\", \"route\"),\n    MiddleCat(\"ruqiya\", \"Ruqyah\", \"route\"),\n    MiddleCat(\"dua_info\", \"Dua Q&A\", \"route\"),\n    MiddleCat(\"books\", \"Books\", \"route\"),\n    MiddleCat(\"sadaqa\", \"Sadaqa\", \"route\"),\n  ];\n}\n\nclass MiddleCat {\n  MiddleCat(this.icon, this.name, this.route);\n\n  String icon;\n  String name;\n  String route;\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "pages", "file_path": "dua-app-flutter/lib/pages/drawer/pages/contact_us.dart", "file_name": "contact_us.dart", "line": 22, "line_from": 22, "line_to": 95, "snippet": "  Widget build(BuildContext context) {\n    var size = MediaQuery.of(context).size;\n    var unescape = new HtmlUnescape();\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Scaffold(\n        appBar: AppBar(\n          // brightness: HiveData().getData(ProjectKeys.isDarkMode)?Brightness.dark:Brightness.light,\n          backgroundColor: Get.theme.scaffoldBackgroundColor,\n          elevation: 0,\n          leading: InkWell(\n            splashColor: Colors.transparent,\n            highlightColor: Colors.transparent,\n            onTap: () => Get.back(),\n            child: Icon(\n              Icons.arrow_back,\n              color: Get.theme.textTheme.bodyMedium!.color,\n            ),\n          ),\n          title: Text(\n            'Contact Us'.tr,\n            style: TextStyle(\n                fontSize: size.width * 0.055,\n                color: Get.theme.textTheme.bodyText2!.color,\n                fontWeight: FontWeight.w500),\n          ),\n        ),\n        body: SingleChildScrollView(\n          child: Column(\n            children: [\n              Padding(\n                  padding:\n                      const EdgeInsets.only(left: 12, right: 12, bottom: 12),\n                  child: Obx(\n                    () => Container(\n                        padding: EdgeInsets.all(10.0),\n                        decoration: BoxDecoration(\n                            color: Get.theme.cardColor,\n                            borderRadius: BorderRadius.circular(10)),\n                        child: controller.drawerItemList.length != 0\n                            ? Html(\n                                data: unescape.convert(\n                                    controller.drawerItemList[7].itemDetails),\n                                style: {\n                                  \"body\": Style(\n                                      fontSize: FontSize(size.width * 0.045),\n                                      color: HiveData().getData(\"isDarkMode\")\n                                          ? Color(0xFFC2D7EF)\n                                          : Colors.black),\n                                },\n                          onLinkTap: (url, attr, element) {\n                                  onLinkTap(url, attr, element);\n                                },\n\n                        )\n                            : Center(\n                                child: CircularProgressIndicator(),\n                              )),\n                  )),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n\nvoid onLinkTap(String? url, Map<String, String> attributes, dynamic element) {\n  print(url); // Print the URL for debugging purposes\n  if (url != null) {\n    _launchfbURL();\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "pages", "file_path": "dua-app-flutter/lib/pages/drawer/pages/our_other_project.dart", "file_name": "our_other_project.dart", "line": 19, "line_from": 19, "line_to": 287, "snippet": "  Widget build(BuildContext context) {\n    var size = MediaQuery.of(context).size;\n\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Scaffold(\n        appBar: AppBar(\n          // brightness: HiveData().getData(ProjectKeys.isDarkMode)?Brightness.dark:Brightness.light,\n          backgroundColor: Get.theme.scaffoldBackgroundColor,\n          elevation: 0,\n          leading: InkWell(\n            splashColor: Colors.transparent,\n            highlightColor: Colors.transparent,\n            onTap: () => Get.back(),\n            child: Icon(\n              Icons.arrow_back,\n              color: Get.theme.textTheme.bodyText2!.color,\n            ),\n          ),\n          title: Text(\n            'Our Other Projects'.tr,\n            style: TextStyle(\n                fontSize: size.width * 0.055,\n                color: Get.theme.textTheme.bodyText2!.color,\n                fontWeight: FontWeight.w500),\n          ),\n        ),\n        body: SingleChildScrollView(\n          child: Column(\n            children: [\n              AppContainer(\n                title: HiveData().getData('lan') == 'en'\n                    ? 'Al Hadith' + ' (Android)'\n                    : \"\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8\" + ' (Android)',\n                icon: 'assets/icons/hadislogo.svg',\n                description: HiveData().getData('lan') == 'en'\n                    ? \"Al Hadith is an Great Collection of Hadith of Prophet Muhammad (\ufdfa). The app contains 49000+ hadith from Most Accepted and Authentic Hadith books.\"\n                    : \"\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2\u09cd\u09b2\u09be\u09b9\u09cd\u200c\u09b0 \u09b0\u09be\u09b8\u09c1\u09b2 (\ufdfa)-\u098f\u09b0 \u09b9\u09be\u09a6\u09bf\u09b8 \u09b8\u09ae\u09c2\u09b9\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09b6\u09be\u09b2 \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8\u0964 \u09ac\u09bf\u09b6\u09c1\u09a6\u09cd\u09a7 \u09b9\u09be\u09a6\u09bf\u09b8 \u0997\u09cd\u09b0\u09a8\u09cd\u09a5\u0997\u09c1\u09b2\u09cb \u09b8\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u09ea\u09ef,\u09e6\u09e6\u09e6 \u098f\u09b0\u0993 \u09ac\u09c7\u09b6\u09bf \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u09b8\u09ae\u09be\u09b9\u09be\u09b0\u0964 \",\n                byTap: () => _launchfbURL(\n                    'https://play.google.com/store/apps/details?id=com.ihadis.ihadis',\n                    'https://play.google.com/store/apps/details?id=com.ihadis.ihadis'),\n                buttonText: 'Download Now',\n                buttonIcon: true,\n              ),\n              AppContainer(\n                title: HiveData().getData('lan') == 'en'\n                    ? 'Al Hadith' + ' (iOS)'\n                    : \"\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8\" + ' (iOS)',\n                icon: 'assets/icons/hadislogo.svg',\n                description: HiveData().getData('lan') == 'en'\n                    ? \"Al Hadith is the collection of Hadith of Prophet Muhammad (Peace Be Upon Him). The app contains 49000+ hadith from most accepted and authentic Hadith books including six hadith books also known as Kutub al-Sittah or Sihah Sitta (meaning 'The Authentic Six').\"\n                    : \"\u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2\u09cd\u09b2\u09be\u09b9\u09cd\u200c\u09b0 \u09b0\u09be\u09b8\u09c1\u09b2 (\ufdfa)-\u098f\u09b0 \u09b9\u09be\u09a6\u09bf\u09b8 \u09b8\u09ae\u09c2\u09b9\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09b6\u09be\u09b2 \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8\u0964 \u0995\u09c1\u09a4\u09c1\u09ac\u09c7 \u09b8\u09bf\u09a4\u09cd\u09a4\u09be\u09b9 \u09ac\u09be \u09b8\u09bf\u09b9\u09be\u09b9 \u09b8\u09bf\u09a4\u09cd\u09a4\u09be\u09b9 (\u099b\u09df\u099f\u09bf \u09ac\u09bf\u09b6\u09c1\u09a6\u09cd\u09a7 \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u0997\u09cd\u09b0\u09a8\u09cd\u09a5) \u09b8\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u09ea\u09ef,\u09e6\u09e6\u09e6 \u098f\u09b0\u0993 \u09ac\u09c7\u09b6\u09bf \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u09b8\u09ae\u09be\u09b9\u09be\u09b0\u0964 \",\n                byTap: () => _launchfbURL(\n                    'https://itunes.apple.com/us/app/al-hadith/id1238182914',\n                    'https://itunes.apple.com/us/app/al-hadith/id1238182914'),\n                buttonText: 'Download Now',\n                buttonIcon: true,\n              ),\n              AppContainer(\n                title: HiveData().getData('lan') == 'en'\n                    ? \"Quran Mazid (Tafsir & By Words)\" + \" (Android)\"\n                    : \"\u0995\u09c1\u09b0\u0986\u09a8 \u09ae\u09be\u099c\u09c0\u09a6 (Tafsir & By Words)\" + \" (Android)\",\n                icon: 'assets/icons/quran_android.svg',\n                description: HiveData().getData('lan') == 'en'\n                    ? \"Quran Mazid is one of the most Popular Quran App with 34000+ Reviews and 4.8/5 Ratings. In Our app will get almost all important features like Multiple Translations, Multiple Tafsirs, Word By Word with Audio, Quran Recitation, Quran Index etc.\"\n                    : \"\u0995\u09c1\u09b0\u0986\u09a8 \u09ae\u09be\u099c\u09c0\u09a6 (\u09ac\u09be\u0982\u09b2\u09be) \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09b8\u09b9 \u09b8\u09be\u099c\u09bf\u09df\u09c7\u099b\u09bf \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u0964 \u09b9\u09be\u09ab\u09c7\u099c\u09c0 \u0995\u09cb\u09b0\u0986\u09a8 \u09b6\u09b0\u09c0\u09ab, \u09a8\u09c2\u09b0\u09be\u09a8\u09c0 \u0995\u09cb\u09b0\u0986\u09a8 \u09b6\u09b0\u09c0\u09ab \u098f\u09ac\u0982  \u09b8\u09b9\u099c \u09b8\u09b0\u09b2 \u09ac\u09be\u0982\u09b2\u09be \u0985\u09a8\u09c1\u09ac\u09be\u09a6 \u098f\u0987 \u09b8\u09ac \u0995\u09bf\u099b\u09c1 \u098f\u0995\u09b8\u09be\u09a5\u09c7\u0987 \u09aa\u09be\u099a\u09cd\u099b\u09c7 \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7\u0964 \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u0985\u09cd\u09af\u09be\u09a1 \u09ab\u09cd\u09b0\u09bf\u0964  \u09af\u09c7 \u0995\u09cb\u09a8 \u0986\u09df\u09be\u09a4 \u098f \u0995\u09cd\u09b2\u09bf\u0995 \u0995\u09b0\u09b2\u09c7 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09a6\u09c7\u0996\u09be\u09b0 \u0985\u09aa\u09b6\u09a8 \u0986\u09b8\u09ac\u09c7\u0964 \u0985\u0996\u09be\u09a8\u09c7 \u0995\u09cd\u09b2\u09bf\u0995 \u0995\u09b0\u09c7 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09a6\u09c7\u0996\u09be \u09af\u09be\u09ac\u09c7\u0964 \u09a1\u09cd\u09b0\u09aa\u09a1\u09be\u0989\u09a8 \u09a5\u09c7\u0995\u09c7 \u0995\u09cb\u09a8 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09a4\u09be \u09b8\u09bf\u09b2\u09c7\u0995\u09cd\u099f \u0995\u09b0\u09be \u09af\u09be\u09ac\u09c7\u0964\",\n                byTap: () => _launchfbURL(\n                    'https://play.google.com/store/apps/details?id=com.ihadis.quran',\n                    'https://play.google.com/store/apps/details?id=com.ihadis.quran'),\n                buttonText: 'Download Now',\n                buttonIcon: true,\n              ),\n              AppContainer(\n                title: HiveData().getData('lan') == 'en'\n                    ? \"Quran Mazid (Tafsir & By Words)\" + \" (iOS)\"\n                    : \"\u0995\u09c1\u09b0\u0986\u09a8 \u09ae\u09be\u099c\u09c0\u09a6 (Tafsir & By Words)\" + \" (iOS)\",\n                icon: 'assets/icons/quran_ios.svg',\n                description: HiveData().getData('lan') == 'en'\n                    ? \"Alhamdulillah. Quran Mazid is a Quran study tool for all. It provides Verse by Verse Audio Playback with repeat functions,Bangla and English Tafsir Ibn Kathir, Bangla Word by Word Analysis and Translations, Index of Quran, Custom Bookmarks, Powerful Search, Several Translations & Tafsirs in Various Languages, Multiple Themes and Fonts and much more.\"\n                    : \"\u09a4\u09be\u09ab\u09b8\u09bf\u09b0 \u098f\u09ac\u0982 \u09ac\u09be\u0982\u09b2\u09be \u0989\u099a\u09cd\u099a\u09be\u09b0\u09a3 \u0993 \u0985\u09b0\u09cd\u09a5 \u09b8\u09b9 \u09aa\u09b0\u09bf\u09b7\u09cd\u0995\u09be\u09b0 \u0986\u09b0\u09ac\u09bf \u09ab\u09a8\u09cd\u099f\u09c7 \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u0986\u09b2 \u0995\u09c1\u09b0\u0986\u09a8 \u0985\u09cd\u09af\u09be\u09aa\u09b8\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09aa\u09a8\u09bf \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u09aa\u09cd\u09b0\u09a4\u09bf \u0986\u09df\u09be\u09a4\u09c7\u09b0 \u09ac\u09bf\u09b6\u09cd\u09ac\u0996\u09cd\u09af\u09be\u09a4 \u0995\u09cd\u09ac\u09be\u09b0\u09c0\u09a6\u09c7\u09b0 \u09a4\u09c7\u09b2\u09be\u0993\u09df\u09be\u09a4\u09c7\u09b0 \u0985\u09a1\u09bf\u0993 \u09b8\u09b9 \u09b0\u09bf\u09aa\u09bf\u099f \u0985\u09aa\u09b6\u09a8\u0964 \u09ac\u09be\u0982\u09b2\u09be \u0993 \u0987\u0982\u09b0\u09c7\u099c\u09c0\u09a4\u09c7 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u0987\u09ac\u09a8\u09c7 \u0995\u09be\u099b\u09bf\u09b0, \u09ac\u09be\u0982\u09b2\u09be \u0993 \u0987\u0982\u09b2\u09bf\u09b6\u09c7\u09b0 \u09b6\u09ac\u09cd\u09a6\u09be\u09b0\u09cd\u09a5 \u09b8\u09b9 \u09b8\u09b9\u099c \u09b8\u09b0\u09b2 \u09ac\u09be\u0982\u09b2\u09be \u0985\u09a8\u09c1\u09ac\u09be\u09a6\u0964 \u0986\u09b0\u0993 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2-\u0995\u09c1\u09b0-\u0986\u09a8\u09c7\u09b0 \u09a8\u09bf\u09b0\u09cd\u0998\u09a8\u09cd\u099f, \u09ac\u09c1\u0995\u09ae\u09be\u09b0\u09cd\u0995\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09a7\u09be, \u09b6\u0995\u09cd\u09a4\u09bf\u09b6\u09be\u09b2\u09c0 \u09b8\u09be\u09b0\u09cd\u099a \u0985\u09aa\u09b6\u09a8 \u09b8\u09b9 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0985\u09a8\u09c1\u09ac\u09be\u09a6 \u0993 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u09ad\u09be\u09b7\u09be\u09df \u09a4\u09be\u09ab\u09b8\u09c0\u09b0\u0964 \u098f\u0995\u09be\u09a7\u09bf\u0995 \u09a5\u09bf\u09ae\u09b8\u09b9 \u0985\u09a8\u09c7\u0995\u0997\u09c1\u09b2\u09cb \u09ab\u09a8\u09cd\u099f\u0964\",\n                byTap: () => _launchfbURL(\n                    'https://apps.apple.com/us/app/quran-mazid/id1324615850',\n                    'https://apps.apple.com/us/app/quran-mazid/id1324615850'),\n                buttonText: 'Download Now',\n                buttonIcon: true,\n              ),\n              AppContainer(\n                title: 'Dua & Ruqia'.tr + ' (Android)',\n                icon: 'assets/icons/dua_icon.svg',\n                description: HiveData().getData('lan') == 'en'\n                    ? \"The Dua and Ruqyah app has the largest collection of Sahih Dua and Zikr compiled from the Qur'an and Sahih Hadith. You will get 890+ prayers and dhikr in 41 categories. Various categories of Duas for all occasions such as morning and evening, Children, Prayer, Ramadan, Hajj/Umrah and Quran Duas can be found here.\"\n                    : \"\u09a6\u09cb\u09df\u09be \u0993 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u0995\u09c1\u09b0\u0986\u09a8 \u098f\u09ac\u0982 \u09b9\u09be\u09a6\u09bf\u09b8 \u09a5\u09c7\u0995\u09c7 \u09b8\u0982\u0995\u09b2\u09bf\u09a4 \u09b8\u09b9\u09c0\u09b9 \u09a6\u09cb\u09af\u09bc\u09be \u0993 \u09af\u09bf\u0995\u09bf\u09b0\u09c7\u09b0 \u09b8\u09ac\u099a\u09c7\u09df\u09c7 \u09ac\u09dc \u09b8\u0982\u0997\u09cd\u09b0\u09b9\u0964 \u098f\u09a4\u09c7 \u09ae\u09cb\u099f \u09ea\u09e7 \u099f\u09bf \u0995\u09cd\u09af\u09be\u099f\u09be\u0997\u09b0\u09bf\u09a4\u09c7 \u09ee\u09ef\u09e6+ \u099f\u09bf \u09a6\u09cb\u09df\u09be \u0993 \u09af\u09bf\u0995\u09bf\u09b0 \u09aa\u09be\u09ac\u09c7\u09a8\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09aa\u09cd\u09b0\u09a7\u09be\u09a8\u09a4 \u0995\u09c1\u09b0\u0986\u09a8 \u0993 \u09b8\u09b9\u09bf\u09b9 \u09b9\u09be\u09a6\u09bf\u09b8 \u09ad\u09bf\u09a4\u09cd\u09a4\u09bf\u0995 \u09a6\u09cb\u09df\u09be\u0997\u09c1\u09b2\u09cb \u0986\u09a8\u09be \u09b9\u09df\u09c7\u099b\u09c7\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7\u09b0 \u0985\u09a8\u09cd\u09af\u09a4\u09ae \u09ac\u09dc \u09ab\u09bf\u099a\u09be\u09b0 \u09b9\u099a\u09cd\u099b\u09c7 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 (\u0987\u09b8\u09b2\u09be\u09ae\u09bf\u0995 \u099d\u09be\u09dc-\u09ab\u09c1\u0981\u0995) \u09b8\u09c7\u0995\u09b6\u09a8\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09aa\u09a8\u09bf \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09ae\u09bf\u09a1\u09bf\u09df\u09be \u09aa\u09cd\u09b2\u09c7\u09df\u09be\u09b0 \u098f\u09b0 \u09aa\u09be\u09b6\u09be\u09aa\u09be\u09b6\u09bf \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09bf\u09a4 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0997\u09c1\u09b0\u09c1\u09a4\u09cd\u09ac\u09aa\u09c2\u09b0\u09cd\u09a3 \u09a4\u09a5\u09cd\u09af \u09af\u09c7\u09ae\u09a8 \u09af\u09be\u09a6\u09c1, \u09ac\u09a6\u09a8\u099c\u09b0\u09c7\u09b0 \u099a\u09bf\u0995\u09bf\u09ce\u09b8\u09be \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09c7 \u099c\u09be\u09a8\u09a4\u09c7 \u09aa\u09be\u09b0\u09ac\u09c7\u09a8\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u0995\u09cb\u09a8 \u09aa\u09cd\u09b0\u0995\u09be\u09b0 \u0985\u09cd\u09af\u09be\u09a1 \u09a8\u09c7\u0987 \u098f\u09ac\u0982 \u098f\u099f\u09bf \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u09ab\u09cd\u09b0\u09c0 !\",\n                byTap: () => _launchfbURL(\n                    'https://play.google.com/store/apps/details?id=com.ihadis.dua',\n                    'https://play.google.com/store/apps/details?id=com.ihadis.dua'),\n                buttonText: 'Download Now',\n                buttonIcon: true,\n              ),\n              AppContainer(\n                title: 'Dua & Ruqia'.tr + ' (iOS)',\n                icon: 'assets/icons/dua_icon.svg',\n                description: HiveData().getData('lan') == 'en'\n                    ? \"The Dua and Ruqyah app have the largest collection of Sahih Dua and Zikr compiled from the Qur'an and Sahih Hadith. You will get 890+ prayers and dhikr in 41 categories. Various categories of Duas for all occasions such as morning and evening, Children, Prayer, Ramadan, Hajj/Umrah, and Quran Duas can be found here.\"\n                    : \"\u09a6\u09cb\u09df\u09be \u0993 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u0995\u09c1\u09b0\u0986\u09a8 \u098f\u09ac\u0982 \u09b9\u09be\u09a6\u09bf\u09b8 \u09a5\u09c7\u0995\u09c7 \u09b8\u0982\u0995\u09b2\u09bf\u09a4 \u09b8\u09b9\u09c0\u09b9 \u09a6\u09cb\u09af\u09bc\u09be \u0993 \u09af\u09bf\u0995\u09bf\u09b0\u09c7\u09b0 \u09b8\u09ac\u099a\u09c7\u09df\u09c7 \u09ac\u09dc \u09b8\u0982\u0997\u09cd\u09b0\u09b9\u0964 \u098f\u09a4\u09c7 \u09ae\u09cb\u099f \u09ea\u09e7 \u099f\u09bf \u0995\u09cd\u09af\u09be\u099f\u09be\u0997\u09b0\u09bf\u09a4\u09c7 \u09ee\u09ef\u09e6+ \u099f\u09bf \u09a6\u09cb\u09df\u09be \u0993 \u09af\u09bf\u0995\u09bf\u09b0 \u09aa\u09be\u09ac\u09c7\u09a8\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09aa\u09cd\u09b0\u09a7\u09be\u09a8\u09a4 \u0995\u09c1\u09b0\u0986\u09a8 \u0993 \u09b8\u09b9\u09bf\u09b9 \u09b9\u09be\u09a6\u09bf\u09b8 \u09ad\u09bf\u09a4\u09cd\u09a4\u09bf\u0995 \u09a6\u09cb\u09df\u09be\u0997\u09c1\u09b2\u09cb \u0986\u09a8\u09be \u09b9\u09df\u09c7\u099b\u09c7\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7\u09b0 \u0985\u09a8\u09cd\u09af\u09a4\u09ae \u09ac\u09dc \u09ab\u09bf\u099a\u09be\u09b0 \u09b9\u099a\u09cd\u099b\u09c7 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 (\u0987\u09b8\u09b2\u09be\u09ae\u09bf\u0995 \u099d\u09be\u09dc-\u09ab\u09c1\u0981\u0995) \u09b8\u09c7\u0995\u09b6\u09a8\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09aa\u09a8\u09bf \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09ae\u09bf\u09a1\u09bf\u09df\u09be \u09aa\u09cd\u09b2\u09c7\u09df\u09be\u09b0 \u098f\u09b0 \u09aa\u09be\u09b6\u09be\u09aa\u09be\u09b6\u09bf \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09bf\u09a4 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0997\u09c1\u09b0\u09c1\u09a4\u09cd\u09ac\u09aa\u09c2\u09b0\u09cd\u09a3 \u09a4\u09a5\u09cd\u09af \u09af\u09c7\u09ae\u09a8 \u09af\u09be\u09a6\u09c1, \u09ac\u09a6\u09a8\u099c\u09b0\u09c7\u09b0 \u099a\u09bf\u0995\u09bf\u09ce\u09b8\u09be \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09c7 \u099c\u09be\u09a8\u09a4\u09c7 \u09aa\u09be\u09b0\u09ac\u09c7\u09a8\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u0995\u09cb\u09a8 \u09aa\u09cd\u09b0\u0995\u09be\u09b0 \u0985\u09cd\u09af\u09be\u09a1 \u09a8\u09c7\u0987 \u098f\u09ac\u0982 \u098f\u099f\u09bf \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u09ab\u09cd\u09b0\u09c0 !\",\n                byTap: () => _launchfbURL(\n                    'https://apps.apple.com/us/app/dua-ruqyah/id1568942398',\n                    'https://apps.apple.com/us/app/dua-ruqyah/id1568942398'),\n                buttonText: 'Download Now',\n                buttonIcon: true,\n              ),\n              AppContainer(\n                title: HiveData().getData('lan') == 'en'\n                    ? 'Al Hadith' + ' (Website)'\n                    : \"\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8\" + ' (Website)',\n                icon: 'assets/icons/books.svg',\n                description: HiveData().getData('lan') == 'en'\n                    ? \"Al Hadith is the collection of Hadith of Prophet Muhammad (Peace Be Upon Him). The app contains 49000+ hadith from most accepted and authentic Hadith books including six hadith books also known as Kutub al-Sittah or Sihah Sitta (meaning 'The Authentic Six').\"\n                    : \"Al Hadith Website-\u099f\u09bf\u09a4\u09c7 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2\u09cd\u09b2\u09be\u09b9\u09cd\u200c\u09b0 \u09b0\u09be\u09b8\u09c1\u09b2 (\ufdfa)-\u098f\u09b0 \u09b9\u09be\u09a6\u09bf\u09b8 \u09b8\u09ae\u09c2\u09b9\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09b6\u09be\u09b2 \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8\u0964 \u0995\u09c1\u09a4\u09c1\u09ac\u09c7 \u09b8\u09bf\u09a4\u09cd\u09a4\u09be\u09b9 \u09ac\u09be \u09b8\u09bf\u09b9\u09be\u09b9 \u09b8\u09bf\u09a4\u09cd\u09a4\u09be\u09b9 (\u099b\u09df\u099f\u09bf \u09ac\u09bf\u09b6\u09c1\u09a6\u09cd\u09a7 \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u0997\u09cd\u09b0\u09a8\u09cd\u09a5) \u09b8\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u09ea\u09ef,\u09e6\u09e6\u09e6 \u098f\u09b0\u0993 \u09ac\u09c7\u09b6\u09bf \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u09b8\u09ae\u09be\u09b9\u09be\u09b0\u0964 \",\n                byTap: () => _launchfbURL(\n                    'http://www.ihadis.com', 'http://www.ihadis.com'),\n                buttonText: 'Visit Now',\n                buttonIcon: false,\n              ),\n              AppContainer(\n                title: HiveData().getData('lan') == 'en'\n                    ? \"Quran Mazid (Tafsir & By Words)\" + \" (Website)\"\n                    : \"\u0995\u09c1\u09b0\u0986\u09a8 \u09ae\u09be\u099c\u09c0\u09a6 (Tafsir & By Words)\" + \" (Website)\",\n                icon: 'assets/icons/koran.svg',\n                description: HiveData().getData('lan') == 'en'\n                    ? \"Alhamdulillah. Quran Mazid is a Quran study tool for all. It provides Verse by Verse Audio Playback with repeat functions,Bangla and English Tafsir Ibn Kathir, Bangla Word by Word Analysis and Translations, Custom Bookmarks, Powerful Search, Several Translations & Tafsirs in Various Languages, Multiple Fonts and much more.\"\n                    : \"\u09a4\u09be\u09ab\u09b8\u09bf\u09b0 \u098f\u09ac\u0982 \u09ac\u09be\u0982\u09b2\u09be \u0989\u099a\u09cd\u099a\u09be\u09b0\u09a3 \u0993 \u0985\u09b0\u09cd\u09a5 \u09b8\u09b9 \u09aa\u09b0\u09bf\u09b7\u09cd\u0995\u09be\u09b0 \u0986\u09b0\u09ac\u09bf \u09ab\u09a8\u09cd\u099f\u09c7 \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u0986\u09b2 \u0995\u09c1\u09b0\u0986\u09a8 \u0985\u09cd\u09af\u09be\u09aa\u09b8\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09aa\u09a8\u09bf \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u09aa\u09cd\u09b0\u09a4\u09bf \u0986\u09df\u09be\u09a4\u09c7\u09b0 \u09ac\u09bf\u09b6\u09cd\u09ac\u0996\u09cd\u09af\u09be\u09a4 \u0995\u09cd\u09ac\u09be\u09b0\u09c0\u09a6\u09c7\u09b0 \u09a4\u09c7\u09b2\u09be\u0993\u09df\u09be\u09a4\u09c7\u09b0 \u0985\u09a1\u09bf\u0993 \u09b8\u09b9 \u09b0\u09bf\u09aa\u09bf\u099f \u0985\u09aa\u09b6\u09a8\u0964 \u09ac\u09be\u0982\u09b2\u09be \u0993 \u0987\u0982\u09b0\u09c7\u099c\u09c0\u09a4\u09c7 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u0987\u09ac\u09a8\u09c7 \u0995\u09be\u099b\u09bf\u09b0, \u09ac\u09be\u0982\u09b2\u09be \u0993 \u0987\u0982\u09b2\u09bf\u09b6\u09c7\u09b0 \u09b6\u09ac\u09cd\u09a6\u09be\u09b0\u09cd\u09a5 \u09b8\u09b9 \u09b8\u09b9\u099c \u09b8\u09b0\u09b2 \u09ac\u09be\u0982\u09b2\u09be \u0985\u09a8\u09c1\u09ac\u09be\u09a6\u0964 \u0986\u09b0\u0993 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2-\u0995\u09c1\u09b0-\u0986\u09a8\u09c7\u09b0 \u09a8\u09bf\u09b0\u09cd\u0998\u09a8\u09cd\u099f, \u09ac\u09c1\u0995\u09ae\u09be\u09b0\u09cd\u0995\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09a7\u09be, \u09b6\u0995\u09cd\u09a4\u09bf\u09b6\u09be\u09b2\u09c0 \u09b8\u09be\u09b0\u09cd\u099a \u0985\u09aa\u09b6\u09a8 \u09b8\u09b9 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0985\u09a8\u09c1\u09ac\u09be\u09a6 \u0993 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u09ad\u09be\u09b7\u09be\u09df \u09a4\u09be\u09ab\u09b8\u09c0\u09b0\u0964 \u098f\u0995\u09be\u09a7\u09bf\u0995 \u09ab\u09a8\u09cd\u099f\u09b8\u09b9 \u0986\u09b0\u0993 \u0985\u09a8\u09c7\u0995 \u09ab\u09bf\u099a\u09be\u09b0\u09b8\u0964\",\n                byTap: () => _launchfbURL(\n                    'http://www.quranmazid.com', 'http://www.quranmazid.com'),\n                buttonText: 'Visit Now',\n                buttonIcon: false,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass AppContainer extends StatelessWidget {\n  const AppContainer({\n    required this.title,\n    required this.icon,\n    required this.description,\n    required this.byTap,\n    required this.buttonText,\n    required this.buttonIcon,\n  });\n\n  final String title, icon, description, buttonText;\n  final bool buttonIcon;\n  final Function() byTap;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.only(left: 12, right: 12, bottom: 12),\n      child: Container(\n          width: double.infinity,\n          padding: EdgeInsets.all(15.0),\n          decoration: BoxDecoration(\n              color: Get.theme.cardColor,\n              borderRadius: BorderRadius.circular(10)),\n          child: Row(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Padding(\n                padding: EdgeInsets.only(top: 6.0),\n                child: SvgPicture.asset(\n                  icon,\n                  height: Get.width * .15,\n                ),\n              ),\n              SizedBox(\n                width: Get.width * .05,\n              ),\n              Container(\n                width: Get.width * .65,\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      title,\n                      style: TextStyle(\n                          fontSize: Get.width * .05,\n                          fontWeight: FontWeight.bold),\n                    ),\n                    SizedBox(\n                      height: Get.width * .03,\n                    ),\n                    Text(\n                      description,\n                      textAlign: HiveData().getData('lan') == 'en'\n                          ? TextAlign.justify\n                          : TextAlign.start,\n                      style: TextStyle(\n                          fontSize: HiveData().getData('lan') == 'en'\n                              ? Get.width * .035\n                              : Get.width * 0.04,\n                          color: HiveData().getData(\"isDarkMode\")\n                              ? Color(0xFFB5C8D1)\n                              : Color(0xff647C88),\n                          fontFamily: HiveData().getData('lan') == 'en'\n                              ? 'Gilroy'\n                              : 'Kalpurush'),\n                    ),\n                    SizedBox(\n                      height: Get.width * .05,\n                    ),\n                    InkWell(\n                      splashColor: Colors.transparent,\n                      highlightColor: Colors.transparent,\n                      onTap: byTap,\n                      child: Container(\n                        width: double.infinity,\n                        height: Get.width * .12,\n                        decoration: BoxDecoration(\n                          color: HiveData().getData(\"isDarkMode\")\n                              ? Color(0xff2C496D)\n                              : Colors.transparent,\n                          border: Border.all(\n                            color: HiveData().getData(\"isDarkMode\")\n                                ? Color(0xff425771)\n                                : Color(0xFFE7E7E7),\n                            width: 1,\n                          ),\n                          borderRadius: BorderRadius.circular(5),\n                        ),\n                        child: Padding(\n                          padding: EdgeInsets.only(left: Get.width * .17),\n                          child: Row(\n                            children: [\n                              buttonIcon\n                                  ? Container()\n                                  : SizedBox(width: Get.width * .08),\n                              Text(\n                                buttonText,\n                                style: TextStyle(\n                                    color: HiveData().getData(\"isDarkMode\")\n                                        ? Color(0xFFFFFFFF)\n                                        : Color(0xff0D974D)),\n                              ),\n                              SizedBox(\n                                width: Get.width * .03,\n                              ),\n                              buttonIcon\n                                  ? SvgPicture.asset(\n                                      'assets/icons/file-download.svg',\n                                      height: Get.width * .04,\n                                    )\n                                  : Container()\n                            ],\n                          ),\n                        ),\n                      ),\n                    )\n                  ],\n                ),\n              ),\n            ],\n          )),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "pages", "file_path": "dua-app-flutter/lib/pages/drawer/pages/sadqa.dart", "file_name": "sadqa.dart", "line": 30, "line_from": 30, "line_to": 245, "snippet": "  Widget build(BuildContext context) {\n    var size = MediaQuery.of(context).size;\n    var unescape = new HtmlUnescape();\n\n    return Scaffold(\n      body: SingleChildScrollView(\n        child: MediaQuery(\n          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n          child: Column(\n            children: [\n              SizedBox(\n                height: size.width * .1,\n              ),\n              Container(\n                width: size.width,\n                child: Padding(\n                  padding: EdgeInsets.only(\n                    left: size.width * 0.04,\n                    right: size.width * 0.04,\n                  ),\n                  child: Row(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      InkWell(\n                          splashColor: Colors.transparent,\n                          highlightColor: Colors.transparent,\n                          onTap: () {\n                            Get.back();\n                          },\n                          child: Container(\n                            margin: EdgeInsets.only(\n                                top: size.width * .04,\n                                bottom: size.width * .04),\n                            child: SvgPicture.asset(\n                              \"assets/icons/back.svg\",\n                              height: size.height * 0.016,\n                              width: size.height * 0.016,\n                              color: HiveData().getData(\"isDarkMode\")\n                                  ? Colors.white\n                                  : Colors.black,\n                            ),\n                          )),\n                      Text(\n                        \"Give Sadaqa\".tr,\n                        style: TextStyle(\n                          shadows: <Shadow>[\n                            Shadow(\n                              offset: Offset(0.0, 0.0),\n                              blurRadius: .8,\n                              color: Color(0xFF303030),\n                            ),\n                          ],\n                          color: HiveData().getData(\"isDarkMode\")\n                              ? Colors.white\n                              : Colors.black,\n                          fontSize: size.height * 0.025,\n                        ),\n                      ).paddingOnly(right: size.height * 0.02),\n                      Divider(),\n                    ],\n                  ).paddingOnly(top: size.height * 0.01),\n                ),\n              ),\n              Stack(children: [\n                Container(\n                    child: Container(\n                        height: Get.width * .54,\n                        width: Get.width * .95,\n                        child: SvgPicture.asset(\n                          \"assets/images/sadqa.svg\",\n                          fit: BoxFit.contain,\n                        ))),\n                Positioned(\n                    top: size.width * 0.03,\n                    left: 0,\n                    right: 0,\n                    child: Container(\n                      width: size.width,\n                      child: CarouselSlider(\n                        options: CarouselOptions(\n                          autoPlay: true,\n                          autoPlayInterval: Duration(seconds: 7),\n                          autoPlayAnimationDuration:\n                              Duration(milliseconds: 1000),\n                          autoPlayCurve: Curves.easeInOut,\n                          viewportFraction: 1,\n                        ),\n                        items: controller1.dailyDuaList.map((i) {\n                          return GestureDetector(\n                            onTap: () {\n                              duaController.catIDReturn(i.duaID).then((value) {\n                                HiveData().createData(\"LastReadCat\", value);\n                                controller1.loadSub(value).then((tr) {\n                                  List<List<Dua>> data = controller1.duas\n                                      .where((e) => e[0].catId == value)\n                                      .toList();\n                                  var jumpIndex = data.indexWhere(\n                                      (element) => element[0].duaId == i.duaID);\n                                  Get.to(DuaDetails(jumpIndex, data),\n                                      duration: Duration(microseconds: 1));\n                                });\n                              });\n                            },\n                            child: Builder(\n                              builder: (BuildContext context) {\n                                return Padding(\n                                  padding: EdgeInsets.all(size.height * 0.03),\n                                  child: Column(\n                                    children: [\n                                      Text(\n                                        \"\\\"${i.translation}\\\"\",\n                                        textAlign: TextAlign.center,\n                                        style: TextStyle(\n                                            fontSize: size.width * 0.044,\n                                            fontWeight: FontWeight.w300,\n                                            color: Colors.white),\n                                      ),\n                                      SizedBox(\n                                        height: size.height * 0.02,\n                                      ),\n                                      Text(\n                                        \"\\[${i.reference}\\]\",\n                                        textAlign: TextAlign.center,\n                                        style: TextStyle(\n                                            fontSize: size.width * 0.044,\n                                            fontWeight: FontWeight.w300,\n                                            color: Colors.white),\n                                      )\n                                    ],\n                                  ),\n                                );\n                              },\n                            ),\n                          );\n                        }).toList(),\n                      ),\n                    )),\n              ]),\n              Padding(\n                padding: const EdgeInsets.only(left: 12, right: 12, bottom: 2),\n                child: Container(\n                    padding: EdgeInsets.all(10.0),\n                    decoration: BoxDecoration(\n                        color: Get.theme.cardColor,\n                        borderRadius: BorderRadius.circular(10)),\n                    child: Obx(() => Container(\n                          child: Column(\n                            children: [\n                              controller.drawerItemList.length != 0\n                                  ? Html(\n                                      data: unescape.convert(\n                                        controller\n                                            .drawerItemList[4].itemDetails,\n                                      ),\n                                      style: {\n                                          \"body\": Style(\n                                              fontSize:\n                                                  FontSize(size.width * 0.045),\n                                              color: HiveData()\n                                                      .getData(\"isDarkMode\")\n                                                  ? Color(0xFFC2D7EF)\n                                                  : Colors.black),\n                                        })\n                                  : Center(child: CircularProgressIndicator()),\n                              SizedBox(\n                                height: size.height * 0.02,\n                              ),\n                              InkWell(\n                                splashColor: Colors.transparent,\n                                highlightColor: Colors.transparent,\n                                onTap: _launchfbURL,\n                                child: Container(\n                                  height: size.height * 0.05,\n                                  width: size.width * 0.7,\n                                  decoration: BoxDecoration(\n                                      color: Color(0xff139D52),\n                                      borderRadius: BorderRadius.circular(10)),\n                                  child: Center(\n                                      child: Text(\n                                    \"I Want To Give Sadaqa\".tr,\n                                    style: TextStyle(\n                                        color: HiveData().getData(\"isDarkMode\")\n                                            ? Colors.white\n                                            : Colors.white,\n                                        fontSize: size.width * 0.045),\n                                  )),\n                                ).paddingOnly(bottom: size.width * 0.01),\n                              ),\n                            ],\n                          ),\n                        ))),\n              ),\n              SizedBox(\n                height: 20,\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n_launchfbURL() async {\n  const fbProtocolUrl = \"fb-messenger://user-thread/436269339900162\";\n  const fallbackUrl = \"https://www.facebook.com/436269339900162\";\n  try {\n    bool launched = await launch(fbProtocolUrl, forceSafariVC: false);\n\n    if (!launched) {\n      await launch(fallbackUrl, forceSafariVC: false);\n    }\n  } catch (e) {\n    await launch(fallbackUrl, forceSafariVC: false);\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "utility", "file_path": "dua-app-flutter/lib/utility/custom_widget.dart", "file_name": "custom_widget.dart", "line": 58, "line_from": 58, "line_to": 120, "snippet": "      {size, required String helpText, required Future<bool> Function() backFunc, required Function() clickFunc}) async {\n    var hivedata = HiveData();\n    await Get.dialog(Builder(builder: (ctx) {\n      return WillPopScope(\n        onWillPop: backFunc,\n          // onWillPop: backFunc,\n          child: Dialog(\n            backgroundColor: Colors.black.withOpacity(.7),\n            insetPadding: EdgeInsets.zero,\n            child: InkWell(\n              splashColor: Colors.transparent,\n              highlightColor: Colors.transparent,\n              onTap: clickFunc,\n              child: Padding(\n                padding: EdgeInsets.all(Get.width * .05),\n                child: Column(\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: [\n                    Text(\n                      helpText,\n                      textAlign: TextAlign.center,\n                      style: TextStyle(\n                          color: Colors.white, fontSize: Get.width * .07),\n                    ),\n                    SizedBox(\n                      height: Get.width * .5,\n                    ),\n                    // hivedata.getData(ProjectKeys.isDarkMode)\n                    // ?\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        SvgPicture.asset('assets/icons/swipe_right.svg'),\n                        SvgPicture.asset('assets/icons/swipe_left.svg'),\n                      ],\n                    ),\n\n                    SizedBox(\n                      height: Get.width * .3,\n                    ),\n                    Container(\n                      height: Get.width * 0.1,\n                      width: Get.width,\n                      child: Center(\n                        child: Text(\"OK\".tr,\n                            style: TextStyle(\n                                color: Colors.white,\n                                fontWeight: FontWeight.bold,\n                                fontSize: Get.width * .05)),\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ));\n    }));\n  }\n}\n\nunFocus(BuildContext context) {\n  FocusScope.of(context).unfocus();\n}"}, {"structure_type": "class", "name": "FlutterLocalNotificationsPlatformMock extends Mock", "docstring": "", "module": "test", "file_path": "quran-flutter/f/flutter_local_notifications_platform_interface/test/flutter_local_notifications_platform_interface_test.dart", "file_name": "flutter_local_notifications_platform_interface_test.dart", "line": 6, "line_from": 6, "line_to": 39, "snippet": "class FlutterLocalNotificationsPlatformMock extends Mock\n    with MockPlatformInterfaceMixin\n    implements FlutterLocalNotificationsPlatform {}\n\nclass ImplementsFlutterLocalNotificationsPlatform extends Mock\n    implements FlutterLocalNotificationsPlatform {}\n\nclass ExtendsFlutterLocalNotificationsPlatform\n    extends FlutterLocalNotificationsPlatform {}\n\nvoid main() {\n  TestWidgetsFlutterBinding.ensureInitialized();\n  group('$FlutterLocalNotificationsPlatform', () {\n    test('Cannot be implemented with `implements`', () {\n      expect(() {\n        FlutterLocalNotificationsPlatform.instance =\n            ImplementsFlutterLocalNotificationsPlatform();\n      }, throwsAssertionError);\n    });\n\n    test('Can be mocked with `implements`', () {\n      final FlutterLocalNotificationsPlatformMock mock =\n          FlutterLocalNotificationsPlatformMock();\n      FlutterLocalNotificationsPlatform.instance = mock;\n    });\n\n    test('Can be extended', () {\n      FlutterLocalNotificationsPlatform.instance =\n          ExtendsFlutterLocalNotificationsPlatform();\n    });\n  });\n}\n"}, {"structure_type": "function", "name": "main", "docstring": "", "module": "test", "file_path": "quran-flutter/f/flutter_local_notifications/test/flutter_local_notifications_test.dart", "file_name": "flutter_local_notifications_test.dart", "line": 8, "line_from": 8, "line_to": 28, "snippet": "void main() {\n  TestWidgetsFlutterBinding.ensureInitialized();\n  final MockFlutterLocalNotificationsPlugin mock =\n      MockFlutterLocalNotificationsPlugin();\n  FlutterLocalNotificationsPlatform.instance = mock;\n\n  test('Creates IOSNotificationAttachment when file path is specified', () {\n    expect(\n        const IOSNotificationAttachment(''), isA<IOSNotificationAttachment>());\n  });\n}\n\nclass MockMethodChannel extends Mock implements MethodChannel {}\n\nclass MockFlutterLocalNotificationsPlugin extends Mock\n    with\n        MockPlatformInterfaceMixin // ignore: prefer_mixin\n    implements\n        FlutterLocalNotificationsPlatform {}\n"}, {"structure_type": "function", "name": "cancel", "docstring": "", "module": "src", "file_path": "quran-flutter/f/flutter_local_notifications/lib/src/platform_flutter_local_notifications.dart", "file_name": "platform_flutter_local_notifications.dart", "line": 41, "line_from": 41, "line_to": 535, "snippet": "  Future<void> cancel(int id) {\n    validateId(id);\n    return _channel.invokeMethod('cancel', id);\n  }\n\n  @override\n  Future<void> cancelAll() => _channel.invokeMethod('cancelAll');\n\n  @override\n  Future<NotificationAppLaunchDetails?>\n      getNotificationAppLaunchDetails() async {\n    final Map<dynamic, dynamic>? result =\n        await _channel.invokeMethod('getNotificationAppLaunchDetails');\n    return result != null\n        ? NotificationAppLaunchDetails(result['notificationLaunchedApp'],\n            result.containsKey('payload') ? result['payload'] : null)\n        : null;\n  }\n\n  @override\n  Future<List<PendingNotificationRequest>> pendingNotificationRequests() async {\n    final List<Map<dynamic, dynamic>>? pendingNotifications =\n        await _channel.invokeListMethod('pendingNotificationRequests');\n    return pendingNotifications\n            // ignore: always_specify_types\n            ?.map((p) => PendingNotificationRequest(\n                p['id'], p['title'], p['body'], p['payload']))\n            .toList() ??\n        <PendingNotificationRequest>[];\n  }\n}\n\n/// Android implementation of the local notifications plugin.\nclass AndroidFlutterLocalNotificationsPlugin\n    extends MethodChannelFlutterLocalNotificationsPlugin {\n  SelectNotificationCallback? _onSelectNotification;\n\n  /// Initializes the plugin.\n  ///\n  /// Call this method on application before using the\n  /// plugin further.\n  ///\n  /// To handle when a notification launched an application, use\n  /// [getNotificationAppLaunchDetails].\n  Future<bool?> initialize(\n    AndroidInitializationSettings initializationSettings, {\n    SelectNotificationCallback? onSelectNotification,\n  }) async {\n    _onSelectNotification = onSelectNotification;\n    _channel.setMethodCallHandler(_handleMethod);\n    return await _channel.invokeMethod(\n        'initialize', initializationSettings.toMap());\n  }\n\n  /// Schedules a notification to be shown at the specified date and time.\n  ///\n  /// The [androidAllowWhileIdle] parameter determines if the notification\n  /// should still be shown at the exact time when the device is in a low-power\n  /// idle mode.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> schedule(\n    int id,\n    String? title,\n    String? body,\n    DateTime scheduledDate,\n    AndroidNotificationDetails? notificationDetails, {\n    String? payload,\n    bool androidAllowWhileIdle = false,\n  }) async {\n    validateId(id);\n    final Map<String, Object?> serializedPlatformSpecifics =\n        notificationDetails?.toMap() ?? <String, Object>{};\n    serializedPlatformSpecifics['allowWhileIdle'] = androidAllowWhileIdle;\n    await _channel.invokeMethod('schedule', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'millisecondsSinceEpoch': scheduledDate.millisecondsSinceEpoch,\n      'platformSpecifics': serializedPlatformSpecifics,\n      'payload': payload ?? ''\n    });\n  }\n\n  /// Schedules a notification to be shown at the specified date and time\n  /// relative to a specific time zone.\n  Future<void> zonedSchedule(\n    int id,\n    String? title,\n    String? body,\n    TZDateTime scheduledDate,\n    AndroidNotificationDetails? notificationDetails, {\n    required bool androidAllowWhileIdle,\n    String? payload,\n    DateTimeComponents? matchDateTimeComponents,\n  }) async {\n    validateId(id);\n    validateDateIsInTheFuture(scheduledDate, matchDateTimeComponents);\n    ArgumentError.checkNotNull(androidAllowWhileIdle, 'androidAllowWhileIdle');\n    final Map<String, Object?> serializedPlatformSpecifics =\n        notificationDetails?.toMap() ?? <String, Object>{};\n    serializedPlatformSpecifics['allowWhileIdle'] = androidAllowWhileIdle;\n    await _channel.invokeMethod(\n        'zonedSchedule',\n        <String, Object?>{\n          'id': id,\n          'title': title,\n          'body': body,\n          'platformSpecifics': serializedPlatformSpecifics,\n          'payload': payload ?? ''\n        }\n          ..addAll(scheduledDate.toMap())\n          ..addAll(matchDateTimeComponents == null\n              ? <String, Object>{}\n              : <String, Object>{\n                  'matchDateTimeComponents': matchDateTimeComponents.index\n                }));\n  }\n\n  /// Shows a notification on a daily interval at the specified time.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> showDailyAtTime(\n    int id,\n    String? title,\n    String? body,\n    Time notificationTime,\n    AndroidNotificationDetails? notificationDetails, {\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('showDailyAtTime', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': RepeatInterval.daily.index,\n      'repeatTime': notificationTime.toMap(),\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  /// Shows a notification on weekly interval at the specified day and time.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> showWeeklyAtDayAndTime(\n    int id,\n    String? title,\n    String? body,\n    Day day,\n    Time notificationTime,\n    AndroidNotificationDetails? notificationDetails, {\n    String? payload,\n  }) async {\n    validateId(id);\n\n    await _channel.invokeMethod('showWeeklyAtDayAndTime', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': RepeatInterval.weekly.index,\n      'repeatTime': notificationTime.toMap(),\n      'day': day.value,\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  /// Starts an Android foreground service with the given notification.\n  ///\n  /// The `id` must not be 0, since Android itself does not allow starting\n  /// a foreground service with a notification id of 0.\n  ///\n  /// Since not all users of this plugin need such a service, it was not\n  /// added to this plugins Android manifest. Thie means you have to add\n  /// it if you want to use the foreground service functionality. Add the\n  /// foreground service permission to your apps `AndroidManifest.xml` like\n  /// described in the [official Android documentation](https://developer.android.com/guide/components/foreground-services#request-foreground-service-permissions):\n  /// ```xml\n  /// <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>\n  /// ```\n  /// Furthermore, add the `service` itself to your `AndroidManifest.xml`\n  /// (inside the `<application>` tag):\n  /// ```xml\n  /// <!-- If you want your foreground service to be stopped if\n  ///       your app is stopped, set android:stopWithTask to true.\n  ///       See https://developer.android.com/reference/android/R.attr#stopWithTask -->\n  /// <service\n  ///  android:name=\"com.dexterous.flutterlocalnotifications.ForegroundService\"\n  ///  android:exported=\"false\"\n  ///  android:stopWithTask=\"false\"\n  ///  android:foregroundServiceType=\"As you like\" />\n  /// ```\n  /// While the `android:name` must exactly match this value, you can configure\n  /// the other parameters as you like, although it is recommended to copy the\n  /// value for `android:exported`. Suitable values for\n  /// `foregroundServiceType` can be found [here](https://developer.android.com/reference/android/app/Service#startForeground(int,%20android.app.Notification,%20int)).\n  ///\n  /// The notification of the foreground service can be updated by\n  /// simply calling this method multiple times.\n  ///\n  /// Information on selecting an appropriate `startType` for your app's usecase\n  /// should be taken from the official Android documentation, check [`Service.onStartCommand`](https://developer.android.com/reference/android/app/Service#onStartCommand(android.content.Intent,%20int,%20int)).\n  /// The there mentioned constants can be found in [AndroidServiceStartType].\n  ///\n  /// The notification for the foreground service will not be dismissable\n  /// and automatically removed when using [stopForegroundService].\n  ///\n  /// `foregroundServiceType` is a set of foreground service types to apply to\n  /// the service start. It might be `null` or omitted, but it must never\n  /// be empty!\n  /// If `foregroundServiceType` is set, [`Service.startForeground(int id, Notification notification, int foregroundServiceType)`](https://developer.android.com/reference/android/app/Service#startForeground(int,%20android.app.Notification,%20int))\n  /// will be invoked , else  [`Service.startForeground(int id, Notification notification)`](https://developer.android.com/reference/android/app/Service#startForeground(int,%20android.app.Notification)) is used.\n  /// On devices older than [`Build.VERSION_CODES.Q`](https://developer.android.com/reference/android/os/Build.VERSION_CODES#Q), `foregroundServiceType` will be ignored.\n  /// Note that `foregroundServiceType` (the parameter in this method)\n  /// must be a subset of the `android:foregroundServiceType`\n  /// defined in your `AndroidManifest.xml` (the one from the section above)!\n  Future<void> startForegroundService(int id, String? title, String? body,\n      {AndroidNotificationDetails? notificationDetails,\n      String? payload,\n      AndroidServiceStartType startType = AndroidServiceStartType.startSticky,\n      Set<AndroidServiceForegroundType>? foregroundServiceTypes}) {\n    validateId(id);\n    if (id == 0) {\n      throw ArgumentError.value(id, 'id',\n          'The id of a notification used for an Android foreground service must not be 0!'); // ignore: lines_longer_than_80_chars\n    }\n    if (foregroundServiceTypes?.isEmpty ?? false) {\n      throw ArgumentError.value(foregroundServiceTypes, 'foregroundServiceType',\n          'foregroundServiceType may be null but it must never be empty!');\n    }\n    return _channel.invokeMethod('startForegroundService', <String, Object?>{\n      'notificationData': <String, Object?>{\n        'id': id,\n        'title': title,\n        'body': body,\n        'payload': payload ?? '',\n        'platformSpecifics': notificationDetails?.toMap(),\n      },\n      'startType': startType.value,\n      'foregroundServiceTypes': foregroundServiceTypes\n          ?.map((AndroidServiceForegroundType type) => type.value)\n          .toList()\n    });\n  }\n\n  /// Stops a foreground service.\n  ///\n  /// If the foreground service was not started, this function\n  /// does nothing.\n  ///\n  /// It is sufficient to call this method once to stop the\n  /// foreground service, even if [startForegroundService] was called\n  /// multiple times.\n  Future<void> stopForegroundService() =>\n      _channel.invokeMethod('stopForegroundService');\n\n  @override\n  Future<void> show(\n    int id,\n    String? title,\n    String? body, {\n    AndroidNotificationDetails? notificationDetails,\n    String? payload,\n  }) {\n    validateId(id);\n    return _channel.invokeMethod(\n      'show',\n      <String, Object?>{\n        'id': id,\n        'title': title,\n        'body': body,\n        'payload': payload ?? '',\n        'platformSpecifics': notificationDetails?.toMap(),\n      },\n    );\n  }\n\n  @override\n  Future<void> periodicallyShow(\n    int id,\n    String? title,\n    String? body,\n    RepeatInterval repeatInterval, {\n    AndroidNotificationDetails? notificationDetails,\n    String? payload,\n    bool androidAllowWhileIdle = false,\n  }) async {\n    validateId(id);\n    final Map<String, Object?> serializedPlatformSpecifics =\n        notificationDetails?.toMap() ?? <String, Object>{};\n    serializedPlatformSpecifics['allowWhileIdle'] = androidAllowWhileIdle;\n    await _channel.invokeMethod('periodicallyShow', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': repeatInterval.index,\n      'platformSpecifics': serializedPlatformSpecifics,\n      'payload': payload ?? '',\n    });\n  }\n\n  /// Cancel/remove the notification with the specified id.\n  ///\n  /// This applies to notifications that have been scheduled and those that\n  /// have already been presented.\n  ///\n  /// The `tag` parameter specifies the Android tag. If it is provided,\n  /// then the notification that matches both the id and the tag will\n  /// be canceled. `tag` has no effect on other platforms.\n  @override\n  Future<void> cancel(int id, {String? tag}) async {\n    validateId(id);\n\n    return _channel.invokeMethod('cancel', <String, Object?>{\n      'id': id,\n      'tag': tag,\n    });\n  }\n\n  /// Creates a notification channel group.\n  ///\n  /// This method is only applicable to Android versions 8.0 or newer.\n  Future<void> createNotificationChannelGroup(\n          AndroidNotificationChannelGroup notificationChannelGroup) =>\n      _channel.invokeMethod(\n          'createNotificationChannelGroup', notificationChannelGroup.toMap());\n\n  /// Deletes the notification channel group with the specified [groupId]\n  /// as well as all of the channels belonging to the group.\n  ///\n  /// This method is only applicable to Android versions 8.0 or newer.\n  Future<void> deleteNotificationChannelGroup(String groupId) =>\n      _channel.invokeMethod('deleteNotificationChannelGroup', groupId);\n\n  /// Creates a notification channel.\n  ///\n  /// This method is only applicable to Android versions 8.0 or newer.\n  Future<void> createNotificationChannel(\n          AndroidNotificationChannel notificationChannel) =>\n      _channel.invokeMethod(\n          'createNotificationChannel', notificationChannel.toMap());\n\n  /// Deletes the notification channel with the specified [channelId].\n  ///\n  /// This method is only applicable to Android versions 8.0 or newer.\n  Future<void> deleteNotificationChannel(String channelId) =>\n      _channel.invokeMethod('deleteNotificationChannel', channelId);\n\n  /// Returns the list of active notifications shown by the application that\n  /// haven't been dismissed/removed.\n  ///\n  /// This method is only applicable to Android 6.0 or newer and will throw an\n  /// [PlatformException] when called on a device with an incompatible Android\n  /// version.\n  Future<List<ActiveNotification>?> getActiveNotifications() async {\n    final List<Map<dynamic, dynamic>>? activeNotifications =\n        await _channel.invokeListMethod('getActiveNotifications');\n    return activeNotifications\n        // ignore: always_specify_types\n        ?.map((a) => ActiveNotification(\n              a['id'],\n              a['channelId'],\n              a['title'],\n              a['body'],\n              tag: a['tag'],\n            ))\n        .toList();\n  }\n\n  /// Returns the messaging style information of an active notification shown\n  /// by the application that hasn't been dismissed/removed.\n  ///\n  /// This method is only applicable to Android 6.0 or newer and will throw an\n  /// [PlatformException] when called on a device with an incompatible Android\n  /// version.\n  ///\n  /// Only [DrawableResourceAndroidIcon] and [ContentUriAndroidIcon] are\n  /// supported for [AndroidIcon] fields.\n  Future<MessagingStyleInformation?> getActiveNotificationMessagingStyle(\n    int id, {\n    String? tag,\n  }) async {\n    final Map<dynamic, dynamic>? m = await _channel\n        .invokeMethod('getActiveNotificationMessagingStyle', <String, Object?>{\n      'id': id,\n      'tag': tag,\n    });\n    if (m == null) {\n      return null;\n    }\n\n    return MessagingStyleInformation(\n      _personFromMap(m['person'])!,\n      conversationTitle: m['conversationTitle'],\n      groupConversation: m['groupConversation'],\n      messages:\n          // ignore: always_specify_types\n          m['messages']?.map<Message>((m) => _messageFromMap(m))?.toList(),\n    );\n  }\n\n  Person? _personFromMap(Map<dynamic, dynamic>? m) {\n    if (m == null) {\n      return null;\n    }\n    return Person(\n      bot: m['bot'],\n      icon: _iconFromMap(m['icon']),\n      important: m['important'],\n      key: m['key'],\n      name: m['name'],\n      uri: m['uri'],\n    );\n  }\n\n  Message _messageFromMap(Map<dynamic, dynamic> m) => Message(\n        m['text'],\n        DateTime.fromMillisecondsSinceEpoch(m['timestamp']),\n        _personFromMap(m['person']),\n      );\n\n  AndroidIcon<Object>? _iconFromMap(Map<dynamic, dynamic>? m) {\n    if (m == null) {\n      return null;\n    }\n    switch (AndroidIconSource.values[m['source']]) {\n      case AndroidIconSource.drawableResource:\n        return DrawableResourceAndroidIcon(m['data']);\n      case AndroidIconSource.contentUri:\n        return ContentUriAndroidIcon(m['data']);\n      default:\n        return null;\n    }\n  }\n\n  /// Returns the list of all notification channels.\n  ///\n  /// This method is only applicable on Android 8.0 or newer. On older versions,\n  /// it will return an empty list.\n  Future<List<AndroidNotificationChannel>?> getNotificationChannels() async {\n    final List<Map<dynamic, dynamic>>? notificationChannels =\n        await _channel.invokeListMethod('getNotificationChannels');\n\n    return notificationChannels\n        // ignore: always_specify_types\n        ?.map((a) => AndroidNotificationChannel(\n              a['id'],\n              a['name'],\n              description: a['description'],\n              groupId: a['groupId'],\n              showBadge: a['showBadge'],\n              importance: Importance(a['importance']),\n              playSound: a['playSound'],\n              sound: _getNotificationChannelSound(a),\n              enableLights: a['enableLights'],\n              enableVibration: a['enableVibration'],\n              vibrationPattern: a['vibrationPattern'],\n              ledColor: Color(a['ledColor']),\n            ))\n        .toList();\n  }\n\n  /// Returns whether notifications from the calling package are not blocked.\n  Future<bool?> areNotificationsEnabled() async =>\n      await _channel.invokeMethod<bool>('areNotificationsEnabled');\n\n  AndroidNotificationSound? _getNotificationChannelSound(\n      Map<dynamic, dynamic> channelMap) {\n    final int? soundSourceIndex = channelMap['soundSource'];\n    AndroidNotificationSound? sound;\n    if (soundSourceIndex != null) {\n      if (soundSourceIndex ==\n          AndroidNotificationSoundSource.rawResource.index) {\n        sound = RawResourceAndroidNotificationSound(channelMap['sound']);\n      } else if (soundSourceIndex == AndroidNotificationSoundSource.uri.index) {\n        sound = UriAndroidNotificationSound(channelMap['sound']);\n      }\n    }\n    return sound;\n  }\n\n  Future<void> _handleMethod(MethodCall call) async {\n    switch (call.method) {\n      case 'selectNotification':\n        _onSelectNotification?.call(call.arguments);\n        break;\n      default:\n        return await Future<void>.error('Method not defined');\n    }\n  }\n}"}, {"structure_type": "function", "name": "initialize", "docstring": "Initializes the plugin.\n\nCall this method on application before using the plugin further.\n\nInitialisation may also request notification permissions where users will\nsee a permissions prompt. This may be fine in cases where it's acceptable\nto do this when the application runs for the first time. However, if your\napplicationn needs to do this at a later point in time, set the\n[IOSInitializationSettings.requestAlertPermission],\n[IOSInitializationSettings.requestBadgePermission] and\n[IOSInitializationSettings.requestSoundPermission] values to false.\n[requestPermissions] can then be called to request permissions when\nneeded.\n\nTo handle when a notification launched an application, use\n[getNotificationAppLaunchDetails].", "module": "src", "file_path": "quran-flutter/f/flutter_local_notifications/lib/src/platform_flutter_local_notifications.dart", "file_name": "platform_flutter_local_notifications.dart", "line": 560, "line_from": 560, "line_to": 897, "snippet": "  Future<bool?> initialize(\n    IOSInitializationSettings initializationSettings, {\n    SelectNotificationCallback? onSelectNotification,\n  }) async {\n    _onSelectNotification = onSelectNotification;\n    _onDidReceiveLocalNotification =\n        initializationSettings.onDidReceiveLocalNotification;\n    _channel.setMethodCallHandler(_handleMethod);\n    return await _channel.invokeMethod(\n        'initialize', initializationSettings.toMap());\n  }\n\n  /// Requests the specified permission(s) from user and returns current\n  /// permission status.\n  Future<bool?> requestPermissions({\n    bool sound = false,\n    bool alert = false,\n    bool badge = false,\n  }) =>\n      _channel.invokeMethod<bool?>('requestPermissions', <String, bool>{\n        'sound': sound,\n        'alert': alert,\n        'badge': badge,\n      });\n\n  /// Schedules a notification to be shown at the specified date and time with\n  /// an optional payload that is passed through when a notification is tapped.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> schedule(\n    int id,\n    String? title,\n    String? body,\n    DateTime scheduledDate,\n    IOSNotificationDetails? notificationDetails, {\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('schedule', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'millisecondsSinceEpoch': scheduledDate.millisecondsSinceEpoch,\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  /// Schedules a notification to be shown at the specified time in the\n  /// future in a specific time zone.\n  ///\n  /// Due to the limited support for time zones provided the UILocalNotification\n  /// APIs used on devices using iOS versions older than 10, the\n  /// [uiLocalNotificationDateInterpretation] is needed to control how\n  /// [scheduledDate] is interpreted. See official docs at\n  /// https://developer.apple.com/documentation/uikit/uilocalnotification/1616659-timezone\n  /// for more details. Note that due to this limited support, it's likely that\n  /// on older iOS devices, there will still be issues with daylight saving time\n  /// except for when the time zone used in the [scheduledDate] matches the\n  /// device's time zone and [uiLocalNotificationDateInterpretation] is set to\n  /// [UILocalNotificationDateInterpretation.wallClockTime].\n  Future<void> zonedSchedule(\n    int id,\n    String? title,\n    String? body,\n    TZDateTime scheduledDate,\n    IOSNotificationDetails? notificationDetails, {\n    required UILocalNotificationDateInterpretation\n        uiLocalNotificationDateInterpretation,\n    String? payload,\n    DateTimeComponents? matchDateTimeComponents,\n  }) async {\n    validateId(id);\n    validateDateIsInTheFuture(scheduledDate, matchDateTimeComponents);\n    ArgumentError.checkNotNull(uiLocalNotificationDateInterpretation,\n        'uiLocalNotificationDateInterpretation');\n    final Map<String, Object?> serializedPlatformSpecifics =\n        notificationDetails?.toMap() ?? <String, Object>{};\n    await _channel.invokeMethod(\n        'zonedSchedule',\n        <String, Object?>{\n          'id': id,\n          'title': title,\n          'body': body,\n          'platformSpecifics': serializedPlatformSpecifics,\n          'payload': payload ?? '',\n          'uiLocalNotificationDateInterpretation':\n              uiLocalNotificationDateInterpretation.index,\n        }\n          ..addAll(scheduledDate.toMap())\n          ..addAll(matchDateTimeComponents == null\n              ? <String, Object>{}\n              : <String, Object>{\n                  'matchDateTimeComponents': matchDateTimeComponents.index\n                }));\n  }\n\n  /// Shows a notification on a daily interval at the specified time.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> showDailyAtTime(\n    int id,\n    String? title,\n    String? body,\n    Time notificationTime,\n    IOSNotificationDetails? notificationDetails, {\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('showDailyAtTime', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': RepeatInterval.daily.index,\n      'repeatTime': notificationTime.toMap(),\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  /// Shows a notification on weekly interval at the specified day and time.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> showWeeklyAtDayAndTime(\n    int id,\n    String? title,\n    String? body,\n    Day day,\n    Time notificationTime,\n    IOSNotificationDetails? notificationDetails, {\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('showWeeklyAtDayAndTime', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': RepeatInterval.weekly.index,\n      'repeatTime': notificationTime.toMap(),\n      'day': day.value,\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  @override\n  Future<void> show(\n    int id,\n    String? title,\n    String? body, {\n    IOSNotificationDetails? notificationDetails,\n    String? payload,\n  }) {\n    validateId(id);\n    return _channel.invokeMethod(\n      'show',\n      <String, Object?>{\n        'id': id,\n        'title': title,\n        'body': body,\n        'payload': payload ?? '',\n        'platformSpecifics': notificationDetails?.toMap(),\n      },\n    );\n  }\n\n  @override\n  Future<void> periodicallyShow(\n    int id,\n    String? title,\n    String? body,\n    RepeatInterval repeatInterval, {\n    IOSNotificationDetails? notificationDetails,\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('periodicallyShow', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': repeatInterval.index,\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  Future<void> _handleMethod(MethodCall call) async {\n    switch (call.method) {\n      case 'selectNotification':\n        _onSelectNotification?.call(call.arguments);\n        break;\n      case 'didReceiveLocalNotification':\n        _onDidReceiveLocalNotification!(\n            call.arguments['id'],\n            call.arguments['title'],\n            call.arguments['body'],\n            call.arguments['payload']);\n        break;\n      default:\n        return await Future<void>.error('Method not defined');\n    }\n  }\n}\n\n/// macOS implementation of the local notifications plugin.\nclass MacOSFlutterLocalNotificationsPlugin\n    extends MethodChannelFlutterLocalNotificationsPlugin {\n  SelectNotificationCallback? _onSelectNotification;\n\n  /// Initializes the plugin.\n  ///\n  /// Call this method on application before using the plugin further.\n  /// This should only be done once. When a notification created by this plugin\n  /// was used to launch the app, calling `initialize` is what will trigger to\n  /// the `onSelectNotification` callback to be fire.\n  ///\n  /// Initialisation may also request notification permissions where users will\n  /// see a permissions prompt. This may be fine in cases where it's acceptable\n  /// to do this when the application runs for the first time. However, if your\n  /// applicationn needs to do this at a later point in time, set the\n  /// [MacOSInitializationSettings.requestAlertPermission],\n  /// [MacOSInitializationSettings.requestBadgePermission] and\n  /// [MacOSInitializationSettings.requestSoundPermission] values to false.\n  /// [requestPermissions] can then be called to request permissions when\n  /// needed.\n  ///\n  /// To handle when a notification launched an application, use\n  /// [getNotificationAppLaunchDetails].\n  Future<bool?> initialize(\n    MacOSInitializationSettings initializationSettings, {\n    SelectNotificationCallback? onSelectNotification,\n  }) async {\n    _onSelectNotification = onSelectNotification;\n    _channel.setMethodCallHandler(_handleMethod);\n    return await _channel.invokeMethod(\n        'initialize', initializationSettings.toMap());\n  }\n\n  /// Requests the specified permission(s) from user and returns current\n  /// permission status.\n  Future<bool?> requestPermissions({\n    bool? sound,\n    bool? alert,\n    bool? badge,\n  }) =>\n      _channel.invokeMethod<bool>('requestPermissions', <String, bool?>{\n        'sound': sound,\n        'alert': alert,\n        'badge': badge,\n      });\n\n  /// Schedules a notification to be shown at the specified date and time\n  /// relative to a specific time zone.\n  Future<void> zonedSchedule(\n    int id,\n    String? title,\n    String? body,\n    TZDateTime scheduledDate,\n    MacOSNotificationDetails? notificationDetails, {\n    String? payload,\n    DateTimeComponents? matchDateTimeComponents,\n  }) async {\n    validateId(id);\n    validateDateIsInTheFuture(scheduledDate, matchDateTimeComponents);\n    final Map<String, Object?> serializedPlatformSpecifics =\n        notificationDetails?.toMap() ?? <String, Object>{};\n    await _channel.invokeMethod(\n        'zonedSchedule',\n        <String, Object?>{\n          'id': id,\n          'title': title,\n          'body': body,\n          'platformSpecifics': serializedPlatformSpecifics,\n          'payload': payload ?? '',\n        }\n          ..addAll(scheduledDate.toMap())\n          ..addAll(matchDateTimeComponents == null\n              ? <String, Object>{}\n              : <String, Object>{\n                  'matchDateTimeComponents': matchDateTimeComponents.index\n                }));\n  }\n\n  @override\n  Future<void> show(\n    int id,\n    String? title,\n    String? body, {\n    MacOSNotificationDetails? notificationDetails,\n    String? payload,\n  }) {\n    validateId(id);\n    return _channel.invokeMethod(\n      'show',\n      <String, Object?>{\n        'id': id,\n        'title': title,\n        'body': body,\n        'payload': payload ?? '',\n        'platformSpecifics': notificationDetails?.toMap(),\n      },\n    );\n  }\n\n  @override\n  Future<void> periodicallyShow(\n    int id,\n    String? title,\n    String? body,\n    RepeatInterval repeatInterval, {\n    MacOSNotificationDetails? notificationDetails,\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('periodicallyShow', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': repeatInterval.index,\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  Future<void> _handleMethod(MethodCall call) async {\n    switch (call.method) {\n      case 'selectNotification':\n        _onSelectNotification?.call(call.arguments);\n        break;\n      default:\n        return await Future<void>.error('Method not defined');\n    }\n  }\n}"}, {"structure_type": "class", "name": "of '", "docstring": "", "module": "src", "file_path": "quran-flutter/f/flutter_local_notifications/lib/src/flutter_local_notifications_plugin.dart", "file_name": "flutter_local_notifications_plugin.dart", "line": 61, "line_from": 61, "line_to": 66, "snippet": "          'The type argument must be a concrete subclass of '\n          'FlutterLocalNotificationsPlatform');\n    }\n    if (kIsWeb) {\n      return null;\n    }"}, {"structure_type": "class", "name": "source type", "docstring": "", "module": "android", "file_path": "quran-flutter/f/flutter_local_notifications/lib/src/platform_specifics/android/icon.dart", "file_name": "icon.dart", "line": 11, "line_from": 11, "line_to": 31, "snippet": "  /// The subclass source type\n  AndroidIconSource get source;\n}\n\n/// Represents a drawable resource belonging to the Android application that\n/// should be used as an icon on Android.\nclass DrawableResourceAndroidIcon implements AndroidIcon<String> {\n  /// Constructs an instance of [DrawableResourceAndroidIcon].\n  const DrawableResourceAndroidIcon(this._icon);\n\n  final String _icon;\n\n  /// The name of the drawable resource.\n  ///\n  /// For example if the drawable resource is located at `res/drawable/app_icon.png`, the icon should be `app_icon`\n  @override\n  String get data => _icon;\n\n  @override\n  AndroidIconSource get source => AndroidIconSource.drawableResource;\n}"}, {"structure_type": "class", "name": "source type", "docstring": "", "module": "android", "file_path": "quran-flutter/f/flutter_local_notifications/lib/src/platform_specifics/android/bitmap.dart", "file_name": "bitmap.dart", "line": 11, "line_from": 11, "line_to": 31, "snippet": "  /// The subclass source type\n  AndroidBitmapSource get source;\n}\n\n/// Represents a drawable resource belonging to the Android application that\n/// should be used as a bitmap on Android.\nclass DrawableResourceAndroidBitmap implements AndroidBitmap<String> {\n  /// Constructs an instance of [DrawableResourceAndroidBitmap].\n  const DrawableResourceAndroidBitmap(this._bitmap);\n\n  final String _bitmap;\n\n  /// The name of the drawable resource.\n  ///\n  /// For example if the drawable resource is located at `res/drawable/app_icon.png`, the bitmap should be `app_icon`\n  @override\n  String get data => _bitmap;\n\n  @override\n  AndroidBitmapSource get source => AndroidBitmapSource.drawable;\n}"}, {"structure_type": "class", "name": "for defining an Android notification style", "docstring": "", "module": "styles", "file_path": "quran-flutter/f/flutter_local_notifications/lib/src/platform_specifics/android/styles/style_information.dart", "file_name": "style_information.dart", "line": 1, "line_from": 1, "line_to": 4, "snippet": "/// Abstract class for defining an Android notification style\nabstract class StyleInformation {}\n"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "test", "file_path": "quran-flutter/f/flutter_local_notifications_linux/test/notifications_manager_test.dart", "file_name": "notifications_manager_test.dart", "line": 1038, "line_from": 1038, "line_to": 1073, "snippet": "        final Future<void> Function(DBusSignal) callback =\n            invocation.positionalArguments.single;\n        for (final LinuxNotificationInfo notify in notifications) {\n          callback(\n            DBusSignal(\n              sender: '',\n              path: DBusObjectPath('/org/freedesktop/Notifications'),\n              interface: 'org.freedesktop.Notifications',\n              name: 'NotificationClosed',\n              values: <DBusValue>[\n                DBusUint32(notify.systemId),\n                const DBusUint32(1),\n              ],\n            ),\n          ).then((_) {\n            for (final Completer<void> completer in completers) {\n              if (!completer.isCompleted) {\n                completer.complete();\n              }\n            }\n          });\n        }\n        return FakeStreamSubscription<DBusSignal>();\n      });\n\n      await manager.initialize(initSettings);\n      await Future.forEach(\n        completers,\n        (Completer<void> completer) => completer.future,\n      );\n\n      for (final LinuxNotificationInfo notify in notifications) {\n        verify(\n          () => mockStorage.removeBySystemId(notify.systemId),\n        ).called(1);\n      }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "test", "file_path": "quran-flutter/f/flutter_local_notifications_linux/test/notifications_manager_test.dart", "file_name": "notifications_manager_test.dart", "line": 1105, "line_from": 1105, "line_to": 1146, "snippet": "        final Future<void> Function(DBusSignal) callback =\n            invocation.positionalArguments.single;\n        for (final LinuxNotificationInfo notify in notifications) {\n          callback(\n            DBusSignal(\n              sender: '',\n              path: DBusObjectPath('/org/freedesktop/Notifications'),\n              interface: 'org.freedesktop.Notifications',\n              name: 'ActionInvoked',\n              values: <DBusValue>[\n                DBusUint32(notify.systemId),\n                const DBusString('default'),\n              ],\n            ),\n          ).then((_) {\n            for (final Completer<void> completer in completers) {\n              if (!completer.isCompleted) {\n                completer.complete();\n              }\n            }\n          });\n        }\n        return FakeStreamSubscription<DBusSignal>();\n      });\n\n      await manager.initialize(\n        initSettings,\n        onSelectNotification: mockSelectNotificationCallback,\n      );\n      await Future.forEach(\n        completers,\n        (Completer<void> completer) => completer.future,\n      );\n\n      for (final LinuxNotificationInfo notify in notifications) {\n        verify(\n          () => mockStorage.getBySystemId(notify.systemId),\n        ).called(1);\n        verify(\n          () => mockSelectNotificationCallback.call(notify.payload),\n        ).called(1);\n      }"}, {"structure_type": "class", "name": "MockDBusWrapper extends Mock implements DBusWrapper", "docstring": "", "module": "mock", "file_path": "quran-flutter/f/flutter_local_notifications_linux/test/mock/mock_dbus_wrapper.dart", "file_name": "mock_dbus_wrapper.dart", "line": 5, "line_from": 5, "line_to": 12, "snippet": "class MockDBusWrapper extends Mock implements DBusWrapper {}\n\nclass MockDBusRemoteObject extends Mock implements DBusRemoteObject {}\n\nclass MockDBusRemoteObjectSignalStream extends Mock\n    implements DBusRemoteObjectSignalStream {}\n"}, {"structure_type": "class", "name": "_SelectNotificationCallback", "docstring": "", "module": "mock", "file_path": "quran-flutter/f/flutter_local_notifications_linux/test/mock/mock_select_notification_callback.dart", "file_name": "mock_select_notification_callback.dart", "line": 4, "line_from": 4, "line_to": 11, "snippet": "abstract class _SelectNotificationCallback {\n  Future<dynamic> call(String? payload);\n}\n\nclass MockSelectNotificationCallback extends Mock\n    implements _SelectNotificationCallback {}\n"}, {"structure_type": "class", "name": "MockFileSystem extends Mock implements FileSystem", "docstring": "", "module": "mock", "file_path": "quran-flutter/f/flutter_local_notifications_linux/test/mock/mock_file_system.dart", "file_name": "mock_file_system.dart", "line": 4, "line_from": 4, "line_to": 6, "snippet": "class MockFileSystem extends Mock implements FileSystem {}\n"}, {"structure_type": "class", "name": "MockNotificationStorage extends Mock implements NotificationStorage", "docstring": "", "module": "mock", "file_path": "quran-flutter/f/flutter_local_notifications_linux/test/mock/mock_storage.dart", "file_name": "mock_storage.dart", "line": 4, "line_from": 4, "line_to": 6, "snippet": "class MockNotificationStorage extends Mock implements NotificationStorage {}\n"}, {"structure_type": "class", "name": "MockFile extends Mock implements File", "docstring": "", "module": "mock", "file_path": "quran-flutter/f/flutter_local_notifications_linux/test/mock/mock_file.dart", "file_name": "mock_file.dart", "line": 5, "line_from": 5, "line_to": 7, "snippet": "class MockFile extends Mock implements File {}\n"}, {"structure_type": "class", "name": "MockLinuxPlatformInfo extends Mock implements LinuxPlatformInfo", "docstring": "", "module": "mock", "file_path": "quran-flutter/f/flutter_local_notifications_linux/test/mock/mock_platform_info.dart", "file_name": "mock_platform_info.dart", "line": 4, "line_from": 4, "line_to": 6, "snippet": "class MockLinuxPlatformInfo extends Mock implements LinuxPlatformInfo {}\n"}, {"structure_type": "class", "name": "FakeStreamSubscription<T> extends Fake implements StreamSubscription<T>", "docstring": "", "module": "mock", "file_path": "quran-flutter/f/flutter_local_notifications_linux/test/mock/fake_stream_subscription.dart", "file_name": "fake_stream_subscription.dart", "line": 5, "line_from": 5, "line_to": 7, "snippet": "class FakeStreamSubscription<T> extends Fake implements StreamSubscription<T> {}\n"}, {"structure_type": "function", "name": "getAll", "docstring": "Returns all platform-specific info", "module": "src", "file_path": "quran-flutter/f/flutter_local_notifications_linux/lib/src/platform_info.dart", "file_name": "platform_info.dart", "line": 14, "line_from": 14, "line_to": 80, "snippet": "  Future<LinuxPlatformInfoData> getAll() async {\n    try {\n      final String exePath =\n          await File('/proc/self/exe').resolveSymbolicLinks();\n      final String processName = path.basenameWithoutExtension(exePath);\n      final String appPath = path.dirname(exePath);\n      final String assetPath = path.join(appPath, 'data', 'flutter_assets');\n      final String versionPath = path.join(assetPath, 'version.json');\n      final Map<String, dynamic> json = jsonDecode(\n        await File(versionPath).readAsString(),\n      );\n      late final Directory runtimeDir;\n      if (xdg.runtimeDir == null) {\n        final int pid = _posix.getpid();\n        final int userId = _posix.getuid();\n        final int sessionId = _posix.getsid(pid);\n        final Map<String, String> env = Platform.environment;\n        final String? tmpdir = env['TMPDIR'];\n        runtimeDir = Directory(\n          path.join(\n            tmpdir == null || tmpdir.isEmpty ? '/tmp' : tmpdir,\n            processName,\n            '$userId',\n            '$sessionId',\n          ),\n        );\n      } else {\n        runtimeDir = Directory(path.join(xdg.runtimeDir!.path, processName));\n      }\n      if (!runtimeDir.existsSync()) {\n        await runtimeDir.create(recursive: true);\n      }\n\n      return LinuxPlatformInfoData(\n        appName: json['app_name'] ?? '',\n        assetsPath: assetPath,\n        runtimePath: runtimeDir.path,\n      );\n      // ignore: avoid_catches_without_on_clauses\n    } catch (e) {\n      return const LinuxPlatformInfoData();\n    }\n  }\n}\n\n/// Represents Linux platform-specific info\nclass LinuxPlatformInfoData {\n  /// Constructs an instance of [LinuxPlatformInfoData].\n  const LinuxPlatformInfoData({\n    this.appName,\n    this.assetsPath,\n    this.runtimePath,\n  });\n\n  /// Application name\n  final String? appName;\n\n  /// Path to the Flutter Assets directory\n  final String? assetsPath;\n\n  /// The base directory relative to which user-specific runtime files and\n  /// other file objects should be placed\n  /// (Corresponds to `$XDG_RUNTIME_DIR` environment variable).\n  /// Please see XDG Base Directory Specification https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n  /// If `$XDG_RUNTIME_DIR` is not set, the following directory structure is used: `/[$TMPDIR|tmp]/APP_NAME/USER_ID/SESSION_ID`\n  final String? runtimePath;\n}"}, {"structure_type": "function", "name": "getAll", "docstring": "Get all notifications.", "module": "src", "file_path": "quran-flutter/f/flutter_local_notifications_linux/lib/src/storage.dart", "file_name": "storage.dart", "line": 30, "line_from": 30, "line_to": 178, "snippet": "  Future<List<LinuxNotificationInfo>> getAll() async {\n    final _Cache cache = await _readInfoMap();\n    return cache.toImmutableMap().values.toList();\n  }\n\n  /// Get notification by [LinuxNotificationInfo.id].\n  Future<LinuxNotificationInfo?> getBySystemId(int systemId) async {\n    final _Cache cache = await _readInfoMap();\n    return cache.getBySystemId(systemId);\n  }\n\n  /// Get notification by [LinuxNotificationInfo.systemId].\n  Future<LinuxNotificationInfo?> getById(int id) async {\n    final _Cache cache = await _readInfoMap();\n    return cache.getById(id);\n  }\n\n  /// Insert notification to the storage.\n  /// Returns `true` if the operation succeeded.\n  Future<bool> insert(LinuxNotificationInfo notification) async {\n    final _Cache cache = await _readInfoMap();\n    cache.insert(notification);\n    return _writeInfoList(cache.values.toList());\n  }\n\n  /// Remove notification from the storage by [LinuxNotificationInfo.id].\n  /// Returns `true` if the operation succeeded.\n  Future<bool> removeById(int id) async {\n    final _Cache cache = await _readInfoMap();\n    cache.removeById(id);\n    return _writeInfoList(cache.values.toList());\n  }\n\n  /// Remove notification from the storage by [LinuxNotificationInfo.systemId].\n  /// Returns `true` if the operation succeeded.\n  Future<bool> removeBySystemId(int systemId) async {\n    final _Cache cache = await _readInfoMap();\n    final LinuxNotificationInfo? info = cache.getBySystemId(systemId);\n    if (info != null) {\n      cache.removeById(info.id);\n    }\n    return _writeInfoList(cache.values.toList());\n  }\n\n  /// Remove notification from the storage by [idList].\n  /// Returns `true` if the operation succeeded.\n  Future<bool> removeByIdList(List<int> idList) async {\n    final _Cache cache = await _readInfoMap();\n    // ignore: prefer_foreach\n    for (final int id in idList) {\n      cache.removeById(id);\n    }\n    return _writeInfoList(cache.values.toList());\n  }\n\n  /// Force read info from the disk to the cache.\n  Future<void> forceReloadCache() async {\n    _cachedInfo = await _readFromCache();\n  }\n\n  Future<File?> _getStorageFile() async {\n    final LinuxPlatformInfoData data = await _platformInfo.getAll();\n    final String? dir = data.runtimePath;\n    if (dir == null) {\n      return null;\n    }\n    return _fs.open(path.join(dir, _kFileName));\n  }\n\n  /// Gets a [LinuxNotificationInfo] from the stored file.\n  /// Once read, the data are maintained in memory.\n  Future<_Cache> _readInfoMap() async {\n    if (_cachedInfo != null) {\n      return _cachedInfo!;\n    }\n    return _cachedInfo = await _readFromCache();\n  }\n\n  Future<_Cache> _readFromCache() async {\n    final _Cache cache = _Cache();\n    final File? storageFile = await _getStorageFile();\n    if (storageFile != null && storageFile.existsSync()) {\n      final String jsonStr = storageFile.readAsStringSync();\n      if (jsonStr.isNotEmpty) {\n        final dynamic json = jsonDecode(jsonStr);\n        if (json is List) {\n          for (final dynamic j in json) {\n            final LinuxNotificationInfo info =\n                LinuxNotificationInfo.fromJson(j);\n            cache.insert(info);\n          }\n        } else {\n          cache.insert(LinuxNotificationInfo.fromJson(json));\n        }\n      }\n    }\n    return cache;\n  }\n\n  /// Writes info list to disk. Returns [true] if the operation succeeded.\n  Future<bool> _writeInfoList(List<LinuxNotificationInfo> infoList) async {\n    try {\n      final File? storageFile = await _getStorageFile();\n      if (storageFile == null) {\n        return false;\n      }\n      if (!storageFile.existsSync()) {\n        storageFile.createSync(recursive: true);\n      }\n      final String jsonStr = jsonEncode(infoList);\n      storageFile.writeAsStringSync(jsonStr);\n    } on IOException catch (e) {\n      // ignore: avoid_print\n      print('Error saving preferences to disk: $e');\n      return false;\n    }\n    return true;\n  }\n}\n\nclass _Cache {\n  _Cache()\n      : _infoMap = <int, LinuxNotificationInfo>{},\n        _systemIdMap = <int, int>{};\n\n  final Map<int, LinuxNotificationInfo> _infoMap;\n\n  /// System ID to ID map.\n  final Map<int, int> _systemIdMap;\n\n  LinuxNotificationInfo? getById(int? id) => _infoMap[id];\n\n  LinuxNotificationInfo? getBySystemId(int? id) => _infoMap[_systemIdMap[id]];\n\n  void insert(LinuxNotificationInfo info) {\n    _infoMap[info.id] = info;\n    _systemIdMap[info.systemId] = info.id;\n  }\n\n  void removeById(int id) {\n    final LinuxNotificationInfo? info = _infoMap.remove(id);\n    _systemIdMap.remove(info?.systemId);\n  }\n\n  Iterable<LinuxNotificationInfo> get values => _infoMap.values;\n\n  Map<int, LinuxNotificationInfo> toImmutableMap() =>\n      UnmodifiableMapView<int, LinuxNotificationInfo>(_infoMap);\n}"}, {"structure_type": "class", "name": "dependencies.", "docstring": "Constructs an instance of of [LinuxNotificationManager]", "module": "src", "file_path": "quran-flutter/f/flutter_local_notifications_linux/lib/src/notifications_manager.dart", "file_name": "notifications_manager.dart", "line": 32, "line_from": 32, "line_to": 339, "snippet": "  /// with the given class dependencies.\n  @visibleForTesting\n  LinuxNotificationManager.private({\n    DBusWrapper? dbus,\n    LinuxPlatformInfo? platformInfo,\n    NotificationStorage? storage,\n  })  : _dbus = dbus ?? DBusWrapper(),\n        _platformInfo = platformInfo ?? LinuxPlatformInfo(),\n        _storage = storage ?? NotificationStorage();\n\n  final DBusWrapper _dbus;\n  final LinuxPlatformInfo _platformInfo;\n  final NotificationStorage _storage;\n\n  late final LinuxInitializationSettings _initializationSettings;\n  late final SelectNotificationCallback? _onSelectNotification;\n  late final LinuxPlatformInfoData _platformData;\n\n  bool _initialized = false;\n\n  /// Initializes the manager.\n  /// Call this method on application before using the manager further.\n  Future<bool> initialize(\n    LinuxInitializationSettings initializationSettings, {\n    SelectNotificationCallback? onSelectNotification,\n  }) async {\n    if (_initialized) {\n      return _initialized;\n    }\n    _initialized = true;\n    _initializationSettings = initializationSettings;\n    _onSelectNotification = onSelectNotification;\n    _dbus.build(\n      destination: _DBusInterfaceSpec.destination,\n      path: _DBusInterfaceSpec.path,\n    );\n    _platformData = await _platformInfo.getAll();\n\n    await _storage.forceReloadCache();\n    _subscribeSignals();\n    return _initialized;\n  }\n\n  /// Show notification\n  Future<void> show(\n    int id,\n    String? title,\n    String? body, {\n    LinuxNotificationDetails? details,\n    String? payload,\n  }) async {\n    final LinuxNotificationInfo? prevNotify = await _storage.getById(id);\n    final LinuxNotificationIcon? defaultIcon =\n        _initializationSettings.defaultIcon;\n\n    final DBusMethodSuccessResponse result = await _dbus.callMethod(\n      _DBusInterfaceSpec.destination,\n      _DBusMethodsSpec.notify,\n      <DBusValue>[\n        // app_name\n        DBusString(_platformData.appName ?? ''),\n        // replaces_id\n        DBusUint32(prevNotify?.systemId ?? 0),\n        // app_icon\n        DBusString(_getAppIcon(details?.icon ?? defaultIcon) ?? ''),\n        // summary\n        DBusString(title ?? ''),\n        // body\n        DBusString(body ?? ''),\n        // actions\n        DBusArray.string(_buildActions(details, _initializationSettings)),\n        // hints\n        DBusDict.stringVariant(_buildHints(details, _initializationSettings)),\n        // expire_timeout\n        DBusInt32(\n          details?.timeout.value ??\n              const LinuxNotificationTimeout.systemDefault().value,\n        ),\n      ],\n      replySignature: DBusSignature('u'),\n    );\n\n    final int systemId = (result.returnValues[0] as DBusUint32).value;\n    final LinuxNotificationInfo notify = prevNotify?.copyWith(\n          systemId: systemId,\n          payload: payload,\n        ) ??\n        LinuxNotificationInfo(\n          id: id,\n          systemId: systemId,\n          payload: payload,\n        );\n    await _storage.insert(notify);\n  }\n\n  Map<String, DBusValue> _buildHints(\n    LinuxNotificationDetails? details,\n    LinuxInitializationSettings initSettings,\n  ) {\n    final Map<String, DBusValue> hints = <String, DBusValue>{};\n    final LinuxNotificationIcon? icon =\n        details?.icon ?? initSettings.defaultIcon;\n    if (icon?.type == LinuxIconType.byteData) {\n      final LinuxRawIconData data = icon!.content as LinuxRawIconData;\n      hints['image-data'] = DBusStruct(\n        <DBusValue>[\n          DBusInt32(data.width),\n          DBusInt32(data.height),\n          DBusInt32(data.rowStride),\n          DBusBoolean(data.hasAlpha),\n          DBusInt32(data.bitsPerSample),\n          DBusInt32(data.channels),\n          DBusArray.byte(data.data),\n        ],\n      );\n    }\n    final LinuxNotificationSound? sound =\n        details?.sound ?? initSettings.defaultSound;\n    if (sound != null) {\n      switch (sound.type) {\n        case LinuxSoundType.assets:\n          hints['sound-file'] = DBusString(\n            path.join(\n              _platformData.assetsPath!,\n              sound.content as String,\n            ),\n          );\n          break;\n        case LinuxSoundType.theme:\n          hints['sound-name'] = DBusString(sound.content as String);\n          break;\n      }\n    }\n    if (details?.category != null) {\n      hints['category'] = DBusString(details!.category!.name);\n    }\n    if (details?.urgency != null) {\n      hints['urgency'] = DBusByte(details!.urgency!.value);\n    }\n    if (details?.resident ?? false) {\n      hints['resident'] = const DBusBoolean(true);\n    }\n    final bool? suppressSound =\n        details?.suppressSound ?? initSettings.defaultSuppressSound;\n    if (suppressSound ?? false) {\n      hints['suppress-sound'] = const DBusBoolean(true);\n    }\n    if (details?.transient ?? false) {\n      hints['transient'] = const DBusBoolean(true);\n    }\n    if (details?.location != null) {\n      final LinuxNotificationLocation location = details!.location!;\n      hints['x'] = DBusByte(location.x);\n      hints['y'] = DBusByte(location.y);\n    }\n    if (details?.customHints != null) {\n      hints.addAll(_buildCustomHints(details!.customHints!));\n    }\n\n    return hints;\n  }\n\n  Map<String, DBusValue> _buildCustomHints(\n    List<LinuxNotificationCustomHint> hints,\n  ) =>\n      Map<String, DBusValue>.fromEntries(\n        hints.map(\n          (LinuxNotificationCustomHint hint) => MapEntry<String, DBusValue>(\n            hint.name,\n            hint.value.toDBusValue(),\n          ),\n        ),\n      );\n\n  \n  List<String> _buildActions(\n    LinuxNotificationDetails? details,\n    LinuxInitializationSettings initSettings,\n  ) =>\n      // Add default action, which is triggered when the notification is clicked\n      <String>[\n        _kDefaultActionName,\n        details?.defaultActionName ?? initSettings.defaultActionName,\n      ];\n\n  /// Cancel notification with the given [id].\n  Future<void> cancel(int id) async {\n    final LinuxNotificationInfo? notify = await _storage.getById(id);\n    await _storage.removeById(id);\n    if (notify != null) {\n      await _dbusCancel(notify.systemId);\n    }\n  }\n\n  /// Cancel all notifications.\n  Future<void> cancelAll() async {\n    final List<LinuxNotificationInfo> notifyList = await _storage.getAll();\n    final List<int> idList = <int>[];\n    for (final LinuxNotificationInfo notify in notifyList) {\n      idList.add(notify.id);\n      await _dbusCancel(notify.systemId);\n    }\n    await _storage.removeByIdList(idList);\n  }\n\n  /// Returns the system notification server capabilities.\n  Future<LinuxServerCapabilities> getCapabilities() async {\n    final DBusMethodSuccessResponse result = await _dbus.callMethod(\n      _DBusInterfaceSpec.destination,\n      _DBusMethodsSpec.getCapabilities,\n      <DBusValue>[],\n      replySignature: DBusSignature('as'),\n    );\n    final Set<String> capsSet = (result.returnValues[0] as DBusArray)\n        .children\n        .map((DBusValue c) => (c as DBusString).value)\n        .toSet();\n\n    final LinuxServerCapabilities capabilities = LinuxServerCapabilities(\n      otherCapabilities: const <String>{},\n      body: capsSet.remove('body'),\n      bodyHyperlinks: capsSet.remove('body-hyperlinks'),\n      bodyImages: capsSet.remove('body-images'),\n      bodyMarkup: capsSet.remove('body-markup'),\n      iconMulti: capsSet.remove('icon-multi'),\n      iconStatic: capsSet.remove('icon-static'),\n      persistence: capsSet.remove('persistence'),\n      sound: capsSet.remove('sound'),\n    );\n    return capabilities.copyWith(otherCapabilities: capsSet);\n  }\n\n  /// Returns a [Map] with the specified notification id as the key\n  /// and the id, assigned by the system, as the value.\n  Future<Map<int, int>> getSystemIdMap() async =>\n      Map<int, int>.fromEntries(await _storage.getAll().then(\n            (List<LinuxNotificationInfo> list) => list.map(\n              (LinuxNotificationInfo notify) => MapEntry<int, int>(\n                notify.id,\n                notify.systemId,\n              ),\n            ),\n          ));\n\n  Future<void> _dbusCancel(int systemId) => _dbus.callMethod(\n        _DBusInterfaceSpec.destination,\n        _DBusMethodsSpec.closeNotification,\n        <DBusValue>[DBusUint32(systemId)],\n        replySignature: DBusSignature(''),\n      );\n\n  String? _getAppIcon(LinuxNotificationIcon? icon) {\n    if (icon == null) {\n      return null;\n    }\n    switch (icon.type) {\n      case LinuxIconType.assets:\n        if (_platformData.assetsPath == null) {\n          return null;\n        } else {\n          final String relativePath = icon.content as String;\n          return path.join(_platformData.assetsPath!, relativePath);\n        }\n      case LinuxIconType.byteData:\n        return null;\n      case LinuxIconType.theme:\n        return icon.content as String;\n    }\n  }\n\n  /// Subscribe to the signals for actions and closing notifications.\n  void _subscribeSignals() {\n    _dbus.subscribeSignal(_DBusMethodsSpec.actionInvoked).listen(\n      (DBusSignal s) async {\n        if (s.signature != DBusSignature('us')) {\n          return;\n        }\n\n        final int systemId = (s.values[0] as DBusUint32).value;\n        final String actionKey = (s.values[1] as DBusString).value;\n    \n        if (actionKey == _kDefaultActionName) {\n          final LinuxNotificationInfo? notify =\n              await _storage.getBySystemId(systemId);\n          _onSelectNotification?.call(notify?.payload);\n        }\n      },\n    );\n\n    _dbus.subscribeSignal(_DBusMethodsSpec.notificationClosed).listen(\n      (DBusSignal s) async {\n        if (s.signature != DBusSignature('uu')) {\n          return;\n        }\n\n        final int systemId = (s.values[0] as DBusUint32).value;\n        await _storage.removeBySystemId(systemId);\n      },\n    );\n  }\n}\n\nconst String _kDefaultActionName = 'default';\n\nclass _DBusInterfaceSpec {\n  static const String destination = 'org.freedesktop.Notifications';\n  static const String path = '/org/freedesktop/Notifications';\n}"}, {"structure_type": "function", "name": "onDidReceiveNotificationReksponse", "docstring": "", "module": "lib", "file_path": "quran-flutter/lib/main.dart", "file_name": "main.dart", "line": 18, "line_from": 18, "line_to": 64, "snippet": "  // void onDidReceiveNotificationReksponse(NotificationResponse? response) async {\n  //   if (response!.actionId == 'AYAH') {\\\\\n  //     HiveData().createData(Keys.notificationClick, true);\n  //     CustomWidget.controllerClickNotification(true);\n  //   }\n  //   if (response.actionId == 'TAFSIR') {\n  //     HiveData().createData(Keys.notificationClick, true);\n  //     CustomWidget.controllerClickNotification(false);\n  //   }\n  // }\n\n  Future<dynamic> onDidReceiveLocalNotification(String? payload) async {\n    if (payload == 'tafsir') {\n      HiveData().createData(Keys.notificationClick, true);\n      CustomWidget.controllerClickNotification(false);\n    } else {\n      HiveData().createData(Keys.notificationClick, true);\n      CustomWidget.clickPlan(payload);\n    }\n  }\n\n  void iOSNotification(int id, String? title, String? body, String? payload) {}\n\n  Directory document = await getApplicationDocumentsDirectory();\n  Hive.init(document.path);\n  await JustAudioBackground.init(\n    androidNotificationChannelId: 'com.ryanheise.bg_demo.channel.audio',\n    androidNotificationChannelName: 'Audio playback',\n    androidNotificationOngoing: true,\n  );\n\n  await Hive.openBox(secretVault);\n  await Firebase.initializeApp();\n  const AndroidInitializationSettings initializationSettingsAndroid =\n      AndroidInitializationSettings('notification_icon');\n  final IOSInitializationSettings initializationSettingsIOS =\n      IOSInitializationSettings(onDidReceiveLocalNotification: iOSNotification);\n\n  final InitializationSettings initializationSettings = InitializationSettings(\n    android: initializationSettingsAndroid,\n    iOS: initializationSettingsIOS,\n  );\n  FlutterLocalNotificationsPlugin()\n      .initialize(initializationSettings, onSelectNotification: onDidReceiveLocalNotification);\n\n  runApp(Initial());\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "initial", "file_path": "quran-flutter/lib/initial/language_selection.dart", "file_name": "language_selection.dart", "line": 13, "line_from": 13, "line_to": 86, "snippet": "  Widget build(BuildContext context) {\n    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(\n      statusBarColor: Theme.of(context).primaryColor, // status bar color\n      statusBarBrightness: themeController.currentTheme.value == 0\n          ? Brightness.dark\n          : Brightness.light, //status bar brigtness\n      statusBarIconBrightness: themeController.currentTheme.value == 0\n          ? Brightness.dark\n          : Brightness.light, //status barIcon Brightness\n      systemNavigationBarIconBrightness: themeController.currentTheme.value == 0\n          ? Brightness.dark\n          : Brightness.light,\n    ));\n    return Scaffold(\n        backgroundColor: Theme.of(context).cardColor,\n        resizeToAvoidBottomInset: false,\n        body: Container(\n          child: Column(\n            children: [\n              SizedBox(height: Get.width * .12),\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  Text(\n                    'Choose Language',\n                    style: TextStyle(\n                        fontSize: Get.width * .041,\n                        fontWeight: FontWeight.bold),\n                  ),\n    \n                ],\n              ).paddingSymmetric(\n                  horizontal: Get.width * .04, vertical: Get.width * .03),\n              Expanded(child: LanguageSection()),\n              LangButton(islogin: true)\n                  .paddingSymmetric(vertical: Get.width * .05)\n            ],\n          ).paddingSymmetric(horizontal: Get.width * .04),\n        ));\n  }\n}\n\nclass LangButton extends StatelessWidget {\n  LangButton({this.islogin = false});\n  final islogin;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: Get.width,\n      decoration: BoxDecoration(\n          color: Get.theme.secondaryHeaderColor,\n          borderRadius: BorderRadius.circular(20)),\n      child: TextButton(\n          style: ButtonStyle(visualDensity: VisualDensity.compact),\n          onPressed: () {\n            hive.createData(\n                Keys.languageNow, settings.languageSelectIndex.value);\n\n            Get.updateLocale(\n                settings.language[settings.languageSelectIndex.value]);\n            subjectwiseC.updateNow();\n            pinC.updatePins();\n            hive.createData(Keys.isLanguageClick, true);\n\n            Get.back();\n          },\n          child: Text(\n            'Done'.tr,\n            style: TextStyle(fontSize: Get.width * .04, color: Colors.white),\n          )),\n    ).paddingSymmetric(horizontal: Get.width * .02);\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "pickeViewCustom", "file_path": "quran-flutter/lib/pickeViewCustom/picker_view_popup.dart", "file_name": "picker_view_popup.dart", "line": 4, "line_from": 4, "line_to": 226, "snippet": "typedef PickerViewBuilder = Widget Function(\n    BuildContext context, PickerViewPopup pickerViewPopup);\n\nenum PickerShowMode { AlertDialog, BottomSheet }\n\nclass PickerViewPopup extends StatelessWidget {\n  final PickerRowCallBack numberofRowsAtSection;\n  final PickerItemBuilder itemBuilder;\n  final PickerVoidCallBack onSelectRowChanged;\n  final ValueChanged<PickerController> onConfirm;\n  final VoidCallback onCancel;\n  final PickerController controller;\n  final double itemExtent;\n  final Widget cancel;\n  final Widget confirm;\n  final PickerShowMode mode;\n  final Widget title;\n\n  PickerViewPopup._({\n    required this.numberofRowsAtSection,\n    required this.itemBuilder,\n    required this.controller,\n    this.mode = PickerShowMode.BottomSheet,\n    required this.itemExtent,\n    required this.onSelectRowChanged,\n    required this.title,\n    required this.cancel,\n    required this.onCancel,\n    required this.confirm,\n    required this.onConfirm,\n  }) : super();\n\n  static Future showMode<T>(\n    PickerShowMode mode, {\n    required BuildContext context,\n    required PickerViewBuilder builder,\n    required PickerController controller,\n    required PickerRowCallBack numberofRowsAtSection,\n    required PickerItemBuilder itemBuilder,\n    required PickerVoidCallBack onSelectRowChanged,\n    required double itemExtent,\n    required Widget title,\n    required Widget cancel,\n    required VoidCallback onCancel,\n    required Widget confirm,\n    required ValueChanged<PickerController> onConfirm,\n  }) {\n    PickerViewPopup pickerView = PickerViewPopup._(\n      numberofRowsAtSection: numberofRowsAtSection,\n      itemBuilder: itemBuilder,\n      controller: controller,\n      itemExtent: itemExtent,\n      onSelectRowChanged: onSelectRowChanged,\n      mode: mode,\n      title: title,\n      cancel: cancel,\n      onCancel: () {\n        Navigator.of(context).pop();\n        onCancel();\n      },\n      confirm: confirm,\n      onConfirm: (controller) {\n        Navigator.of(context).pop();\n        onConfirm(controller);\n      },\n    );\n\n    if (mode == PickerShowMode.AlertDialog) {\n      return showDialog(\n          context: context,\n          builder: (context) {\n            return Dialog(\n                shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(10)),\n                child: builder(context, pickerView));\n          });\n    } else {\n      return showModalBottomSheet(\n          context: context,\n          builder: (context) {\n            return builder(context, pickerView);\n          });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (mode == PickerShowMode.AlertDialog) {\n      return _buildDialogContent(context);\n    } else {\n      return _buildBottomSheetContent(context);\n    }\n  }\n\n  Widget _buildDialogContent(BuildContext context) {\n    return ClipRRect(\n      borderRadius: BorderRadius.circular(10),\n      child: Container(\n          color: Colors.white,\n          constraints: BoxConstraints.tightFor(height: 280),\n          child: Column(\n            children: <Widget>[\n              Offstage(\n            \n                child: Container(\n                  alignment: Alignment.center,\n                  padding: EdgeInsets.symmetric(horizontal: 15, vertical: 20),\n                  child: title,\n                ),\n              ),\n              Expanded(\n                child: PickerView(\n                  numberofRowsAtSection: numberofRowsAtSection,\n                  itemBuilder: itemBuilder,\n                  controller: controller,\n                  onSelectRowChanged: onSelectRowChanged,\n                  itemExtent: itemExtent,\n                ),\n              ),\n              Container(\n                height: 50,\n                decoration: BoxDecoration(\n                    border: Border(\n                        top:\n                            BorderSide(color: Theme.of(context).dividerColor))),\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: <Widget>[\n                    Expanded(\n                      child: _buildInkWellButton(\n                          child: cancel,\n                          onTap: onCancel),\n                    ),\n                    Container(\n                      color: Theme.of(context).dividerColor,\n                      width: 1,\n                      height: 50,\n                    ),\n                    Expanded(\n                      child: _buildInkWellButton(\n                          child: confirm \n                            ,\n                          onTap: () {\n                      \n                              onConfirm(controller);\n                            \n                          }),\n                    )\n                  ],\n                ),\n              )\n            ],\n          )),\n    );\n  }\n\n  Widget _buildBottomSheetContent(BuildContext context) {\n    return Container(\n      constraints: BoxConstraints.tightFor(height: 280),\n      child: Column(\n        children: <Widget>[\n          Container(\n            color: Colors.white,\n            height: 50,\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: <Widget>[\n                _buildInkWellButton(\n                    child: cancel,\n                    onTap: onCancel),\n                Expanded(\n                  child: Offstage(\n                 \n                    child: Container(\n                      alignment: Alignment.center,\n                      padding: EdgeInsets.symmetric(horizontal: 10),\n                      child: title,\n                    ),\n                  ),\n                ),\n                _buildInkWellButton(\n                    child: confirm ,\n                    onTap: () {\n                   \n                        onConfirm(controller);\n                      \n                    }),\n              ],\n            ),\n          ),\n          Expanded(\n            child: PickerView(\n              numberofRowsAtSection: numberofRowsAtSection,\n              itemBuilder: itemBuilder,\n              controller: controller,\n              onSelectRowChanged: onSelectRowChanged,\n              itemExtent: itemExtent,\n            ),\n          )\n        ],\n      ),\n    );\n  }\n\n  Widget _buildInkWellButton(\n      {required Widget child, required VoidCallback onTap}) {\n    return Material(\n        child: Ink(\n      color: Colors.white,\n      child: InkWell(\n        child: Container(\n          height: 50,\n          padding: EdgeInsets.symmetric(horizontal: 20),\n          alignment: Alignment.center,\n          child: child,\n        ),\n        onTap: onTap,\n      ),\n    ));\n  }\n}\n"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "pickeViewCustom", "file_path": "quran-flutter/lib/pickeViewCustom/picker_view.dart", "file_name": "picker_view.dart", "line": 33, "line_from": 33, "line_to": 157, "snippet": "  void initState() {\n    super.initState();\n  }\n\n  @override\n  void didUpdateWidget(PickerView oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.controller != oldWidget.controller) {\n      _controller = widget.controller;\n    }\n  }\n\n  @override\n  void didChangeDependencies() {\n    _controller = widget.controller;\n    super.didChangeDependencies();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      child:\n          Container(color: Colors.white, child: Row(children: _buildPickers())),\n    );\n  }\n\n  List<Widget> _buildPickers() {\n    List<Widget> children = [];\n\n    for (int section = 0; section < _controller.count; section++) {\n      children\n          .add(Expanded(flex: 1, child: _buildPickerItem(section: section)));\n    }\n\n    return children;\n  }\n\n  Widget _buildPickerItem({required int section}) {\n    FixedExtentScrollController scrollController =\n        _controller.scrollControllers[section];\n\n    return Container(\n      child: CupertinoPicker.builder(\n        backgroundColor: Colors.white,\n        scrollController: scrollController,\n        diameterRatio: 1,\n        itemExtent: widget.itemExtent,\n        childCount: widget.numberofRowsAtSection(section),\n        onSelectedItemChanged: (row) {\n         \n            widget.onSelectRowChanged(section, row);\n          \n        },\n        itemBuilder: (context, row) {\n          return Container(\n              alignment: Alignment.center,\n              child: widget.itemBuilder(section, row));\n        },\n      ),\n    );\n  }\n}\n\nclass PickerController {\n  final int count;\n  final List<FixedExtentScrollController> scrollControllers;\n\n  PickerController({required this.count, required List<int> selectedItems})\n      : scrollControllers = [] {\n    for (int i = 0; i < count; i++) {\n      if ( i < selectedItems.length) {\n        scrollControllers\n            .add(FixedExtentScrollController(initialItem: selectedItems[i]));\n      } else {\n        scrollControllers.add(FixedExtentScrollController());\n      }\n    }\n  }\n\n  void dispose() {\n    scrollControllers.forEach((item) {\n      item.dispose();\n    });\n  }\n\n  int? selectedRowAt({required int section}) {\n    try {\n      FixedExtentScrollController scrollController = scrollControllers[section];\n\n        return scrollController.selectedItem;\n    \n      \n    } catch (err) {\n      return null;\n    }\n  }\n\n  void jumpToRow(int row, {required int atSection}) {\n    try {\n      if (scrollControllers.length <= atSection) {\n        return;\n      }\n      FixedExtentScrollController scrollController =\n          scrollControllers[atSection];\n      scrollController.jumpToItem(row);\n    } catch (err) {}\n  }\n\n  Future<void> animateToRow(\n    int row, {\n    required int atSection,\n    Duration duration = const Duration(milliseconds: 300),\n    Curve curve = Curves.easeInOut,\n  }) async {\n    try {\n      if (scrollControllers.length <= atSection) {\n        return;\n      }\n      FixedExtentScrollController scrollController =\n          scrollControllers[atSection];\n      await scrollController.animateToItem(row,\n          duration: duration, curve: curve);\n    } catch (err) {}\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "search", "file_path": "quran-flutter/lib/pages/home/search/TafsirSearch.dart", "file_name": "TafsirSearch.dart", "line": 30, "line_from": 30, "line_to": 317, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      key: globalKey,\n      endDrawer: SafeArea(child: QuickTools(globalKey: globalKey)),\n      body: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Obx(\n          () => Wrap(\n            children: [\n              VerseTopbar(\n                  paddingTop: Get.width * .14,\n                  svgPath: 'assets/icons/topbarBG2.svg',\n                  text: settings.banNum(controller.tafsirResultBreakdown.length) + \" \" + 'Results Found'.tr,\n                  globalKey: globalKey),\n              Container(\n                height: Get.height * .9,\n                width: Get.width,\n                padding: EdgeInsets.only(top: theme == 0 && settings.cardView.value ? Get.width * .012 : 0),\n                decoration: pageDecoration(context),\n                child: ClipRRect(\n                  borderRadius: settings.appBarRadius.value\n                      ? BorderRadius.only(\n                          topLeft: Radius.circular(Get.width * .07), topRight: Radius.circular(Get.width * .07))\n                      : BorderRadius.zero,\n                  child: SingleChildScrollView(\n                    controller: scrollController,\n                    child: Column(\n                      children: [\n                        Obx(() {\n                          scrollController.addListener(() {\n                            if (scrollController.position.extentAfter < 500) {\n                              if (controller.tafsirResultBreakdown.length > controller.searchLength.value) {\n                                controller.searchLength.value += 1;\n                              } else {\n                                controller.searchLength.value = controller.tafsirResultBreakdown.length;\n                              }\n                            }\n                          });\n                          return ListView.builder(\n                              padding: EdgeInsets.only(\n                                  top: settings.cardView.value && theme == 0\n                                      ? Get.width * .023\n                                      : settings.simpleView.value\n                                          ? 0\n                                          : Get.width * .035),\n                              shrinkWrap: true,\n                              physics: NeverScrollableScrollPhysics(),\n                              itemCount: controller.searchLength.value,\n                              itemBuilder: (_, index) {\n                                var ayat = Get.find<AyatReadingController>()\n                                    .ayatList\n                                    .where((e) =>\n                                        e.suraId == controller.suraIDofTafsir[index] &&\n                                        e.ayahId == controller.ayahIDofTafsir[index])\n                                    .toList();\n                                return Builder(\n                                  builder: (context) {\n                                    GlobalKey previewContainer = new GlobalKey();\n                                    return RepaintBoundary(\n                                        key: previewContainer,\n                                        child: InkWell(\n                                            onLongPress: () {\n                                              Get.find<AyatReadingController>().screenShot = previewContainer;\n                                              optionDialog(context, controller.suraIDofTafsir[index],\n                                                  controller.ayahIDofTafsir[index], ayat.first.uthmani,\n                                                  fromSearch: true,\n                                                  translatorCopy: Get.find<TafsirController>()\n                                                      .downloadTafsirList\n                                                      .where((e) => e.fileName == controller.tafsirSearchList.value)\n                                                      .first\n                                                      .name,\n                                                  translatorShare: controller.tafsirResultBreakdown[index]);\n                                            },\n                                            onTap: () {\n                                              var suraName = surahController.homeSurahList\n                                                  .where((e) => e.index == controller.suraIDofTafsir[index]);\n\n                                              tafC.initailLoad(controller.suraIDofTafsir[index]).then((value) {\n                                                if (!tafC.loading.value) {\n                                                  Future.delayed(Duration(milliseconds: 100), () {\n                                                    Get.to(() => TafsirReading(\n                                                        controller.suraIDofTafsir[index],\n                                                        controller.ayahIDofTafsir[index],\n                                                        suraName.first.nameEn,\n                                                        suraName.first.ayas));\n                                                  });\n                                                }\n                                              });\n                                            },\n                                            child: Container(\n                                              padding:\n                                                  EdgeInsets.only(bottom: Get.width * 0.035, left: Get.width * 0.025),\n                                              decoration: BoxDecoration(\n                                                  color: settings.cardView.value\n                                                      ? Theme.of(context).cardColor\n                                                      : index % 2 != 0 && !settings.nightMode.value\n                                                          ? Theme.of(context).secondaryHeaderColor.withOpacity(0.07)\n                                                          : index % 2 != 0\n                                                              ? Theme.of(context).cardColor.withOpacity(0.4)\n                                                              : Colors.transparent,\n                                                  borderRadius: settings.cardView.value\n                                                      ? BorderRadius.circular(12)\n                                                      : BorderRadius.zero),\n                                              child: Column(\n                                                crossAxisAlignment: CrossAxisAlignment.start,\n                                                children: [\n                                                  //////////////////////////////////////////////////////////////////////\n                                                  /////////////////////////    AYAT NAME & NO    ///////////////////////\n\n                                                  Row(\n                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                                                    children: [\n                                                      Text(\n                                                        \"${surahController.homeSurahList[controller.suraIDofTafsir[index] - 1].nameEn!.tr} : ${settings.banNum(controller.ayahIDofTafsir[index])}\",\n                                                        style: TextStyle(\n                                                          color: Theme.of(context).secondaryHeaderColor,\n                                                          fontWeight: FontWeight.w600,\n                                                          fontSize: Get.width * .038,\n                                                        ),\n                                                      ),\n                                                      InkWell(\n                                                        onTap: () {\n                                                          Get.find<AyatReadingController>().screenShot =\n                                                              previewContainer;\n                                                          optionDialog(context, controller.suraIDofTafsir[index],\n                                                              controller.ayahIDofTafsir[index], ayat.first.uthmani,\n                                                              fromSearch: true,\n                                                              translatorCopy: Get.find<TafsirController>()\n                                                                  .downloadTafsirList\n                                                                  .where((e) =>\n                                                                      e.fileName == controller.tafsirSearchList.value)\n                                                                  .first\n                                                                  .name,\n                                                              translatorShare: controller.tafsirResultBreakdown[index]);\n                                                        },\n                                                        child: Container(\n                                                          padding: EdgeInsets.only(\n                                                            top: Get.width * .055,\n                                                            bottom: Get.width * .05,\n                                                            right: Get.width * .04,\n                                                            left: Get.width * .08,\n                                                          ),\n                                                          child: SvgPicture.asset(\n                                                            'assets/icons/option.svg',\n                                                            color: Theme.of(context).disabledColor,\n                                                            height: Get.width * 0.010,\n                                                          ),\n                                                        ),\n                                                      ),\n                                                    ],\n                                                  ).paddingOnly(left: Get.width * .02),\n\n                                                  ///////////////////////////////////////////////////////////////////\n                                                  /////////////////////////    ARABIC    ///////////////////////////\n\n                                                  if (ayat.first.uthmani != null)\n                                                    Obx(() => Visibility(\n                                                        visible: settings.showArabic.value,\n                                                        child: Container(\n                                                          width: Get.width,\n                                                          child: Text(\n                                                            ayat.first.uthmani!,\n                                                            style: TextStyle(\n                                                                fontSize: settings.arabicFont.value,\n                                                                fontFamily: settings.scriptFont.value),\n                                                            textDirection: TextDirection.rtl,\n                                                          ).paddingOnly(bottom: Get.width * .025),\n                                                        ).paddingOnly(right: Get.width * 0.035))),\n\n                                                  ///////////////////////////////////////////////////////////////////\n                                                  /////////////////////////    Tafsir Name    ///////////////////////\n\n                                                  Obx(\n                                                    () => Column(\n                                                      crossAxisAlignment: CrossAxisAlignment.start,\n                                                      children: [\n                                                        Obx(() => Visibility(\n                                                            visible: settings.showOtherInfo.value,\n                                                            child: Text(\n                                                                Get.find<TafsirController>()\n                                                                    .downloadTafsirList\n                                                                    .where((e) =>\n                                                                        e.fileName == controller.tafsirSearchList.value)\n                                                                    .first\n                                                                    .name,\n                                                                style: TextStyle(\n                                                                  fontSize: Get.width * 0.035,\n                                                                  color:\n                                                                      Theme.of(context).disabledColor.withOpacity(.7),\n                                                                )).paddingOnly(left: Get.width * .02))),\n\n                                                        ///////////////////////////////////////////////////////////////////\n                                                        /////////////////////////    TAFSIR TEXT    ///////////////////////\n\n                                                        DefaultTextStyle(\n                                                          style: TextStyle(\n                                                              fontWeight: FontWeight.normal,\n                                                              fontSize: settings.translationFont.value,\n                                                              color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black),\n                                                          child: RichWidget(\n                                                            controller.highlightOccurrences(\n                                                              controller.tafsirResultBreakdown[index],\n                                                              controller.searchinapp.value.text,\n                                                            ),\n                                                          ),\n                                                        ).paddingOnly(right: Get.width * 0.035)\n                                                      ],\n                                                    ).paddingOnly(top: Get.width * 0.025),\n                                                  ),\n                                                ],\n                                              ),\n                                            ).paddingOnly(\n                                                left: settings.cardView.value ? Get.width * .035 : Get.width * .01,\n                                                right: settings.cardView.value ? Get.width * .035 : Get.width * .01,\n                                                bottom: settings.cardView.value ? Get.width * .035 : 0)));\n                                  },\n                                );\n                              });\n                        }),\n                      ],\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass RichWidget extends StatelessWidget {\n  final settings = Get.put(SettingsController());\n  RichWidget(this.source);\n  final String? source;\n  @override\n  Widget build(\n    BuildContext context,\n  ) {\n    return Container(\n      child: Html(\n        data: source,\n        tagsList: Html.tags..addAll([\"span\", \"span1\", \"longer\"]),\n        style: {\n          \"body\": Style(\n            fontFamily: 'Kalpurush',\n            fontWeight: FontWeight.normal,\n            lineHeight: LineHeight(1.6),\n            fontSize: FontSize(settings.translationFont.value),\n            color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black,\n          ),\n          \"span\": Style(\n            // backgroundColor: Theme.of(context).primaryColor,\n            color: Colors.orange,\n            fontSize: FontSize(settings.translationFont.value),\n            lineHeight: LineHeight(1.6),\n          ),\n          \"span1\": Style(\n            direction: TextDirection.rtl,\n            lineHeight: LineHeight(2),\n            wordSpacing: 5,\n            color: Colors.black,\n            fontFamily: settings.scriptFont.value,\n            fontSize: FontSize(settings.arabicFont.value * .8),\n          ),\n          \"longer\": Style(\n              direction: TextDirection.rtl,\n              lineHeight: LineHeight(2),\n              wordSpacing: 5,\n              color: Colors.black,\n              fontFamily: settings.scriptFont.value,\n              fontSize: FontSize(settings.arabicFont.value * .8)),\n        },\n        // customRenders: {\n        //   \"longer\": (context, child) {\n        //     return Container(width: Get.width, child: child);\n        //   },\n        //   \"span1\": (context, child) {\n        //     return null;\n        //   },\n        // },\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/search/widget/search_dialog.dart", "file_name": "search_dialog.dart", "line": 25, "line_from": 25, "line_to": 259, "snippet": "  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Directionality(\n        textDirection: TextDirection.ltr,\n        child: Dialog(\n          alignment: Alignment(.5, -.6),\n          backgroundColor: Theme.of(context).bottomSheetTheme.backgroundColor,\n          shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(12))),\n          insetPadding: EdgeInsets.all(Get.width * .05),\n          child: Obx(() => Container(\n                padding: EdgeInsets.all(Get.width * .05),\n                height: controller.currentService.value == 0 || controller.currentService.value == 1\n                    ? Get.width * 0.95\n                    : Get.width * 0.72,\n                width: Get.width,\n                child: Column(\n                  mainAxisAlignment: MainAxisAlignment.spaceAround,\n                  children: [\n                    TextField(\n                      textDirection: controller.currentService.value == 2 ? TextDirection.rtl : TextDirection.ltr,\n                      style: controller.currentService.value == 2\n                          ? TextStyle(fontFamily: settings.scriptFont.value)\n                          : TextStyle(),\n                      controller: controller.searchinapp,\n                      decoration: inputdecoration(context, 'Search Word'.tr),\n                    ),\n                    Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        SizedBox(height: controller.currentService.value == 2 ? Get.width * 0.04 : Get.width * 0.02),\n                        Text(\"Search In\".tr, style: TextStyle(fontWeight: FontWeight.w600, fontSize: Get.width * .04)),\n                        Obx(\n                          () => Row(\n                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                            children: List.generate(\n                                controller.listOfServices.length,\n                                (index) => InkWell(\n                                      splashColor: Colors.transparent,\n                                      highlightColor: Colors.transparent,\n                                      onTap: () => controller.currentService.value = index,\n                                      child: Row(\n                                        children: [\n                                          Container(\n                                            height: Get.width * 0.05,\n                                            width: Get.width * 0.05,\n                                            decoration: BoxDecoration(\n                                                border: Border.all(\n                                                    color: controller.currentService.value == index\n                                                        ? Theme.of(context).secondaryHeaderColor\n                                                        : Colors.grey),\n                                                color: controller.currentService.value == index\n                                                    ? Theme.of(context).secondaryHeaderColor\n                                                    : Colors.transparent,\n                                                borderRadius: BorderRadius.circular(4)),\n                                            child: Center(\n                                              child: Icon(\n                                                Icons.check,\n                                                size: Get.width * .04,\n                                                color: controller.currentService.value == index\n                                                    ? Colors.white\n                                                    : Colors.transparent,\n                                              ),\n                                            ),\n                                          ),\n                                          SizedBox(width: Get.width * 0.025),\n                                          Text(\n                                            controller.listOfServices[index].toString().tr,\n                                            style: TextStyle(fontSize: Get.width * 0.035, fontWeight: FontWeight.w500),\n                                          ),\n                                          // SizedBox(width: Get.width * 0.0606),\n                                        ],\n                                      ).paddingSymmetric(vertical: Get.width * 0.06, horizontal: 0),\n                                    )),\n                          ).paddingZero,\n                        ),\n                        //////////////////////// SEARCH IN\n\n                        Obx(() => controller.currentService.value == 0 || controller.currentService.value == 1\n                            ? Text(\n                                \"Choose Category\".tr,\n                                style: TextStyle(fontWeight: FontWeight.w600, fontSize: Get.width * .04),\n                              )\n                            : SizedBox.shrink()),\n                        SizedBox(height: Get.width * .04),\n                        Obx(() => controller.currentService.value == 0\n                            ? ChooseCategory(title: controller.selectedTranslation.value, ontap: ChooseTranslation())\n                            : controller.currentService.value == 1\n                                ? ChooseCategory(title: controller.selectedTafsir.value, ontap: ChooseTafsir())\n                                : SizedBox.shrink()),\n                      ],\n                    ).paddingOnly(\n                        top: Get.width * .01, bottom: controller.currentService.value == 2 ? 0 : Get.width * 0.04),\n                    InkWell(\n                      onTap: () async {\n                        Get.find<AyatReadingController>().animationAppBar(changed: false);\n                        if (controller.searchinapp.text.isNotEmpty &&\n                            controller.searchinapp.text.removeAllWhitespace != '') {\n                          if (controller.currentService.value == 0) {\n                            await controller.translationSearch().then((value) {\n                              Future.delayed(Duration(milliseconds: 200), () {\n                                if (controller.transResultList1.isNotEmpty) {\n                                  Get.back();\n                                  Get.to(() => TranslationSearch())!.then((value) {\n                                    controller.searchinapp.clear();\n                                  });\n                                } else {\n                                  CustomWidget.toast(\"No Result Found\".tr);\n                                }\n                              });\n                            });\n                          }\n                          if (controller.currentService.value == 1) {\n                            controller.searchTafsir().then((value) {\n                              if (controller.suraIDofTafsir.length > 0) {\n                                Get.back();\n                              } else {\n                                CustomWidget.toast(\"No Result Found\".tr);\n                              }\n                            }).then((value) {\n                              if (controller.tafsirResultList.isNotEmpty) {\n                                Get.to(() => TafsirSearch())!.then((value) => controller.searchinapp.clear());\n                              }\n                            });\n                          }\n                          if (controller.currentService.value == 2) {\n                            var finalQuery = controller.normalizeText(controller.searchinapp.text);\n\n                            var searchWords = finalQuery.split(' ');\n                            controller.searchFunction(searchWords).then((value) {\n                              if (controller.arabicResultList.length > 0) {\n                                Get.back();\n                              }\n                            }).then((e) {\n                              controller.searchedString.value = controller.searchinapp.text;\n                              if (controller.arabicResultList.length > 0) {\n                                Get.to(() => ArabicSearch(controller.arabicResultList));\n                              } else {\n                                CustomWidget.toast(\"No Result Found\".tr);\n                              }\n                            }).then((value) => controller.searchinapp.clear());\n                          }\n                        } else {\n                          CustomWidget.toast('Please Enter a Word'.tr);\n                        }\n                      },\n                      child: Container(\n                        decoration: BoxDecoration(\n                          borderRadius: BorderRadius.all(Radius.circular(50)),\n                          color: Theme.of(context).secondaryHeaderColor,\n                        ),\n                        height: Get.width * 0.11,\n                        width: Get.width,\n                        child: Center(\n                          child: Text(\n                            'Search'.tr,\n                            style: TextStyle(\n                                fontWeight: FontWeight.w500, fontSize: Get.width * 0.043, color: Colors.white),\n                          ),\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n              )),\n        ),\n      ),\n    );\n  }\n\n  InputDecoration inputdecoration(BuildContext context, hint) {\n    var theme = themeController.currentTheme.value;\n\n    return InputDecoration(\n        filled: true,\n        focusedBorder: OutlineInputBorder(\n            borderRadius: BorderRadius.all(Radius.circular(15)),\n            borderSide: BorderSide(color: Theme.of(context).secondaryHeaderColor)),\n        border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(15))),\n        hintText: hint,\n        contentPadding: EdgeInsets.symmetric(horizontal: Get.width * 0.04, vertical: Get.width * 0.035),\n        enabledBorder: OutlineInputBorder(\n            borderRadius: BorderRadius.all(Radius.circular(15)),\n            borderSide:\n                BorderSide(color: theme == 6 ? Theme.of(context).backgroundColor : Theme.of(context).dividerColor)),\n        prefixIcon: Container(\n            padding: EdgeInsets.all(14),\n            child: SvgPicture.asset('assets/icons/search.svg',\n                color: Theme.of(context).secondaryHeaderColor, height: Get.width * .02)));\n  }\n}\n\nclass ChooseCategory extends StatelessWidget {\n  ChooseCategory({@required this.title, @required this.ontap});\n\n  final title;\n  final ontap;\n\n  final controller = Get.put(SearchInAPP());\n\n  @override\n  Widget build(BuildContext context) {\n    return InkWell(\n      splashColor: Colors.transparent,\n      highlightColor: Colors.transparent,\n      onTap: () =>\n          showAnimatedDialog(animationType: DialogTransitionType.fade, context: context, builder: (_) => ontap),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Container(\n            height: Get.width * 0.13,\n            decoration: BoxDecoration(\n                color: Theme.of(context).bottomSheetTheme.modalBackgroundColor,\n                borderRadius: BorderRadius.circular(12)),\n            child: ListTile(\n              contentPadding: EdgeInsets.symmetric(horizontal: Get.width * .06),\n              minLeadingWidth: Get.width * .06,\n              leading: SvgPicture.asset('assets/icons/format_left.svg',\n                      height: Get.width * 0.037, color: Theme.of(context).iconTheme.color)\n                  .paddingOnly(top: Get.width * 0.007),\n              title: Text('$title'.tr, overflow: TextOverflow.ellipsis, style: TextStyle(fontSize: Get.width * 0.038))\n                  .paddingOnly(bottom: Get.width * 0.01),\n              trailing: SvgPicture.asset('assets/icons/down_arrow.svg',\n                      height: Get.width * 0.018, color: Theme.of(context).iconTheme.color)\n                  .paddingOnly(right: Get.width * 0.01, bottom: Get.width * 0.01),\n            ),\n            width: double.infinity,\n          ),\n        ],\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "?customButton;", "docstring": "", "module": "drawer", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/showPicker.dart", "file_name": "showPicker.dart", "line": 16, "line_from": 16, "line_to": 124, "snippet": "  final Widget ?customButton;\n  final  suraOnChanged;\n  final  ayatOnChanged;\n\n  @override\n  _ShowPickerState createState() => _ShowPickerState();\n}\n\nclass _ShowPickerState extends State<ShowPicker> {\n  @override\n  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Align(\n          alignment: Alignment(0, 0),\n          child: Material(\n              color: Theme.of(context).bottomSheetTheme.backgroundColor,\n              shape: RoundedRectangleBorder(\n                  borderRadius: BorderRadius.circular(12)),\n              animationDuration: Duration(seconds: 1),\n              child: MediaQuery(\n                  data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n                  child: Container(\n                      width: Get.width * 0.9,\n                      child: Padding(\n                        padding: EdgeInsets.only(\n                            bottom: Get.width * .06,\n                            top: Get.width * .02,\n                            left: Get.width * .04,\n                            right: Get.width * .04),\n                        child: StatefulBuilder(\n                          builder:\n                              (BuildContext context, StateSetter setState) {\n                            return SingleChildScrollView(\n                              child: Column(\n                                children: [\n                                  Row(\n                                    children: [\n                                      Container(\n                                        width: Get.width * .39,\n                                        child: TextField(\n                                          textAlign: TextAlign.center,\n                                          controller:\n                                              widget.suraEditingController,\n                                          onChanged: widget.suraOnChanged,\n                                          decoration: InputDecoration(\n                                              focusedBorder: UnderlineInputBorder(\n                                                  borderSide: BorderSide(\n                                                      width: Get.width * .006,\n                                                      color: Theme.of(context)\n                                                          .secondaryHeaderColor)),\n                                              enabledBorder:\n                                                  UnderlineInputBorder(\n                                                      borderSide: BorderSide(\n                                                          width:\n                                                              Get.width * .006,\n                                                          color: Theme.of(\n                                                                  context)\n                                                              .dividerColor)),\n                                              hintStyle: TextStyle(\n                                                  fontSize: Get.width * .04),\n                                              hintText: 'Sura Name'.tr),\n                                        ),\n                                      ),\n                                      SizedBox(width: Get.width * .03),\n                                      Container(\n                                        width: Get.width * .35,\n                                        child: TextField(\n                                          keyboardType: TextInputType.number,\n                                          textAlign: TextAlign.center,\n                                          controller:\n                                              widget.ayatEditingController,\n                                          onChanged: widget.ayatOnChanged,\n                                          decoration: InputDecoration(\n                                              focusedBorder: UnderlineInputBorder(\n                                                  borderSide: BorderSide(\n                                                      width: Get.width * .006,\n                                                      color: Theme.of(context)\n                                                          .secondaryHeaderColor)),\n                                              enabledBorder:\n                                                  UnderlineInputBorder(\n                                                      borderSide: BorderSide(\n                                                          width:\n                                                              Get.width * .006,\n                                                          color: Theme.of(\n                                                                  context)\n                                                              .dividerColor)),\n                                              hintStyle: TextStyle(\n                                                  fontSize: Get.width * .04),\n                                              hintText: 'Ayah'.tr),\n                                        ),\n                                      ),\n                                    ],\n                                  ).paddingSymmetric(\n                                      horizontal: Get.width * .02),\n                                  Container(\n                                      height: Get.width * .7,\n                                      child: widget.customPickerView),\n                                  //Button\n                                  widget.customButton!\n                                ],\n                              ),\n                            );\n                          },\n                        ),\n                      ))))),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/TajweedRules.dart", "file_name": "TajweedRules.dart", "line": 141, "line_from": 141, "line_to": 372, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return Scaffold(\n        // key: globalKey,\n        resizeToAvoidBottomInset: false,\n        // endDrawer: SafeArea(child: QuickTools(globalKey: globalKey)),\n        backgroundColor: Theme.of(context).primaryColor,\n        body: MediaQuery(\n          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Obx(\n              () => Column(\n                children: [\n                  Topbar(text: 'Tajweed Rules'.tr, fontsize: Get.width * .05),\n                  Container(\n                    height: Get.height * .9,\n                    width: Get.width,\n                    padding: EdgeInsets.only(top: theme == 0 && settings.cardView.value ? Get.width * .012 : 0),\n                    decoration: pageDecoration(context),\n                    child: ClipRRect(\n                      borderRadius: settings.appBarRadius.value\n                          ? BorderRadius.only(\n                              topLeft: Radius.circular(Get.width * .07), topRight: Radius.circular(Get.width * .07))\n                          : BorderRadius.zero,\n                      child: SingleChildScrollView(\n                        child: Column(\n                          mainAxisAlignment: MainAxisAlignment.start,\n                          children: [\n                            SizedBox(height: theme == 0 && settings.cardView.value ? Get.width * .01 : Get.width * .02),\n\n                            ///////////////////////////////////////////////////////////////////////////\n                            ////////////////////          Tajweed                 /////////////////////\n                            ///////////////////////////////////////////////////////////////////////////\n\n                            Container(\n                                padding: EdgeInsets.all(Get.width * 0.05),\n                                decoration: cardRadius(context),\n                                child: Wrap(\n                                  // crossAxisAlignment:\n                                  //     CrossAxisAlignment.start,\n                                  children: [\n                                    Container(\n                                        padding: EdgeInsets.only(left: settings.cardView.value ? 0 : Get.width * 0.02),\n                                        decoration: BoxDecoration(\n                                            color: settings.cardView.value\n                                                ? Theme.of(context).cardColor\n                                                : Theme.of(context).secondaryHeaderColor.withOpacity(0.12),\n                                            borderRadius: BorderRadius.all(Radius.circular(12))),\n                                        child: CardName('Tajweed Rules'.tr, 'books')),\n                                    SizedBox(height: Get.width * .02),\n                                    Container(\n                                      height: Get.width * .82,\n                                      child: ListView.builder(\n                                        physics: NeverScrollableScrollPhysics(),\n                                        padding: EdgeInsets.zero,\n                                        itemCount: tajweedList.length,\n                                        itemBuilder: (context, i) {\n                                          return ListTile(\n                                              contentPadding:\n                                                  EdgeInsets.only(left: Get.width * .02, right: Get.width * .01),\n                                              visualDensity: VisualDensity(horizontal: -4),\n                                              dense: true,\n                                              leading: Text(\n                                                tajweedList[i]['leading'],\n                                                style: TextStyle(\n                                                    color: Theme.of(context).secondaryHeaderColor,\n                                                    fontFamily: settings.scriptFont.value,\n                                                    fontSize: Get.width * 0.05,\n                                                    fontWeight: FontWeight.w600),\n                                              ),\n                                              title: Obx(() => Text(\n                                                    settings.languageSelectIndex.value == 0\n                                                        ? tajweedList[i]['title']\n                                                        : tajweedListEn[i]['title'],\n                                                    style: TextStyle(\n                                                        color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black,\n                                                        fontFamily: 'Kalpurush',\n                                                        fontSize: settings.translationFont.value),\n                                                  )),\n                                              trailing: Text(\n                                                settings.banNum(tajweedList[i]['count']),\n                                                style: TextStyle(\n                                                    color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black,\n                                                    fontSize: Get.width * 0.035,\n                                                    fontWeight: FontWeight.w600),\n                                              ));\n                                        },\n                                      ),\n                                    ),\n                                  ],\n                                )).paddingSymmetric(vertical: settings.cardView.value ? Get.width * .02 : 0),\n\n                            // SizedBox(height: Get.width * .015),\n\n                            ///////////////////////////////////////////////////////////////////////////\n                            ////////////////////          Tajweed Rules            /////////////////////\n                            ///////////////////////////////////////////////////////////////////////////\n                            Wrap(\n                              children: List.generate(\n                                  // physics: NeverScrollableScrollPhysics(),\n                                  // padding: EdgeInsets.zero,\n                                  tajweedRules.length, (i) {\n                                return Obx(\n                                  () => Container(\n                                      padding: EdgeInsets.symmetric(\n                                          vertical: Get.width * 0.05, horizontal: Get.width * 0.03),\n                                      decoration: cardRadius(context),\n                                      // decoration: BoxDecoration(\n                                      //     color: settings.cardView.value\n                                      //         ? Theme.of(context).cardColor\n                                      //         : i != null\n                                      //             ? i % 2 == 0 &&\n                                      //                     !settings\n                                      //                         .nightMode.value\n                                      //                 ? Theme.of(context)\n                                      //                     .secondaryHeaderColor\n                                      //                     .withOpacity(0.07)\n                                      //                 : i % 2 == 0\n                                      //                     ? Theme.of(\n                                      //                             context)\n                                      //                         .cardColor\n                                      //                         .withOpacity(0.4)\n                                      //                     : Colors.transparent\n                                      //             : !settings.nightMode.value\n                                      //                 ? Theme.of(\n                                      //                         context)\n                                      //                     .cardColor\n                                      //                     .withOpacity(0.4)\n                                      //                 : Colors.transparent,\n                                      // borderRadius: settings\n                                      //         .cardView.value\n                                      //     ? BorderRadius.circular(12)\n                                      //     : BorderRadius.zero),\n                                      child: Column(\n                                        crossAxisAlignment: CrossAxisAlignment.start,\n                                        children: [\n                                          Container(\n                                            padding:\n                                                EdgeInsets.only(left: settings.cardView.value ? 0 : Get.width * 0.02),\n                                            decoration: BoxDecoration(\n                                                color: settings.cardView.value\n                                                    ? Theme.of(context).cardColor\n                                                    : Theme.of(context).secondaryHeaderColor.withOpacity(0.12),\n                                                borderRadius: BorderRadius.all(Radius.circular(12))),\n                                            child: CardName2(\n                                                i,\n                                                settings.languageSelectIndex.value == 0\n                                                    ? tajweedRules[i]['title']\n                                                    : tajweedRulesEn[i]['title'],\n                                                'books'),\n                                          ),\n                                          Container(\n                                            child: Column(\n                                              crossAxisAlignment: CrossAxisAlignment.start,\n                                              children: [\n                                                // Text(tajweedRules[i]['desc'],\n                                                //     style: TextStyle(\n                                                //         fontSize:\n                                                //             Get.width * 0.038,\n                                                //         fontWeight:\n                                                //             FontWeight.w600)),\n\n                                                DefaultTextStyle(\n                                                    style: TextStyle(\n                                                        fontSize: settings.translationFont.value,\n                                                        fontFamily: 'Kalpurush',\n                                                        color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black),\n                                                    child: RichWidget(\n                                                        settings.languageSelectIndex.value == 0\n                                                            ? tajweedRules[i]['desc']\n                                                            : tajweedRulesEn[i]['desc'],\n                                                        Color(int.parse(tajweedRules[i]['color'])))),\n                                                SizedBox(height: Get.width * .05),\n                                                Container(\n                                                  width: Get.width,\n                                                  child: Obx(() => DefaultTextStyle(\n                                                      style: TextStyle(\n                                                          fontSize: settings.translationFont.value,\n                                                          fontFamily: settings.scriptFont.value,\n                                                          color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black),\n                                                      child: RichWidget1(\n                                                          tajweedColoringEachChar(tajweedRules[i]['arabic'])))),\n                                                ),\n                                              ],\n                                            ),\n                                          ),\n                                        ],\n                                      )).paddingSymmetric(vertical: settings.cardView.value ? Get.width * .02 : 0),\n                                );\n                              }),\n                            ),\n                            SizedBox(height: Get.width * .015)\n                          ],\n                        ).paddingOnly(\n                          left: settings.cardView.value ? Get.width * 0.04 : Get.width * 0.02,\n                          right: settings.cardView.value ? Get.width * 0.04 : Get.width * 0.01,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ));\n  }\n\n  BoxDecoration cardRadius(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    return BoxDecoration(\n        color: theme == 6 && settings.simpleView.value\n            ? Theme.of(context).primaryColorDark\n            : Theme.of(context).appBarTheme.shadowColor,\n        borderRadius: BorderRadius.all(Radius.circular(12)));\n  }\n}\n\nclass Droptxt extends StatelessWidget {\n  const Droptxt(this.title);\n\n  final String? title;\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      title!,\n      overflow: TextOverflow.ellipsis,\n      style: TextStyle(fontSize: Get.width * .035),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/TajweedRules.dart", "file_name": "TajweedRules.dart", "line": 378, "line_from": 378, "line_to": 394, "snippet": "  Widget build(BuildContext context) {\n    return Text(title!, overflow: TextOverflow.ellipsis, style: TextStyle(fontSize: Get.width * .038));\n  }\n}\n\nclass SubTitle extends StatelessWidget {\n  const SubTitle(this.title);\n  final String? title;\n\n  @override\n  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    return Text(title!,\n        style: TextStyle(color: theme == 6 ? Color(0xff7F909F) : Color(0xffAAAAAA), fontSize: Get.width * .035),\n        textAlign: TextAlign.end);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/TajweedRules.dart", "file_name": "TajweedRules.dart", "line": 400, "line_from": 400, "line_to": 448, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.end,\n      children: [\n        Flexible(\n            child: Text(\n          title!,\n          overflow: TextOverflow.ellipsis,\n          style: TextStyle(fontSize: Get.width * .035, color: theme == 6 ? Color(0xff7F909F) : Color(0xffAAAAAA)),\n        )),\n        Icon(\n          Icons.arrow_drop_down_outlined,\n          size: Get.width * 0.06,\n          color: Color(0xffAAAAAA),\n        ),\n      ],\n    );\n  }\n}\n\nclass CardName extends StatelessWidget {\n  CardName(this.text, this.icon, {this.size: false});\n  final text;\n  final icon;\n  final bool size;\n\n  @override\n  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return ListTile(\n        dense: true,\n        contentPadding: EdgeInsets.symmetric(horizontal: settings.cardView.value ? 0 : Get.width * 0.02),\n        visualDensity: VisualDensity(horizontal: -4),\n        leading: SvgPicture.asset(\n          'assets/icons/$icon.svg',\n          height: size ? Get.width * .048 : Get.width * 0.055,\n          color: Theme.of(context).secondaryHeaderColor,\n        ).paddingOnly(top: Get.width * .005),\n        title: Text(\n          text,\n          style: TextStyle(\n              color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black,\n              fontSize: Get.width * 0.042,\n              fontWeight: FontWeight.w600),\n        ));\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/TajweedRules.dart", "file_name": "TajweedRules.dart", "line": 460, "line_from": 460, "line_to": 531, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return ListTile(\n      minLeadingWidth: Get.width * 0.09,\n      onTap: onTap,\n      dense: true,\n      contentPadding: EdgeInsets.zero,\n      visualDensity: VisualDensity(horizontal: -4),\n      leading: SvgPicture.asset(\n        'assets/icons/$icon.svg',\n        height: size ? Get.width * .048 : Get.width * 0.055,\n        color: Theme.of(context).secondaryHeaderColor,\n      ).paddingOnly(top: Get.width * .005),\n      // SizedBox(width: Get.width * 0.05),\n      title: Text(\n        text,\n        style: TextStyle(\n            color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black,\n            fontSize: Get.width * 0.042,\n            fontWeight: FontWeight.w600),\n      ),\n\n      trailing: InkWell(\n          onTap: () async {\n            if (!audioC.audioPlayer.playing) {\n              audioC.audioPlay.value = false;\n              audioC.index.value = index;\n              await audioC.play1('assets/audio/tajweed/tajweed${index + 1}.mp3');\n            } else {\n              await audioC.audioPlayer.stop().then((value) => {\n                    if (audioC.index.value != index)\n                      {\n                        CustomWidget.toast('Playing'),\n                        audioC.index.value = index,\n                        audioC.play1('assets/audio/tajweed/tajweed${index + 1}.mp3')\n                      }\n                  });\n            }\n          },\n          child: Obx(\n            () => audioC.audioPlay.value && audioC.index.value == index\n                ? Icon(\n                    Icons.pause_circle_filled_outlined,\n                    size: Get.width * .09,\n                    color: Theme.of(context).secondaryHeaderColor,\n                  )\n                : Icon(\n                    Icons.play_circle_fill_outlined,\n                    size: Get.width * .09,\n                    color: Theme.of(context).secondaryHeaderColor,\n                  ),\n          )),\n    ).paddingSymmetric(horizontal: Get.width * .02);\n  }\n}\n\nclass CustomTrackShape extends RoundedRectSliderTrackShape {\n  Rect getPreferredRect({\n    @required RenderBox? parentBox,\n    Offset offset = Offset.zero,\n    @required SliderThemeData? sliderTheme,\n    bool isEnabled = false,\n    bool isDiscrete = false,\n  }) {\n    final double? trackHeight = sliderTheme!.trackHeight;\n    final double? trackLeft = offset.dx;\n    final double? trackTop = offset.dy + (parentBox!.size.height - trackHeight!) / 2;\n    final double trackWidth = parentBox.size.width * .95;\n    return Rect.fromLTWH(trackLeft!, trackTop!, trackWidth, trackHeight);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/TajweedRules.dart", "file_name": "TajweedRules.dart", "line": 538, "line_from": 538, "line_to": 608, "snippet": "  Widget build(\n    BuildContext context,\n  ) {\n    var theme = themeController.currentTheme.value;\n\n    return MarkupText(\n      content,\n      textAlign: TextAlign.right,\n      style: TextStyle(\n        fontSize: settings.arabicFont.value,\n        fontFamily: settings.scriptFont.value,\n        color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black,\n      ),\n    );\n  }\n}\n\nclass RichWidget extends StatelessWidget {\n  final settings = Get.put(SettingsController());\n  final theme = themeController.currentTheme.value;\n  RichWidget(this.htmlContent, this.color);\n  final String? htmlContent;\n  final Color color;\n  @override\n  Widget build(\n    BuildContext context,\n  ) {\n    var source = htmlContent!.replaceAll(\"\"\"\n\n\"\"\", '<br>');\n    return Obx(\n      () => Container(\n        child: Html(\n          data: searchC.arabicHighLight(source),\n          tagsList: (Html.tags..addAll([\"longer\", \"span\"])),\n          style: {\n            \"body\": Style(\n                lineHeight: LineHeight(1.6),\n                fontFamily: 'Kalpurush',\n                fontSize: FontSize(settings.translationFont.value),\n                color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black),\n            \"span\": Style(\n                direction: TextDirection.rtl,\n                lineHeight: LineHeight(2),\n                wordSpacing: 5,\n                color: color,\n                fontFamily: 'Scheherazade',\n                fontSize: FontSize(settings.arabicFont.value * .8)),\n            \"longer\": Style(\n                direction: TextDirection.rtl,\n                lineHeight: LineHeight(2),\n                wordSpacing: 5,\n                color: color,\n                fontFamily: settings.scriptFont.value,\n                fontSize: FontSize(settings.arabicFont.value * .8)),\n          },\n          // customRenders: {\n          //   \"longer\": (context, child) {\n          //     return Center(\n          //       child: Container(\n          //           // color: Get.theme.secondaryHeaderColor.withOpacity(.1),\n          //           width: Get.width,\n          //           child: child),\n          //     );\n          //   },\n          // },\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "drawer", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/CustomPickerView.dart", "file_name": "CustomPickerView.dart", "line": 33, "line_from": 33, "line_to": 166, "snippet": "  void initState() {\n    super.initState();\n  }\n\n  @override\n  void didUpdateWidget(CustomPickerView oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.controller != oldWidget.controller) {\n      _controller = widget.controller;\n    }\n  }\n\n  @override\n  void didChangeDependencies() {\n    _controller = widget.controller ?? PickerController(count: 0);\n    super.didChangeDependencies();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      child: Container(\n          color: Theme.of(context).bottomSheetTheme.backgroundColor,\n          child: Row(children: _buildPickers())),\n    );\n  }\n\n  List<Widget> _buildPickers() {\n    List<Widget> children = [];\n\n    for (int section = 0; section < _controller!.count!; section++) {\n      children\n          .add(Expanded(flex: 1, child: _buildPickerItem(section: section)));\n    }\n\n    return children;\n  }\n\n  Widget _buildPickerItem({int? section}) {\n    FixedExtentScrollController scrollController =\n        _controller!.scrollControllers[section!];\n\n    return Container(\n      child: CupertinoPicker.builder(\n        selectionOverlay: CupertinoPickerDefaultSelectionOverlay(\ncapEndEdge: section == 0 ? false : true,\ncapStartEdge: section == 1 ? false : true,\n         \n          background: Theme.of(context).secondaryHeaderColor.withOpacity(.1),\n        ),\n        useMagnifier: false,\n        // magnification: 1,\n        magnification: 0.9,\n        // backgroundColor: Colors.transparent,\n        scrollController: scrollController,\n        diameterRatio: 1,\n        itemExtent: widget.itemExtent ?? 40,\n        childCount: widget.numberofRowsAtSection!(section),\n        onSelectedItemChanged: (row) {\n          if (widget.onSelectRowChanged != null) {\n            widget.onSelectRowChanged!(section, row);\n          }\n        },\n        itemBuilder: (context, row) {\n          return Container(\n              alignment: Alignment.center,\n              child: widget.itemBuilder!(section, row));\n        },\n      ),\n    );\n  }\n}\n\nclass PickerController {\n  final int? count;\n  final List<FixedExtentScrollController> scrollControllers;\n\n  PickerController({@required this.count, List<int> ? selectedItems})\n      : scrollControllers = [] {\n    for (int i = 0; i < count!; i++) {\n      if (selectedItems != null && i < selectedItems.length) {\n        scrollControllers\n            .add(FixedExtentScrollController(initialItem: selectedItems[i]));\n      } else {\n        scrollControllers.add(FixedExtentScrollController());\n      }\n    }\n  }\n\n  void dispose() {\n    scrollControllers.forEach((item) {\n      item.dispose();\n    });\n  }\n\n  int? selectedRowAt({@required int? section}) {\n    try {\n      FixedExtentScrollController scrollController = scrollControllers[section!];\n   \n        return scrollController.selectedItem;\n    \n    } catch (err) {\n      return null;\n    }\n  }\n\n  void jumpToRow(int row, {@required int? atSection}) {\n    try {\n      if (scrollControllers.length <= atSection!) {\n        return;\n      }\n      FixedExtentScrollController scrollController =\n          scrollControllers[atSection];\n      scrollController.jumpToItem(row);\n    } catch (err) {}\n  }\n\n  Future<void> animateToRow(\n    int? row, {\n    @required int? atSection,\n    Duration duration = const Duration(milliseconds: 300),\n    Curve curve = Curves.easeInOut,\n  }) async {\n    try {\n      if (scrollControllers.length <= atSection!) {\n        return;\n      }\n      FixedExtentScrollController scrollController =\n          scrollControllers[atSection];\n      await scrollController.animateToItem(row!,\n          duration: duration, curve: curve);\n    } catch (err) {}\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/drawer.dart", "file_name": "drawer.dart", "line": 48, "line_from": 48, "line_to": 233, "snippet": "  Widget build(BuildContext context) {\n    return MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Column(children: [\n          SafeArea(\n            child: Container(\n              height: Platform.isIOS ? Get.height * .9 : Get.height * .928,\n              width: Get.width * .75,\n              decoration: BoxDecoration(\n                  color: Theme.of(context).cardColor,\n                  borderRadius: BorderRadius.only(\n                      topRight: Radius.circular(Get.width * .1),\n                      bottomRight: Radius.circular(Get.width * .2))),\n              child: ClipRRect(\n                borderRadius: BorderRadius.only(\n                    topRight: Radius.circular(Get.width * .1),\n                    bottomRight: Radius.circular(Get.width * .15)),\n                child: ListView(\n                  padding: EdgeInsets.only(\n                      left: Get.width * 0.04, bottom: Get.width * 0.05),\n                  children: [\n                    ListTile(\n                      onTap: () => Get.back(),\n                      trailing: Icon(Icons.close,\n                          color: Theme.of(context).iconTheme.color,\n                          size: Get.width * .07),\n                      title: Text(\n                        'name'.tr,\n                        style: TextStyle(\n                            fontSize: Get.width * .06,\n                            fontWeight: FontWeight.w600),\n                      ).paddingOnly(top: Get.width * .02),\n                      subtitle: Text(\n                        'Version:'.tr +\n                            \" \" +\n                            '${settings.banNum(1)}.${settings.banNum(0)}.${settings.banNum(0)}',\n                        style: TextStyle(\n                            fontSize: Get.width * .038,\n                            fontWeight: FontWeight.w400,\n                            color: Theme.of(context).iconTheme.color),\n                      ).paddingOnly(top: Get.width * .005),\n                    ).paddingOnly(\n                        bottom: Get.width * .03,\n                        left: Get.width * .01,\n                        top: Get.height * 0.02),\n                    CustomDivider(),\n                    ListTile(\n                      onTap: () {\n                        Get.back();\n                        showPickerIcons(context);\n                      },\n                      leading: LeadingIcon(Icons.directions),\n                      title: TitleName('Jump To Ayah'.tr),\n                    ),\n                    ListTile(\n                      leading: LeadingSvg('setting'),\n                      title: TitleName('Settings'.tr),\n                      onTap: () => Get.to(() => Settings()),\n                    ),\n                    ListTile(\n                      onTap: () => Get.to(() => OurProjects()),\n                      leading: LeadingSvg('other_projects'),\n                      title: TitleName('Our Projects'.tr),\n                    ),\n                    ListTile(\n                      onTap: () => Platform.isIOS?Get.to(() => SupportUs()): Get.to(() =>  AndroidSupportUs()),\n                      leading: LeadingIcon(Icons.paid_outlined),\n                      title: TitleName('support'.tr),\n                    ),\n                    CustomDivider(),\n                    settings.languageSelectIndex.value == 0\n                        ? ListTile(\n                            onTap: () => Get.to(() => TafsirAndTranslator()),\n                            leading: LeadingIcon(Icons.library_books_outlined),\n                            title: TitleName('\u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u0993 \u09b2\u09c7\u0996\u0995'.tr),\n                          )\n                        : SizedBox.shrink(),\n                    settings.languageSelectIndex.value == 0\n                        ? ListTile(\n                            onTap: () => Get.to(() => LibraryAdress()),\n                            leading: LeadingIcon(Icons.shopping_cart_outlined),\n                            title: TitleName('\u09a4\u09be\u09ab\u09b8\u09c0\u09b0\u0997\u09c1\u09b2\u09cb\u09b0 \u09ac\u0987 \u09aa\u09c7\u09a4\u09c7'.tr),\n                          )\n                        : SizedBox.shrink(),\n                    ListTile(\n                      onTap: (() => launchUrl(Uri.parse(\n                          'https://play.google.com/store/apps/details?id=com.ihadis.quranpro'))),\n                      leading: LeadingSvg('ratings'),\n                      title: TitleName('Give Rating/Review'.tr),\n                    ),\n                    ListTile(\n                      onTap: () => Get.to(() => Privacy()),\n                      leading: LeadingSvg('privacy',\n                          isSize: true, size: Get.width * .07),\n                      title: TitleName('Privacy Policy'.tr),\n                    ),\n                    ListTile(\n                      onTap: () => Get.to(() => AboutUS()),\n                      leading: LeadingSvg('about_us'),\n                      title: TitleName('About Us'.tr),\n                    ),\n                    ListTile(\n                      onTap: () => Get.to(() => Thanks()),\n                      leading: LeadingIcon(Icons.favorite_outline),\n                      title: TitleName('Thanks & Credits'.tr),\n                    ),\n                    ListTile(\n                      onTap: () => Get.to(() => ContactUs()),\n                      leading: LeadingIcon(Icons.mail_outline),\n                      title: TitleName('Contact Us'.tr),\n                    ),\n                    ListTile(\n                      onTap: () {\n                        Share.share(\"\"\"\n          Quran Majeed Pro App, IRD Foundation\n          https://apps.apple.com/us/app/quran-mazid-pro/id1610165189\"\"\");\n                      },\n                      leading: LeadingIcon(Icons.share_outlined),\n                      title: TitleName('Share App'.tr),\n                    ),\n                    ListTile(\n                      onTap: () => Get.to(() => AboutApp()),\n                      leading: LeadingSvg('about_app'),\n                      title: TitleName('About App'.tr),\n                    ),\n                    ListTile(\n                      onTap: () async {\n                        String? fbProtocolUrl;\n                        if (Platform.isIOS) {\n                          fbProtocolUrl = 'fb://profile/436269339900162';\n                        } else {\n                          fbProtocolUrl = 'fb://page/436269339900162';\n                        }\n\n                        String? fallbackUrl =\n                            'https://www.facebook.com/ihadis.official';\n\n                        try {\n                          bool launched =\n                              await launchUrl(Uri.parse(fbProtocolUrl));\n\n                          if (!launched) {\n                            await launchUrl(Uri.parse(fallbackUrl));\n                          }\n                        } catch (e) {\n                          await launchUrl(Uri.parse(fallbackUrl));\n                        }\n                      },\n                      leading: LeadingSvg('facebook',\n                          isSize: true, size: Get.width * .05),\n                      title: TitleName('Our Facebook App'.tr),\n                    ),\n                    ListTile(\n                      leading: LeadingSvg('koran', color: false),\n                      title: TitleName('Quranmazid Website'.tr),\n                      onTap: () {\n                        launchUrl(Uri.parse('http://quranmazid.com'));\n                      },\n                    ),\n                    ListTile(\n                      leading: LeadingIcon(Icons.public),\n                      title: TitleName('Our Website'.tr),\n                      onTap: () {\n                        launchUrl(Uri.parse('https://irdfoundation.com/'));\n                      },\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          )\n        ]));\n  }\n}\n\nclass LeadingIcon extends StatelessWidget {\n  const LeadingIcon(this.icon);\n\n  final icon;\n\n  @override\n  Widget build(BuildContext context) {\n    return Icon(icon,\n        color: Theme.of(context).secondaryHeaderColor, size: Get.width * 0.065);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/drawer.dart", "file_name": "drawer.dart", "line": 243, "line_from": 243, "line_to": 261, "snippet": "  Widget build(BuildContext context) {\n    return SvgPicture.asset(\n      'assets/icons/$icon.svg',\n      color: color ? Theme.of(context).secondaryHeaderColor : null,\n      height: isSize ? size : Get.width * .055,\n    ).paddingOnly(left: Get.width * .005);\n  }\n}\n\nclass CustomDivider extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Divider(\n        color: Theme.of(context).dividerColor.withOpacity(.5),\n        indent: Get.width * .02,\n        endIndent: Get.width * .05,\n        thickness: Get.width * .003);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/QuickTools.dart", "file_name": "QuickTools.dart", "line": 764, "line_from": 764, "line_to": 781, "snippet": "  Widget build(BuildContext context) {\n    return Text(title!, style: TextStyle(fontSize: Get.width * 0.034));\n  }\n}\n\nclass LeadingIcon extends StatelessWidget {\n  LeadingIcon(this.icon, {this.iscolor: false});\n\n  final icon;\n  final iscolor;\n\n  @override\n  Widget build(BuildContext context) {\n    return Icon(icon,\n        color: iscolor ? Theme.of(context).secondaryHeaderColor : Theme.of(context).iconTheme.color,\n        size: Get.width * .06);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "settings", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/settings/settings.dart", "file_name": "settings.dart", "line": 1263, "line_from": 1263, "line_to": 1283, "snippet": "  Widget build(BuildContext context) {\n    return Text(title!,\n        overflow: TextOverflow.ellipsis,\n        style: TextStyle(fontSize: Get.width * .038));\n  }\n}\n\nclass SubTitle extends StatelessWidget {\n  const SubTitle(this.title);\n  final String? title;\n\n  @override\n  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    return Text(title!,\n        style: TextStyle(\n            color: theme == 6 ? Color(0xff7F909F) : Color(0xffAAAAAA),\n            fontSize: Get.width * .035),\n        textAlign: TextAlign.end);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "settings", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/settings/settings.dart", "file_name": "settings.dart", "line": 1289, "line_from": 1289, "line_to": 1339, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.end,\n      children: [\n        Flexible(\n            child: Text(\n          title!,\n          overflow: TextOverflow.ellipsis,\n          style: TextStyle(\n              fontSize: Get.width * .035,\n              color: theme == 6 ? Color(0xff7F909F) : Color(0xffAAAAAA)),\n        )),\n        Icon(\n          Icons.arrow_drop_down_outlined,\n          size: Get.width * 0.06,\n          color: Color(0xffAAAAAA),\n        ),\n      ],\n    );\n  }\n}\n\n// class CustomSwitch extends StatelessWidget {\n//   CustomSwitch(\n//       {@required this.value, @required this.name, @required this.createdata});\n\n//   final createdata;\n//   final name;\n//   var value;\n//   var hivedata = HiveData();\n\n//   @override\n//   Widget build(BuildContext context) {\n//     return Row(\n//       mainAxisAlignment: MainAxisAlignment.spaceBetween,\n//       children: [\n//         Text(name, style: TextStyle(fontSize: Get.width * 0.045)),\n//         Obx(() => Switch(\n//               inactiveTrackColor: Colors.grey,\n//               activeColor: Theme.of(context).secondaryHeaderColor,\n//               value: value,\n//               onChanged: (bool val) {\n//                 value = val;\n//                 hivedata.createData(createdata, value);\n//               },\n//             )),\n//       ],\n//     );\n//   }\n// }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "settings", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/settings/settings.dart", "file_name": "settings.dart", "line": 1348, "line_from": 1348, "line_to": 1388, "snippet": "  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Row(\n          mainAxisAlignment: MainAxisAlignment.start,\n          children: [\n            SvgPicture.asset(\n              'assets/icons/$icon.svg',\n              height: size ? Get.width * .048 : Get.width * 0.055,\n              color: Theme.of(context).secondaryHeaderColor,\n            ).paddingOnly(top: Get.width * .005),\n            SizedBox(width: Get.width * 0.05),\n            Text(\n              text,\n              style: TextStyle(\n                  fontSize: Get.width * 0.045, fontWeight: FontWeight.w600),\n            )\n          ],\n        ),\n        SizedBox(height: Get.width * .05),\n      ],\n    );\n  }\n}\n\nclass CustomTrackShape extends RoundedRectSliderTrackShape {\n  Rect getPreferredRect({\n    @required RenderBox? parentBox,\n    Offset offset = Offset.zero,\n    @required SliderThemeData? sliderTheme,\n    bool isEnabled = false,\n    bool isDiscrete = false,\n  }) {\n    final double trackHeight = sliderTheme!.trackHeight!;\n    final double trackLeft = offset.dx;\n    final double trackTop =\n        offset.dy + (parentBox!.size.height - trackHeight) / 2;\n    final double trackWidth = parentBox.size.width * .95;\n    return Rect.fromLTWH(trackLeft, trackTop, trackWidth, trackHeight);\n  }\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "Musaf", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/Musaf/mushafPage.dart", "file_name": "mushafPage.dart", "line": 42, "line_from": 42, "line_to": 298, "snippet": "  void initState() {\n    super.initState();\n    scaleStateController = PhotoViewScaleStateController();\n\n    controller.goToExactPage(\n      dbName: widget.dbname,\n      width: widget.width,\n    );\n\n    controller.inititalizeCalculation(widget);\n\n    photoC = PhotoViewController(initialScale: defScale)..outputStateStream.listen(onController);\n\n    scaleStateController = PhotoViewScaleStateController()..outputScaleStateStream.listen(onScaleState);\n  }\n\n  void onController(PhotoViewControllerValue value) {\n    setState(() {\n      calls += 1;\n    });\n  }\n\n  @override\n  void dispose() {\n    photoC!.dispose();\n    scaleStateController!.dispose();\n    super.dispose();\n  }\n\n  Color getColor(Set<MaterialState> states) {\n    const Set<MaterialState> interactiveStates = <MaterialState>{\n      MaterialState.dragged,\n      MaterialState.hovered,\n    };\n    if (states.any(interactiveStates.contains)) {\n      return Theme.of(context).secondaryHeaderColor;\n    }\n    return Colors.grey;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return WillPopScope(\n      onWillPop: () {\n        if (MediaQuery.of(context).orientation == Orientation.landscape) {\n          SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp, DeviceOrientation.portraitDown]);\n        }\n        SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: SystemUiOverlay.values);\n\n        Get.back();\n        return Future.value(false);\n      },\n      child: Scaffold(\n        resizeToAvoidBottomInset: false,\n        key: globalKey,\n        endDrawer: MediaQuery.of(context).orientation == Orientation.landscape\n            ? SafeArea(child: SizedBox.shrink())\n            : SafeArea(child: MusafDrawer(dbName: widget.dbname, width: widget.width)),\n        body: Wrap(\n          children: [\n            MediaQuery.of(context).orientation == Orientation.landscape\n                ? SizedBox.shrink()\n                : VerseTopbar(\n                    topbarHeight: true,\n                    // svgPath: 'assets/icons/topbarBG.svg',\n                    text: '${settings.listOfMusaf[widget.indexNo]}',\n                    globalKey: globalKey,\n                    pinBtn: GetBuilder<MushafCotroller>(\n                      builder: (_) {\n                        return InkWell(\n                            onLongPress: () => _goToPinPage(),\n                            onTap: () => _pinPage(),\n                            child: SvgPicture.asset(\n                              controller.listOfMusafPinBool['${widget.dbname}'] == controller.currentPage.value\n                                  ? 'assets/icons/bottom_bar/bookmark_fill.svg'\n                                  : 'assets/icons/bottom_bar/bookmark.svg',\n                              height: Get.width * .05,\n                              color: theme == 0 ? Color(0xFF535353) : Colors.white,\n                            ));\n                      },\n                    )),\n            GestureDetector(\n              onTapDown: (click) async {\n                controller.clearHighlight();\n                if (widget.dbname != 'nurani') {\n                  await controller.highlightCalculation(click, controller.xImageOffset.value,\n                      controller.yImageOffset.value, controller.scaleRatio.value, widget);\n                }\n              },\n              child: Obx(\n                () => Container(\n                  height: MediaQuery.of(context).orientation == Orientation.landscape ? Get.height : Get.height * .84,\n                  width: Get.width,\n                  decoration: _boxDecoration(context, theme),\n                  child: ClipRRect(\n                    borderRadius: theme == 0\n                        ? BorderRadius.zero\n                        : MediaQuery.of(context).orientation != Orientation.landscape && settings.appBarRadius.value\n                            ? BorderRadius.only(\n                                topLeft: Radius.circular(Get.width * .07), topRight: Radius.circular(Get.width * .07))\n                            : BorderRadius.zero,\n                    child: Stack(\n                      children: [\n                        PageView.builder(\n                            onPageChanged: (int page) {\n                              controller.clearHighlight();\n                              controller.currentPage.value = page + 1.0;\n                              controller.update();\n                              controller.drawAyah.value = false;\n                            },\n                            controller: controller.pageController,\n                            reverse: true,\n                            itemCount: controller.listOfMusafPageNo['${widget.dbname}'],\n                            itemBuilder: (_, index) {\n                              String pageNo = controller.findPageNo(index + 1, widget.dbname);\n                              return InkWell(\n                                onTap: () {\n                                  controller.showSlider.value = true;\n                                  if (!controller.showSliderOntap.value) {\n                                    Timer(Duration(seconds: 3), () => controller.showSlider.value = false);\n                                  }\n                                },\n                                child: Container(\n                                  child: ColorFiltered(\n                                      colorFilter: theme != 6\n                                          ? ColorFilter.mode(Colors.transparent, BlendMode.colorDodge)\n                                          : ColorFilter.matrix([\n                                              //R  G   B    A  Const Dark Mode\n                                              00000, -0.2, -0.7, 0, 255,\n                                              00000, -0.2, -0.7, 0, 255,\n                                              00000, 0000, -0.8, 0, 255,\n                                              00000, 0000, 255, 1, 0,\n                                            ]),\n                                      child: Stack(\n                                        children: [\n                                          PhotoViewCustomChild(\n                                            controller: controller,\n                                            widget: widget,\n                                            pageNo: pageNo,\n                                            imageProperty: controller.imageProperty,\n                                            scaleRatio: controller.scaleRatio.value,\n                                          ),\n                                          PhotoSlider(controller: controller),\n                                          OutputStateStream(),\n                                        ],\n                                      )),\n                                ),\n                              );\n                            }),\n                      ],\n                    ),\n                  ),\n                ),\n              ),\n            ),\n            Align(\n              alignment: Alignment(\n                  MediaQuery.of(context).orientation == Orientation.landscape ? 0 : 0,\n                  MediaQuery.of(context).orientation == Orientation.landscape\n                      ? 1.1\n                      : Platform.isIOS\n                          ? 0.95\n                          : 1.023),\n              child: Container(\n                child: pageScroller(\n                  context,\n                  controller.listOfMusafPageNo['${widget.dbname}']!.toDouble(),\n                  controller.pageController,\n                  true,\n                  handlerColor: Colors.white,\n                  handlerChildColor: Theme.of(context).secondaryHeaderColor,\n                  activeHandlerColor: Colors.white,\n                  toolTipColor: Theme.of(context).secondaryHeaderColor,\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  void _pinPage() {\n    controller.listOfMusafPinBool['${widget.dbname}'] = controller.currentPage.value;\n\n    hive.createData(\n        controller.listOfMusafPinHive['${widget.dbname}'], controller.listOfMusafPinBool['${widget.dbname}']);\n    controller.update();\n  }\n\n  void _goToPinPage() {\n    if (!controller.listOfMusafPinBool['${widget.dbname}'].isNegative) {\n      Future.delayed(Duration(microseconds: 1), () {\n        controller.pageController.jumpToPage(controller.listOfMusafPinBool['${widget.dbname}'].toInt() - 1);\n      });\n    }\n  }\n\n  BoxDecoration _boxDecoration(BuildContext context, int theme) {\n    return BoxDecoration(\n      color: settings.cardView.value\n          ? Theme.of(context).backgroundColor\n          : settings.nightMode.value\n              ? Theme.of(context).backgroundColor\n              : Theme.of(context).cardColor,\n      borderRadius: theme == 0\n          ? BorderRadius.zero\n          : MediaQuery.of(context).orientation != Orientation.landscape && settings.appBarRadius.value\n              ? BorderRadius.only(topLeft: Radius.circular(Get.width * .07), topRight: Radius.circular(Get.width * .07))\n              : BorderRadius.zero,\n      boxShadow: [\n        settings.simpleView.value && theme == 0\n            ? BoxShadow(\n                color: Colors.black.withOpacity(.04),\n                blurRadius: Get.width * .004,\n                spreadRadius: Get.width * .004,\n                offset: Offset(0, -Get.width * .004),\n              )\n            : BoxShadow(color: Colors.transparent),\n      ],\n    );\n  }\n}\n\nclass RPSCustomPainter extends CustomPainter {\n  const RPSCustomPainter({@required this.bg, @required this.bgStrk, this.left, this.top, this.right, this.bottom});\n\n  final Color? bg;\n  final Color? bgStrk;\n  final int? left;\n  final int? top;\n  final int? right;\n  final int? bottom;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    Paint paint0 = Paint()\n      ..color = bg!\n      ..style = PaintingStyle.fill\n      ..strokeWidth = 1;\n\n    Path path0 = Path();\n\n    ////////////////////////////\n    path0.addRRect(\n        RRect.fromLTRBR(left!.toDouble(), top!.toDouble(), right!.toDouble(), bottom!.toDouble(), Radius.circular(0)));\n\n    canvas.drawPath(path0, paint0);\n  }\n\n  @override\n  bool shouldRepaint(covariant CustomPainter oldDelegate) {\n    return true;\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/Musaf/widget/DownloadMusaf.dart", "file_name": "DownloadMusaf.dart", "line": 16, "line_from": 16, "line_to": 138, "snippet": "  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n          width: Get.width,\n          padding: EdgeInsets.all(Get.width * 0.05),\n          // height: Get.width * 0.6,\n          decoration: BoxDecoration(\n              color: Theme.of(context).bottomSheetTheme.backgroundColor, borderRadius: BorderRadius.circular(10)),\n          child: Obx(() {\n            var progressVal = (progress.value * 100).floor();\n            return Wrap(\n              children: [\n                Text(\"Downloading\".tr + \" \" + title + \"...\\n\",\n                    style: TextStyle(fontSize: Get.width * .045, fontWeight: FontWeight.w500)),\n                SizedBox(height: Get.width * 0.13),\n                Center(\n                  child: Container(\n                    decoration: BoxDecoration(\n                        color: Theme.of(context).secondaryHeaderColor.withOpacity(.3),\n                        borderRadius: BorderRadius.circular(12)),\n                    height: Get.width * .03,\n                    width: Get.width,\n                    child: Align(\n                      alignment: Alignment.centerLeft,\n                      child: Container(\n                        decoration: BoxDecoration(\n                            color: Theme.of(context).secondaryHeaderColor, borderRadius: BorderRadius.circular(12)),\n                        width: Get.width * progress.value * .82,\n                      ),\n                    ),\n                  ),\n                ),\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: [\n                    Text(\"Downloading\".tr + \" \" + settings.banNum(progressVal) + \"%\",\n                        style: TextStyle(fontSize: Get.width * .038, fontWeight: FontWeight.w500)),\n                    Text(settings.banNum(progressVal) + \"/\" + settings.banNum(100),\n                        style: TextStyle(fontSize: Get.width * .038, fontWeight: FontWeight.w500)),\n                  ],\n                ),\n                SizedBox(height: Get.width * 0.1),\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.end,\n                  children: [\n                    // InkWell(\n                    //   onTap: () {\n                    //     Navigator.pop(context);\n                    //   },\n                    //   child: Text(\n                    //     \"Hide\".tr,\n                    //     style: TextStyle(\n                    //         fontWeight: FontWeight.w600,\n                    //         fontSize: Get.width * .04,\n                    //         color: Theme.of(context).secondaryHeaderColor),\n                    //     textAlign: TextAlign.right,\n                    //   ),\n                    // ).paddingOnly(right: Get.width * 0.05),\n                    InkWell(\n                      onTap: () {\n                        Navigator.pop(context);\n\n                        mushafC.downloadProgress.value = 0.0;\n\n                        mushafC.cancelled.value = true;\n                        CustomWidget.toast(\"You've cancelled the download\");\n                        // if (title == \"Hafezi Quran\".tr) {\n                        //   mushafC.hafeziProgress.value = 0.0;\n                        // } else if (title == \"Nurani Quran\".tr) {\n                        //   mushafC.nuraniprogress.value = 0.0;\n                        // }\n                      },\n                      child: Text(\n                        \"Cancel\".tr,\n                        style: TextStyle(\n                            fontWeight: FontWeight.w600,\n                            fontSize: Get.width * .04,\n                            color: Theme.of(context).secondaryHeaderColor),\n                        textAlign: TextAlign.right,\n                      ),\n                    ),\n                  ],\n                ),\n              ],\n            );\n          })),\n    );\n  }\n}\n\nclass Unziping extends StatelessWidget {\n  Unziping({this.title});\n  final title;\n\n  final mushafC = Get.put(MushafCotroller());\n  @override\n  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n          width: Get.width,\n          padding: EdgeInsets.all(Get.width * 0.05),\n          // height: Get.width * 0.6,\n          decoration: BoxDecoration(\n              color: Theme.of(context).bottomSheetTheme.backgroundColor, borderRadius: BorderRadius.circular(10)),\n          child: Wrap(\n            children: [\n              CircularProgressIndicator(\n                valueColor: AlwaysStoppedAnimation<Color>(Theme.of(context).secondaryHeaderColor),\n              ).paddingOnly(top: Get.width * 0.04),\n              SizedBox(width: Get.width * 0.07),\n              Text(\"Processing\".tr + \" \" + title + \"...\",\n                      style: TextStyle(fontSize: Get.width * .045, fontWeight: FontWeight.w500))\n                  .paddingOnly(top: Get.width * 0.04, bottom: Get.width * 0.04),\n\n              // SizedBox(height: Get.width * 0.1),\n              // SizedBox(height: Get.width * 0.13),\n            ],\n          )),\n    );\n  }\n}"}, {"structure_type": "function", "name": "_buildBottomSheet", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/Musaf/widget/mushafCotroller.dart", "file_name": "mushafCotroller.dart", "line": 239, "line_from": 239, "line_to": 271, "snippet": "        Widget _buildBottomSheet(\n          BuildContext context,\n          ScrollController scrollController,\n          double bottomSheetOffset,\n        ) {\n          return Material(\n            child: Container(\n              color: Theme.of(context).cardColor,\n              child: ListView(controller: scrollController, children: [\n                MusafBottomSheet(\n                  ayahNumber: selectGlyphs.first.ayahNumber,\n                  suraNumber: selectGlyphs.first.suraNumber,\n                )\n              ]),\n            ),\n          );\n        }\n\n        showFlexibleBottomSheet(\n          minHeight: 0,\n          initHeight: 0.6,\n          maxHeight: 1,\n          context: Get.context!,\n          builder: _buildBottomSheet,\n          anchors: [0, 0.5, 1],\n          isSafeArea: true,\n        );\n\n        // Get.bottomSheet();\n      } catch (e) {\n        clearHighlight();\n        debugPrint(e.toString());\n      }"}, {"structure_type": "class", "name": "FlutterSliderHandler", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/drawer/Musaf/widget/xlider.dart", "file_name": "xlider.dart", "line": 2144, "line_from": 2144, "line_to": 2469, "snippet": "class FlutterSliderHandler {\n  BoxDecoration? decoration;\n  BoxDecoration? foregroundDecoration;\n  Matrix4? transform;\n  Widget? child;\n  bool disabled;\n  double opacity;\n\n  FlutterSliderHandler(\n      {this.child,\n      this.decoration,\n      this.foregroundDecoration,\n      this.transform,\n      this.disabled = false,\n      this.opacity = 1});\n\n  @override\n  String toString() {\n    return child.toString() +\n        '-' +\n        disabled.toString() +\n        '-' +\n        decoration.toString() +\n        '-' +\n        foregroundDecoration.toString() +\n        '-' +\n        transform.toString() +\n        '-' +\n        opacity.toString();\n  }\n}\n\nclass FlutterSliderTooltip {\n  Widget Function(dynamic value)? custom;\n  String Function(String value)? format;\n  TextStyle? textStyle;\n  FlutterSliderTooltipBox? boxStyle;\n  Widget? leftPrefix;\n  Widget? leftSuffix;\n  Widget? rightPrefix;\n  Widget? rightSuffix;\n  bool? alwaysShowTooltip;\n  bool? disabled;\n  bool? disableAnimation;\n  FlutterSliderTooltipDirection? direction;\n  FlutterSliderTooltipPositionOffset? positionOffset;\n\n  FlutterSliderTooltip({\n    this.custom,\n    this.format,\n    this.textStyle,\n    this.boxStyle,\n    this.leftPrefix,\n    this.leftSuffix,\n    this.rightPrefix,\n    this.rightSuffix,\n    this.alwaysShowTooltip,\n    this.disableAnimation,\n    this.disabled,\n    this.direction,\n    this.positionOffset,\n  });\n\n  @override\n  String toString() {\n    return textStyle.toString() +\n        '-' +\n        boxStyle.toString() +\n        '-' +\n        leftPrefix.toString() +\n        '-' +\n        leftSuffix.toString() +\n        '-' +\n        rightPrefix.toString() +\n        '-' +\n        rightSuffix.toString() +\n        '-' +\n        alwaysShowTooltip.toString() +\n        '-' +\n        disabled.toString() +\n        '-' +\n        disableAnimation.toString() +\n        '-' +\n        direction.toString() +\n        '-' +\n        positionOffset.toString();\n  }\n}\n\nclass FlutterSliderTooltipPositionOffset {\n  double? top;\n  double? left;\n  double? right;\n  double? bottom;\n\n  FlutterSliderTooltipPositionOffset({this.top, this.left, this.right, this.bottom});\n\n  @override\n  String toString() {\n    return top.toString() + '-' + left.toString() + '-' + bottom.toString() + '-' + right.toString();\n  }\n}\n\nclass FlutterSliderTooltipBox {\n  final BoxDecoration? decoration;\n  final BoxDecoration? foregroundDecoration;\n  final Matrix4? transform;\n\n  const FlutterSliderTooltipBox({this.decoration, this.foregroundDecoration, this.transform});\n\n  @override\n  String toString() {\n    return decoration.toString() + '-' + foregroundDecoration.toString() + '-' + transform.toString();\n  }\n}\n\nclass FlutterSliderTrackBar {\n  final BoxDecoration? inactiveTrackBar;\n  final BoxDecoration? activeTrackBar;\n  final Color activeDisabledTrackBarColor;\n  final Color inactiveDisabledTrackBarColor;\n  final double activeTrackBarHeight;\n  final double inactiveTrackBarHeight;\n  final Widget? centralWidget;\n  final bool activeTrackBarDraggable;\n\n  const FlutterSliderTrackBar({\n    this.inactiveTrackBar,\n    this.activeTrackBar,\n    this.activeDisabledTrackBarColor = const Color(0xffb5b5b5),\n    this.inactiveDisabledTrackBarColor = const Color(0xffe5e5e5),\n    this.activeTrackBarHeight = 3.5,\n    this.inactiveTrackBarHeight = 3,\n    this.centralWidget,\n    this.activeTrackBarDraggable = true,\n  }) : assert(activeTrackBarHeight > 0 && inactiveTrackBarHeight > 0);\n\n  @override\n  String toString() {\n    return inactiveTrackBar.toString() +\n        '-' +\n        activeTrackBar.toString() +\n        '-' +\n        activeDisabledTrackBarColor.toString() +\n        '-' +\n        inactiveDisabledTrackBarColor.toString() +\n        '-' +\n        activeTrackBarHeight.toString() +\n        '-' +\n        inactiveTrackBarHeight.toString() +\n        '-' +\n        centralWidget.toString();\n  }\n}\n\nclass FlutterSliderIgnoreSteps {\n  final double? from;\n  final double? to;\n\n  FlutterSliderIgnoreSteps({this.from, this.to}) : assert(from != null && to != null && from <= to);\n\n  @override\n  String toString() {\n    return from.toString() + '-' + to.toString();\n  }\n}\n\nclass FlutterSliderFixedValue {\n  final int? percent;\n  final dynamic value;\n\n  FlutterSliderFixedValue({this.percent, this.value})\n      : assert(percent != null && value != null && percent >= 0 && percent <= 100);\n\n  @override\n  String toString() {\n    return percent.toString() + '-' + value.toString();\n  }\n}\n\nclass FlutterSliderHandlerAnimation {\n  final Curve curve;\n  final Curve? reverseCurve;\n  final Duration duration;\n  final double scale;\n\n  const FlutterSliderHandlerAnimation(\n      {this.curve = Curves.elasticOut,\n      this.reverseCurve,\n      this.duration = const Duration(milliseconds: 700),\n      this.scale = 1.3});\n\n  @override\n  String toString() {\n    return curve.toString() + '-' + reverseCurve.toString() + '-' + duration.toString() + '-' + scale.toString();\n  }\n}\n\nclass FlutterSliderHatchMark {\n  bool disabled;\n  double density;\n  double? linesDistanceFromTrackBar;\n  double? labelsDistanceFromTrackBar;\n  List<FlutterSliderHatchMarkLabel>? labels;\n  FlutterSliderSizedBox? smallLine;\n  FlutterSliderSizedBox? bigLine;\n  FlutterSliderSizedBox? labelBox;\n  FlutterSliderHatchMarkAlignment linesAlignment;\n  bool? displayLines;\n\n  FlutterSliderHatchMark(\n      {this.disabled = false,\n      this.density = 1,\n      this.linesDistanceFromTrackBar,\n      this.labelsDistanceFromTrackBar,\n      this.labels,\n      this.smallLine,\n      this.bigLine,\n      this.linesAlignment = FlutterSliderHatchMarkAlignment.right,\n      this.labelBox,\n      this.displayLines})\n      : assert(density > 0 && density <= 2);\n\n  @override\n  String toString() {\n    return disabled.toString() +\n        '-' +\n        density.toString() +\n        '-' +\n        linesDistanceFromTrackBar.toString() +\n        '-' +\n        labelsDistanceFromTrackBar.toString() +\n        '-' +\n        labels.toString() +\n        '-' +\n        smallLine.toString() +\n        '-' +\n        bigLine.toString() +\n        '-' +\n        labelBox.toString() +\n        '-' +\n        linesAlignment.toString() +\n        '-' +\n        displayLines.toString();\n  }\n}\n\nclass FlutterSliderHatchMarkLabel {\n  final double? percent;\n  final Widget? label;\n\n  FlutterSliderHatchMarkLabel({\n    this.percent,\n    this.label,\n  }) : assert((label == null && percent == null) || (label != null && percent != null && percent >= 0));\n\n  @override\n  String toString() {\n    return percent.toString() + '-' + label.toString();\n  }\n}\n\nclass FlutterSliderSizedBox {\n  final BoxDecoration? decoration;\n  final BoxDecoration? foregroundDecoration;\n  final Matrix4? transform;\n  final double width;\n  final double height;\n\n  const FlutterSliderSizedBox(\n      {this.decoration, this.foregroundDecoration, this.transform, required this.height, required this.width})\n      : assert(width > 0 && height > 0);\n\n  @override\n  String toString() {\n    return width.toString() +\n        '-' +\n        height.toString() +\n        '-' +\n        decoration.toString() +\n        '-' +\n        foregroundDecoration.toString() +\n        '-' +\n        transform.toString();\n  }\n}\n\nclass FlutterSliderStep {\n  final double step;\n  final bool isPercentRange;\n  final List<FlutterSliderRangeStep>? rangeList;\n\n  const FlutterSliderStep({\n    this.step = 1,\n    this.isPercentRange = true,\n    this.rangeList,\n  });\n\n  @override\n  String toString() {\n    return step.toString() + '-' + isPercentRange.toString() + '-' + rangeList.toString();\n  }\n}\n\nclass FlutterSliderRangeStep {\n  final double? from;\n  final double? to;\n  final double? step;\n\n  FlutterSliderRangeStep({\n    this.from,\n    this.to,\n    this.step,\n  }) : assert(from != null && to != null && step != null);\n\n  @override\n  String toString() {\n    return from.toString() + '-' + to.toString() + '-' + step.toString();\n  }\n}\n\nenum FlutterSliderTooltipDirection { top, left, right }\n\nenum FlutterSliderHatchMarkAlignment { left, right }\n"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/widget/doubleClose.dart", "file_name": "doubleClose.dart", "line": 54, "line_from": 54, "line_to": 103, "snippet": "  Widget build(BuildContext context) {\n    assert(() {\n      _ensureThatContextContainsScaffold();\n      return true;\n    }());\n\n    if (_isAndroid) {\n      return WillPopScope(\n        onWillPop: () => _handleWillPop(),\n        child: widget.child!,\n      );\n    } else {\n      return widget.child!;\n    }\n  }\n\n  /// Handles [WillPopScope.onWillPop].\n  _handleWillPop() async {\n    if (_isSnackBarVisible || _willHandlePopInternally) {\n      GetPlatform.isAndroid ? exit(0) : SystemNavigator.pop();\n    } else {\n      final scaffoldMessenger = ScaffoldMessenger.of(context);\n      scaffoldMessenger.hideCurrentSnackBar();\n      _closedCompleter = scaffoldMessenger\n          .showSnackBar(widget.snackBar!)\n          .closed\n          .wrapInCompleter();\n    }\n  }\n\n  /// Throws a [FlutterError] if this widget was not wrapped in a [Scaffold].\n  void _ensureThatContextContainsScaffold() {\n    if (Scaffold.maybeOf(context) == null) {\n      throw FlutterError(\n        '`DoubleBackToCloseApp` must be wrapped in a `Scaffold`.',\n      );\n    }\n  }\n}\n\nextension<T> on Future<T> {\n  /// Returns a [Completer] that allows checking for this [Future]'s completion.\n  ///\n  /// See https://stackoverflow.com/a/69731240/6696558.\n  Completer<T> wrapInCompleter() {\n    final completer = Completer<T>();\n    then(completer.complete).catchError(completer.completeError);\n    return completer;\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/widget/MidBox.dart", "file_name": "MidBox.dart", "line": 15, "line_from": 15, "line_to": 65, "snippet": "  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n        width: Get.width * .05,\n        child: Column(\n          children: [\n            SvgPicture.asset(\n              icon,\n              color: Colors.white,\n              height: Get.width * 0.07,\n              width: Get.width * 0.07,\n            ),\n            SizedBox(height: Get.width * .025),\n            Text(\n              text,\n              style: TextStyle(fontSize: Get.width * 0.03, color: Colors.white),\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass IndexAvatar extends StatelessWidget {\n  IndexAvatar({@required this.index});\n\n  final index;\n\n  @override\n  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    var languageEn = HiveData().getData(Keys.languageNow) == 1;\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: CircleAvatar(\n        backgroundColor: theme == 6\n            ? Color(0xff4D6C91).withOpacity(0.2)\n            : Theme.of(context).secondaryHeaderColor.withOpacity(0.1),\n        child: Text(\n          settings.banNum((index + 1)),\n          style: TextStyle(\n              fontSize: languageEn ? Get.width * 0.035 : Get.width * 0.04,\n              fontWeight: languageEn ? FontWeight.w600 : FontWeight.normal,\n              color: theme == 6 ? Colors.white : Colors.black),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/widget/Topbar.dart", "file_name": "Topbar.dart", "line": 33, "line_from": 33, "line_to": 285, "snippet": "  Widget build(BuildContext context) {\n    // var languageEn = HiveData().getData(Keys.languageNow) == 1;\n    var theme = themeController.currentTheme.value;\n    var searchinapp = Get.put(SearchInAPP());\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n        height: Get.height * .114,\n        width: Get.width,\n        child: Padding(\n          padding: EdgeInsets.only(\n            top: Get.height * 0.04,\n            left: Get.width * 0.047,\n            right: Get.width * 0.047,\n          ),\n          child: Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: [\n              InkWell(\n                borderRadius: BorderRadius.circular(100),\n                onTap: () {\n                  widget.globalKey!.currentState!.openDrawer();\n                },\n                child: Container(\n                  height: Get.width * 0.05,\n                  width: Get.width * 0.05,\n                  child: SvgPicture.asset(\n                    \"assets/icons/menu.svg\",\n                    height: Get.width * 0.04,\n                    width: Get.width * 0.04,\n                    color: theme == 0 ? Colors.black : Colors.white,\n                  ),\n                ),\n              ),\n              TitleBar(\n                  import: widget.export ? true : false,\n                  text: widget.text,\n                  fontsize: languageEn ? Get.width * 0.05 : Get.width * 0.055),\n              if (widget.export)\n                InkWell(\n                    splashColor: Colors.transparent,\n                    highlightColor: Colors.transparent,\n                    onTap: () {\n                      Get.dialog(CustomWidget.importExport());\n                    },\n                    child: SvgPicture.asset(\n                      \"assets/icons/exportImport.svg\",\n                      height: Get.width * 0.04,\n                      width: Get.width * 0.04,\n                      color: theme == 0 ? Colors.black : Colors.white,\n                    )),\n              if (widget.googleSignin)\n                Obx(() => !settings.isLogedIn.value\n                    ? InkWell(\n                        splashColor: Colors.transparent,\n                        highlightColor: Colors.transparent,\n                        onTap: () {\n                          FirebaseDB()\n                              .signIn()\n                              .then((value) async {\n                                settings.isLogedIn.value = true;\n                                await Get.find<PlanController>().getBackup();\n                                await Get.put(CollectionController()).getBackup();\n                              })\n                              .then((value) => Get.find<PlanController>().update())\n                              .then((value) => CustomWidget.toast(\"Logged In\".tr));\n                        },\n                        child: Icon(Icons.login, color: theme == 0 ? Colors.black : Colors.white))\n                    : SizedBox.shrink()),\n              if (!widget.googleSignin)\n                InkWell(\n                  onTap: () {\n                    var trans = Get.put(TranslationController());\n                    var tafsir = Get.put(TafsirController());\n\n                    var d =\n                        tafsir.downloadTranslationList.indexWhere((e) => e.fileName == trans.nameObj.entries.first.key);\n                    var finalName = tafsir.downloadTranslationList[d].name\n                        .substring(tafsir.downloadTranslationList[d].name.indexOf('- ') + 2);\n                    searchinapp.transSearchList.clear();\n\n                    if (trans.nameObj.entries.first.key != null) {\n                      searchinapp.transSearchList.add(trans.nameObj.entries.first.key);\n                    } else {\n                      searchinapp.transSearchList.add(HiveData().getData(Keys.languageNow) == 0\n                          ? trans.nameObj.containsKey(\"bn_bayaan\")\n                              ? \"bn_bayaan\"\n                              : trans.nameObj.entries.first.key\n                          : trans.nameObj.containsKey(\"en_sahih\")\n                              ? \"en_sahih\"\n                              : trans.nameObj.entries.first.key);\n                    }\n                    if (trans.nameObj.entries.first.key != null) {\n                      searchinapp.selectedTranslation.value = finalName;\n                    } else {\n                      searchinapp.selectedTranslation.value = HiveData().getData(Keys.languageNow) == 0\n                          ? trans.nameObj.containsKey(\"bn_bayaan\")\n                              ? \"Bayaan Foundation\"\n                              : finalName\n                          : trans.nameObj.containsKey(\"en_sahih\")\n                              ? \"Sahih International\"\n                              : finalName;\n                    }\n\n                    searchinapp.tafsirSearchList.value;\n                    try {\n                      if (tafsir.nameObj.keys.first != null) {\n                        searchinapp.tafsirSearchList.value = tafsir.nameObj.keys.first;\n                      } else {\n                        searchinapp.tafsirService.value = HiveData().getData(Keys.languageNow) == 0 ? 0 : 1;\n                        searchinapp.tafsirSearchList.value =\n                            HiveData().getData(Keys.languageNow) == 0 ? \"bn_tafsir_zakariya\" : \"en_kathir\";\n                      }\n                    } catch (e) {\n                      searchinapp.tafsirService.value = HiveData().getData(Keys.languageNow) == 0 ? 0 : 1;\n                      searchinapp.tafsirSearchList.value =\n                          HiveData().getData(Keys.languageNow) == 0 ? \"bn_tafsir_zakariya\" : \"en_kathir\";\n                    }\n\n                    try {\n                      if (tafsir.nameObj.entries.first.key != null) {\n                        var index =\n                            tafsir.downloadTafsirList.indexWhere((e) => e.fileName == tafsir.nameObj.entries.first.key);\n                        var finalName = tafsir.downloadTafsirList[index].name;\n                        searchinapp.selectedTafsir.value = finalName;\n\n                        searchinapp.tafsirService.value = index;\n                      } else {\n                        searchinapp.selectedTafsir.value =\n                            HiveData().getData(Keys.languageNow) == 0 ? \"Tafsir Abu Bakar Zakaria\" : \"Ibn Kathir\";\n\n                        searchinapp.tafsirService.value = HiveData().getData(Keys.languageNow) == 0 ? 11 : 14;\n                      }\n                    } catch (e) {\n                      searchinapp.selectedTafsir.value =\n                          HiveData().getData(Keys.languageNow) == 0 ? \"Tafsir Abu Bakar Zakaria\" : \"Ibn Kathir\";\n\n                      searchinapp.tafsirService.value = HiveData().getData(Keys.languageNow) == 0 ? 11 : 14;\n                    }\n\n                    try {\n                      if (tafsir.nameObj.entries.first.key != null) {\n                        searchinapp.tafsirSearchList.value = tafsir.nameObj.entries.first.key;\n                      } else {\n                        searchinapp.tafsirSearchList.value =\n                            HiveData().getData(Keys.languageNow) == 0 ? 'bn_tafsir_zakariya' : 'en_kathir';\n                      }\n                    } catch (e) {\n                      searchinapp.tafsirSearchList.value =\n                          HiveData().getData(Keys.languageNow) == 0 ? 'bn_tafsir_zakariya' : 'en_kathir';\n                    }\n\n                    showAnimatedDialog(\n                      context: context,\n                      barrierDismissible: true,\n                      builder: (BuildContext context) {\n                        return SearchDialog();\n                      },\n                      animationType: DialogTransitionType.slideFromTop,\n                      curve: Curves.easeInOut,\n                      duration: Duration(milliseconds: 500),\n                    );\n                  },\n                  child: SvgPicture.asset(\n                    \"assets/icons/search.svg\",\n                    height: Get.width * 0.045,\n                    width: Get.width * 0.045,\n                    color: theme == 0 ? Colors.black : Colors.white,\n                  ),\n                ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass TitleBar extends StatelessWidget {\n  const TitleBar({\n    @required this.text,\n    @required this.fontsize,\n    this.picker = false,\n    this.size,\n    this.onTap,\n    this.import = false,\n  });\n\n  final text;\n  final size;\n  final bool import;\n\n  final onTap;\n  final fontsize;\n  final picker;\n\n  @override\n  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n        padding: EdgeInsets.only(\n            left: import\n                ? Get.width * .1\n                : size != null\n                    ? Get.width * .1\n                    : 0),\n        width: size != null ? size : Get.width * .7,\n        child: Wrap(\n          alignment: WrapAlignment.center,\n          runAlignment: WrapAlignment.center,\n          crossAxisAlignment: WrapCrossAlignment.center,\n\n          // mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            InkWell(\n              splashColor: Colors.transparent,\n              highlightColor: Colors.transparent,\n              onTap: onTap,\n              child: Text(\n                text,\n                overflow: TextOverflow.ellipsis,\n                style: TextStyle(\n                  shadows: <Shadow>[\n                    Shadow(\n                      offset: Offset(0.0, 0.0),\n                      blurRadius: 1,\n                      color: Colors.white,\n                    ),\n                  ],\n                  fontWeight: FontWeight.w600,\n                  color: Theme.of(context).primaryColorLight,\n                  fontSize: fontsize,\n                ),\n              ).paddingOnly(left: picker ? Get.width * .025 : 0),\n            ),\n            picker\n                ? InkWell(\n                    splashColor: Colors.transparent,\n                    highlightColor: Colors.transparent,\n                    onTap: onTap,\n                    child: SvgPicture.asset(\n                      'assets/icons/arrow_drop_down.svg',\n                      color: Theme.of(context).primaryColorLight,\n                      height: Get.width * .05,\n                    ))\n                : SizedBox.shrink()\n          ],\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/widget/Topbar.dart", "file_name": "Topbar.dart", "line": 294, "line_from": 294, "line_to": 409, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n        height: Get.height * .1,\n        width: Get.width,\n        child: Padding(\n          padding: EdgeInsets.only(\n              top: Get.height * 0.05, left: Get.width * 0.04, right: Get.width * 0.04, bottom: Get.width * 0.02),\n          child: Row(\n            mainAxisAlignment: MainAxisAlignment.start,\n            children: [\n              InkWell(\n                splashColor: Colors.transparent,\n                highlightColor: Colors.transparent,\n                borderRadius: BorderRadius.circular(100),\n                onTap: () => Get.back(),\n                child: Padding(\n                  padding: EdgeInsets.symmetric(horizontal: Get.width * .03),\n                  child: SvgPicture.asset(\n                    \"assets/icons/back.svg\",\n                    height: Get.width * 0.035,\n                    width: Get.width * 0.035,\n                    color: theme == 0 ? Color(0xFF535353) : Colors.white,\n                  ),\n                ),\n              ),\n              SizedBox(width: Get.width * 0.05),\n              Text(\n                text,\n                style: TextStyle(\n                  shadows: <Shadow>[\n                    Shadow(\n                      offset: Offset(0.0, 0.0),\n                      blurRadius: 1,\n                      color: Colors.white,\n                    ),\n                  ],\n                  fontWeight: FontWeight.w600,\n                  color: Theme.of(context).primaryColorLight,\n                  fontSize: fontsize,\n                ),\n              )\n              // InkWell(\n              //   onTap: () {},\n              //   child: Padding(\n              //     padding: const EdgeInsets.only(top: 8, bottom: 8, right: 0),\n              //     child: SvgPicture.asset(\n              //       'assets/icons/tune.svg',\n              //       height: Get.width * 0.070,\n              //       color: Theme.of(context).iconTheme.color,\n              //     ),\n              //   ),\n              // )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass DownloadBar extends StatelessWidget {\n  DownloadBar({@required this.title});\n\n  final title;\n\n  final settings = Get.put(SettingsController());\n  @override\n  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Obx(() => Container(\n            height: settings.appBarRadius.value ? Get.height * .1 : Get.height * .1,\n            width: Get.width,\n            child: Padding(\n              padding: EdgeInsets.only(\n                top: Get.height * 0.055,\n                left: Get.width * 0.04,\n                right: Get.width * 0.04,\n              ),\n              child: Row(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                mainAxisAlignment: MainAxisAlignment.start,\n                children: [\n                  InkWell(\n                    borderRadius: BorderRadius.circular(100),\n                    onTap: () => Get.back(),\n                    child: Padding(\n                      padding: const EdgeInsets.all(8.0),\n                      child: SvgPicture.asset(\n                        \"assets/icons/back.svg\",\n                        height: Get.width * 0.035,\n                        width: Get.width * 0.035,\n                        color: theme == 0 ? Color(0xFF535353) : Colors.white,\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: Get.width * 0.05),\n                  Text(title,\n                      style: TextStyle(\n                        color: Theme.of(context).primaryColorLight,\n                        fontSize: Get.width * 0.044,\n                        fontWeight: FontWeight.w600,\n                      )).paddingOnly(left: Get.width * 0.04),\n                ],\n              ),\n            ),\n          )),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Drawer_item", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/Drawer_item/Support_Us.dart", "file_name": "Support_Us.dart", "line": 27, "line_from": 27, "line_to": 165, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      backgroundColor: Theme.of(context).primaryColor,\n      body: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Directionality(\n          textDirection: TextDirection.ltr,\n          child: Obx(\n            () => Column(\n              children: [\n                Topbar(\n                    text: languageEn ? 'Support Us' : 'Support Us'.tr,\n                    fontsize: Get.width * 0.05),\n                Container(\n                  height: Get.height * .9,\n                  width: Get.width,\n                  padding: EdgeInsets.only(\n                      top: theme == 0 && settings.cardView.value\n                          ? Get.width * .012\n                          : 0),\n                  decoration: pageDecoration(context),\n                  child: ClipRRect(\n                    borderRadius: settings.appBarRadius.value\n                        ? BorderRadius.only(\n                            topLeft: Radius.circular(Get.width * .07),\n                            topRight: Radius.circular(Get.width * .07))\n                        : BorderRadius.zero,\n                    child: SingleChildScrollView(\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.start,\n                        children: [\n                          SizedBox(\n                              height: theme == 0 && settings.cardView.value\n                                  ? Get.width * .01\n                                  : Get.width * .02),\n\n                          ///////////////////////////////////////////////////////////////////////////\n                          ////////////////////          Main Card               /////////////////////\n                          ///////////////////////////////////////////////////////////////////////////\n\n                          Container(\n                                  padding: EdgeInsets.symmetric(\n                                      vertical: Get.width * 0.04,\n                                      horizontal: Get.width * .02),\n                                  decoration: cardRadius(context),\n                                  child: Column(\n                                    children: [\n                                      Html(\n                                          data: settings.languageSelectIndex\n                                                      .value ==\n                                                  0\n                                              ? controller\n                                                  .drawerItemList[1].textBn\n                                              : controller\n                                                  .drawerItemList[1].textEn,\n                                          style: {\n                                            \"body\": Style(\n                                              lineHeight:\n                                                  LineHeight.number(1.2),\n                                              fontFamily: 'Kalpurush',\n                                              color: theme == 6\n                                                  ? Color(0xFFC2D7EF)\n                                                  : Colors.black,\n                                              fontSize:\n                                                  FontSize(Get.width * 0.045),\n                                            ),\n                                          }),\n                                      InkWell(\n                                        onTap: () => _launchfbURL(),\n                                        child: Container(\n                                                width: Get.width,\n                                                padding: EdgeInsets.all(\n                                                    Get.width * 0.03),\n                                                decoration: BoxDecoration(\n                                                    color: Theme.of(context)\n                                                        .secondaryHeaderColor,\n                                                    borderRadius:\n                                                        BorderRadius.circular(\n                                                            Get.width * .07)),\n                                                child: Text(\n                                                  'Contact Us'.tr,\n                                                  textAlign: TextAlign.center,\n                                                  style: TextStyle(\n                                                    fontSize: Get.width * .04,\n                                                    color: Colors.white,\n                                                    fontWeight: FontWeight.w600,\n                                                  ),\n                                                ))\n                                            .paddingSymmetric(\n                                                horizontal:\n                                                    settings.cardView.value\n                                                        ? Get.width * .02\n                                                        : 0),\n                                      ),\n                                    ],\n                                  ))\n                              .paddingSymmetric(\n                                  vertical: settings.cardView.value\n                                      ? Get.width * .02\n                                      : 0),\n\n                          SizedBox(height: Get.width * .015),\n                        ],\n                      ).paddingOnly(\n                        left: settings.cardView.value\n                            ? Get.width * 0.04\n                            : Get.width * 0.02,\n                        right: settings.cardView.value\n                            ? Get.width * 0.04\n                            : Get.width * 0.01,\n                      ),\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n_launchfbURL() async {\n  const fbProtocolUrl = \"fb-messenger://user-thread/436269339900162\";\n  const fallbackUrl = \"https://www.facebook.com/436269339900162\";\n  try {\n    bool launched = await launchUrl(Uri.parse(fbProtocolUrl));\n\n    if (!launched) {\n      await launchUrl(Uri.parse(fallbackUrl));\n    }\n  } catch (e) {\n    await launchUrl(Uri.parse(fallbackUrl));\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Drawer_item", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/Drawer_item/Support_Us.dart", "file_name": "Support_Us.dart", "line": 182, "line_from": 182, "line_to": 218, "snippet": "  Widget build(BuildContext context) {\n    return Text(\n      title,\n      style: TextStyle(fontSize: Get.width * .035),\n    ).paddingOnly(\n      bottom: Get.width * .01,\n      top: Get.width * .04,\n    );\n  }\n}\n\nclass CustomBtn extends StatelessWidget {\n  const CustomBtn({\n    @required this.title,\n  });\n\n  final title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n        width: Get.width,\n        padding: EdgeInsets.all(Get.width * 0.03),\n        decoration: BoxDecoration(\n            color: Theme.of(context).secondaryHeaderColor,\n            borderRadius: BorderRadius.circular(Get.width * .07)),\n        child: Text(\n          title,\n          textAlign: TextAlign.center,\n          style: TextStyle(\n            fontSize: Get.width * .04,\n            color: Colors.white,\n            fontWeight: FontWeight.w600,\n          ),\n        ));\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Drawer_item", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/Drawer_item/Our_projects.dart", "file_name": "Our_projects.dart", "line": 24, "line_from": 24, "line_to": 198, "snippet": "  Widget build(BuildContext context) {\n    final theme = themeController.currentTheme.value;\n    final languageEn = HiveData().getData(Keys.languageNow) == 'en';\n\n    return Scaffold(\n        resizeToAvoidBottomInset: false,\n        backgroundColor: Theme.of(context).primaryColor,\n        body: MediaQuery(\n          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n          child: Obx(\n            () => Column(\n              children: [\n                Topbar(text: 'Our Projects'.tr, fontsize: Get.width * 0.05),\n                Container(\n                  height: Get.height * .9,\n                  width: Get.width,\n                  padding: EdgeInsets.only(top: theme == 0 && settings.cardView.value ? Get.width * .012 : 0),\n                  decoration: pageDecoration(context),\n                  child: ClipRRect(\n                    borderRadius: settings.appBarRadius.value\n                        ? BorderRadius.only(\n                            topLeft: Radius.circular(Get.width * .07), topRight: Radius.circular(Get.width * .07))\n                        : BorderRadius.zero,\n                    child: SingleChildScrollView(\n                      child: Obx(\n                        () => Column(\n                          mainAxisAlignment: MainAxisAlignment.start,\n                          children: [\n                            SizedBox(height: theme == 0 && settings.cardView.value ? Get.width * .01 : Get.width * .02),\n\n                            ///////////////////////////////////////////////////////////////////////////\n                            ////////////////////          Main Card               /////////////////////\n                            ///////////////////////////////////////////////////////////////////////////\n\n                            AppContainer(\n                              title: settings.languageSelectIndex.value == 0\n                                  ? \"\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8\" + ' (Android)'\n                                  : 'Al Hadith' + ' (Android)',\n                              icon: 'hadislogo',\n                              description: settings.languageSelectIndex.value == 0\n                                  ? \"\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2\u09cd\u09b2\u09be\u09b9\u09cd\u200c\u09b0 \u09b0\u09be\u09b8\u09c1\u09b2 (\ufdfa)-\u098f\u09b0 \u09b9\u09be\u09a6\u09bf\u09b8 \u09b8\u09ae\u09c2\u09b9\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09b6\u09be\u09b2 \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8\u0964 \u09ac\u09bf\u09b6\u09c1\u09a6\u09cd\u09a7 \u09b9\u09be\u09a6\u09bf\u09b8 \u0997\u09cd\u09b0\u09a8\u09cd\u09a5\u0997\u09c1\u09b2\u09cb \u09b8\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u09ea\u09ef,\u09e6\u09e6\u09e6 \u098f\u09b0\u0993 \u09ac\u09c7\u09b6\u09bf \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u09b8\u09ae\u09be\u09b9\u09be\u09b0\u0964 \"\n                                  : \"Al Hadith is an Great Collection of Hadith of Prophet Muhammad (\ufdfa). The app contains 49000+ hadith from Most Accepted and Authentic Hadith books.\",\n                              byTap: () => _launchfbURL(\n                                  'https://play.google.com/store/apps/details?id=com.ihadis.ihadis',\n                                  'https://play.google.com/store/apps/details?id=com.ihadis.ihadis'),\n                              buttonText: languageEn ? 'Download Now' : 'Download'.tr,\n                              buttonIcon: true,\n                            ),\n                            AppContainer(\n                              title: settings.languageSelectIndex.value == 0\n                                  ? \"\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8\" + ' (iOS)'\n                                  : 'Al Hadith' + ' (iOS)',\n                              icon: 'hadislogo',\n                              description: settings.languageSelectIndex.value == 0\n                                  ? \"\u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2\u09cd\u09b2\u09be\u09b9\u09cd\u200c\u09b0 \u09b0\u09be\u09b8\u09c1\u09b2 (\ufdfa)-\u098f\u09b0 \u09b9\u09be\u09a6\u09bf\u09b8 \u09b8\u09ae\u09c2\u09b9\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09b6\u09be\u09b2 \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8\u0964 \u0995\u09c1\u09a4\u09c1\u09ac\u09c7 \u09b8\u09bf\u09a4\u09cd\u09a4\u09be\u09b9 \u09ac\u09be \u09b8\u09bf\u09b9\u09be\u09b9 \u09b8\u09bf\u09a4\u09cd\u09a4\u09be\u09b9 (\u099b\u09df\u099f\u09bf \u09ac\u09bf\u09b6\u09c1\u09a6\u09cd\u09a7 \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u0997\u09cd\u09b0\u09a8\u09cd\u09a5) \u09b8\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u09ea\u09ef,\u09e6\u09e6\u09e6 \u098f\u09b0\u0993 \u09ac\u09c7\u09b6\u09bf \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u09b8\u09ae\u09be\u09b9\u09be\u09b0\u0964 \"\n                                  : \"Al Hadith is the collection of Hadith of Prophet Muhammad (Peace Be Upon Him). The app contains 49000+ hadith from most accepted and authentic Hadith books including six hadith books also known as Kutub al-Sittah or Sihah Sitta (meaning 'The Authentic Six').\",\n                              byTap: () => _launchfbURL('https://itunes.apple.com/us/app/al-hadith/id1238182914',\n                                  'https://itunes.apple.com/us/app/al-hadith/id1238182914'),\n                              buttonText: languageEn ? 'Download Now' : 'Download'.tr,\n                              buttonIcon: true,\n                            ),\n                            AppContainer(\n                              title: settings.languageSelectIndex.value == 0\n                                  ? \"\u0995\u09c1\u09b0\u0986\u09a8 \u09ae\u09be\u099c\u09c0\u09a6 (Tafsir & By Words)\" + \" (Android)\"\n                                  : \"Quran Mazid (Tafsir & By Words)\" + \" (Android)\",\n                              icon: 'quran_android',\n                              description: settings.languageSelectIndex.value == 0\n                                  ? \"\u0995\u09c1\u09b0\u0986\u09a8 \u09ae\u09be\u099c\u09c0\u09a6 (\u09ac\u09be\u0982\u09b2\u09be) \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09b8\u09b9 \u09b8\u09be\u099c\u09bf\u09df\u09c7\u099b\u09bf \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u0964 \u09b9\u09be\u09ab\u09c7\u099c\u09c0 \u0995\u09cb\u09b0\u0986\u09a8 \u09b6\u09b0\u09c0\u09ab, \u09a8\u09c2\u09b0\u09be\u09a8\u09c0 \u0995\u09cb\u09b0\u0986\u09a8 \u09b6\u09b0\u09c0\u09ab \u098f\u09ac\u0982  \u09b8\u09b9\u099c \u09b8\u09b0\u09b2 \u09ac\u09be\u0982\u09b2\u09be \u0985\u09a8\u09c1\u09ac\u09be\u09a6 \u098f\u0987 \u09b8\u09ac \u0995\u09bf\u099b\u09c1 \u098f\u0995\u09b8\u09be\u09a5\u09c7\u0987 \u09aa\u09be\u099a\u09cd\u099b\u09c7 \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7\u0964 \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u0985\u09cd\u09af\u09be\u09a1 \u09ab\u09cd\u09b0\u09bf\u0964  \u09af\u09c7 \u0995\u09cb\u09a8 \u0986\u09df\u09be\u09a4 \u098f \u0995\u09cd\u09b2\u09bf\u0995 \u0995\u09b0\u09b2\u09c7 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09a6\u09c7\u0996\u09be\u09b0 \u0985\u09aa\u09b6\u09a8 \u0986\u09b8\u09ac\u09c7\u0964 \u0985\u0996\u09be\u09a8\u09c7 \u0995\u09cd\u09b2\u09bf\u0995 \u0995\u09b0\u09c7 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09a6\u09c7\u0996\u09be \u09af\u09be\u09ac\u09c7\u0964 \u09a1\u09cd\u09b0\u09aa\u09a1\u09be\u0989\u09a8 \u09a5\u09c7\u0995\u09c7 \u0995\u09cb\u09a8 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09a4\u09be \u09b8\u09bf\u09b2\u09c7\u0995\u09cd\u099f \u0995\u09b0\u09be \u09af\u09be\u09ac\u09c7\u0964\"\n                                  : \"Quran Mazid is one of the most Popular Quran App with 34000+ Reviews and 4.8/5 Ratings. In Our app will get almost all important features like Multiple Translations, Multiple Tafsirs, Word By Word with Audio, Quran Recitation, Quran Index etc.\",\n                              byTap: () => _launchfbURL(\n                                  'https://play.google.com/store/apps/details?id=com.ihadis.quran',\n                                  'https://play.google.com/store/apps/details?id=com.ihadis.quran'),\n                              buttonText: languageEn ? 'Download Now' : 'Download'.tr,\n                              buttonIcon: true,\n                            ),\n                            AppContainer(\n                              title: settings.languageSelectIndex.value == 0\n                                  ? \"\u0995\u09c1\u09b0\u0986\u09a8 \u09ae\u09be\u099c\u09c0\u09a6 (Tafsir & By Words)\" + \" (iOS)\"\n                                  : \"Quran Mazid (Tafsir & By Words)\" + \" (iOS)\",\n                              icon: 'quran_ios',\n                              description: settings.languageSelectIndex.value == 0\n                                  ? \"\u09a4\u09be\u09ab\u09b8\u09bf\u09b0 \u098f\u09ac\u0982 \u09ac\u09be\u0982\u09b2\u09be \u0989\u099a\u09cd\u099a\u09be\u09b0\u09a3 \u0993 \u0985\u09b0\u09cd\u09a5 \u09b8\u09b9 \u09aa\u09b0\u09bf\u09b7\u09cd\u0995\u09be\u09b0 \u0986\u09b0\u09ac\u09bf \u09ab\u09a8\u09cd\u099f\u09c7 \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u0986\u09b2 \u0995\u09c1\u09b0\u0986\u09a8 \u0985\u09cd\u09af\u09be\u09aa\u09b8\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09aa\u09a8\u09bf \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u09aa\u09cd\u09b0\u09a4\u09bf \u0986\u09df\u09be\u09a4\u09c7\u09b0 \u09ac\u09bf\u09b6\u09cd\u09ac\u0996\u09cd\u09af\u09be\u09a4 \u0995\u09cd\u09ac\u09be\u09b0\u09c0\u09a6\u09c7\u09b0 \u09a4\u09c7\u09b2\u09be\u0993\u09df\u09be\u09a4\u09c7\u09b0 \u0985\u09a1\u09bf\u0993 \u09b8\u09b9 \u09b0\u09bf\u09aa\u09bf\u099f \u0985\u09aa\u09b6\u09a8\u0964 \u09ac\u09be\u0982\u09b2\u09be \u0993 \u0987\u0982\u09b0\u09c7\u099c\u09c0\u09a4\u09c7 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u0987\u09ac\u09a8\u09c7 \u0995\u09be\u099b\u09bf\u09b0, \u09ac\u09be\u0982\u09b2\u09be \u0993 \u0987\u0982\u09b2\u09bf\u09b6\u09c7\u09b0 \u09b6\u09ac\u09cd\u09a6\u09be\u09b0\u09cd\u09a5 \u09b8\u09b9 \u09b8\u09b9\u099c \u09b8\u09b0\u09b2 \u09ac\u09be\u0982\u09b2\u09be \u0985\u09a8\u09c1\u09ac\u09be\u09a6\u0964 \u0986\u09b0\u0993 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2-\u0995\u09c1\u09b0-\u0986\u09a8\u09c7\u09b0 \u09a8\u09bf\u09b0\u09cd\u0998\u09a8\u09cd\u099f, \u09ac\u09c1\u0995\u09ae\u09be\u09b0\u09cd\u0995\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09a7\u09be, \u09b6\u0995\u09cd\u09a4\u09bf\u09b6\u09be\u09b2\u09c0 \u09b8\u09be\u09b0\u09cd\u099a \u0985\u09aa\u09b6\u09a8 \u09b8\u09b9 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0985\u09a8\u09c1\u09ac\u09be\u09a6 \u0993 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u09ad\u09be\u09b7\u09be\u09df \u09a4\u09be\u09ab\u09b8\u09c0\u09b0\u0964 \u098f\u0995\u09be\u09a7\u09bf\u0995 \u09a5\u09bf\u09ae\u09b8\u09b9 \u0985\u09a8\u09c7\u0995\u0997\u09c1\u09b2\u09cb \u09ab\u09a8\u09cd\u099f\u0964\"\n                                  : \"Alhamdulillah. Quran Mazid is a Quran study tool for all. It provides Verse by Verse Audio Playback with repeat functions,Bangla and English Tafsir Ibn Kathir, Bangla Word by Word Analysis and Translations, Index of Quran, Custom Bookmarks, Powerful Search, Several Translations & Tafsirs in Various Languages, Multiple Themes and Fonts and much more.\",\n                              byTap: () => _launchfbURL('https://apps.apple.com/us/app/quran-mazid/id1324615850',\n                                  'https://apps.apple.com/us/app/quran-mazid/id1324615850'),\n                              buttonText: languageEn ? 'Download Now' : 'Download'.tr,\n                              buttonIcon: true,\n                            ),\n                            AppContainer(\n                              title: settings.languageSelectIndex.value == 0\n                                  ? '\u09a6\u09cb\u09df\u09be \u0993 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9'.tr + ' (Android)'\n                                  : 'Dua & Ruqia'.tr + ' (Android)',\n                              icon: 'dua_icon',\n                              description: settings.languageSelectIndex.value == 0\n                                  ? \"\u09a6\u09cb\u09df\u09be \u0993 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u0995\u09c1\u09b0\u0986\u09a8 \u098f\u09ac\u0982 \u09b9\u09be\u09a6\u09bf\u09b8 \u09a5\u09c7\u0995\u09c7 \u09b8\u0982\u0995\u09b2\u09bf\u09a4 \u09b8\u09b9\u09c0\u09b9 \u09a6\u09cb\u09af\u09bc\u09be \u0993 \u09af\u09bf\u0995\u09bf\u09b0\u09c7\u09b0 \u09b8\u09ac\u099a\u09c7\u09df\u09c7 \u09ac\u09dc \u09b8\u0982\u0997\u09cd\u09b0\u09b9\u0964 \u098f\u09a4\u09c7 \u09ae\u09cb\u099f \u09ea\u09e7 \u099f\u09bf \u0995\u09cd\u09af\u09be\u099f\u09be\u0997\u09b0\u09bf\u09a4\u09c7 \u09ee\u09ef\u09e6+ \u099f\u09bf \u09a6\u09cb\u09df\u09be \u0993 \u09af\u09bf\u0995\u09bf\u09b0 \u09aa\u09be\u09ac\u09c7\u09a8\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09aa\u09cd\u09b0\u09a7\u09be\u09a8\u09a4 \u0995\u09c1\u09b0\u0986\u09a8 \u0993 \u09b8\u09b9\u09bf\u09b9 \u09b9\u09be\u09a6\u09bf\u09b8 \u09ad\u09bf\u09a4\u09cd\u09a4\u09bf\u0995 \u09a6\u09cb\u09df\u09be\u0997\u09c1\u09b2\u09cb \u0986\u09a8\u09be \u09b9\u09df\u09c7\u099b\u09c7\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7\u09b0 \u0985\u09a8\u09cd\u09af\u09a4\u09ae \u09ac\u09dc \u09ab\u09bf\u099a\u09be\u09b0 \u09b9\u099a\u09cd\u099b\u09c7 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 (\u0987\u09b8\u09b2\u09be\u09ae\u09bf\u0995 \u099d\u09be\u09dc-\u09ab\u09c1\u0981\u0995) \u09b8\u09c7\u0995\u09b6\u09a8\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09aa\u09a8\u09bf \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09ae\u09bf\u09a1\u09bf\u09df\u09be \u09aa\u09cd\u09b2\u09c7\u09df\u09be\u09b0 \u098f\u09b0 \u09aa\u09be\u09b6\u09be\u09aa\u09be\u09b6\u09bf \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09bf\u09a4 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0997\u09c1\u09b0\u09c1\u09a4\u09cd\u09ac\u09aa\u09c2\u09b0\u09cd\u09a3 \u09a4\u09a5\u09cd\u09af \u09af\u09c7\u09ae\u09a8 \u09af\u09be\u09a6\u09c1, \u09ac\u09a6\u09a8\u099c\u09b0\u09c7\u09b0 \u099a\u09bf\u0995\u09bf\u09ce\u09b8\u09be \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09c7 \u099c\u09be\u09a8\u09a4\u09c7 \u09aa\u09be\u09b0\u09ac\u09c7\u09a8\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u0995\u09cb\u09a8 \u09aa\u09cd\u09b0\u0995\u09be\u09b0 \u0985\u09cd\u09af\u09be\u09a1 \u09a8\u09c7\u0987 \u098f\u09ac\u0982 \u098f\u099f\u09bf \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u09ab\u09cd\u09b0\u09c0 !\"\n                                  : \"The Dua and Ruqyah app has the largest collection of Sahih Dua and Zikr compiled from the Qur'an and Sahih Hadith. You will get 890+ prayers and dhikr in 41 categories. Various categories of Duas for all occasions such as morning and evening, Children, Prayer, Ramadan, Hajj/Umrah and Quran Duas can be found here.\",\n                              byTap: () => _launchfbURL('https://play.google.com/store/apps/details?id=com.ihadis.dua',\n                                  'https://play.google.com/store/apps/details?id=com.ihadis.dua'),\n                              buttonText: languageEn ? 'Download Now' : 'Download'.tr,\n                              buttonIcon: true,\n                            ),\n                            AppContainer(\n                              title: settings.languageSelectIndex.value == 0\n                                  ? '\u09a6\u09cb\u09df\u09be \u0993 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9'.tr + ' (iOS)'\n                                  : 'Dua & Ruqyah'.tr + ' (iOS)',\n                              icon: 'dua_icon',\n                              description: settings.languageSelectIndex.value == 0\n                                  ? \"\u09a6\u09cb\u09df\u09be \u0993 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u0995\u09c1\u09b0\u0986\u09a8 \u098f\u09ac\u0982 \u09b9\u09be\u09a6\u09bf\u09b8 \u09a5\u09c7\u0995\u09c7 \u09b8\u0982\u0995\u09b2\u09bf\u09a4 \u09b8\u09b9\u09c0\u09b9 \u09a6\u09cb\u09af\u09bc\u09be \u0993 \u09af\u09bf\u0995\u09bf\u09b0\u09c7\u09b0 \u09b8\u09ac\u099a\u09c7\u09df\u09c7 \u09ac\u09dc \u09b8\u0982\u0997\u09cd\u09b0\u09b9\u0964 \u098f\u09a4\u09c7 \u09ae\u09cb\u099f \u09ea\u09e7 \u099f\u09bf \u0995\u09cd\u09af\u09be\u099f\u09be\u0997\u09b0\u09bf\u09a4\u09c7 \u09ee\u09ef\u09e6+ \u099f\u09bf \u09a6\u09cb\u09df\u09be \u0993 \u09af\u09bf\u0995\u09bf\u09b0 \u09aa\u09be\u09ac\u09c7\u09a8\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09aa\u09cd\u09b0\u09a7\u09be\u09a8\u09a4 \u0995\u09c1\u09b0\u0986\u09a8 \u0993 \u09b8\u09b9\u09bf\u09b9 \u09b9\u09be\u09a6\u09bf\u09b8 \u09ad\u09bf\u09a4\u09cd\u09a4\u09bf\u0995 \u09a6\u09cb\u09df\u09be\u0997\u09c1\u09b2\u09cb \u0986\u09a8\u09be \u09b9\u09df\u09c7\u099b\u09c7\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7\u09b0 \u0985\u09a8\u09cd\u09af\u09a4\u09ae \u09ac\u09dc \u09ab\u09bf\u099a\u09be\u09b0 \u09b9\u099a\u09cd\u099b\u09c7 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 (\u0987\u09b8\u09b2\u09be\u09ae\u09bf\u0995 \u099d\u09be\u09dc-\u09ab\u09c1\u0981\u0995) \u09b8\u09c7\u0995\u09b6\u09a8\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09aa\u09a8\u09bf \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09ae\u09bf\u09a1\u09bf\u09df\u09be \u09aa\u09cd\u09b2\u09c7\u09df\u09be\u09b0 \u098f\u09b0 \u09aa\u09be\u09b6\u09be\u09aa\u09be\u09b6\u09bf \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09bf\u09a4 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0997\u09c1\u09b0\u09c1\u09a4\u09cd\u09ac\u09aa\u09c2\u09b0\u09cd\u09a3 \u09a4\u09a5\u09cd\u09af \u09af\u09c7\u09ae\u09a8 \u09af\u09be\u09a6\u09c1, \u09ac\u09a6\u09a8\u099c\u09b0\u09c7\u09b0 \u099a\u09bf\u0995\u09bf\u09ce\u09b8\u09be \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09c7 \u099c\u09be\u09a8\u09a4\u09c7 \u09aa\u09be\u09b0\u09ac\u09c7\u09a8\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u0995\u09cb\u09a8 \u09aa\u09cd\u09b0\u0995\u09be\u09b0 \u0985\u09cd\u09af\u09be\u09a1 \u09a8\u09c7\u0987 \u098f\u09ac\u0982 \u098f\u099f\u09bf \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u09ab\u09cd\u09b0\u09c0 !\"\n                                  : \"The Dua and Ruqyah app have the largest collection of Sahih Dua and Zikr compiled from the Qur'an and Sahih Hadith. You will get 890+ prayers and dhikr in 41 categories. Various categories of Duas for all occasions such as morning and evening, Children, Prayer, Ramadan, Hajj/Umrah, and Quran Duas can be found here.\",\n                              byTap: () => _launchfbURL('https://apps.apple.com/us/app/dua-ruqyah/id1568942398',\n                                  'https://apps.apple.com/us/app/dua-ruqyah/id1568942398'),\n                              buttonText: languageEn ? 'Download Now' : 'Download'.tr,\n                              buttonIcon: true,\n                            ),\n                            AppContainer(\n                              title: settings.languageSelectIndex.value == 0\n                                  ? \"\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8\" + ' (Website)'\n                                  : 'Al Hadith' + ' (Website)',\n                              icon: 'book',\n                              description: settings.languageSelectIndex.value == 0\n                                  ? \"Al Hadith Website-\u099f\u09bf\u09a4\u09c7 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2\u09cd\u09b2\u09be\u09b9\u09cd\u200c\u09b0 \u09b0\u09be\u09b8\u09c1\u09b2 (\ufdfa)-\u098f\u09b0 \u09b9\u09be\u09a6\u09bf\u09b8 \u09b8\u09ae\u09c2\u09b9\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09b6\u09be\u09b2 \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8\u0964 \u0995\u09c1\u09a4\u09c1\u09ac\u09c7 \u09b8\u09bf\u09a4\u09cd\u09a4\u09be\u09b9 \u09ac\u09be \u09b8\u09bf\u09b9\u09be\u09b9 \u09b8\u09bf\u09a4\u09cd\u09a4\u09be\u09b9 (\u099b\u09df\u099f\u09bf \u09ac\u09bf\u09b6\u09c1\u09a6\u09cd\u09a7 \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u0997\u09cd\u09b0\u09a8\u09cd\u09a5) \u09b8\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u09ea\u09ef,\u09e6\u09e6\u09e6 \u098f\u09b0\u0993 \u09ac\u09c7\u09b6\u09bf \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u09b8\u09ae\u09be\u09b9\u09be\u09b0\u0964 \"\n                                  : \"Al Hadith is the collection of Hadith of Prophet Muhammad (Peace Be Upon Him). The app contains 49000+ hadith from most accepted and authentic Hadith books including six hadith books also known as Kutub al-Sittah or Sihah Sitta (meaning 'The Authentic Six').\",\n                              byTap: () => _launchfbURL('http://www.ihadis.com', 'http://www.ihadis.com'),\n                              buttonText: settings.languageSelectIndex.value == 0 ? '\u09ad\u09bf\u099c\u09bf\u099f \u0995\u09b0\u09c1\u09a8' : 'Visit Now',\n                              buttonIcon: false,\n                            ),\n                            AppContainer(\n                              title: settings.languageSelectIndex.value == 0\n                                  ? \"\u0995\u09c1\u09b0\u0986\u09a8 \u09ae\u09be\u099c\u09c0\u09a6 (Tafsir & By Words)\" + \" (Website)\"\n                                  : \"Quran Mazid (Tafsir & By Words)\" + \" (Website)\",\n                              icon: 'koran',\n                              description: settings.languageSelectIndex.value == 0\n                                  ? \"\u09a4\u09be\u09ab\u09b8\u09bf\u09b0 \u098f\u09ac\u0982 \u09ac\u09be\u0982\u09b2\u09be \u0989\u099a\u09cd\u099a\u09be\u09b0\u09a3 \u0993 \u0985\u09b0\u09cd\u09a5 \u09b8\u09b9 \u09aa\u09b0\u09bf\u09b7\u09cd\u0995\u09be\u09b0 \u0986\u09b0\u09ac\u09bf \u09ab\u09a8\u09cd\u099f\u09c7 \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u0986\u09b2 \u0995\u09c1\u09b0\u0986\u09a8 \u0985\u09cd\u09af\u09be\u09aa\u09b8\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09aa\u09a8\u09bf \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u09aa\u09cd\u09b0\u09a4\u09bf \u0986\u09df\u09be\u09a4\u09c7\u09b0 \u09ac\u09bf\u09b6\u09cd\u09ac\u0996\u09cd\u09af\u09be\u09a4 \u0995\u09cd\u09ac\u09be\u09b0\u09c0\u09a6\u09c7\u09b0 \u09a4\u09c7\u09b2\u09be\u0993\u09df\u09be\u09a4\u09c7\u09b0 \u0985\u09a1\u09bf\u0993 \u09b8\u09b9 \u09b0\u09bf\u09aa\u09bf\u099f \u0985\u09aa\u09b6\u09a8\u0964 \u09ac\u09be\u0982\u09b2\u09be \u0993 \u0987\u0982\u09b0\u09c7\u099c\u09c0\u09a4\u09c7 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u0987\u09ac\u09a8\u09c7 \u0995\u09be\u099b\u09bf\u09b0, \u09ac\u09be\u0982\u09b2\u09be \u0993 \u0987\u0982\u09b2\u09bf\u09b6\u09c7\u09b0 \u09b6\u09ac\u09cd\u09a6\u09be\u09b0\u09cd\u09a5 \u09b8\u09b9 \u09b8\u09b9\u099c \u09b8\u09b0\u09b2 \u09ac\u09be\u0982\u09b2\u09be \u0985\u09a8\u09c1\u09ac\u09be\u09a6\u0964 \u0986\u09b0\u0993 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2-\u0995\u09c1\u09b0-\u0986\u09a8\u09c7\u09b0 \u09a8\u09bf\u09b0\u09cd\u0998\u09a8\u09cd\u099f, \u09ac\u09c1\u0995\u09ae\u09be\u09b0\u09cd\u0995\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09a7\u09be, \u09b6\u0995\u09cd\u09a4\u09bf\u09b6\u09be\u09b2\u09c0 \u09b8\u09be\u09b0\u09cd\u099a \u0985\u09aa\u09b6\u09a8 \u09b8\u09b9 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0985\u09a8\u09c1\u09ac\u09be\u09a6 \u0993 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u09ad\u09be\u09b7\u09be\u09df \u09a4\u09be\u09ab\u09b8\u09c0\u09b0\u0964 \u098f\u0995\u09be\u09a7\u09bf\u0995 \u09ab\u09a8\u09cd\u099f\u09b8\u09b9 \u0986\u09b0\u0993 \u0985\u09a8\u09c7\u0995 \u09ab\u09bf\u099a\u09be\u09b0\u09b8\u0964\"\n                                  : \"Alhamdulillah. Quran Mazid is a Quran study tool for all. It provides Verse by Verse Audio Playback with repeat functions,Bangla and English Tafsir Ibn Kathir, Bangla Word by Word Analysis and Translations, Custom Bookmarks, Powerful Search, Several Translations & Tafsirs in Various Languages, Multiple Fonts and much more.\",\n                              byTap: () => _launchfbURL('http://www.quranmazid.com', 'http://www.quranmazid.com'),\n                              buttonText: settings.languageSelectIndex.value == 0 ? '\u09ad\u09bf\u099c\u09bf\u099f \u0995\u09b0\u09c1\u09a8' : 'Visit Now',\n                              buttonIcon: false,\n                            ),\n\n                            SizedBox(height: Get.width * .015),\n                          ],\n                        ).paddingOnly(\n                          left: settings.cardView.value ? Get.width * 0.04 : Get.width * 0.02,\n                          right: settings.cardView.value ? Get.width * 0.04 : Get.width * 0.01,\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ));\n  }\n\n  BoxDecoration cardRadius(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    return BoxDecoration(\n        color: theme == 6 && settings.simpleView.value\n            ? Theme.of(context).primaryColorDark\n            : Theme.of(context).appBarTheme.shadowColor,\n        borderRadius: BorderRadius.all(Radius.circular(12)));\n  }\n}\n\nclass Title extends StatelessWidget {\n  const Title(this.title);\n  final String? title;\n  @override\n  Widget build(BuildContext context) {\n    return Text(title!,\n        style: TextStyle(\n            fontWeight: FontWeight.w500, color: Theme.of(context).secondaryHeaderColor, fontSize: Get.width * .035));\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Drawer_item", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/Drawer_item/Our_projects.dart", "file_name": "Our_projects.dart", "line": 207, "line_from": 207, "line_to": 245, "snippet": "  Widget build(BuildContext context) {\n    return Container(\n      width: Get.width,\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.start,\n        children: [\n          SvgPicture.asset(\n            'assets/icons/$icon.svg',\n            height: size ? Get.width * .048 : Get.width * 0.1,\n          ).paddingOnly(top: Get.width * .005, right: Get.width * 0.05),\n          Container(\n            width: Get.width * .65,\n            child: Text(\n              text,\n              overflow: TextOverflow.clip,\n              style: TextStyle(fontSize: Get.width * 0.045, fontWeight: FontWeight.w600),\n            ),\n          )\n        ],\n      ).paddingOnly(bottom: Get.width * .05),\n    );\n  }\n}\n\nclass CustomTrackShape extends RoundedRectSliderTrackShape {\n  Rect getPreferredRect({\n    @required RenderBox? parentBox,\n    Offset? offset = Offset.zero,\n    @required SliderThemeData? sliderTheme,\n    bool isEnabled = false,\n    bool isDiscrete = false,\n  }) {\n    final double? trackHeight = sliderTheme!.trackHeight;\n    final double? trackLeft = offset!.dx;\n    final double? trackTop = offset.dy + (parentBox!.size.height - trackHeight!) / 2;\n    final double trackWidth = parentBox.size.width * .95;\n    return Rect.fromLTWH(trackLeft!, trackTop!, trackWidth, trackHeight);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Drawer_item", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/Drawer_item/Our_projects.dart", "file_name": "Our_projects.dart", "line": 264, "line_from": 264, "line_to": 338, "snippet": "  Widget build(BuildContext context) {\n    final theme = themeController.currentTheme.value;\n    return Container(\n        padding: EdgeInsets.all(Get.width * 0.04),\n        width: Get.width,\n        decoration: cardRadius(context),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            CardName(title!.tr, icon),\n            Text(\n              description!,\n              textAlign: languageEn ? TextAlign.justify : TextAlign.start,\n              style: TextStyle(\n                fontFamily: 'Kalpurush',\n                color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black,\n              ),\n            ),\n            InkWell(\n                onTap: byTap,\n                child: Container(\n                  width: Get.width,\n                  decoration: BoxDecoration(\n                      color: theme == 6 && settings.simpleView.value\n                          ? Theme.of(context).primaryColor.withOpacity(0.6)\n                          : theme == 6\n                              ? Theme.of(context).backgroundColor.withOpacity(0.5)\n                              : Theme.of(context).backgroundColor,\n                      borderRadius: BorderRadius.all(Radius.circular(Get.width * .04))),\n                  padding: EdgeInsets.symmetric(horizontal: Get.width * .04, vertical: Get.width * .03),\n                  child: Row(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      SizedBox(width: Get.width * .03),\n                      Title(buttonText).paddingOnly(right: Get.width * .05),\n                      buttonIcon!\n                          ? SvgPicture.asset(\n                              'assets/icons/file-download.svg',\n                              height: Get.width * .05,\n                            )\n                          : SizedBox.shrink(),\n                    ],\n                  ),\n                ).paddingOnly(top: Get.width * .05)),\n          ],\n        )).paddingSymmetric(vertical: settings.cardView.value ? Get.width * .02 : 0);\n  }\n\n  BoxDecoration cardRadius(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    return BoxDecoration(\n        color: theme == 6 && settings.simpleView.value\n            ? Theme.of(context).primaryColorDark\n            : Theme.of(context).appBarTheme.shadowColor,\n        borderRadius: BorderRadius.all(Radius.circular(12)));\n  }\n}\n\n_launchfbURL(fbProtocolUrl, fallbackUrl) async {\n  if (await settings.isConnected()) {\n    try {\n      bool launched = await launchUrl(Uri.parse(fbProtocolUrl));\n\n      if (!launched) {\n        await launchUrl(Uri.parse(fallbackUrl));\n      }\n    } catch (e) {\n      await launchUrl(Uri.parse(fallbackUrl));\n    }\n  } else {\n    CustomWidget.toast(\n      'No internet connection'.tr,\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Drawer_item", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/Drawer_item/android_support_us.dart", "file_name": "android_support_us.dart", "line": 34, "line_from": 34, "line_to": 131, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      backgroundColor: Theme.of(context).primaryColor,\n      body: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Directionality(\n          textDirection: TextDirection.ltr,\n          child: Obx(\n            () => Column(\n              children: [\n                Topbar(text: languageEn ? 'Support Us' : 'Support Us'.tr, fontsize: Get.width * 0.05),\n                Container(\n                  height: Get.height * .9,\n                  width: Get.width,\n                  padding: EdgeInsets.only(top: theme == 0 && settings.cardView.value ? Get.width * .012 : 0),\n                  decoration: pageDecoration(context),\n                  child: ClipRRect(\n                    borderRadius: settings.appBarRadius.value\n                        ? BorderRadius.only(\n                            topLeft: Radius.circular(Get.width * .07), topRight: Radius.circular(Get.width * .07))\n                        : BorderRadius.zero,\n                    child: SingleChildScrollView(\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.start,\n                        children: [\n                          SizedBox(height: theme == 0 && settings.cardView.value ? Get.width * .01 : Get.width * .02),\n\n                          ///////////////////////////////////////////////////////////////////////////\n                          ////////////////////          Main Card               /////////////////////\n                          ///////////////////////////////////////////////////////////////////////////\n\n                          Container(\n                              padding: EdgeInsets.symmetric(vertical: Get.width * 0.04, horizontal: Get.width * .02),\n                              decoration: cardRadius(context),\n                              child: Column(\n                                children: [\n                                  Html(\n                                      data: settings.languageSelectIndex.value == 0\n                                          ? controller.drawerItemList[1].textBn\n                                          : controller.drawerItemList[1].textEn,\n                                      style: {\n                                        \"body\": Style(\n                                          lineHeight: LineHeight.number(1.2),\n                                          fontFamily: 'Kalpurush',\n                                          color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black,\n                                          fontSize: FontSize(Get.width * 0.045),\n                                        ),\n                                      }),\n                                  InkWell(\n                                    onTap: () => Get.to(() => SupportButtons()),\n                                    child: Container(\n                                        width: Get.width,\n                                        padding: EdgeInsets.all(Get.width * 0.03),\n                                        decoration: BoxDecoration(\n                                            color: Theme.of(context).secondaryHeaderColor,\n                                            borderRadius: BorderRadius.circular(Get.width * .07)),\n                                        child: Text(\n                                          'I Want To Support'.tr,\n                                          textAlign: TextAlign.center,\n                                          style: TextStyle(\n                                            fontSize: Get.width * .04,\n                                            color: Colors.white,\n                                            fontWeight: FontWeight.w600,\n                                          ),\n                                        )).paddingSymmetric(horizontal: settings.cardView.value ? Get.width * .02 : 0),\n                                  ),\n                                ],\n                              )).paddingSymmetric(vertical: settings.cardView.value ? Get.width * .02 : 0),\n\n                          SizedBox(height: Get.width * .015),\n                        ],\n                      ).paddingOnly(\n                        left: settings.cardView.value ? Get.width * 0.04 : Get.width * 0.02,\n                        right: settings.cardView.value ? Get.width * 0.04 : Get.width * 0.01,\n                      ),\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nBoxDecoration cardRadius(BuildContext context) {\n  var theme = themeController.currentTheme.value;\n  return BoxDecoration(\n      color: theme == 6 && settings.simpleView.value\n          ? Theme.of(context).primaryColorDark\n          : Theme.of(context).appBarTheme.shadowColor,\n      borderRadius: BorderRadius.all(Radius.circular(12)));\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Drawer_item", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/Drawer_item/android_support_us.dart", "file_name": "android_support_us.dart", "line": 143, "line_from": 143, "line_to": 404, "snippet": "  Widget build(BuildContext context) {\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      backgroundColor: Theme.of(context).primaryColor,\n      body: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Directionality(\n          textDirection: TextDirection.ltr,\n          child: Column(\n            children: [\n              Topbar(text: languageEn ? 'Support Us' : 'Support Us'.tr, fontsize: Get.width * 0.05),\n              Container(\n                height: Get.height * .9,\n                width: Get.width,\n                padding: EdgeInsets.only(top: theme == 0 && settings.cardView.value ? Get.width * .012 : 0),\n                decoration: pageDecoration(context),\n                child: ClipRRect(\n                  borderRadius: settings.appBarRadius.value\n                      ? BorderRadius.only(\n                          topLeft: Radius.circular(Get.width * .07), topRight: Radius.circular(Get.width * .07))\n                      : BorderRadius.zero,\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.start,\n                    children: [\n                      SizedBox(height: theme == 0 && settings.cardView.value ? Get.width * .01 : Get.width * .02),\n\n                      ///////////////////////////////////////////////////////////////////////////\n                      ////////////////////          Main Card               /////////////////////\n                      ///////////////////////////////////////////////////////////////////////////\n\n                      Container(\n                          height: Get.height * .86,\n                          padding: EdgeInsets.symmetric(vertical: Get.width * 0.2, horizontal: Get.width * .04),\n                          decoration: cardRadius(context),\n                          child: Column(\n                            children: [\n                              Center(\n                                child: Text(\n                                  'You can support us by Bkash/Nagad/Rocket/Paypal/Card. Please click the button below -'\n                                      .tr,\n                                  textAlign: TextAlign.center,\n                                  style: TextStyle(fontSize: Get.width * .04),\n                                ).paddingOnly(\n                                  bottom: Get.width * .1,\n                                ),\n                              ),\n                              Theme(\n                                data: Theme.of(context).copyWith(dividerColor: Colors.transparent),\n                                child: Container(\n                                  decoration: BoxDecoration(\n                                      color: Theme.of(context).cardColor,\n                                      border: Border.all(\n                                          style: BorderStyle.solid,\n                                          color: Theme.of(context).secondaryHeaderColor,\n                                          width: Get.width * .0025),\n                                      borderRadius: settings.cardView.value\n                                          ? BorderRadius.circular(Get.width * .07)\n                                          : BorderRadius.zero),\n                                  child: ClipRRect(\n                                    borderRadius: settings.cardView.value\n                                        ? BorderRadius.circular(Get.width * .07)\n                                        : BorderRadius.zero,\n                                    child: ExpansionWidget(\n                                        key: expansionKey,\n                                        titleBuilder: (double animationValue, _, bool isExpaned, toogleFunction) {\n                                          return CustomTitleBuilder2(\n                                              toogleFunction: toogleFunction,\n                                              title: 'Bkash/Nagad/Rocket'.tr,\n                                              animationValue: animationValue);\n                                        },\n                                        content: Container(\n                                          padding: EdgeInsets.symmetric(horizontal: Get.width * .02),\n                                          child: Column(\n                                            children: [\n                                              InkWell(\n                                                onTap: () {\n                                                  expansionKey.currentState?.toggle(animated: true);\n                                                  Get.dialog(SupportDialog(\n                                                    title:\n                                                        'To support our projects, please send your hadiya to below numbers -'\n                                                            .tr,\n                                                  ));\n                                                },\n                                                child: CustomBtn(title: 'One Time'.tr)\n                                                    .paddingSymmetric(vertical: Get.width * .04),\n                                              ),\n                                              InkWell(\n                                                onTap: () {\n                                                  expansionKey.currentState?.toggle(animated: true);\n                                                  Get.dialog(AlertDialog(\n                                                      insetPadding: EdgeInsets.symmetric(horizontal: Get.width * .06),\n                                                      content: Container(\n                                                        width: Get.width,\n                                                        child: Form(\n                                                          child: Wrap(\n                                                            children: [\n                                                              CustomTitle(title: 'Name'.tr),\n                                                              Container(\n                                                                child: TextFormField(\n                                                                    textCapitalization: TextCapitalization.words,\n                                                                    controller: nameController,\n                                                                    decoration: inputDecoration(\n                                                                      context,\n                                                                      \"Enter Name\".tr,\n                                                                      size: .035,\n                                                                      color: Theme.of(context)\n                                                                          .iconTheme\n                                                                          .color!\n                                                                          .withOpacity(.8),\n                                                                    )),\n                                                              ),\n                                                              CustomTitle(title: 'Phone'.tr),\n                                                              Container(\n                                                                child: TextFormField(\n                                                                    keyboardType: TextInputType.phone,\n                                                                    controller: phoneController,\n                                                                    textCapitalization: TextCapitalization.words,\n                                                                    decoration: inputDecoration(\n                                                                      context,\n                                                                      \"Enter Phone\".tr,\n                                                                      size: .035,\n                                                                      color: Theme.of(context)\n                                                                          .iconTheme\n                                                                          .color!\n                                                                          .withOpacity(.8),\n                                                                    )),\n                                                              ),\n                                                              CustomTitle(title: 'Email (Optional)'.tr),\n                                                              Container(\n                                                                child: TextFormField(\n                                                                    keyboardType: TextInputType.emailAddress,\n                                                                    controller: emailController,\n                                                                    textCapitalization: TextCapitalization.words,\n                                                                    decoration: inputDecoration(\n                                                                      context,\n                                                                      \"Enter Email\".tr,\n                                                                      size: .035,\n                                                                      color: Theme.of(context)\n                                                                          .iconTheme\n                                                                          .color!\n                                                                          .withOpacity(.8),\n                                                                    )),\n                                                              ),\n                                                              CustomTitle(title: 'Amount'.tr),\n                                                              Container(\n                                                                child: TextFormField(\n                                                                    keyboardType: TextInputType.number,\n                                                                    controller: amountController,\n                                                                    textCapitalization: TextCapitalization.words,\n                                                                    decoration: inputDecoration(\n                                                                      context,\n                                                                      \"Enter Amount\".tr,\n                                                                      size: .035,\n                                                                      color: Theme.of(context)\n                                                                          .iconTheme\n                                                                          .color!\n                                                                          .withOpacity(.8),\n                                                                    )),\n                                                              ),\n                                                              InkWell(\n                                                                onTap: () {\n                                                                  Map<String, dynamic> data = {\n                                                                    'name': nameController.text,\n                                                                    'phone': phoneController.text,\n                                                                    'email': emailController.text,\n                                                                    'amount': amountController.text,\n                                                                  };\n                                                                  if (nameController.text.isNotEmpty &&\n                                                                      phoneController.text.isNotEmpty) {\n                                                                    FirebaseFirestore.instance\n                                                                        .collection('userInfo')\n                                                                        .add(data)\n                                                                        .then((value) {\n                                                                      Navigator.pop(context);\n                                                                      nameController.clear();\n                                                                      phoneController.clear();\n                                                                      emailController.clear();\n                                                                      amountController.clear();\n\n                                                                      Get.dialog(SupportDialog(\n                                                                        title:\n                                                                            'You registration is successful. Please save below numbers and support every month.'\n                                                                                .tr,\n                                                                      ));\n                                                                    }).onError((error, stackTrace) => CustomWidget.toast(\n                                                                            'Error Occured. Please Check Your Internet Connection'));\n                                                                  } else {\n                                                                    CustomWidget.toast(\n                                                                        'Please Enter Your Name And Phone Number To Subscribe');\n                                                                  }\n                                                                },\n                                                                child: Container(\n                                                                  height: Get.width * 0.11,\n                                                                  width: Get.width,\n                                                                  decoration: BoxDecoration(\n                                                                      color: Theme.of(context).secondaryHeaderColor,\n                                                                      borderRadius: BorderRadius.circular(30)),\n                                                                  child: Center(\n                                                                    child: Text(\n                                                                      \"Subscribe\".tr,\n                                                                      style: TextStyle(\n                                                                          fontSize: Get.width * 0.04,\n                                                                          color: Colors.white,\n                                                                          fontWeight: FontWeight.w600),\n                                                                    ),\n                                                                  ),\n                                                                ).paddingOnly(top: Get.width * .06),\n                                                              ),\n                                                            ],\n                                                          ),\n                                                        ),\n                                                      )));\n                                                },\n                                                child: CustomBtn(title: 'Monthly'.tr),\n                                              ),\n                                            ],\n                                          ).paddingOnly(bottom: Get.width * .04),\n                                        )),\n                                  ),\n                                ),\n                              ).paddingSymmetric(vertical: Get.width * .04),\n                              InkWell(\n                                      onTap: () {\n                                        launchUrl(Uri.parse('https://irdfoundation.com/sadaqa-jaria'));\n                                      },\n                                      child: CustomBtn(title: 'Paypal/Card'.tr))\n                                  .paddingOnly(top: Get.width * .05),\n                            ],\n                          )).paddingSymmetric(vertical: settings.cardView.value ? Get.width * .02 : 0),\n\n                      SizedBox(height: Get.width * .015),\n                    ],\n                  ).paddingOnly(\n                    left: settings.cardView.value ? Get.width * 0.04 : Get.width * 0.02,\n                    right: settings.cardView.value ? Get.width * 0.04 : Get.width * 0.01,\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass CustomTitle extends StatelessWidget {\n  const CustomTitle({@required this.title});\n\n  final title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      title,\n      style: TextStyle(fontSize: Get.width * .035),\n    ).paddingOnly(\n      bottom: Get.width * .01,\n      top: Get.width * .04,\n    );\n  }\n}"}, {"structure_type": "class", "name": "_StatusBarStyle", "docstring": "", "module": "surah", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/statusbarmanager.dart", "file_name": "statusbarmanager.dart", "line": 7, "line_from": 7, "line_to": 126, "snippet": "// class _StatusBarStyle {\n//   static const String DEFAULT = \"default\";\n//   static const String LIGHT_CONTENT = \"light-content\";\n//   static const String DARK_CONTENT = \"dark-content\";\n\n//   static String getStyle(StatusBarStyle style) {\n//     switch (style) {\n//       case StatusBarStyle.DEFAULT:\n//         return DEFAULT;\n//       case StatusBarStyle.DARK_CONTENT:\n//         return DARK_CONTENT;\n//       case StatusBarStyle.LIGHT_CONTENT:\n//         return LIGHT_CONTENT;\n//       default:\n//         return DEFAULT;\n//     }\n//   }\n// }\n\n// enum StatusBarAnimation { NONE, FADE, SLIDE }\n\n// class _StatusBarAnimation {\n//   static const String NONE = \"none\";\n//   static const String FADE = \"fade\";\n//   static const String SLIDE = \"slide\";\n\n//   static String getAnimation(StatusBarAnimation animation) {\n//     switch (animation) {\n//       case StatusBarAnimation.NONE:\n//         return NONE;\n//       case StatusBarAnimation.FADE:\n//         return FADE;\n//       case StatusBarAnimation.SLIDE:\n//         return SLIDE;\n//       default:\n//         return NONE;\n//     }\n//   }\n// }\n\n// enum NavigationBarStyle { DARK, LIGHT, DEFAULT }\n\n// class _NavigationBarStyle {\n//   static const String DEFAULT = \"default\";\n//   static const String DARK = \"light\";\n//   static const String LIGHT = \"dark\";\n\n//   static String getStyle(NavigationBarStyle style) {\n//     switch (style) {\n//       case NavigationBarStyle.DEFAULT:\n//         return DEFAULT;\n//       case NavigationBarStyle.DARK:\n//         return DARK;\n//       case NavigationBarStyle.LIGHT:\n//         return LIGHT;\n//       default:\n//         return DEFAULT;\n//     }\n//   }\n// }\n\n// class FlutterStatusbarManager {\n//   static const MethodChannel _channel =\n//       const MethodChannel('flutter_statusbar_manager');\n\n//   static Future<bool> setColor(Color color, {bool animated = false}) async {\n//     return await _channel\n//         .invokeMethod(\"setColor\", {'color': color.value, 'animated': animated});\n//   }\n\n//   static Future<bool> setTranslucent(bool translucent) async {\n//     return await _channel\n//         .invokeMethod(\"setTranslucent\", {'translucent': translucent});\n//   }\n\n//   static Future<bool> setHidden(bool hidden,\n//       {StatusBarAnimation animation = StatusBarAnimation.NONE}) async {\n//     return await _channel.invokeMethod(\"setHidden\", {\n//       'hidden': hidden,\n//       'animation': _StatusBarAnimation.getAnimation(animation)\n//     });\n//   }\n\n//   static Future<bool> setStyle(StatusBarStyle style) async {\n//     return await _channel\n//         .invokeMethod(\"setStyle\", {'style': _StatusBarStyle.getStyle(style)});\n//   }\n\n//   static Future<bool> setNetworkActivityIndicatorVisible(bool visible) async {\n//     return await _channel.invokeMethod(\n//         \"setNetworkActivityIndicatorVisible\", {'visible': visible});\n//   }\n\n//   static Future<bool> setNavigationBarColor(Color color,\n//       {bool animated = false}) async {\n//     return await _channel.invokeMethod(\n//         \"setNavigationBarColor\", {'color': color.value, 'animated': animated});\n//   }\n\n//   static Future<bool> setNavigationBarStyle(NavigationBarStyle style) async {\n//     return await _channel.invokeMethod(\"setNavigationBarStyle\",\n//         {'style': _NavigationBarStyle.getStyle(style)});\n//   }\n\n//   static Future<double> get getHeight async {\n//     return await _channel.invokeMethod(\"getHeight\");\n//   }\n\n//   static setFullscreen(bool value) {\n//     if (value) {\n//       SystemChrome.setEnabledSystemUIMode(SystemUiMode.leanBack,\n//           overlays: [SystemUiOverlay.top]);\n//     } else {\n//       SystemChrome.setEnabledSystemUIMode(SystemUiMode.leanBack,\n//           overlays: [SystemUiOverlay.top]);\n//     }\n//   }\n// }\n"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "surah", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/surah.dart", "file_name": "surah.dart", "line": 44, "line_from": 44, "line_to": 488, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    final Stream<QuerySnapshot> notification = settingController.languageSelectIndex.value == 0\n        ? FirebaseFirestore.instance.collection('notification').snapshots()\n        : FirebaseFirestore.instance.collection('notification_en').snapshots();\n\n    // SystemChrome.setEnabledSystemUIOverlays([\n    //   SystemUiOverlay.top, //This line is used for showing the bottom bar\n    // ]);\n\n    Platform.isIOS\n        ? SystemChrome.setEnabledSystemUIMode(SystemUiMode.leanBack, overlays: [SystemUiOverlay.bottom])\n        : SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(\n            statusBarColor: Theme.of(context).primaryColor, // status bar color\n            statusBarBrightness:\n                themeController.currentTheme.value == 0 ? Brightness.dark : Brightness.light, //status bar brigtness\n            statusBarIconBrightness: themeController.currentTheme.value == 0\n                ? Brightness.dark\n                : Brightness.light, //status barIcon Brightness\n            systemNavigationBarIconBrightness:\n                themeController.currentTheme.value == 0 ? Brightness.dark : Brightness.light,\n          ));\n    super.build(context);\n    return Scaffold(\n        resizeToAvoidBottomInset: false,\n        backgroundColor: Theme.of(context).primaryColor,\n        body: MediaQuery(\n          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Obx(\n              () => Container(\n                height: Get.height,\n                width: Get.width,\n                decoration: BoxDecoration(\n                    color: settingController.cardView.value\n                        ? Theme.of(context).backgroundColor\n                        : !settingController.cardView.value && theme == 6\n                            ? Theme.of(context).primaryColorDark\n                            : Theme.of(context).appBarTheme.shadowColor,\n                    borderRadius: settingController.appBarRadius.value\n                        ? BorderRadius.only(\n                            topLeft: Radius.circular(Get.width * .07), topRight: Radius.circular(Get.width * .07))\n                        : BorderRadius.zero),\n                child: ClipRRect(\n                  borderRadius: settingController.appBarRadius.value\n                      ? BorderRadius.only(\n                          topLeft: Radius.circular(Get.width * .07), topRight: Radius.circular(Get.width * .07))\n                      : BorderRadius.zero,\n                  child: Container(\n                    height: settingController.cardView.value ? Get.height * .235 : Get.height * .225,\n                    width: Get.width,\n                    child: Column(\n                      children: [\n                        Container(\n                          height: Get.height * .8,\n                          child: FadeIn(\n                            duration: Duration(milliseconds: 500),\n                            child: Obx(() => Scrollbar(\n                                  radius: Radius.circular(8),\n                                  interactive: true,\n                                  thickness: 10,\n                                  controller: controller.suraScroller,\n                                  child: ListView.builder(\n                                      controller: controller.suraScroller,\n                                      padding: EdgeInsets.only(\n                                        top: settingController.cardView.value ? Get.width * .03 : Get.width * .025,\n                                        bottom: settingController.cardView.value ? Get.height * .04 : Get.height * .025,\n                                      ),\n                                      // physics: NeverScrollableScrollPhysics(),\n\n                                      shrinkWrap: true,\n                                      itemCount: controller.homeSurahList.length,\n                                      itemBuilder: (ctx, index) {\n                                        return Column(\n                                          children: [\n                                            if (index == 0)\n                                              ConnectivityBuilder(\n                                                  builder: (context, isConnected, status) => isConnected == true\n                                                      ? StreamBuilder<QuerySnapshot>(\n                                                          stream: notification,\n                                                          builder: (context, snapshot) {\n                                                            if (snapshot.hasData &&\n                                                                snapshot.connectionState == ConnectionState.active) {\n                                                              if (hive.getData('hideNoti')) {\n                                                                if (snapshot.data!.docs.first['id'] !=\n                                                                    hive.getData('notificationID')) {\n                                                                  settings.checked.value = false;\n                                                                  hive.createData('notificationID',\n                                                                      snapshot.data!.docs.first['id']);\n                                                                  hive.createData('hideNoti', false);\n                                                                }\n                                                              }\n\n                                                              if (snapshot.data!.docs.first['id'] !=\n                                                                  settingController.currentNotID.value) {\n                                                                settings.currentNotID.value =\n                                                                    snapshot.data!.docs.first['id'];\n\n                                                                hive.createData(\n                                                                    'currentNotID', settings.currentNotID.value);\n                                                                settings.howManyTimeNoti.value = 1;\n                                                                hive.createData(\n                                                                    'howManyTimeNoti', settings.howManyTimeNoti.value);\n                                                                return HomeNotification(\n                                                                  data: snapshot.data!.docs.first,\n                                                                );\n                                                              } else {\n                                                                var howManyTimeNoti = settings.howManyTimeNoti.value;\n                                                                howManyTimeNoti++;\n                                                                hive.createData('howManyTimeNoti', howManyTimeNoti);\n                                                                if (howManyTimeNoti <= 3) {\n                                                                  return HomeNotification(\n                                                                    data: snapshot.data!.docs.first,\n                                                                  );\n                                                                } else {\n                                                                  return SizedBox.shrink();\n                                                                }\n                                                              }\n                                                            } else {\n                                                              return SizedBox.shrink();\n                                                            }\n                                                          })\n                                                      : SizedBox.shrink()),\n                                            if (index == 0)\n                                              Container(\n                                                padding: EdgeInsets.only(\n                                                  top: Get.width * 0.045,\n                                                  bottom: Get.width * 0.035,\n                                                  left: settingController.cardView.value\n                                                      ? Get.width * 0.071\n                                                      : Get.width * 0.04,\n                                                  right: settingController.cardView.value\n                                                      ? Get.width * 0.071\n                                                      : Get.width * 0.04,\n                                                ),\n                                                width: Get.width,\n                                                decoration: BoxDecoration(\n                                                    color: theme == 6 && settingController.simpleView.value\n                                                        ? Theme.of(context).primaryColorDark\n                                                        : Theme.of(context).appBarTheme.shadowColor,\n                                                    borderRadius: settingController.cardView.value\n                                                        ? BorderRadius.all(Radius.circular(Get.width * .04))\n                                                        : BorderRadius.zero),\n                                                child:\n                                                    Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [\n                                                  MiddleIcon(\n                                                      onTap: () {\n                                                        if (HiveData().getData('LastReadFrom') != null) {\n                                                          var v = HiveData().getData('LastReadFrom');\n                                                          var x = HiveData().getData('LastReadAyah');\n\n                                                          if (v.split('.').toList().first == 'S') {\n                                                            Get.to(() => AyatReading(\n                                                                  controller.homeSurahList,\n                                                                  index: int.parse(v.split('.').toList().last),\n                                                                  goToLast: x,\n                                                                ));\n                                                          } else if (v.split('.').toList().first == 'H') {\n                                                            Get.to(() => HizbByHizbReading(\n                                                                  controller.groupedHizbList,\n                                                                  int.parse(v.split('.').toList().last),\n                                                                  goToLast: x,\n                                                                ));\n                                                          } else if (v.split('.').toList().first == 'P') {\n                                                            Get.to(() => PageByPageReading(\n                                                                  controller.groupedPageList,\n                                                                  int.parse(v.split('.').toList().last),\n                                                                  goToLast: x,\n                                                                ));\n                                                          } else if (v.split('.').toList().first == 'J') {\n                                                            Get.to(() => JuzByJuzReading(\n                                                                  controller.groupedJuzList,\n                                                                  int.parse(v.split('.').toList().last),\n                                                                  goToLast: x,\n                                                                ));\n                                                          }\n                                                        } else {\n                                                          CustomWidget.toast('No Last Read data found');\n                                                        }\n                                                      },\n                                                      icon: 'assets/icons/mid_box/last_read.svg',\n                                                      text: 'last'.tr),\n                                                  MiddleIcon(\n                                                      onTap: () async {\n                                                        // ayatController\n                                                        //     .mushafPage();\n                                                        const package = \"com.ihadis.dua\";\n\n                                                        const android =\n                                                            'https://play.google.com/store/apps/details?id=com.ihadis.dua';\n                                                        const apple =\n                                                            'https://apps.apple.com/us/app/dua-ruqyah/id1568942398';\n\n                                                        try {\n                                                          ///checks if the app is installed on your mobile device\n                                                          bool isInstalled = await DeviceApps.isAppInstalled(package);\n                                                          if (isInstalled) {\n                                                            DeviceApps.openApp(package);\n                                                          } else {\n                                                            Platform.isAndroid\n                                                                ? _launchfbURL(android, android)\n                                                                : _launchfbURL(apple, apple);\n                                                          }\n                                                        } catch (e) {\n                                                          debugPrint('$e');\n                                                        }\n                                                      },\n                                                      icon: 'assets/icons/mid_box/info.svg',\n                                                      text: 'DUAS'.tr),\n                                                  MiddleIcon(\n                                                      onTap: () async {\n                                                        const package = \"com.ihadis.ihadis\";\n\n                                                        const android =\n                                                            'https://play.google.com/store/apps/details?id=com.ihadis.ihadis';\n                                                        const apple =\n                                                            'https://itunes.apple.com/us/app/al-hadith/id1238182914';\n\n                                                        try {\n                                                          ///checks if the app is installed on your mobile device\n                                                          bool isInstalled = await DeviceApps.isAppInstalled(package);\n                                                          if (isInstalled) {\n                                                            DeviceApps.openApp(package);\n                                                          } else {\n                                                            Platform.isAndroid\n                                                                ? _launchfbURL(android, android)\n                                                                : _launchfbURL(apple, apple);\n                                                          }\n                                                        } catch (e) {\n                                                          debugPrint('$e');\n                                                        }\n                                                      },\n                                                      icon: 'assets/icons/books.svg',\n                                                      text: 'Hadith'.tr,\n                                                      size: true),\n                                                  MiddleIcon(\n                                                      onTap: () {\n                                                        Platform.isIOS\n                                                            ? Get.to(() => SupportUs())\n                                                            : Get.to(() => AndroidSupportUs());\n                                                      },\n                                                      icon: 'assets/icons/mid_box/heart.svg',\n                                                      text: 'ABOUT'.tr),\n                                                ]),\n                                              ).paddingSymmetric(\n                                                  horizontal: settingController.cardView.value\n                                                      ? Get.width * 0.04\n                                                      : Get.width * 0.04),\n                                            if (index == 0) quickAccess(),\n                                            InkWell(\n                                                onLongPress: () {\n                                                  ayatController.animationAppBar(changed: false);\n\n                                                  var suraName = controller.homeSurahList[index];\n                                                  tafsircontroller.initailLoad(index + 1).then((value) {\n                                                    if (!tafsircontroller.loading.value) {\n                                                      Future.delayed(Duration(milliseconds: 100), () {\n                                                        Get.to(() => TafsirReading(\n                                                            index + 1, 1, suraName.nameEn, suraName.ayas));\n                                                      });\n                                                    }\n                                                  });\n                                                },\n                                                onTap: () {\n                                                  Get.put(WBWController()).wbwAudioListDatabase();\n                                                  HiveData().createData('LastReadFrom', 'S.$index');\n                                                  ayatController.animationAppBar(changed: false);\n                                                  Get.to(\n                                                    () => AyatReading(controller.homeSurahList, index: index),\n                                                  );\n                                                },\n                                                child: Container(\n                                                  padding: settingController.cardView.value\n                                                      ? EdgeInsets.only(\n                                                          left: Get.width * 0.04,\n                                                          right: Get.width * 0.04,\n                                                          bottom: Get.width * .03)\n                                                      : EdgeInsets.zero,\n                                                  child: IndexCard(\n                                                    index: index,\n                                                    isArabic: true,\n                                                    subtitle: controller.homeSurahList[index].meaning,\n                                                    fromSura: true,\n                                                  ),\n                                                )),\n                                            settingController.simpleView.value &&\n                                                    index == controller.homeSurahList.length - 1\n                                                ? Container(\n                                                    color:\n                                                        theme == 6 ? Theme.of(context).primaryColorDark : Colors.white,\n                                                    height: Get.width * .07)\n                                                : SizedBox.shrink()\n                                          ],\n                                        );\n                                      }),\n                                )),\n                          ),\n                        ),\n                      ],\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ));\n  }\n\n  //Quick Access\n  Container quickAccess() {\n    return Container(\n      width: Get.width,\n      child: Padding(\n        padding: EdgeInsets.only(\n            top: settingController.cardView.value ? Get.width * .02 : 0,\n            // left: settingController.cardView.value\n            //     ? Get.width * .045\n            //     : Get.width * .05,\n            bottom: 0),\n        child: Container(\n          width: Get.width,\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Text(\n                'quick_access'.tr,\n                style: TextStyle(fontSize: Get.width * 0.035, fontWeight: FontWeight.w500, color: Color(0xff718794)),\n              ).paddingOnly(left: settingController.cardView.value ? Get.width * .045 : Get.width * .05),\n              SingleChildScrollView(\n                padding: EdgeInsets.only(top: Get.width * .02, bottom: Get.width * .03),\n                scrollDirection: Axis.horizontal,\n                child: Row(\n                  children: [\n                    SizedBox(width: settingController.cardView.value ? Get.width * .045 : Get.width * .05),\n                    quickLinks(67, 'Al-Mulk'.tr),\n                    SizedBox(width: Get.width * .02),\n                    quickLinks(32, 'As-Sajda'.tr),\n                    SizedBox(width: Get.width * .02),\n                    quickLinks(18, 'Al-Kahf'.tr),\n                    SizedBox(width: Get.width * .02),\n                    quickLinks(36, 'Yaseen'.tr),\n                    SizedBox(width: Get.width * .02),\n                    quickLinks(55, 'Ar-Rahmaan'.tr),\n                    SizedBox(width: Get.width * .02),\n                    quickLinks(87, 'Al-A\\'laa'.tr),\n                    SizedBox(width: Get.width * .02),\n                    quickLinks(88, 'Al-Ghaashiya'.tr),\n                    SizedBox(width: Get.width * .02),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  InkWell quickLinks(id, text) {\n    var theme = themeController.currentTheme.value;\n\n    id = id - 1;\n    return InkWell(\n      onLongPress: () {\n        ayatController.animationAppBar(changed: false);\n\n        var suraName = controller.homeSurahList[id];\n        tafsircontroller.initailLoad(id + 1).then((value) {\n          if (!tafsircontroller.loading.value) {\n            Future.delayed(Duration(milliseconds: 100), () {\n              Get.to(() => TafsirReading(id + 1, 1, suraName.nameEn, suraName.ayas));\n            });\n          }\n        });\n      },\n      onTap: () {\n        Get.to(\n          () => AyatReading(\n            controller.homeSurahList,\n            index: id,\n          ),\n        );\n      },\n      child: Container(\n        padding: EdgeInsets.symmetric(horizontal: Get.width * .04),\n        height: Get.width * .08,\n        alignment: Alignment.center,\n        decoration: BoxDecoration(\n            color: theme == 6 && settingController.simpleView.value\n                ? Theme.of(context).primaryColorDark\n                : Theme.of(context).appBarTheme.shadowColor,\n            borderRadius: BorderRadius.all(Radius.circular(50)),\n            border: Border.all(color: theme == 0 || theme == 6 ? Color(0xff0B9D4A) : Theme.of(context).primaryColor)),\n        child: Center(\n          child: Text(\n            text,\n            style: TextStyle(fontWeight: FontWeight.w500, fontSize: Get.width * 0.033),\n          ).paddingOnly(top: Get.width * .005),\n        ),\n      ),\n    );\n  }\n\n  @override\n  bool get wantKeepAlive => true;\n}\n\nclass MiddleIcon extends StatelessWidget {\n  MiddleIcon({@required this.icon, @required this.text, this.onTap, this.size = false});\n  final icon;\n  final text;\n  final onTap;\n  final size;\n\n  @override\n  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n    return InkWell(\n      onTap: onTap,\n      child: Container(\n        height: Get.width * .15,\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: [\n            SvgPicture.asset(\n              icon,\n              color: theme == 0 || theme == 6 ? Color(0xff0B9D4A) : Theme.of(context).primaryColor,\n              height: size ? Get.width * 0.06 : Get.width * 0.07,\n              width: size ? Get.width * 0.06 : Get.width * 0.07,\n            ).paddingOnly(top: size ? Get.width * .006 : 0),\n            Text(\n              text,\n              style: TextStyle(\n                fontWeight: FontWeight.w600,\n                fontSize: Get.width * 0.033,\n              ),\n            )\n            // .paddingOnly(top: Get.width * .028)\n          ],\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/ayat_reading/widget/AudioBottomSheet.dart", "file_name": "AudioBottomSheet.dart", "line": 29, "line_from": 29, "line_to": 343, "snippet": "  Widget build(BuildContext context) {\n    return MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Directionality(\n          textDirection: TextDirection.ltr,\n          child: Container(\n            // height: Get.width * 0.98,\n            child: Stack(\n              children: [\n                Container(\n                  padding: EdgeInsets.all(Get.width * 0.05),\n                  decoration: BoxDecoration(\n                    color: Theme.of(context).bottomSheetTheme.backgroundColor,\n                    borderRadius: BorderRadius.only(\n                        topLeft: Radius.circular(Get.width * .07), topRight: Radius.circular(Get.width * .07)),\n                  ),\n                  child: Wrap(\n                    children: [\n                      ListTile(\n                        onTap: () {\n                          showAnimatedDialog(\n                            animationType: DialogTransitionType.fade,\n                            barrierDismissible: true,\n                            context: context,\n                            builder: (BuildContext context) {\n                              return SelectStartSuraAudio();\n                            },\n                          ).then((value) {\n                            suraEditingController.clear();\n                            ayatEditingController.clear();\n                          });\n                        },\n                        minLeadingWidth: Get.width * 0.07,\n                        minVerticalPadding: Get.width * 0.04,\n                        leading: Leading('assets/icons/mic.svg').paddingOnly(top: Get.width * 0.005),\n                        title: Title('Start Sura'.tr),\n                        trailing: Obx(() => SubTitle('${audioC.startSuraName.value}'.tr +\n                            \" \" +\n                            settings.banNum(audioC.selectedStartSura.value + 1) +\n                            ': ' +\n                            settings.banNum(audioC.selectedStartAyah.value + 1))),\n                      ),\n                      ListTile(\n                        onTap: () {\n                          showAnimatedDialog(\n                            animationType: DialogTransitionType.fade,\n                            barrierDismissible: true,\n                            context: context,\n                            builder: (BuildContext context) {\n                              return SelectEndSuraAudio();\n                            },\n                          ).then((value) {\n                            suraEditingController.clear();\n                            ayatEditingController.clear();\n                          });\n                        },\n                        minLeadingWidth: Get.width * 0.07,\n                        minVerticalPadding: Get.width * 0.04,\n                        leading: Leading('assets/icons/mic.svg'),\n                        title: Title('End Sura'.tr),\n                        trailing: Obx(() => SubTitle('${audioC.endSuraName.value}'.tr +\n                            \" \" +\n                            settings.banNum(audioC.selectedEndSura.value + 1) +\n                            ': ' +\n                            settings.banNum(audioC.selectedEndAyah.value + 1))),\n                      ),\n                      ListTile(\n                        onTap: () {\n                          Navigator.push(context, MaterialPageRoute(builder: (context) => RecitarDownload()));\n                        },\n                        minLeadingWidth: Get.width * 0.07,\n                        minVerticalPadding: Get.width * 0.04,\n                        leading: Leading('assets/icons/setting.svg'),\n                        title: Title('Select Qari'.tr),\n                        trailing:\n                            Obx(() => Container(child: SubTitle('${audioC.recitorName.value}'), width: Get.width * .4)),\n                      ),\n                      ListTile(\n                        onTap: () {\n                          if (audioC.repeatAyah.value < 3) {\n                            audioC.repeatAyah.value += 1;\n                          } else if (audioC.repeatAyah.value == 3) {\n                            audioC.repeatAyah.value = 100;\n                          } else if (audioC.repeatAyah.value == 100) {\n                            audioC.repeatAyah.value = 0;\n                          }\n                        },\n                        minLeadingWidth: Get.width * 0.07,\n                        minVerticalPadding: Get.width * 0.04,\n                        leading: Leading('assets/icons/repet.svg'),\n                        title: Title('Ayat Repeat'.tr),\n                        trailing: Obx(() => SubTitle(\n                            '${audioC.repeatAyah.value == 100 ? '\u221e' : settings.banNum(audioC.repeatAyah.value)}' +\n                                ' ' +\n                                'Time'.tr)),\n                      ),\n                      ListTile(\n                        onTap: () {\n                          if (audioC.ayahDelay.value < 9) {\n                            audioC.ayahDelay.value += 1;\n                          } else if (audioC.ayahDelay.value == 9) {\n                            audioC.ayahDelay.value = 0;\n                          }\n                        },\n                        minLeadingWidth: Get.width * 0.07,\n                        minVerticalPadding: Get.width * 0.04,\n                        leading: Leading('assets/icons/watch.svg'),\n                        title: Title('Ayat Delay'.tr),\n                        trailing: Obx(() => SubTitle(settings.banNum(audioC.ayahDelay.value) + ' ' + 'Sec'.tr)),\n                      ),\n                      SizedBox(height: Get.width * 0.05),\n                      InkWell(\n                        onTap: () async {\n                          var isJumpingDone = false;\n                          Navigator.pop(context);\n                          audioC.isArroWillShow.value = false;\n                          audioC.isPlayingButtonClick.value = true;\n                          audioC.isSettingPageVisable.value = true;\n\n                          await audioC\n                              .ayahsToBePlayed(\n                                  startSura: audioC.selectedStartSura.value + 1,\n                                  startAyah: audioC.selectedStartAyah.value + 1,\n                                  endSura: audioC.selectedEndSura.value + 1,\n                                  endAyah: audioC.selectedEndAyah.value + 1)\n                              .then((value) async {\n                            await audioC.playNow();\n                          }).then((value) {\n                            if (!settings.keepScreen.value) {\n                              FlutterScreenWake.keepOn(true);\n                            }\n                            audioC.player.play();\n                          });\n                          audioC.player.currentIndexStream.listen((event) async {\n                            audioC.currentPlayingSurah.value = int.parse(audioC.ayahPaths[audioC.player.currentIndex!]\n                                .substring(audioC.ayahPaths[audioC.player.currentIndex!].indexOf('suraID') + 7)\n                                .split('/')\n                                .first);\n\n                            if (Get.currentRoute == '/AyatReading') {\n                              Get.find<AyatReadingController>().pageController.animateToPage(\n                                  audioC.currentPlayingSurah.value - 1,\n                                  duration: Duration(milliseconds: 500),\n                                  curve: Curves.easeInOut);\n                              if (!settings.isMushaf.value && !isJumpingDone) {\n                                SchedulerBinding.instance.addPostFrameCallback((_) {\n                                  Future.delayed(\n                                    Duration(milliseconds: 500),\n                                    () {\n                                      Get.find<AyatReadingController>()\n                                          .itemScrollController[audioC.selectedStartSura.value]\n                                          .jumpTo(\n                                            alignment: .25,\n                                            index: audioC.currentPlayingAyah.value - 1,\n                                          );\n                                    },\n                                  ).then((value) {\n                                    isJumpingDone = true;\n                                  });\n                                });\n                              }\n                            }\n                            if (Get.currentRoute == '/PageByPageReading') {\n                              var pageNum = Get.find<AyatReadingController>()\n                                  .ayatList\n                                  .where((e) =>\n                                      e.suraId == audioC.currentPlayingSurah.value &&\n                                      e.ayahId == audioC.currentPlayingAyah.value)\n                                  .first\n                                  .page;\n                              var page = Get.find<SuraController>()\n                                  .groupedPageList\n                                  .map((e) => e.indexWhere((e) =>\n                                      e.suraId == audioC.currentPlayingSurah.value &&\n                                      e.ayahId == audioC.currentPlayingAyah.value))\n                                  .toList();\n                              page.removeWhere((e) => e == -1);\n                              Get.find<AyatReadingController>().pageByPageController.animateToPage(pageNum! - 1,\n                                  duration: Duration(milliseconds: 500), curve: Curves.easeInOut);\n                              if (!isJumpingDone)\n                                SchedulerBinding.instance.addPostFrameCallback((timeStamp) {\n                                  Future.delayed(\n                                    Duration(milliseconds: 500),\n                                    () {\n                                      Get.find<AyatReadingController>().itemScrollController[pageNum - 1].jumpTo(\n                                            index: page[0],\n                                            alignment: .25,\n                                          );\n                                    },\n                                  ).then((value) => isJumpingDone = true);\n                                });\n                            }\n                            if (Get.currentRoute == '/JuzByJuzReading') {\n                              var juzIndex = Get.find<SuraController>()\n                                  .groupedJuzList\n                                  .map((e) => e.indexWhere((e) =>\n                                      e.suraId == audioC.currentPlayingSurah.value &&\n                                      e.ayahId == audioC.currentPlayingAyah.value))\n                                  .toList();\n                              juzIndex.removeWhere((e) => e == -1);\n                              var juzNum = Get.find<AyatReadingController>()\n                                  .ayatList\n                                  .where((e) =>\n                                      e.suraId == audioC.currentPlayingSurah.value &&\n                                      e.ayahId == audioC.currentPlayingAyah.value)\n                                  .first\n                                  .para;\n                              Get.find<AyatReadingController>().juzByJuzController.animateToPage(juzNum! - 1,\n                                  duration: Duration(milliseconds: 500), curve: Curves.easeInOut);\n                              if (!isJumpingDone)\n                                SchedulerBinding.instance.addPostFrameCallback((timeStamp) {\n                                  Future.delayed(\n                                    Duration(milliseconds: 500),\n                                    () {\n                                      Get.find<AyatReadingController>().itemScrollController[juzNum - 1].jumpTo(\n                                            index: juzIndex[0],\n                                            alignment: .25,\n                                          );\n                                    },\n                                  ).then((value) => isJumpingDone = true);\n                                });\n                            }\n                            if (Get.currentRoute == '/HizbByHizbReading') {\n                              var hijb = Get.find<AyatReadingController>()\n                                  .ayatList\n                                  .where((e) =>\n                                      e.suraId == audioC.currentPlayingSurah.value &&\n                                      e.ayahId == audioC.currentPlayingAyah.value)\n                                  .first\n                                  .hijb;\n                              var hijbIndex = Get.find<SuraController>()\n                                  .groupedHizbList\n                                  .map((e) => e.indexWhere((e) => e.hijb == hijb))\n                                  .toList()\n                                  .indexWhere((e) => e == 0);\n                              var hijbIndexNum = Get.find<SuraController>()\n                                  .groupedHizbList\n                                  .map((e) => e.indexWhere((e) =>\n                                      e.suraId == audioC.currentPlayingSurah.value &&\n                                      e.ayahId == audioC.currentPlayingAyah.value))\n                                  .toList();\n                              hijbIndexNum.removeWhere((e) => e == -1);\n                              Get.find<AyatReadingController>().hijbByHijbController.animateToPage(hijbIndex,\n                                  duration: Duration(milliseconds: 500), curve: Curves.easeInOut);\n                              if (!isJumpingDone)\n                                SchedulerBinding.instance.addPostFrameCallback((timeStamp) {\n                                  Future.delayed(\n                                    Duration(milliseconds: 500),\n                                    () {\n                                      Get.find<AyatReadingController>().itemScrollController[hijbIndex].jumpTo(\n                                            index: hijbIndexNum[0],\n                                            alignment: .25,\n                                          );\n                                    },\n                                  ).then((value) => isJumpingDone = true);\n                                });\n                            }\n\n                            if (settings.isMushaf.value && Get.currentRoute == '/AyatReading') {\n                              var pageNo = await Get.put(BookmarkController())\n                                  .pageNum(audioC.selectedStartSura.value + 1, audioC.selectedStartAyah.value + 1);\n                              var wholeData = Get.find<SuraController>()\n                                  .groupedPageList\n                                  .map((e) => e.where((e) => e.suraId == audioC.selectedStartSura.value + 1).toList())\n                                  .toList();\n                              wholeData.removeWhere((element) => element.length == 0);\n                              var go = wholeData\n                                  .map((e) => e.indexWhere((e) => e.page == pageNo))\n                                  .toList()\n                                  .indexWhere((element) => element == 0);\n                              SchedulerBinding.instance.addPostFrameCallback((_) => Get.find<AyatReadingController>()\n                                  .itemScrollController1[audioC.selectedStartSura.value + 1]\n                                  .jumpTo(\n                                    index: go,\n                                    alignment: .25,\n                                  ));\n                            }\n                          });\n                        },\n                        child: Container(\n                            decoration: BoxDecoration(\n                                color: Theme.of(context).secondaryHeaderColor,\n                                borderRadius: BorderRadius.circular(Get.width * 0.1)),\n                            height: Get.width * .1,\n                            width: Get.width * .86,\n                            child: Row(mainAxisAlignment: MainAxisAlignment.center, children: [\n                              SvgPicture.asset('assets/icons/audio_play.svg',\n                                  height: Get.width * 0.045, color: Colors.white),\n                              SizedBox(width: Get.width * 0.03),\n                              Text('Play'.tr,\n                                  style: TextStyle(\n                                      color: Colors.white, fontWeight: FontWeight.w600, fontSize: Get.width * 0.04)),\n                            ])),\n                      ),\n                    ],\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ));\n  }\n}\n\nclass Leading extends StatelessWidget {\n  Leading(this.path);\n\n  final String? path;\n\n  @override\n  Widget build(BuildContext context) {\n    return SvgPicture.asset(path!, height: Get.width * 0.05, color: Theme.of(context).iconTheme.color)\n        .paddingOnly(top: Get.width * 0.005);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/ayat_reading/widget/AudioBottomSheet.dart", "file_name": "AudioBottomSheet.dart", "line": 350, "line_from": 350, "line_to": 374, "snippet": "  Widget build(BuildContext context) {\n    return Text(title!,\n        style: TextStyle(\n            color: Theme.of(context).textTheme.headline2!.color!.withOpacity(.8),\n            fontWeight: FontWeight.w600,\n            fontSize: Get.width * 0.04));\n  }\n}\n\nclass SubTitle extends StatelessWidget {\n  SubTitle(this.title);\n\n  final title;\n  @override\n  Widget build(BuildContext context) {\n    return Text(title,\n            overflow: TextOverflow.ellipsis,\n            textDirection: TextDirection.rtl,\n            style: TextStyle(\n                fontWeight: FontWeight.w600,\n                color: Theme.of(context).disabledColor.withOpacity(.8),\n                fontSize: Get.width * 0.038))\n        .paddingOnly(top: Get.width * 0.005);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/ayat_reading/widget/optionDialog.dart", "file_name": "optionDialog.dart", "line": 519, "line_from": 519, "line_to": 540, "snippet": "  Widget build(BuildContext context) {\n    return Text(\n      title,\n      style: TextStyle(fontWeight: FontWeight.w600, fontSize: Get.width * .04),\n    );\n  }\n}\n\nclass Leading extends StatelessWidget {\n  Leading(this.svg);\n\n  final svg;\n\n  @override\n  Widget build(BuildContext context) {\n    return SvgPicture.asset(\n      'assets/icons/ayat_option/$svg.svg',\n      height: Get.width * .048,\n      color: Theme.of(context).iconTheme.color,\n    );\n  }\n}"}, {"structure_type": "function", "name": "styles.", "docstring": "", "module": "src", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/ayat_reading/widget/src/markup.dart", "file_name": "markup.dart", "line": 14, "line_from": 14, "line_to": 257, "snippet": "/// MarkupText Widget is a wrapper for RichText that simplifies the creation of text with mixed styles.\nclass MarkupText extends StatelessWidget {\n  /// The text with markup\n  final String? text;\n\n  /// Alignment for the widget. TextAlign.left by default.\n  final TextAlign textAlign;\n\n  /// The style parameter works as with the Text widget. Styles defined will merge with default Style for Text.\n  final TextStyle? style;\n\n  /// MarkupText Widget constructor.\n  const MarkupText(this.text,\n      {Key? key, this.textAlign = TextAlign.left, this.style})\n      : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    List<_TextPart> partList = [];\n    String? current = \"\";\n    List<TextType> currentTypes = [];\n    String? cUrl;\n    String cColor = '';\n    String? dots;\n    addPart() {\n      if (current != \"\") {\n        partList.add(_TextPart(current, url: cUrl, color: cColor, dots: dots)\n          ..addAll(currentTypes));\n        current = \"\";\n      }\n    }\n\n    addIconPart(String code, double size, String color) {\n      partList.add(\n          _TextPart(\"\", icon: code, iconSize: size, color: color, dots: dots)\n            ..add(TextType.icon));\n    }\n\n    addType(TextType t) {\n      if (!currentTypes.contains(t)) currentTypes.add(t);\n    }\n\n    removeType(TextType t) {\n      if (currentTypes.contains(t)) currentTypes.remove(t);\n    }\n\n    for (int pointer = 0; pointer < text!.length; pointer++) {\n      if (text![pointer] == \"(\") {\n        int? end = text!.indexOf(\")\", pointer);\n        if (end > 0) {\n          String? code = text!.substring(pointer + 1, end);\n          switch (code) {\n            case \"b\":\n              addPart();\n              addType(TextType.bold);\n              pointer += 2;\n              break;\n            case \"i\":\n              addPart();\n              addType(TextType.italic);\n              pointer += 2;\n              break;\n            case \"u\":\n              addPart();\n              addType(TextType.underlined);\n              pointer += 2;\n              break;\n            case \"/b\":\n              addPart();\n              removeType(TextType.bold);\n              pointer += 3;\n              break;\n            case \"/i\":\n              addPart();\n              removeType(TextType.italic);\n              pointer += 3;\n              break;\n            case \"/u\":\n              addPart();\n              removeType(TextType.underlined);\n              pointer += 3;\n              break;\n            case \"/u\":\n              addPart();\n              removeType(TextType.underlined);\n              pointer += 3;\n              break;\n            case \"/a\":\n              addPart();\n              removeType(TextType.link);\n              cUrl = null;\n              pointer += 3;\n              break;\n            case \"/c\":\n              addPart();\n              removeType(TextType.color);\n              cColor = '';\n              pointer += 3;\n              break;\n            case \"/dots\":\n              addPart();\n              removeType(TextType.color);\n              cColor = '';\n              pointer += 3;\n              break;\n            default:\n              if (code.startsWith(\"a \")) {\n                addPart();\n                addType(TextType.link);\n                cUrl = code.substring(2);\n                pointer += code.length + 1;\n                break;\n              }\n              if (code.startsWith(\"c-\")) {\n                addPart();\n                addType(TextType.color);\n                cColor = code.substring(2);\n                pointer += code.length + 1;\n                break;\n              }\n              if (code.startsWith(\"icon-\")) {\n                addPart();\n                dots = code.substring(5);\n                addIconPart(code.substring(5), style?.fontSize ?? 14, cColor);\n                pointer += code.length + 1;\n                break;\n              }\n              current = current! + text![pointer];\n          }\n        } else\n          current = current! + text![pointer];\n      } else\n        current = current! + text![pointer];\n    }\n    addPart();\n\n    return RichText(\n      textDirection: TextDirection.rtl,\n      textAlign: textAlign,\n      text: TextSpan(\n          style: DefaultTextStyle.of(context).style.merge(style),\n          children: partList.map((e) => e.toSpan()).toList()),\n    );\n  }\n}\n\nenum TextType { link, bold, italic, underlined, color, icon }\n\nclass _TextPart {\n  final String? text;\n  final String? url;\n  final String? color;\n  final String? icon;\n  final String? dots;\n  final double? iconSize;\n\n  final List<TextType> types = [];\n\n  _TextPart(this.text,\n      {this.url, this.color, this.icon, this.iconSize, this.dots});\n\n  add(TextType type) {\n    types.add(type);\n  }\n\n  addAll(List<TextType> currentTypes) {\n    for (TextType type in currentTypes) types.add(type);\n  }\n\n  InlineSpan toSpan() {\n    Color? cColor;\n    TapGestureRecognizer? recognizer;\n    List<TextDecoration> decorations = [];\n    FontWeight fontWeight = FontWeight.normal;\n    FontStyle fontStyle = FontStyle.normal;\n    for (TextType type in types) {\n      switch (type) {\n        case TextType.link:\n          cColor = Colors.blue;\n          decorations.add(TextDecoration.underline);\n          if (url != null)\n            recognizer = TapGestureRecognizer()\n              ..onTap = () async {\n                if (await canLaunchUrl(Uri.parse(url!)))\n                  launchUrl(Uri.parse(url!));\n              };\n          break;\n        case TextType.color:\n          if (color!.startsWith(\"#\"))\n            cColor = MarkupParser.hexToColor(color!);\n          else\n            cColor = MarkupParser.nameToColor(color);\n          break;\n        case TextType.bold:\n          fontWeight = FontWeight.bold;\n          break;\n        case TextType.italic:\n          fontStyle = FontStyle.italic;\n          break;\n        case TextType.underlined:\n          decorations.add(TextDecoration.underline);\n          break;\n        case TextType.icon:\n          // IconData iconData = MarkupParser.getIconData(icon);\n          if (color != null) {\n            if (color!.startsWith(\"#\"))\n              cColor = MarkupParser.hexToColor(color!);\n            else\n              cColor = MarkupParser.nameToColor(color);\n          }\n          if (dots != null) {\n            return WidgetSpan(\n              // alignment: ui.PlaceholderAlignment.middle,\n              child: Padding(\n                padding: const EdgeInsets.only(\n                  right: 18.0,\n                ),\n                child: Text(\n                  dots!,\n                  style: TextStyle(\n                      color: theme == 6 ? Color(0xFFC2D7EF) : Colors.black,\n                      fontSize: settings.scriptFont.value == \"Scheherazade\" ||\n                              settings.scriptFont.value == \"Lateef\"\n                          ? settings.arabicFont.value * .58\n                          : settings.arabicFont.value * .65,\n                      fontFamily: \"Me Quran\"),\n                ),\n              ),\n            );\n          }\n      }\n    }\n    return TextSpan(\n        text: this.text,\n        recognizer: recognizer,\n        style: TextStyle(\n            fontStyle: fontStyle,\n            fontWeight: fontWeight,\n            color: cColor,\n            decoration: TextDecoration.combine(decorations)));\n  }\n}\n"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "tafsirPage", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/tafsirPage/html.dart", "file_name": "html.dart", "line": 144, "line_from": 144, "line_to": 305, "snippet": "//   Widget build(BuildContext context) {\n//     final dom.Element doc =\n//         data != null ? HtmlParser.parseHTML(data!) : document!.documentElement!;\n//     final double? width = shrinkWrap ? null : MediaQuery.of(context).size.width;\n\n//     return Container(\n//       width: width,\n//       child: HtmlParser(\n//         key: _anchorKey,\n//         htmlData: doc,\n//         onLinkTap: onLinkTap,\n//         onAnchorTap: onAnchorTap,\n//         onImageTap: onImageTap,\n//         onCssParseError: onCssParseError,\n//         onImageError: onImageError,\n//         shrinkWrap: shrinkWrap,\n//         selectable: false,\n//         style: style!,\n//         customRenders: customRenders,\n//         // imageRenders: {}\n//         //   ..addAll(customImageRenders!)\n//         //   ..addAll(defaultImageRenders),\n//         tagsList: tagsList!.isEmpty ? Html.tags : tagsList!,\n//         // navigationDelegateForIframe: navigationDelegateForIframe,\n//       ),\n//     );\n//   }\n// }\n\n// class SelectableHtml extends StatelessWidget {\n//   /// The `SelectableHtml` widget takes HTML as input and displays a RichText\n//   /// tree of the parsed HTML content (which is selectable)\n//   ///\n//   /// **Attributes**\n//   /// **data** *required* takes in a String of HTML data (required only for `Html` constructor).\n//   /// **document** *required* takes in a Document of HTML data (required only for `Html.fromDom` constructor).\n//   ///\n//   /// **onLinkTap** This function is called whenever a link (`<a href>`)\n//   /// is tapped.\n//   ///\n//   /// **onAnchorTap** This function is called whenever an anchor (#anchor-id)\n//   /// is tapped.\n//   ///\n//   /// **tagsList** Tag names in this array will be the only tags rendered. By default, all tags that support selectable content are rendered.\n//   ///\n//   /// **style** Pass in the style information for the Html here.\n//   /// See [its wiki page](https://github.com/Sub6Resources/flutter_html/wiki/Style) for more info.\n//   ///\n//   /// **PLEASE NOTE**\n//   ///\n//   /// There are a few caveats due to Flutter [#38474](https://github.com/flutter/flutter/issues/38474):\n//   ///\n//   /// 1. The list of tags that can be rendered is significantly reduced.\n//   /// Key omissions include no support for images/video/audio, table, and ul/ol because they all require widgets and `WidgetSpan`s.\n//   ///\n//   /// 2. No support for `customRender`, `customImageRender`, `onImageError`, `onImageTap`, `onMathError`, and `navigationDelegateForIframe`.\n//   ///\n//   /// 3. Styling support is significantly reduced. Only text-related styling works\n//   /// (e.g. bold or italic), while container related styling (e.g. borders or padding/margin)\n//   /// do not work because we can't use the `ContainerSpan` class (it needs an enclosing `WidgetSpan`).\n\n//   SelectableHtml({\n//     Key? key,\n//     GlobalKey? anchorKey,\n//     @required this.data,\n//     this.onLinkTap,\n//     this.onAnchorTap,\n//     this.onCssParseError,\n//     this.shrinkWrap = false,\n//     this.style = const {},\n//     this.tagsList = const [],\n//     this.selectionControls,\n//     this.scrollPhysics,\n//   })  : document = null,\n//         assert(data != null),\n//         _anchorKey = anchorKey ?? GlobalKey(),\n//         super(key: key);\n\n//   SelectableHtml.fromDom({\n//     Key? key,\n//     GlobalKey? anchorKey,\n//     @required this.document,\n//     this.onLinkTap,\n//     this.onAnchorTap,\n//     this.onCssParseError,\n//     this.shrinkWrap = false,\n//     this.style = const {},\n//     this.tagsList = const [],\n//     this.selectionControls,\n//     this.scrollPhysics,\n//   })  : data = null,\n//         assert(document != null),\n//         _anchorKey = anchorKey ?? GlobalKey(),\n//         super(key: key);\n\n//   /// A unique key for this Html widget to ensure uniqueness of anchors\n//   final GlobalKey _anchorKey;\n\n//   /// The HTML data passed to the widget as a String\n//   final String? data;\n\n//   /// The HTML data passed to the widget as a pre-processed [dom.Document]\n//   final dom.Document? document;\n\n//   /// A function that defines what to do when a link is tapped\n//   final OnTap? onLinkTap;\n\n//   /// A function that defines what to do when an anchor link is tapped. When this value is set,\n//   /// the default anchor behaviour is overwritten.\n//   final OnTap? onAnchorTap;\n\n//   /// A function that defines what to do when CSS fails to parse\n//   final OnCssParseError? onCssParseError;\n\n//   /// A parameter that should be set when the HTML widget is expected to be\n//   /// flexible\n//   final bool shrinkWrap;\n\n//   /// A list of HTML tags that are the only tags that are rendered. By default, this list is empty and all supported HTML tags are rendered.\n//   final List<String>? tagsList;\n\n//   /// An API that allows you to override the default style for any HTML element\n//   final Map<String, Style>? style;\n\n//   /// Custom Selection controls allows you to override default toolbar and build custom toolbar\n//   /// options\n//   final TextSelectionControls? selectionControls;\n\n//   /// Allows you to override the default scrollPhysics for [SelectableText.rich]\n//   final ScrollPhysics? scrollPhysics;\n\n//   static List<String> get tags => new List<String>.from(SELECTABLE_ELEMENTS);\n\n//   @override\n//   Widget build(BuildContext context) {\n//     final dom.Element? doc =\n//         data != null ? HtmlParser.parseHTML(data!) : document!.documentElement;\n//     final double? width = shrinkWrap ? null : MediaQuery.of(context).size.width;\n\n//     return Container(\n//       width: width,\n//       child: HtmlParser(\n//         key: _anchorKey,\n//         htmlData: doc!,\n//         onLinkTap: onLinkTap,\n//         onAnchorTap: onAnchorTap,\n//         onImageTap: null,\n//         onCssParseError: onCssParseError,\n//         onImageError: null,\n//         shrinkWrap: shrinkWrap,\n//         selectable: true,\n//         style: style!,\n//         customRenders: {},\n//         // imageRenders: defaultImageRenders,\n//         tagsList: tagsList!.isEmpty ? SelectableHtml.tags : tagsList!,\n//         // navigationDelegateForIframe: null,\n//         selectionControls: selectionControls,\n//         scrollPhysics: scrollPhysics,\n//       ),\n//     );\n//   }\n// }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "tafsirPage", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/tafsirPage/DraggableScrollbar.dart", "file_name": "DraggableScrollbar.dart", "line": 287, "line_from": 287, "line_to": 528, "snippet": "  Widget build(BuildContext context) {\n    return FadeTransition(\n      opacity: animation!,\n      child: Container(\n        margin: EdgeInsets.only(right: 12.0),\n        child: Material(\n          elevation: 4.0,\n          color: backgroundColor,\n          borderRadius: BorderRadius.all(Radius.circular(16.0)),\n          child: Container(\n            constraints: constraints,\n            alignment: Alignment.center,\n            child: child,\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass _DraggableScrollbarState extends State<DraggableScrollbar>\n    with TickerProviderStateMixin {\n  double? _barOffset;\n  double? _viewOffset;\n  bool? _isDragInProcess;\n\n  AnimationController? _thumbAnimationController;\n  Animation<double>? _thumbAnimation;\n  AnimationController? _labelAnimationController;\n  Animation<double>? _labelAnimation;\n  Timer? _fadeoutTimer;\n\n  @override\n  void initState() {\n    super.initState();\n    _barOffset = 0.0;\n    _viewOffset = 0.0;\n    _isDragInProcess = false;\n\n    _thumbAnimationController = AnimationController(\n      vsync: this,\n      duration: widget.scrollbarAnimationDuration,\n    );\n\n    _thumbAnimation = CurvedAnimation(\n      parent: _thumbAnimationController!,\n      curve: Curves.fastOutSlowIn,\n    );\n\n    _labelAnimationController = AnimationController(\n      vsync: this,\n      duration: widget.scrollbarAnimationDuration,\n    );\n\n    _labelAnimation = CurvedAnimation(\n      parent: _labelAnimationController!,\n      curve: Curves.fastOutSlowIn,\n    );\n  }\n\n  @override\n  void dispose() {\n    _thumbAnimationController!.dispose();\n    _labelAnimationController!.dispose();\n    _fadeoutTimer?.cancel();\n    super.dispose();\n  }\n\n  double get barMaxScrollExtent =>\n      context.size!.height - widget.heightScrollThumb!;\n\n  double get barMinScrollExtent => 0.0;\n\n  double get viewMaxScrollExtent => widget.controller!.position.maxScrollExtent;\n\n  double get viewMinScrollExtent => widget.controller!.position.minScrollExtent;\n\n  @override\n  Widget build(BuildContext context) {\n\n    if (widget.labelTextBuilder == null && _isDragInProcess!) {\n   \n    }\n\n    return LayoutBuilder(\n        builder: (BuildContext context, BoxConstraints constraints) {\n    \n\n      return NotificationListener<ScrollNotification>(\n        onNotification: (ScrollNotification notification) {\n          changePosition(notification);\n          return false;\n        },\n        child: Stack(\n          children: <Widget>[\n            RepaintBoundary(\n              child: widget.child,\n            ),\n            RepaintBoundary(\n                child: GestureDetector(\n              onVerticalDragStart: _onVerticalDragStart,\n              onVerticalDragUpdate: _onVerticalDragUpdate,\n              onVerticalDragEnd: _onVerticalDragEnd,\n\n              // onverticalDragStart: _onVerticalDragStart,\n              // onverticalDragUpdate: _onVerticalDragUpdate,\n              // onverticalDragEnd: _onVerticalDragEnd,\n              child: Container(\n                alignment: Alignment.topRight,\n                margin: EdgeInsets.only(top: _barOffset!),\n                padding: widget.padding,\n                child: widget.scrollThumbBuilder!(\n                  widget.backgroundColor!,\n                  _thumbAnimation!,\n                  _labelAnimation!,\n                  widget.heightScrollThumb!,\n                  // labelText: labelText!,\n                  labelConstraints: widget.labelConstraints!,\n                ),\n              ),\n            )),\n          ],\n        ),\n      );\n    });\n  }\n\n  //scroll bar has received notification that it's view was scrolled\n  //so it should also changes his position\n  //but only if it isn't dragged\n  changePosition(ScrollNotification notification) {\n    if (_isDragInProcess!) {\n      return;\n    }\n\n    setState(() {\n      if (notification is ScrollUpdateNotification) {\n        _barOffset = _barOffset! +\n            getBarDelta(\n              notification.scrollDelta!,\n              barMaxScrollExtent,\n              viewMaxScrollExtent,\n            );\n\n        if (_barOffset! < barMinScrollExtent) {\n          _barOffset = barMinScrollExtent;\n        }\n        if (_barOffset! > barMaxScrollExtent) {\n          _barOffset = barMaxScrollExtent;\n        }\n\n        _viewOffset = _viewOffset! + notification.scrollDelta!;\n        if (_viewOffset! < widget.controller!.position.minScrollExtent) {\n          _viewOffset = widget.controller!.position.minScrollExtent;\n        }\n        if (_viewOffset! > viewMaxScrollExtent) {\n          _viewOffset = viewMaxScrollExtent;\n        }\n      }\n\n      if (notification is ScrollUpdateNotification ||\n          notification is OverscrollNotification) {\n        if (_thumbAnimationController!.status == AnimationStatus.forward) {\n          _thumbAnimationController!.forward();\n        }\n\n        _fadeoutTimer?.cancel();\n        _fadeoutTimer = Timer(widget.scrollbarTimeToFade!, () {\n          _thumbAnimationController!.reverse();\n          _labelAnimationController!.reverse();\n          _fadeoutTimer = null;\n        });\n      }\n    });\n  }\n\n  double getBarDelta(\n    double scrollViewDelta,\n    double barMaxScrollExtent,\n    double viewMaxScrollExtent,\n  ) {\n    return scrollViewDelta * barMaxScrollExtent / viewMaxScrollExtent;\n  }\n\n  double getScrollViewDelta(\n    double barDelta,\n    double barMaxScrollExtent,\n    double viewMaxScrollExtent,\n  ) {\n    return barDelta * viewMaxScrollExtent / barMaxScrollExtent;\n  }\n\n  void _onVerticalDragStart(DragStartDetails details) {\n    setState(() {\n      _isDragInProcess = true;\n      _labelAnimationController!.forward();\n      _fadeoutTimer?.cancel();\n    });\n  }\n\n  void _onVerticalDragUpdate(DragUpdateDetails details) {\n    setState(() {\n      if (_thumbAnimationController!.status == AnimationStatus.forward) {\n        _thumbAnimationController!.forward();\n      }\n      if (_isDragInProcess!) {\n        _barOffset = _barOffset! + details.delta.dy;\n\n        if (_barOffset! < barMinScrollExtent) {\n          _barOffset = barMinScrollExtent;\n        }\n        if (_barOffset! > barMaxScrollExtent) {\n          _barOffset = barMaxScrollExtent;\n        }\n\n        double viewDelta = getScrollViewDelta(\n            details.delta.dy, barMaxScrollExtent, viewMaxScrollExtent);\n\n        _viewOffset = widget.controller!.position.pixels + viewDelta;\n        if (_viewOffset! < widget.controller!.position.minScrollExtent) {\n          _viewOffset = widget.controller!.position.minScrollExtent;\n        }\n        if (_viewOffset! > viewMaxScrollExtent) {\n          _viewOffset = viewMaxScrollExtent;\n        }\n        widget.controller!.jumpTo(_viewOffset!);\n      }\n    });\n  }\n\n  void _onVerticalDragEnd(DragEndDetails details) {\n    _fadeoutTimer = Timer(widget.scrollbarTimeToFade!, () {\n      _thumbAnimationController!.reverse();\n      _labelAnimationController!.reverse();\n      _fadeoutTimer = null;\n    });\n\n    setState(() {\n      _isDragInProcess = false;\n    });\n  }\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "tafsirPage", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/tafsirPage/DraggableScrollbar.dart", "file_name": "DraggableScrollbar.dart", "line": 540, "line_from": 540, "line_to": 604, "snippet": "  void paint(Canvas canvas, Size size) {\n    final paint = Paint()..color = color;\n    const width = 12.0;\n    const height = 8.0;\n    final baseX = size.width / 2;\n    final baseY = size.height / 2;\n\n    canvas.drawPath(\n      _trianglePath(Offset(baseX, baseY - 2.0), width, height, true),\n      paint,\n    );\n    canvas.drawPath(\n      _trianglePath(Offset(baseX, baseY + 2.0), width, height, false),\n      paint,\n    );\n  }\n\n  static Path _trianglePath(Offset o, double width, double height, bool isUp) {\n    return Path()\n      ..moveTo(o.dx, o.dy)\n      ..lineTo(o.dx + width, o.dy)\n      ..lineTo(o.dx + (width / 2), isUp ? o.dy - height : o.dy + height)\n      ..close();\n  }\n}\n\n///This cut 2 lines in arrow shape\nclass ArrowClipper extends CustomClipper<Path> {\n  @override\n  Path getClip(Size size) {\n    Path path = Path();\n    path.lineTo(0.0, size.height);\n    path.lineTo(size.width, size.height);\n    path.lineTo(size.width, 0.0);\n    path.lineTo(0.0, 0.0);\n    path.close();\n\n    double arrowWidth = 8.0;\n    double startPointX = (size.width - arrowWidth) / 2;\n    double startPointY = size.height / 2 - arrowWidth / 2;\n    path.moveTo(startPointX, startPointY);\n    path.lineTo(startPointX + arrowWidth / 2, startPointY - arrowWidth / 2);\n    path.lineTo(startPointX + arrowWidth, startPointY);\n    path.lineTo(startPointX + arrowWidth, startPointY + 1.0);\n    path.lineTo(\n        startPointX + arrowWidth / 2, startPointY - arrowWidth / 2 + 1.0);\n    path.lineTo(startPointX, startPointY + 1.0);\n    path.close();\n\n    startPointY = size.height / 2 + arrowWidth / 2;\n    path.moveTo(startPointX + arrowWidth, startPointY);\n    path.lineTo(startPointX + arrowWidth / 2, startPointY + arrowWidth / 2);\n    path.lineTo(startPointX, startPointY);\n    path.lineTo(startPointX, startPointY - 1.0);\n    path.lineTo(\n        startPointX + arrowWidth / 2, startPointY + arrowWidth / 2 - 1.0);\n    path.lineTo(startPointX + arrowWidth, startPointY - 1.0);\n    path.close();\n\n    return path;\n  }\n\n  @override\n  bool shouldReclip(CustomClipper<Path> oldClipper) => false;\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/tafsirPage/widget/titleBuilder.dart", "file_name": "titleBuilder.dart", "line": 24, "line_from": 24, "line_to": 168, "snippet": "  Widget build(BuildContext context) {\n    return InkWell(\n        onTap: () => toogleFunction(animated: true),\n        child: MediaQuery(\n          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Obx(\n              () => Container(\n                padding: EdgeInsets.symmetric(\n                    vertical: settings.cardView.value\n                        ? Get.width * .035\n                        : Get.width * .02,\n                    horizontal: Get.width * 0.04),\n                decoration: BoxDecoration(\n                    color: settings.simpleView.value && theme != 6\n                        ? Theme.of(context)\n                            .secondaryHeaderColor\n                            .withOpacity(.15)\n                        : Theme.of(context).cardColor,\n                    borderRadius: BorderRadius.circular(12)),\n                child: Row(\n                  crossAxisAlignment: CrossAxisAlignment.center,\n                  children: [\n                    Expanded(\n                        child: Row(\n                      children: [\n                        noteIndex\n                            ? SvgPicture.asset('assets/icons/notes.svg',\n                                    height: Get.width * .055,\n                                    color:\n                                        Theme.of(context).secondaryHeaderColor)\n                                .paddingOnly(right: Get.width * .04)\n                            : SizedBox.shrink(),\n                        Flexible(\n                          child: Text(\n                            title,\n                            overflow: TextOverflow.clip,\n                            style: TextStyle(\n                                fontSize: Get.width * .04,\n                                fontWeight: FontWeight.w600,\n                                color: animationValue! < 0.5\n                                    ? Theme.of(context)\n                                        .textTheme\n                                        .headline2!\n                                        .color!\n                                    : Theme.of(context).secondaryHeaderColor),\n                          ),\n                        ),\n                      ],\n                    )),\n                    Transform.rotate(\n                      angle: math.pi * animationValue! / 1,\n                      child: Icon(Icons.expand_more,\n                          color: animationValue! < 0.5\n                              ? Theme.of(context).iconTheme.color\n                              : Theme.of(context).secondaryHeaderColor,\n                          size: Get.width * .06),\n                      alignment: Alignment.center,\n                    )\n                  ],\n                ),\n              ).paddingSymmetric(\n                  horizontal: settings.cardView.value ? 0 : Get.width * .03),\n            ),\n          ),\n        ));\n  }\n}\n\nclass CustomTitleBuilder2 extends StatelessWidget {\n  CustomTitleBuilder2(\n      {@required this.toogleFunction,\n      @required this.title,\n      @required this.animationValue,\n      this.noteIndex = false});\n\n  final toogleFunction;\n  final title;\n  final noteIndex;\n  final double? animationValue;\n\n  final settings = Get.put(SettingsController());\n  final theme = themeController.currentTheme.value;\n\n  @override\n  Widget build(BuildContext context) {\n    return InkWell(\n        onTap: () => toogleFunction(animated: true),\n        child: MediaQuery(\n          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Obx(\n              () => Container(\n                padding: EdgeInsets.symmetric(\n                    vertical: settings.cardView.value\n                        ? Get.width * .035\n                        : Get.width * .02,\n                    horizontal: Get.width * 0.04),\n                decoration: BoxDecoration(\n                    color: Theme.of(context).secondaryHeaderColor,\n                    borderRadius: BorderRadius.circular(Get.width * .07)),\n                child: Row(\n                  crossAxisAlignment: CrossAxisAlignment.center,\n                  children: [\n                    Expanded(\n                        child: Row(\n                      children: [\n                        noteIndex\n                            ? SvgPicture.asset('assets/icons/notes.svg',\n                                    height: Get.width * .055,\n                                    color:\n                                        Theme.of(context).secondaryHeaderColor)\n                                .paddingOnly(right: Get.width * .04)\n                            : SizedBox.shrink(),\n                        Flexible(\n                          child: Center(\n                            child: Text(\n                              title,\n                              overflow: TextOverflow.clip,\n                              style: TextStyle(\n                                  fontSize: Get.width * .04,\n                                  fontWeight: FontWeight.w600,\n                                  color: Colors.white),\n                            ),\n                          ),\n                        ),\n                      ],\n                    )),\n                    Transform.rotate(\n                      angle: math.pi * animationValue! / 1,\n                      child: Icon(Icons.expand_more,\n                          color: Colors.white, size: Get.width * .06),\n                      alignment: Alignment.center,\n                    )\n                  ],\n                ),\n              ).paddingSymmetric(\n                  horizontal: settings.cardView.value ? 0 : Get.width * .03),\n            ),\n          ),\n        ));\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widget", "file_path": "quran-flutter/lib/pages/home/top_pages/home/tabPages/surah/tafsirPage/widget/TafsirNote.dart", "file_name": "TafsirNote.dart", "line": 24, "line_from": 24, "line_to": 208, "snippet": "  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Directionality(\n        textDirection: TextDirection.ltr,\n        child: Theme(\n          data: Theme.of(context).copyWith(dividerColor: Colors.transparent),\n          child: Container(\n            decoration: BoxDecoration(\n                color: settings.cardView.value\n                    ? Theme.of(context).cardColor\n                    : Colors.transparent,\n                borderRadius: BorderRadius.circular(12)),\n            child: ClipRRect(\n              borderRadius: BorderRadius.circular(12),\n              child: Obx(() {\n                int? noteIndex = noteController.noteList.indexWhere((element) =>\n                    element.surahNumber == widget.suraId &&\n                    element.ayatNumber == index);\n                if (noteIndex.isNegative) {\n                  return Container(\n                    color: settings.simpleView.value && theme != 6\n                        ? Theme.of(context)\n                            .secondaryHeaderColor\n                            .withOpacity(.15)\n                        : Theme.of(context).cardColor,\n                    child: ListTile(\n                      onTap: () {\n                        if (noteIndex.isNegative) {\n                          noteController.noteTitleController.value.clear();\n                          noteController.noteTextController.value.clear();\n                          Get.dialog(\n                            AddOrEdit(\n                              title:\n                                  noteController.noteTitleController.value.text,\n                              note:\n                                  noteController.noteTextController.value.text,\n                              surahID: widget.suraId,\n                              ayatID: index,\n                              isEdit: false,\n                            ),\n                          ).then(\n                              (value) => noteController.textCount.value = '');\n                        }\n                      },\n                      visualDensity: VisualDensity(\n                          vertical: settings.simpleView.value ? -4 : 0),\n                      minLeadingWidth: Get.width * .05,\n                      leading: SvgPicture.asset('assets/icons/notes.svg',\n                              height: Get.width * .055,\n                              color: Theme.of(context).secondaryHeaderColor)\n                          .paddingOnly(top: Get.width * .005),\n                      title: Text(\n                        \"Add Note\".tr,\n                        style: TextStyle(\n                            fontSize: Get.width * .04,\n                            fontWeight: FontWeight.w600),\n                      ),\n                      trailing: Icon(\n                        Icons.add_circle_outline_rounded,\n                        // color: Theme.of(context).secondaryHeaderColor,\n                        size: Get.width * .06,\n                      ),\n                    ),\n                  );\n                } else {\n                  return InkWell(\n                    onLongPress: editDialog,\n                    child: ListTileTheme(\n                      contentPadding: EdgeInsets.zero,\n                      dense: true,\n                      child: ExpansionWidget(\n                          initiallyExpanded: notexpand,\n                          duration: Duration(milliseconds: 200),\n                          titleBuilder: (double animationValue, _,\n                              bool isExpaned, toogleFunction) {\n                            return CustomTitleBuilder(\n                                toogleFunction: toogleFunction,\n                                title:\n                                    noteController.noteList[noteIndex].noteName,\n                                animationValue: animationValue,\n                                noteIndex: true);\n                          },\n                          content: Column(children: [\n                            Obx(() {\n                              return InkWell(\n                                onLongPress: editDialog,\n                                child: Container(\n                                  padding: EdgeInsets.only(\n                                      left: Get.width * .02,\n                                      right: Get.width * .02,\n                                      top: Get.width * .03,\n                                      bottom: Get.width * .01),\n                                  child: Column(\n                                    children: [\n                                      Align(\n                                        alignment: Alignment.topLeft,\n                                        child:\n\n                                            // Text(\n                                            //   noteController\n                                            //       .noteList[noteIndex].note,\n                                            //   style: TextStyle(\n                                            //       color: theme == 6\n                                            //           ? Color(0xFFC2D7EF)\n                                            //           : Colors.black,\n                                            //       fontFamily: 'Kalpurush',\n                                            //       fontSize: settings\n                                            //           .translationFont.value),\n                                            // ),\n\n                                            DefaultTextStyle(\n                                                style: TextStyle(\n                                                    fontSize: settings\n                                                        .translationFont.value,\n                                                    fontFamily: 'Kalpurush',\n                                                    color: theme == 6\n                                                        ? Color(0xFFC2D7EF)\n                                                        : Colors.black),\n                                                child: RichWidget(\n                                                    noteController\n                                                        .noteList[noteIndex]\n                                                        .note,\n                                                    lanName)),\n                                      ),\n                                      Align(\n                                        alignment: Alignment.bottomRight,\n                                        child: InkWell(\n                                            splashColor: Colors.transparent,\n                                            highlightColor: Colors.transparent,\n                                            onTap: editDialog,\n                                            child: Text(\n                                              \"Edit\".tr,\n                                              style: TextStyle(\n                                                  fontWeight: FontWeight.w600,\n                                                  color: Theme.of(context)\n                                                      .secondaryHeaderColor,\n                                                  fontSize: Get.width * 0.04),\n                                            ).paddingOnly(\n                                                top: Get.width * 0.03,\n                                                bottom: settings.cardView.value\n                                                    ? Get.width * 0.03\n                                                    : 0,\n                                                right: Get.width * 0.02,\n                                                left: Get.width * 0.05)),\n                                      ),\n                                    ],\n                                  ),\n                                ),\n                              );\n                              // }\n                            }),\n                          ])),\n                    ),\n                  );\n                }\n              }),\n            ),\n          ).paddingOnly(\n              left: settings.cardView.value ? 0 : Get.width * .03,\n              right: settings.cardView.value ? 0 : Get.width * .03,\n              bottom: Get.width * .035),\n        ),\n      ),\n    );\n  }\n\n  void editDialog() {\n    int? noteIndex = noteController.noteList.indexWhere((element) =>\n        element.surahNumber == widget.suraId && element.ayatNumber == index);\n\n    if (!noteIndex.isNegative) {\n      noteController.noteTextController.value.text =\n          noteController.noteList[noteIndex].note!;\n      noteController.noteTitleController.value.text =\n          noteController.noteList[noteIndex].noteName!;\n      Get.dialog(AddOrEdit(\n        title: noteController.noteTitleController.value.text,\n        note: noteController.noteTextController.value.text,\n        surahID: widget.suraId,\n        ayatID: index,\n        isEdit: true,\n      )).then((value) => noteController.textCount.value = '');\n    }\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Bookmark", "file_path": "quran-flutter/lib/pages/collection/items/Bookmark/addBookmark.dart", "file_name": "addBookmark.dart", "line": 32, "line_from": 32, "line_to": 478, "snippet": "  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Directionality(\n        textDirection: TextDirection.ltr,\n        child: Column(\n          children: [\n            Align(\n              alignment: Alignment.topLeft,\n              child: Text(\"Choose Folder\".tr,\n                  style: TextStyle(\n                      fontWeight: FontWeight.w600, fontSize: Get.width * .04)),\n            ),\n            SizedBox(height: Get.width * .05),\n            Container(\n              height: Get.width * 0.14,\n              decoration: BoxDecoration(\n                  color:\n                      Theme.of(context).bottomSheetTheme.modalBackgroundColor,\n                  borderRadius: BorderRadius.circular(15)),\n              child: InkWell(\n                splashColor: Colors.transparent,\n                highlightColor: Colors.transparent,\n                onTap: () {\n                  controller.initailLoad().then((value) {\n                    if (controller.bookmarkData.length > 0)\n                      Get.dialog(ChooseFolderDialog());\n                  });\n                },\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: [\n                    Row(\n                      children: [\n                        Obx(\n                          () => SvgPicture.asset(\n                            'assets/icons/folder.svg',\n                            color: controller.colorReturn(\n                                controller.selectFolderColor.value),\n                            height: Get.width * .045,\n                          ).paddingOnly(left: Get.width * .05),\n                        ),\n                        SizedBox(width: Get.width * 0.05),\n                        Obx(() => Text(\n                              controller.selectFolder.value == \"\" ||\n                                      controller.bookmarkUniqueData\n                                              .where((p0) =>\n                                                  p0.folderName ==\n                                                  controller.selectFolder.value)\n                                              .length ==\n                                          0\n                                  ? \"Favourites\"\n                                  : controller.selectFolder.value,\n                              style: TextStyle(fontSize: Get.width * 0.038),\n                            )),\n                      ],\n                    ),\n                    Icon(Icons.expand_more_outlined, size: Get.width * .06)\n                        .paddingOnly(right: Get.width * .03),\n                  ],\n                ),\n              ),\n            ),\n            SizedBox(height: Get.width * .05),\n            Form(\n              key: formKey,\n              child: Column(\n                children: [\n                  Container(\n                    child: TextFormField(\n                        textCapitalization: TextCapitalization.words,\n                        validator: (v) {\n                          return controller.validFunc(v, nameController);\n                        },\n                        inputFormatters: [LengthLimitingTextInputFormatter(30)],\n                        controller: nameController,\n                        decoration: inputDecoration(\n                            context, \"Create New Bookmark Folder\".tr,\n                            size: .035)),\n                  ).paddingOnly(bottom: Get.width * 0.05),\n                  Row(\n                    children: [\n                      SvgPicture.asset(\n                        'assets/icons/bucket.svg',\n                        height: Get.width * .05,\n                        color: Theme.of(context).iconTheme.color,\n                      ).paddingOnly(left: Get.width * .01),\n                      SizedBox(width: Get.width * .04),\n                      Text(\n                        \"Choose Color\".tr,\n                        style: TextStyle(\n                            color: Theme.of(context).textTheme.headline1!.color,\n                            fontSize: Get.width * .038,\n                            fontWeight: FontWeight.w500),\n                      )\n                    ],\n                  ).paddingOnly(bottom: Get.width * 0.03),\n                  SingleChildScrollView(\n                    scrollDirection: Axis.horizontal,\n                    child: Row(\n                      children: List.generate(\n                          colorList.length,\n                          (index) => Padding(\n                              padding: EdgeInsets.symmetric(\n                                  vertical: Get.width * .03,\n                                  horizontal: Get.width * .015),\n                              child: Obx(\n                                () => InkWell(\n                                  splashColor: Colors.transparent,\n                                  highlightColor: Colors.transparent,\n                                  onTap: () {\n                                    controller.colorSelectedItem.value =\n                                        colorList[index].id;\n                                  },\n                                  child: Container(\n                                    decoration: BoxDecoration(\n                                        color: colorList[index].colorCode,\n                                        borderRadius:\n                                            BorderRadius.circular(50)),\n                                    height: Get.width * 0.07,\n                                    width: Get.width * 0.07,\n                                    child: Center(\n                                      child: Container(\n                                        height: Get.width * .038,\n                                        width: Get.width * .038,\n                                        decoration: BoxDecoration(\n                                            shape: BoxShape.circle,\n                                            color: controller.colorSelectedItem\n                                                        .value ==\n                                                    colorList[index].id\n                                                ? Colors.white\n                                                : Colors.transparent),\n                                        child: Center(\n                                          child: Icon(\n                                            Icons.check,\n                                            size: Get.width * 0.03,\n                                            color: controller.colorSelectedItem\n                                                        .value ==\n                                                    colorList[index].id\n                                                ? colorList[index].colorCode\n                                                : Colors.transparent,\n                                          ),\n                                        ),\n                                      ),\n                                    ),\n                                  ),\n                                ),\n                              ))),\n                    ),\n                  ).paddingOnly(bottom: Get.width * 0.04),\n                  InkWell(\n                    splashColor: Colors.transparent,\n                    highlightColor: Colors.transparent,\n                    onTap: () async {\n                      if (formKey.currentState!.validate()) {\n                        Get.back();\n                        var folderName = \"\";\n\n                        if (nameController.text.isEmpty &&\n                            controller.selectFolder.value == \"\") {\n                          folderName = \"Favourite\";\n                        } else if (nameController.text.isEmpty) {\n                          folderName = controller.selectFolder.value;\n                        }  else {\n                          folderName = nameController.text;\n                        }\n                        var item = BookmarkModel(\n                          folderName: folderName.trim(),\n                          suraID: suraId,\n                          ayatID: ayatID,\n                          page: page,\n                          color: controller.colorSelectedItem.value,\n                          date: DateTime.now().toString(),\n                        );\n\n                        await database\n                            .addBookMarkItem(item)\n                            .then((value) => controller.updateColor(\n                                name: folderName.trim(),\n                                newColor: controller.colorSelectedItem.value))\n                            .then((value) async {\n                          await controller\n                              .initailLoad()\n                              .then(\n                                  (value) async => await controller.addBackup())\n                              .then((value) =>\n                                  CustomWidget.toast(\"Bookmark added\".tr));\n                        });\n                      } else {\n                        controller.errorsize.value = Get.width * .97;\n                      }\n                    },\n                    child: Container(\n                      height: Get.width * 0.11,\n                      width: Get.width,\n                      decoration: BoxDecoration(\n                          color: Theme.of(context).secondaryHeaderColor,\n                          borderRadius: BorderRadius.circular(30)),\n                      child: Center(\n                        child: Text(\n                          \"Done\".tr,\n                          style: TextStyle(\n                              fontSize: Get.width * 0.04,\n                              color: Colors.white,\n                              fontWeight: FontWeight.w600),\n                        ),\n                      ),\n                    ),\n                  )\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass ChooseFolderDialog extends StatelessWidget {\n  final scrollController = ScrollController();\n  final controller = Get.put(BookmarkController());\n  final themeC = Get.find<ThemeController>();\n\n  @override\n  Widget build(BuildContext context) {\n    var folderLen = controller.bookmarkUniqueData.length;\n    var theme = themeController.currentTheme.value;\n    Color getColor(Set<MaterialState> states) {\n      const Set<MaterialState> interactiveStates = <MaterialState>{\n        MaterialState.dragged,\n        MaterialState.hovered,\n      };\n      if (states.any(interactiveStates.contains)) {\n        return Colors.green;\n      }\n      return Colors.grey;\n    }\n\n    return AlertDialog(\n        backgroundColor: Theme.of(context).bottomSheetTheme.backgroundColor,\n        contentPadding: EdgeInsets.only(\n            left: Get.width * .07,\n            right: Get.width * .04,\n            top: Get.width * .05,\n            bottom: Get.width * .05),\n        insetPadding: EdgeInsets.only(\n            left: Get.width * .05,\n            right: Get.width * .05,\n            bottom: Get.width * .08),\n        clipBehavior: Clip.antiAliasWithSaveLayer,\n        shape: RoundedRectangleBorder(\n            borderRadius: BorderRadius.all(Radius.circular(12))),\n        content: Directionality(\n          textDirection: TextDirection.ltr,\n          child: Material(\n            color: Theme.of(context).bottomSheetTheme.backgroundColor,\n            shadowColor: Colors.transparent,\n            shape:\n                RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),\n            animationDuration: Duration(seconds: 1),\n            child: Container(\n                width: Get.width,\n                decoration: BoxDecoration(\n                    color: Theme.of(context).bottomSheetTheme.backgroundColor,\n                    borderRadius: BorderRadius.circular(12)),\n                child: Wrap(\n                  children: [\n                    Text(\"Choose Folder\".tr,\n                            style: TextStyle(\n                                fontWeight: FontWeight.w600,\n                                fontSize: Get.width * .04))\n                        .paddingOnly(bottom: Get.width * .03),\n                    Theme(\n                      data: ThemeData(\n                          scrollbarTheme: ScrollbarThemeData(\n                              crossAxisMargin: .8,\n                              thumbColor:\n                                  MaterialStateProperty.resolveWith(getColor))),\n                      child: Stack(\n                        children: [\n                          if (controller.bookmarkData.length >= 10)\n                            if (folderLen >= 10)\n                              Positioned(\n                                right: 0,\n                                top: Get.width * .01,\n                                child: Container(\n                                  decoration: BoxDecoration(\n                                    color: Theme.of(context)\n                                        .bottomSheetTheme\n                                        .modalBackgroundColor,\n                                    borderRadius:\n                                        BorderRadius.all(Radius.circular(12)),\n                                  ),\n                                  height: folderLen >= 10\n                                      ? Get.width * 1.365\n                                      : folderLen * Get.width * .1285,\n                                  width: Get.width * .018,\n                                ),\n                              ),\n                          Scrollbar(\n                            interactive: true,\n                            thickness: 6,\n                            radius: Radius.circular(10),\n                            trackVisibility: true,\n                            controller: scrollController,\n                            child: Container(\n                                height: folderLen >= 10\n                                    ? Get.height * .62\n                                    : folderLen < 10 && folderLen >= 2\n                                        ? folderLen * Get.width * .1565\n                                        : Get.width * .17,\n                                child: Obx(() => MediaQuery.removePadding(\n                                    removeTop: true,\n                                    removeBottom: true,\n                                    context: context,\n                                    child: ListView.builder(\n                                      controller: scrollController,\n                                      itemCount:\n                                          controller.bookmarkUniqueData.length,\n                                      itemBuilder: (_, index) {\n                                        Future.delayed(\n                                            Duration(microseconds: 5), () {\n                                          if (controller.bookmarkSelectedRadio\n                                                  .value ==\n                                              0) {\n                                            controller.bookmarkUniqueData.sort(\n                                                (a, b) => a.folderName!\n                                                    .toLowerCase()\n                                                    .compareTo(b.folderName!\n                                                        .toLowerCase()));\n                                          } else if (controller\n                                                  .bookmarkSelectedRadio\n                                                  .value ==\n                                              1) {\n                                            controller.bookmarkUniqueData.sort(\n                                                (a, b) => b.folderName!\n                                                    .toLowerCase()\n                                                    .compareTo(a.folderName!\n                                                        .toLowerCase()));\n                                          } else if (controller\n                                                  .bookmarkSelectedRadio\n                                                  .value ==\n                                              2) {\n                                            controller.bookmarkUniqueData.sort(\n                                                (a, b) =>\n                                                    a.date!.compareTo(b.date!));\n                                          } else {\n                                            controller.bookmarkUniqueData.sort(\n                                                (a, b) =>\n                                                    b.date!.compareTo(a.date!));\n                                          }\n                                        });\n                                        return SingleChildScrollView(\n                                            child: Column(\n                                          mainAxisAlignment:\n                                              MainAxisAlignment.center,\n                                          children: [\n                                            Container(\n                                              decoration: BoxDecoration(\n                                                  color: theme == 6\n                                                      ? Theme.of(context)\n                                                          .primaryColor\n                                                      : Theme.of(context)\n                                                          .backgroundColor,\n                                                  borderRadius:\n                                                      BorderRadius.circular(\n                                                          12)),\n                                              child: Padding(\n                                                  padding: EdgeInsets.symmetric(\n                                                      horizontal:\n                                                          Get.width * .04,\n                                                      vertical:\n                                                          Get.width * .035),\n                                                  child: InkWell(\n                                                    splashColor:\n                                                        Colors.transparent,\n                                                    highlightColor:\n                                                        Colors.transparent,\n                                                    onTap: () {\n                                                      controller.selectFolder\n                                                              .value =\n                                                          controller\n                                                              .bookmarkUniqueData[\n                                                                  index]\n                                                              .folderName!;\n                                                      controller\n                                                              .selectFolderColor\n                                                              .value =\n                                                          controller\n                                                              .bookmarkUniqueData[\n                                                                  index]\n                                                              .color!;\n                                                      Get.back();\n                                                    },\n                                                    child: Row(\n                                                      children: [\n                                                        SizedBox(\n                                                            width: Get.width *\n                                                                .02),\n                                                        SvgPicture.asset(\n                                                          'assets/icons/folder.svg',\n                                                          color: controller\n                                                              .colorReturn(\n                                                                  controller\n                                                                      .bookmarkUniqueData[\n                                                                          index]\n                                                                      .color),\n                                                          height:\n                                                              Get.width * .045,\n                                                        ),\n                                                        SizedBox(\n                                                            width: Get.width *\n                                                                .05),\n                                                        Text(\n                                                          controller\n                                                              .bookmarkUniqueData[\n                                                                  index]\n                                                              .folderName!,\n                                                          style: TextStyle(\n                                                              fontSize:\n                                                                  Get.width *\n                                                                      .035),\n                                                        ),\n                                                      ],\n                                                    ),\n                                                  )),\n                                            ).paddingOnly(\n                                                top: Get.width * .015,\n                                                bottom: Get.width * .015,\n                                                right: folderLen >= 10\n                                                    ? Get.width * .06\n                                                    : Get.width * .025),\n                                          ],\n                                        ));\n                                      },\n                                    )))),\n                          )\n                        ],\n                      ),\n                    ),\n                  ],\n                )),\n          ),\n        ));\n  }\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "sub", "file_path": "quran-flutter/lib/pages/plan/sub/add_plan.dart", "file_name": "add_plan.dart", "line": 28, "line_from": 28, "line_to": 303, "snippet": "  void initState() {\n    super.initState();\n    planController.startAyahController.value.text = '1';\n    planController.endAyahController.value.text = '7';\n    planController.endASurahSelect.value = \"Al-Faatiha\";\n    planController.startASurahSelect.value = \"Al-Faatiha\";\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Directionality(\n      textDirection: TextDirection.ltr,\n      child: Container(\n        // color: Theme.of(context).cardColor,\n        width: Get.width,\n        child: Form(\n          key: formKey,\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Text(\n                \"Create plan\".tr,\n                style: TextStyle(\n                    fontSize: Get.width * .05, fontWeight: FontWeight.w600),\n              ),\n              SizedBox(height: Get.width * .05),\n              Text(\n                \"Plan Name\".tr,\n                style: TextStyle(\n                    fontSize: Get.width * .04, fontWeight: FontWeight.w600),\n              ),\n              SizedBox(height: Get.width * .03),\n              TextFormField(\n                textCapitalization: TextCapitalization.words,\n                onChanged: (_) {\n                  if (formKey.currentState!.validate()) {\n                    planController.done.value = true;\n                  } else {\n                    planController.done.value = false;\n                  }\n                },\n                decoration: inputDecoration(context, \"Name of new plan\".tr),\n                controller: planController.planNameController.value,\n                inputFormatters: [LengthLimitingTextInputFormatter(30)],\n                validator: (value) {\n                  return Get.put(BookmarkController()).validFunc(\n                      value, planController.planNameController.value,\n                      fromPlan: true);\n                },\n              ),\n              SizedBox(height: Get.width * .02),\n              InkWell(\n                highlightColor: Colors.transparent,\n                splashColor: Colors.transparent,\n                onTap: () {\n                  showAnimatedDialog(\n                    animationType: DialogTransitionType.fade,\n                    barrierDismissible: true,\n                    context: context,\n                    builder: (BuildContext context) {\n                      return StartSura();\n                    },\n                  );\n                },\n                child: ListTile(\n                  leading: Text(\"Start surah\".tr,\n                      style: TextStyle(\n                          fontSize: Get.width * .04,\n                          fontWeight: FontWeight.w600)),\n                  trailing: Obx(() => Title(\n                      '${planController.startASurahSelect.value}'.tr +\n                          ' ' +\n                          settings.banNum(\n                              planController.startSurahIndex.value + 1) +\n                          ': ' +\n                          settings.banNum(\n                              planController.startAyahIndex.value + 1))),\n                  contentPadding: EdgeInsets.zero,\n                ),\n              ),\n              // SizedBox(height: Get.width * .05),\n              InkWell(\n                highlightColor: Colors.transparent,\n                splashColor: Colors.transparent,\n                onTap: () {\n                  showAnimatedDialog(\n                    animationType: DialogTransitionType.fade,\n                    barrierDismissible: true,\n                    context: context,\n                    builder: (BuildContext context) {\n                      return EndSura();\n                    },\n                  );\n                },\n                child: ListTile(\n                  leading: Text(\"End surah\".tr,\n                      style: TextStyle(\n                          fontSize: Get.width * .04,\n                          fontWeight: FontWeight.w600)),\n                  trailing: Obx(() => Title(\n                      '${planController.endASurahSelect.value}'.tr +\n                          ' ' +\n                          settings\n                              .banNum(planController.endSurahIndex.value + 1) +\n                          ': ' +\n                          settings\n                              .banNum(planController.endAyahIndex.value + 1))),\n                  contentPadding: EdgeInsets.zero,\n                ),\n              ),\n\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  Text(\"Estimated day\".tr,\n                      style: TextStyle(\n                          fontSize: Get.width * .04,\n                          fontWeight: FontWeight.w600)),\n                  SizedBox(\n                    width: Get.width * 0.25,\n                    child: TextField(\n                      keyboardType: TextInputType.number,\n                      textAlign: TextAlign.center,\n                      decoration: inputDayDecoration(context, \"Input Days\".tr),\n                      inputFormatters: [\n                        FilteringTextInputFormatter.digitsOnly,\n                        LengthLimitingTextInputFormatter(2)\n                      ],\n                      controller: planController.estimatedDayController.value,\n                    ),\n                  ).paddingOnly(bottom: Get.width * .03),\n                ],\n              ),\n              Obx(\n                () => SwitchListTile(\n                    inactiveTrackColor:\n                        Theme.of(context).secondaryHeaderColor.withOpacity(0.3),\n                    activeColor: Theme.of(context).secondaryHeaderColor,\n                    contentPadding: EdgeInsets.zero,\n                    title: Text('Notifiction Mode'.tr,\n                        style: TextStyle(\n                            fontSize: Get.width * .04,\n                            fontWeight: FontWeight.w600)),\n                    value: planController.notificationMode.value == 1\n                        ? true\n                        : false,\n                    onChanged: (bool val) {\n                      if (val) {\n                        planController.notificationMode.value = 1;\n                      } else {\n                        planController.notificationMode.value = 0;\n                      }\n                    }),\n              ),\n              ListTile(\n                onTap: () {\n                  Get.bottomSheet(\n                    Container(\n                      decoration: BoxDecoration(\n                          borderRadius: BorderRadius.only(\n                              topLeft: Radius.circular(Get.width * .07),\n                              topRight: Radius.circular(Get.width * .07)),\n                          color: Theme.of(context)\n                              .bottomSheetTheme\n                              .backgroundColor),\n                      width: double.infinity,\n                      height: Get.height * 0.3,\n                      child: CupertinoTheme(\n                        data: CupertinoThemeData(\n                          brightness: HiveData().getData(Keys.currentTheme) == 6\n                              ? Brightness.dark\n                              : Brightness.light,\n                        ),\n                        child: CupertinoDatePicker(\n                          initialDateTime: DateTime.now(),\n                          onDateTimeChanged: (v) {\n                            var amPm = \"AM\";\n                            var hour = \"\";\n\n                            if (v.hour > 12) {\n                              hour = (v.hour - 12).toString();\n                              amPm = \"PM\";\n                            } else if (v.hour == 12) {\n                              amPm = \"PM\";\n                              hour = \"12\";\n                            } else if (v.hour == 0) {\n                              amPm = \"AM\";\n                              hour = \"12\";\n                            } else {\n                              hour = v.hour.toString();\n                            }\n\n                            if (v.minute < 10 && int.parse(hour) < 10) {\n                              planController.planTime.value =\n                                  \"0$hour:0${v.minute} $amPm\";\n                            } else if (v.minute < 10 && int.parse(hour) > 10) {\n                              planController.planTime.value =\n                                  \"$hour:0${v.minute} $amPm\";\n                            } else if (v.minute > 10 && int.parse(hour) < 10) {\n                              planController.planTime.value =\n                                  \"0$hour:${v.minute} $amPm\";\n                            } else {\n                              planController.planTime.value =\n                                  \"$hour:${v.minute} $amPm\";\n                            }\n\n                            planController.hour.value = v.hour;\n                            planController.minute.value = v.minute;\n                          },\n                          mode: CupertinoDatePickerMode.time,\n                        ),\n                      ),\n                    ),\n                  );\n                },\n                contentPadding: EdgeInsets.zero,\n                minLeadingWidth: Get.width * .05,\n                leading: Text('Notification Time'.tr,\n                    style: TextStyle(\n                        fontSize: Get.width * .04,\n                        fontWeight: FontWeight.w600)),\n                trailing: Obx(() => Text(planController.planTime.value,\n                    style: TextStyle(\n                        fontSize: Get.width * 0.04,\n                        color: Theme.of(context).disabledColor.withOpacity(.7),\n                        fontWeight: FontWeight.w500))),\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  InputDecoration inputDayDecoration(BuildContext context, hint, {size = .04}) {\n    var theme = themeController.currentTheme.value;\n    return InputDecoration(\n      hintStyle: TextStyle(\n        fontWeight: FontWeight.w500,\n        fontSize: Get.width * .035,\n        color: Theme.of(context).disabledColor.withOpacity(.7),\n      ),\n      errorStyle: TextStyle(height: .7),\n      filled: true,\n      focusedBorder: OutlineInputBorder(\n          borderRadius: BorderRadius.all(Radius.circular(15)),\n          borderSide:\n              BorderSide(color: Theme.of(context).secondaryHeaderColor)),\n      border: OutlineInputBorder(\n          borderRadius: BorderRadius.all(Radius.circular(15))),\n      hintText: hint,\n      contentPadding: EdgeInsets.symmetric(\n          horizontal: Get.width * 0.04, vertical: Get.width * size),\n      enabledBorder: OutlineInputBorder(\n          borderRadius: BorderRadius.all(Radius.circular(15)),\n          borderSide: BorderSide(\n              color: theme == 6\n                  ? Theme.of(context).backgroundColor\n                  : Theme.of(context).dividerColor)),\n    );\n  }\n}\n\nclass Title extends StatelessWidget {\n  const Title(this.title);\n  final String? title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Text(title!,\n        style: TextStyle(\n            color: Theme.of(context).disabledColor.withOpacity(.7),\n            fontWeight: FontWeight.w600,\n            fontSize: Get.width * 0.038));\n  }\n}"}, {"structure_type": "function", "name": "onInit", "docstring": "", "module": "subjectwise", "file_path": "quran-flutter/lib/pages/subjectwise/subjectwise_controller.dart", "file_name": "subjectwise_controller.dart", "line": 16, "line_from": 16, "line_to": 129, "snippet": "  void onInit() {\n    DatabaseQuran().getSubjectWiseDatabase().then((value) {\n      DatabaseQuran()\n          .getSubjectWise(\n              value,\n              Get.find<SettingsController>().languageSelectIndex.value == 0\n                  ? 'bn'\n                  : \"en\")\n          .then((sList) {\n        subjectWiseList.addAll(sList);\n        searchWiseList.addAll(subjectWiseList);\n      });\n    });\n\n    super.onInit();\n  }\n\n  updateNow() {\n    subjectWiseList.clear();\n    DatabaseQuran().getSubjectWiseDatabase().then((value) {\n      DatabaseQuran()\n          .getSubjectWise(\n              value, settings.languageSelectIndex.value == 0 ? 'bn' : \"en\")\n          .then((sList) {\n        subjectWiseList.addAll(sList);\n        searchWiseList.addAll(subjectWiseList);\n      });\n    }).then((value) => update());\n  }\n\n  Database? database;\n\n  List alphabetList = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"\u0985\",\n    \"\u0986\",\n    \"\u0987\",\n    \"\u0988\",\n    \"\u0989\",\n    \"\u098a\",\n    \"\u098b\",\n    \"\u098f\",\n    \"\u0990\",\n    \"\u0993\",\n    \"\u0994\",\n    \"\u0995\",\n    \"\u0996\",\n    \"\u0997\",\n    \"\u0998\",\n    \"\u0999\",\n    \"\u099a\",\n    \"\u099b\",\n    \"\u099c\",\n    \"\u099d\",\n    \"\u099e\",\n    \"\u099f\",\n    \"\u09a0\",\n    \"\u09a1\",\n    \"\u09a2\",\n    \"\u09a3\",\n    \"\u09a4\",\n    \"\u09a5\",\n    \"\u09a6\",\n    \"\u09a7\",\n    \"\u09a8\",\n    \"\u09aa\",\n    \"\u09ab\",\n    \"\u09ac\",\n    \"\u09ad\",\n    \"\u09ae\",\n    \"\u09af\",\n    \"\u09b0\",\n    \"\u09b2\",\n    \"\u09b6\",\n    \"\u09b7\",\n    \"\u09b8\",\n    \"\u09b9\",\n    \"\u09df\",\n    \"\u09dc\",\n    \"\u09dd\"\n  ];\n}\n\nclass GroupAlphabet {\n  int? index;\n  String? name;\n\n  GroupAlphabet({this.index, this.name});\n}"}, {"structure_type": "function", "name": "hasInternetConnectivity", "docstring": "", "module": "utilities", "file_path": "sunnah_shop_flutter/lib/core/utilities/utility.dart", "file_name": "utility.dart", "line": 13, "line_from": 13, "line_to": 63, "snippet": "  Future<bool> hasInternetConnectivity() async {\n    try {\n      final result = await InternetAddress.lookup(ApiConfig.wordPressURL);\n      if (result.isNotEmpty && result[0].rawAddress.isNotEmpty) {\n        debugPrint('connected');\n        return Future.value(true);\n      }\n    } on SocketException catch (_) {\n      debugPrint('not connected');\n    }\n    return Future.value(false);\n  }\n\n  Future<int?> getPlatformType() async {\n    try {\n      if (Platform.isAndroid) {\n        return 1;\n      } else if (Platform.isIOS) {\n        return 2;\n      }\n    } on PlatformException {\n      debugPrint('Failed to get platform type.');\n    }\n    return null;\n  }\n\n//.replaceAll(RegExp(r'\u00ab|\u00bb|\ufd3f'), '')\n  static String? arabicTextStyler(String source) {\n    return source.splitMapJoin(\n      RegExp(r\"[(\ufd3e|(|[)|\\u0600-\\u06EF ]+[\\u0600-\\u06EF|)]+\"),\n      onMatch: (m) {\n        if (m.group(0)!.length > 30) {\n          return '<long>${m.group(0)}</long>';\n        } else {\n          return '<line>${m.group(0)}</line>';\n        }\n      },\n    );\n  }\n}\n\nextension StringValidator on String {\n  bool isValidEmail() {\n    RegExp regExp = RegExp(r\"/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\");\n    return regExp.hasMatch(this);\n  }\n\n  bool isValidPhoneNumber() =>\n      RegExp(r'(^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$)')\n          .hasMatch(this);\n}"}, {"structure_type": "class", "name": "DottedDecoration extends Decoration", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/dotted_decoration.dart", "file_name": "dotted_decoration.dart", "line": 4, "line_from": 4, "line_to": 104, "snippet": "class DottedDecoration extends Decoration {\n  final LinePosition linePosition;\n  final Shape shape;\n  final Color color;\n  final BorderRadius? borderRadius;\n  final List<int> dash;\n  final double strokeWidth;\n  const DottedDecoration(\n      {this.shape = Shape.line,\n      this.linePosition = LinePosition.bottom,\n      this.color = const Color(0xFF9E9E9E),\n      this.borderRadius,\n      this.dash = const <int>[5, 5],\n      this.strokeWidth = 1});\n\n  @override\n  BoxPainter createBoxPainter([VoidCallback? onChanged]) {\n    return _DottedDecotatorPainter(\n        shape, linePosition, color, borderRadius, dash, strokeWidth);\n  }\n}\n\nclass _DottedDecotatorPainter extends BoxPainter {\n  LinePosition linePosition;\n  Shape shape;\n  Color color;\n  BorderRadius? borderRadius;\n  List<int> dash;\n  double strokeWidth;\n  _DottedDecotatorPainter(this.shape, this.linePosition, this.color,\n      this.borderRadius, this.dash, this.strokeWidth) {\n    borderRadius = borderRadius ?? BorderRadius.circular(0);\n  }\n\n  @override\n  void paint(Canvas canvas, Offset offset, ImageConfiguration configuration) {\n    Path outPath = Path();\n    if (shape == Shape.line) {\n      if (linePosition == LinePosition.left) {\n        outPath.moveTo(offset.dx, offset.dy);\n        outPath.lineTo(offset.dx, offset.dy + configuration.size!.height);\n      } else if (linePosition == LinePosition.top) {\n        outPath.moveTo(offset.dx, offset.dy);\n        outPath.lineTo(offset.dx + configuration.size!.width, offset.dy);\n      } else if (linePosition == LinePosition.right) {\n        outPath.moveTo(offset.dx + configuration.size!.width, offset.dy);\n        outPath.lineTo(offset.dx + configuration.size!.width,\n            offset.dy + configuration.size!.height);\n      } else {\n        outPath.moveTo(offset.dx, offset.dy + configuration.size!.height);\n        outPath.lineTo(offset.dx + configuration.size!.width,\n            offset.dy + configuration.size!.height);\n      }\n    } else if (shape == Shape.box) {\n      RRect rect = RRect.fromLTRBAndCorners(\n        offset.dx,\n        offset.dy,\n        offset.dx + configuration.size!.width,\n        offset.dy + configuration.size!.height,\n        bottomLeft: borderRadius!.bottomLeft,\n        bottomRight: borderRadius!.bottomRight,\n        topLeft: borderRadius!.topLeft,\n        topRight: borderRadius!.topRight,\n      );\n      outPath.addRRect(rect);\n    } else if (shape == Shape.circle) {\n      outPath.addOval(Rect.fromLTWH(offset.dx, offset.dy,\n          configuration.size!.width, configuration.size!.height));\n    }\n\n    PathMetrics metrics = outPath.computeMetrics(forceClosed: false);\n    Path drawPath = Path();\n\n    for (PathMetric me in metrics) {\n      double totalLength = me.length;\n      int index = -1;\n\n      for (double start = 0; start < totalLength;) {\n        double to = start + dash[(++index) % dash.length];\n        to = to > totalLength ? totalLength : to;\n        bool isEven = index % 2 == 0;\n        if (isEven) {\n          drawPath.addPath(\n              me.extractPath(start, to, startWithMoveTo: true), Offset.zero);\n        }\n        start = to;\n      }\n    }\n\n    canvas.drawPath(\n        drawPath,\n        Paint()\n          ..color = color\n          ..style = PaintingStyle.stroke\n          ..strokeWidth = strokeWidth);\n  }\n}\n\nenum LinePosition { left, top, right, bottom }\nenum Shape { line, box, circle }"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/shimmer.dart", "file_name": "shimmer.dart", "line": 51, "line_from": 51, "line_to": 171, "snippet": "  final Widget child;\n  final Duration period;\n  final ShimmerDirection direction;\n  final Gradient gradient;\n  final int loop;\n  final bool enabled;\n\n  const Shimmer({\n    Key? key,\n    required this.child,\n    required this.gradient,\n    this.direction = ShimmerDirection.ltr,\n    this.period = const Duration(milliseconds: 1500),\n    this.loop = 0,\n    this.enabled = true,\n  }) : super(key: key);\n\n  ///\n  /// A convenient constructor provides an easy and convenient way to create a\n  /// [Shimmer] which [gradient] is [LinearGradient] made up of `baseColor` and\n  /// `highlightColor`.\n  ///\n  Shimmer.fromColors({\n    Key? key,\n    required this.child,\n    required Color baseColor,\n    required Color highlightColor,\n    this.period = const Duration(milliseconds: 1500),\n    this.direction = ShimmerDirection.ltr,\n    this.loop = 0,\n    this.enabled = true,\n  })  : gradient = LinearGradient(\n            begin: Alignment.topLeft,\n            end: Alignment.centerRight,\n            colors: <Color>[\n              baseColor,\n              baseColor,\n              highlightColor,\n              baseColor,\n              baseColor\n            ],\n            stops: const <double>[\n              0.0,\n              0.35,\n              0.5,\n              0.65,\n              1.0\n            ]),\n        super(key: key);\n\n  @override\n  ShimmerState createState() => ShimmerState();\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties.add(DiagnosticsProperty<Gradient>('gradient', gradient,\n        defaultValue: null));\n    properties.add(EnumProperty<ShimmerDirection>('direction', direction));\n    properties.add(\n        DiagnosticsProperty<Duration>('period', period, defaultValue: null));\n    properties\n        .add(DiagnosticsProperty<bool>('enabled', enabled, defaultValue: null));\n    properties.add(DiagnosticsProperty<int>('loop', loop, defaultValue: 0));\n  }\n}\n\nclass ShimmerState extends State<Shimmer> with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  int _count = 0;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(vsync: this, duration: widget.period)\n      ..addStatusListener((AnimationStatus status) {\n        if (status != AnimationStatus.completed) {\n          return;\n        }\n        _count++;\n        if (widget.loop <= 0) {\n          _controller.repeat();\n        } else if (_count < widget.loop) {\n          _controller.forward(from: 0.0);\n        }\n      });\n    if (widget.enabled) {\n      _controller.forward();\n    }\n  }\n\n  @override\n  void didUpdateWidget(Shimmer oldWidget) {\n    if (widget.enabled) {\n      _controller.forward();\n    } else {\n      _controller.stop();\n    }\n    super.didUpdateWidget(oldWidget);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _controller,\n      child: widget.child,\n      builder: (BuildContext context, Widget? child) => _Shimmer(\n        direction: widget.direction,\n        gradient: widget.gradient,\n        percent: _controller.value,\n        child: child,\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}"}, {"structure_type": "function", "name": "updateRenderObject", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/shimmer.dart", "file_name": "shimmer.dart", "line": 192, "line_from": 192, "line_to": 276, "snippet": "  void updateRenderObject(BuildContext context, _ShimmerFilter shimmer) {\n    shimmer.percent = percent;\n    shimmer.gradient = gradient;\n    shimmer.direction = direction;\n  }\n}\n\nclass _ShimmerFilter extends RenderProxyBox {\n  ShimmerDirection _direction;\n  Gradient _gradient;\n  double _percent;\n\n  _ShimmerFilter(this._percent, this._direction, this._gradient);\n\n  @override\n  ShaderMaskLayer? get layer => super.layer as ShaderMaskLayer?;\n\n  @override\n  bool get alwaysNeedsCompositing => child != null;\n\n  set percent(double newValue) {\n    if (newValue == _percent) {\n      return;\n    }\n    _percent = newValue;\n    markNeedsPaint();\n  }\n\n  set gradient(Gradient newValue) {\n    if (newValue == _gradient) {\n      return;\n    }\n    _gradient = newValue;\n    markNeedsPaint();\n  }\n\n  set direction(ShimmerDirection newDirection) {\n    if (newDirection == _direction) {\n      return;\n    }\n    _direction = newDirection;\n    markNeedsLayout();\n  }\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    if (child != null) {\n      assert(needsCompositing);\n\n      final double width = child!.size.width;\n      final double height = child!.size.height;\n      Rect rect;\n      double dx, dy;\n      if (_direction == ShimmerDirection.rtl) {\n        dx = _offset(width, -width, _percent);\n        dy = 0.0;\n        rect = Rect.fromLTWH(dx - width, dy, 3 * width, height);\n      } else if (_direction == ShimmerDirection.ttb) {\n        dx = 0.0;\n        dy = _offset(-height, height, _percent);\n        rect = Rect.fromLTWH(dx, dy - height, width, 3 * height);\n      } else if (_direction == ShimmerDirection.btt) {\n        dx = 0.0;\n        dy = _offset(height, -height, _percent);\n        rect = Rect.fromLTWH(dx, dy - height, width, 3 * height);\n      } else {\n        dx = _offset(-width, width, _percent);\n        dy = 0.0;\n        rect = Rect.fromLTWH(dx - width, dy, 3 * width, height);\n      }\n      layer ??= ShaderMaskLayer();\n      layer!\n        ..shader = _gradient.createShader(rect)\n        ..maskRect = offset & size\n        ..blendMode = BlendMode.srcIn;\n      context.pushLayer(layer!, super.paint, offset);\n    } else {\n      layer = null;\n    }\n  }\n\n  double _offset(double start, double end, double percent) {\n    return start + (end - start) * percent;\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/animate_do.dart", "file_name": "animate_do.dart", "line": 12, "line_from": 12, "line_to": 88, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n\n  FadeIn(\n      {key,\n      required this.child,\n      this.duration = const Duration(milliseconds: 300),\n      this.delay = const Duration(milliseconds: 0),\n      this.controller,\n      this.manualTrigger = false,\n      this.animate = true})\n      : super(key: key) {\n    if (manualTrigger == true && controller == null) {\n      throw FlutterError('If you want to use manualTrigger:true, \\n\\n'\n          'Then you must provide the controller property, that is a callback like:\\n\\n'\n          ' ( controller: AnimationController) => yourController = controller \\n\\n');\n    }\n  }\n\n  @override\n  FadeInState createState() => FadeInState();\n}\n\n/// FadeState class\n/// The animation magic happens here\nclass FadeInState extends State<FadeIn> with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n  bool disposed = false;\n  late Animation<double> animation;\n\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n    animation = CurvedAnimation(curve: Curves.easeOut, parent: controller!);\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    return AnimatedBuilder(\n        animation: animation,\n        builder: (BuildContext context, Widget? child) {\n          return Opacity(\n            opacity: animation.value,\n            child: widget.child,\n          );\n        });\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/animate_do.dart", "file_name": "animate_do.dart", "line": 98, "line_from": 98, "line_to": 184, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  FadeInDown(\n      {key,\n      required this.child,\n      this.duration = const Duration(milliseconds: 800),\n      this.delay = const Duration(milliseconds: 0),\n      this.controller,\n      this.manualTrigger = false,\n      this.animate = true,\n      this.from = 100})\n      : super(key: key) {\n    if (manualTrigger == true && controller == null) {\n      throw FlutterError('If you want to use manualTrigger:true, \\n\\n'\n          'Then you must provide the controller property, that is a callback like:\\n\\n'\n          ' ( controller: AnimationController) => yourController = controller \\n\\n');\n    }\n  }\n\n  @override\n  FadeInDownState createState() => FadeInDownState();\n}\n\n/// FadeState class\n/// The animation magic happens here\nclass FadeInDownState extends State<FadeInDown> with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n  bool disposed = false;\n  late Animation<double> animation;\n  late Animation<double> opacity;\n\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n\n    animation = Tween<double>(begin: widget.from * -1, end: 0)\n        .animate(CurvedAnimation(parent: controller!, curve: Curves.easeOut));\n\n    opacity = Tween<double>(begin: 0, end: 1)\n        .animate(CurvedAnimation(parent: controller!, curve: const Interval(0, 0.65)));\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    return AnimatedBuilder(\n        animation: controller!,\n        builder: (BuildContext context, Widget? child) {\n          return Transform.translate(\n              offset: Offset(0, animation.value),\n              child: Opacity(\n                opacity: opacity.value,\n                child: widget.child,\n              ));\n        });\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/animate_do.dart", "file_name": "animate_do.dart", "line": 194, "line_from": 194, "line_to": 265, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  FadeInDownBig(\n      {key,\n      required this.child,\n      this.duration = const Duration(milliseconds: 1300),\n      this.delay = const Duration(milliseconds: 0),\n      this.controller,\n      this.manualTrigger = false,\n      this.animate = true,\n      this.from = 600})\n      : super(key: key) {\n    if (manualTrigger == true && controller == null) {\n      throw FlutterError('If you want to use manualTrigger:true, \\n\\n'\n          'Then you must provide the controller property, that is a callback like:\\n\\n'\n          ' ( controller: AnimationController) => yourController = controller \\n\\n');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) => FadeInDown(\n      duration: duration,\n      delay: delay,\n      controller: controller,\n      manualTrigger: manualTrigger,\n      animate: animate,\n      from: from,\n      child: child);\n}\n\n/// Class [FadeInUp]:\n/// [key]: optional widget key reference\n/// [child]: mandatory, widget to animate\n/// [duration]: how much time the animation should take\n/// [delay]: delay before the animation starts\n/// [controller]: optional/mandatory, exposes the animation controller created by Animate_do\n/// the controller can be use to repeat, reverse and anything you want, its just an animation controller\nclass FadeInUp extends StatefulWidget {\n  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  FadeInUp(\n      {key,\n      required this.child,\n      this.duration = const Duration(milliseconds: 800),\n      this.delay = const Duration(milliseconds: 0),\n      this.controller,\n      this.manualTrigger = false,\n      this.animate = true,\n      this.from = 100})\n      : super(key: key) {\n    if (manualTrigger == true && controller == null) {\n      throw FlutterError('If you want to use manualTrigger:true, \\n\\n'\n          'Then you must provide the controller property, that is a callback like:\\n\\n'\n          ' ( controller: AnimationController) => yourController = controller \\n\\n');\n    }\n  }\n\n  @override\n  FadeInUpState createState() => FadeInUpState();\n}"}, {"structure_type": "function", "name": "dispose", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/animate_do.dart", "file_name": "animate_do.dart", "line": 275, "line_from": 275, "line_to": 367, "snippet": "  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n\n    animation = Tween<double>(begin: widget.from, end: 0)\n        .animate(CurvedAnimation(parent: controller!, curve: Curves.easeOut));\n    opacity = Tween<double>(begin: 0, end: 1)\n        .animate(CurvedAnimation(parent: controller!, curve: const Interval(0, 0.65)));\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    return AnimatedBuilder(\n        animation: controller!,\n        builder: (BuildContext context, Widget? child) {\n          return Transform.translate(\n              offset: Offset(0, animation.value),\n              child: Opacity(\n                opacity: opacity.value,\n                child: widget.child,\n              ));\n        });\n  }\n}\n\n/// Class [FadeInUpBig]:\n/// [key]: optional widget key reference\n/// [child]: mandatory, widget to animate\n/// [duration]: how much time the animation should take\n/// [delay]: delay before the animation starts\n/// [controller]: optional/mandatory, exposes the animation controller created by Animate_do\n/// the controller can be use to repeat, reverse and anything you want, its just an animation controller\nclass FadeInUpBig extends StatelessWidget {\n  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  FadeInUpBig(\n      {key,\n      required this.child,\n      this.duration = const Duration(milliseconds: 1300),\n      this.delay = const Duration(milliseconds: 0),\n      this.controller,\n      this.manualTrigger = false,\n      this.animate = true,\n      this.from = 600})\n      : super(key: key) {\n    if (manualTrigger == true && controller == null) {\n      throw FlutterError('If you want to use manualTrigger:true, \\n\\n'\n          'Then you must provide the controller property, that is a callback like:\\n\\n'\n          ' ( controller: AnimationController) => yourController = controller \\n\\n');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) => FadeInUp(\n        duration: duration,\n        delay: delay,\n        controller: controller,\n        manualTrigger: manualTrigger,\n        animate: animate,\n        from: from,\n        child: child,\n      );\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/animate_do.dart", "file_name": "animate_do.dart", "line": 377, "line_from": 377, "line_to": 461, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  FadeInLeft(\n      {key,\n      required this.child,\n      this.duration = const Duration(milliseconds: 800),\n      this.delay = const Duration(milliseconds: 0),\n      this.controller,\n      this.manualTrigger = false,\n      this.animate = true,\n      this.from = 100})\n      : super(key: key) {\n    if (manualTrigger == true && controller == null) {\n      throw FlutterError('If you want to use manualTrigger:true, \\n\\n'\n          'Then you must provide the controller property, that is a callback like:\\n\\n'\n          ' ( controller: AnimationController) => yourController = controller \\n\\n');\n    }\n  }\n\n  @override\n  FadeInLeftState createState() => FadeInLeftState();\n}\n\n/// FadeState class\n/// The animation magic happens here\nclass FadeInLeftState extends State<FadeInLeft> with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n  bool disposed = false;\n  late Animation<double> animation;\n  late Animation<double> opacity;\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n\n    animation = Tween<double>(begin: widget.from * -1, end: 0)\n        .animate(CurvedAnimation(parent: controller!, curve: Curves.easeOut));\n    opacity = Tween<double>(begin: 0, end: 1)\n        .animate(CurvedAnimation(parent: controller!, curve: const Interval(0, 0.65)));\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    return AnimatedBuilder(\n        animation: controller!,\n        builder: (BuildContext context, Widget? child) {\n          return Transform.translate(\n              offset: Offset(animation.value, 0),\n              child: Opacity(\n                opacity: opacity.value,\n                child: widget.child,\n              ));\n        });\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/animate_do.dart", "file_name": "animate_do.dart", "line": 471, "line_from": 471, "line_to": 543, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  FadeInLeftBig(\n      {key,\n      required this.child,\n      this.duration = const Duration(milliseconds: 1300),\n      this.delay = const Duration(milliseconds: 0),\n      this.controller,\n      this.manualTrigger = false,\n      this.animate = true,\n      this.from = 600})\n      : super(key: key) {\n    if (manualTrigger == true && controller == null) {\n      throw FlutterError('If you want to use manualTrigger:true, \\n\\n'\n          'Then you must provide the controller property, that is a callback like:\\n\\n'\n          ' ( controller: AnimationController) => yourController = controller \\n\\n');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) => FadeInLeft(\n        duration: duration,\n        delay: delay,\n        controller: controller,\n        manualTrigger: manualTrigger,\n        animate: animate,\n        from: from,\n        child: child,\n      );\n}\n\n/// Class [FadeInRight]:\n/// [key]: optional widget key reference\n/// [child]: mandatory, widget to animate\n/// [duration]: how much time the animation should take\n/// [delay]: delay before the animation starts\n/// [controller]: optional/mandatory, exposes the animation controller created by Animate_do\n/// the controller can be use to repeat, reverse and anything you want, its just an animation controller\nclass FadeInRight extends StatefulWidget {\n  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  FadeInRight(\n      {key,\n      required this.child,\n      this.duration = const Duration(milliseconds: 800),\n      this.delay = const Duration(milliseconds: 0),\n      this.controller,\n      this.manualTrigger = false,\n      this.animate = true,\n      this.from = 100})\n      : super(key: key) {\n    if (manualTrigger == true && controller == null) {\n      throw FlutterError('If you want to use manualTrigger:true, \\n\\n'\n          'Then you must provide the controller property, that is a callback like:\\n\\n'\n          ' ( controller: AnimationController) => yourController = controller \\n\\n');\n    }\n  }\n\n  @override\n  FadeInRightState createState() => FadeInRightState();\n}"}, {"structure_type": "function", "name": "dispose", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/animate_do.dart", "file_name": "animate_do.dart", "line": 553, "line_from": 553, "line_to": 645, "snippet": "  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n\n    animation = Tween<double>(begin: widget.from, end: 0)\n        .animate(CurvedAnimation(parent: controller!, curve: Curves.easeOut));\n    opacity = Tween<double>(begin: 0, end: 1)\n        .animate(CurvedAnimation(parent: controller!, curve: const Interval(0, 0.65)));\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    return AnimatedBuilder(\n        animation: controller!,\n        builder: (BuildContext context, Widget? child) {\n          return Transform.translate(\n              offset: Offset(animation.value, 0),\n              child: Opacity(\n                opacity: opacity.value,\n                child: widget.child,\n              ));\n        });\n  }\n}\n\n/// Class [FadeInRightBig]:\n/// [key]: optional widget key reference\n/// [child]: mandatory, widget to animate\n/// [duration]: how much time the animation should take\n/// [delay]: delay before the animation starts\n/// [controller]: optional/mandatory, exposes the animation controller created by Animate_do\n/// the controller can be use to repeat, reverse and anything you want, its just an animation controller\nclass FadeInRightBig extends StatelessWidget {\n  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  FadeInRightBig(\n      {key,\n      required this.child,\n      this.duration = const Duration(milliseconds: 1200),\n      this.delay = const Duration(milliseconds: 0),\n      this.controller,\n      this.manualTrigger = false,\n      this.animate = true,\n      this.from = 600})\n      : super(key: key) {\n    if (manualTrigger == true && controller == null) {\n      throw FlutterError('If you want to use manualTrigger:true, \\n\\n'\n          'Then you must provide the controller property, that is a callback like:\\n\\n'\n          ' ( controller: AnimationController) => yourController = controller \\n\\n');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) => FadeInRight(\n        duration: duration,\n        delay: delay,\n        controller: controller,\n        manualTrigger: manualTrigger,\n        animate: animate,\n        from: from,\n        child: child,\n      );\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "external_packages", "file_path": "sunnah_shop_flutter/lib/core/external_packages/flutter_animation_progress_bar.dart", "file_name": "flutter_animation_progress_bar.dart", "line": 61, "line_from": 61, "line_to": 205, "snippet": "  void initState() {\n    _controller =\n        AnimationController(duration: widget.animatedDuration, vsync: this);\n    _animation = Tween<double>(begin: _currentBegin, end: _currentEnd)\n        .animate(_controller);\n    triggerAnimation();\n    super.initState();\n  }\n\n  @override\n  void didUpdateWidget(FAProgressBar oldWidget) {\n    triggerAnimation();\n    super.didUpdateWidget(oldWidget);\n  }\n\n  void triggerAnimation() {\n    setState(() {\n      _currentBegin = _animation.value;\n\n      if (widget.currentValue == 0 || widget.maxValue == 0) {\n        _currentEnd = 0;\n      } else {\n        _currentEnd = widget.currentValue / widget.maxValue;\n      }\n\n      _animation = Tween<double>(begin: _currentBegin, end: _currentEnd)\n          .animate(_controller);\n    });\n    _controller.reset();\n    _controller.duration = widget.animatedDuration;\n    _controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedProgressBar(\n        animation: _animation,\n        widget: widget,\n      );\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n\nclass AnimatedProgressBar extends AnimatedWidget {\n  const AnimatedProgressBar({\n    Key? key,\n    required Animation<double> animation,\n    required this.widget,\n  }) : super(key: key, listenable: animation);\n\n  final FAProgressBar widget;\n\n  double transformValue(x, begin, end, before) {\n    double y = (end * x - (begin - before)) * (1 / before);\n    return y < 0 ? 0 : ((y > 1) ? 1 : y);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation<double>;\n    Color progressColor = widget.progressColor;\n\n    if (widget.changeColorValue != null) {\n      final colorTween = ColorTween(\n        begin: widget.progressColor,\n        end: widget.changeProgressColor,\n      );\n\n      progressColor = colorTween.transform(transformValue(\n        animation.value,\n        widget.changeColorValue,\n        widget.maxValue,\n        5,\n      ))!;\n    }\n    final String finalValue = widget.formatValue\n        .call(animation.value * widget.maxValue, widget.formatValueFixed);\n    return Directionality(\n      textDirection: TextDirection.ltr,\n      child: Container(\n        width: widget.direction == Axis.vertical ? widget.size : null,\n        height: widget.direction == Axis.horizontal ? widget.size : null,\n        decoration: BoxDecoration(\n          color: widget.backgroundColor,\n          borderRadius: widget._borderRadius,\n          border: widget.border,\n        ),\n        child: Flex(\n          direction: widget.direction,\n          verticalDirection: widget.verticalDirection,\n          children: <Widget>[\n            Expanded(\n              flex: (animation.value * 100).toInt(),\n              child: Stack(\n                children: [\n                  Container(\n                    decoration: BoxDecoration(\n                      color: progressColor,\n                      borderRadius: widget._borderRadius,\n                      border: widget.border,\n                    ),\n                  ),\n                  widget.displayText != null && finalValue == '100'\n                      ? Container(\n                          alignment: widget.direction == Axis.horizontal\n                              ? const FractionalOffset(0.95, 0.5)\n                              : (widget.verticalDirection ==\n                                      VerticalDirection.up\n                                  ? const FractionalOffset(0.5, 0.05)\n                                  : const FractionalOffset(0.5, 0.95)),\n                          child: Text(\n                            finalValue + widget.displayText!,\n                            softWrap: false,\n                            style: TextStyle(\n                                color: Theme.of(context).cardColor,\n                                fontSize: 11),\n                          ),\n                        )\n                      : const SizedBox.shrink(),\n                ],\n              ),\n            ),\n            Expanded(\n              flex: 100 - (animation.value * 100).toInt(),\n              child: widget.displayText != null && finalValue != '100'\n                  ? Container(\n                      margin: const EdgeInsets.only(bottom: 5),\n                      alignment: Alignment.bottomCenter,\n                      child: Text(\n                        finalValue + widget.displayText!,\n                        softWrap: false,\n                        style: widget.displayTextStyle,\n                      ),\n                    )\n                  : const SizedBox.shrink(),\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "class", "name": "ZoomDrawerController", "docstring": "", "module": "zoom_drawer", "file_path": "sunnah_shop_flutter/lib/core/external_packages/zoom_drawer/config.dart", "file_name": "config.dart", "line": 12, "line_from": 12, "line_to": 47, "snippet": "class ZoomDrawerController {\n  /// Open drawer\n  void Function()? open;\n\n  /// Close drawer\n  void Function()? close;\n\n  /// Toggle drawer\n  void Function({bool forceToggle})? toggle;\n\n  /// Determine if status of drawer equals to Open\n  bool Function()? isOpen;\n\n  /// Drawer state notifier\n  /// opening, closing, open, closed\n  ValueNotifier<DrawerState>? stateNotifier;\n}\n\nenum DrawerStyle {\n  defaultStyle,\n  style1,\n  style2,\n  style3,\n  style4,\n}\n\n/// Build custom style with (context, animationValue, slideWidth, menuScreen, mainScreen) {}\ntypedef DrawerStyleBuilder = Widget Function(\n  BuildContext context,\n  double animationValue,\n  double slideWidth,\n  Widget menuScreen,\n  Widget mainScreen,\n);\n"}, {"structure_type": "function", "name": "document;", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/epub_reader/src/epub_controller.dart", "file_name": "epub_controller.dart", "line": 9, "line_from": 9, "line_to": 161, "snippet": "  Future<EpubBook> document;\n  final String? epubCfi;\n\n  _EpubViewState? _epubViewState;\n  List<EpubViewChapter>? _cacheTableOfContents;\n\n  final BehaviorSubject<EpubChapterViewValue?> _valueStreamController = BehaviorSubject<EpubChapterViewValue?>();\n\n  final BehaviorSubject<List<EpubViewChapter>?> _tableOfContentsStreamController =\n      BehaviorSubject<List<EpubViewChapter>?>();\n\n  EpubBook? _document;\n\n  EpubChapterViewValue? get currentValue => _epubViewState?._currentValue;\n\n  List<Paragraph> searchResults = [];\n\n List<Paragraph>?  get main => _epubViewState?._paragraphs;\n List<EpubChapter>?  get c => _epubViewState?._chapters;\n\n// List<EpubChapter>? getSubChapters(int index) => _epubViewState?.toc_chapters![index].SubChapters;\n\n  List<EpubChapter>? get all_toc_chapters => _epubViewState?.toc_chapters;\n  PageController? get pageController => _epubViewState?.pageController;\n\n  bool? get isBookLoaded => _epubViewState?._initialized;\n\n  Stream<EpubChapterViewValue?> get currentValueStream => _valueStreamController.stream;\n\n  Stream<List<EpubViewChapter>?> get tableOfContentsStream => _tableOfContentsStreamController.stream;\n\n  search(word) {\n    searchResults = _epubViewState?.searchByWord(word);\n    searchResults.sort((a, b) => a.chapterIndex.compareTo(b.chapterIndex));\n  }\n\n  goToSearch(index) {\n    _epubViewState?.goToSearchedParagraph(searchResults, index);\n  }\n\n  void jumpTo({required int index, double alignment = 0}) => _epubViewState?._itemScrollController?.jumpTo(\n        index: index,\n        alignment: alignment,\n      );\n\n  Future<void>? scrollTo({\n    required int index,\n    Duration duration = const Duration(milliseconds: 250),\n    double alignment = 0,\n    Curve curve = Curves.linear,\n  }) =>\n      _epubViewState?._itemScrollController?.scrollTo(\n        index: index,\n        duration: duration,\n        alignment: alignment,\n        curve: curve,\n      );\n\n  void gotoEpubCfi(\n    String epubCfi, {\n    double alignment = 0,\n    Duration duration = const Duration(milliseconds: 250),\n    Curve curve = Curves.linear,\n  }) {\n    _epubViewState?._gotoEpubCfi(\n      epubCfi,\n      alignment: alignment,\n      duration: duration,\n      curve: curve,\n    );\n  }\n\n  sagol() {\n    _epubViewState?._itemScrollController!.autoScroll(time: Duration(seconds: _epubViewState!._paragraphs.length));\n  }\n\n  String? generateEpubCfi() => _epubViewState?._epubCfiReader?.generateCfi(\n        book: _document,\n        chapter: _epubViewState?._currentValue?.chapter,\n        paragraphIndex: _epubViewState?._getAbsParagraphIndexBy(\n          positionIndex: _epubViewState?._currentValue?.position.index ?? 0,\n          trailingEdge: _epubViewState?._currentValue?.position.itemTrailingEdge,\n          leadingEdge: _epubViewState?._currentValue?.position.itemLeadingEdge,\n        ),\n      );\n\n  List<EpubViewChapter>? tableOfContents() {\n    if (_cacheTableOfContents != null) {\n      return _cacheTableOfContents;\n    }\n\n    if (_document == null) {\n      return [];\n    }\n\n    int index = -1;\n\n    return _cacheTableOfContents = _document!.chapters!.fold<List<EpubViewChapter>>(\n      [],\n      (acc, next) {\n        index += 1;\n        acc.add(EpubViewChapter(next.title, _getChapterStartIndex(index)));\n        for (final subChapter in next.subChapters!) {\n          index += 1;\n          acc.add(EpubViewSubChapter(next.title! + ' ' + subChapter.title!, _getChapterStartIndex(index)));\n        }\n        return acc;\n      },\n    );\n  }\n\n  int _getChapterStartIndex(int index) =>\n      index < _epubViewState!._chapterIndexes.length ? _epubViewState!._chapterIndexes[index] : 0;\n\n  Future<void> loadDocument(Future<EpubBook> document) {\n    this.document = document;\n    return _loadDocument(document);\n  }\n\n  Future<void> _loadDocument(Future<EpubBook> document) async {\n    _epubViewState!._initialized = false;\n    try {\n      _epubViewState!._changeLoadingState(_EpubViewLoadingState.loading);\n\n      _document = await document;\n      await _epubViewState!._init();\n      _epubViewState!._actualChapter.stream.listen((chapter) {\n        _valueStreamController.sink.add(chapter);\n      });\n      _tableOfContentsStreamController.sink.add(tableOfContents());\n      _epubViewState!._changeLoadingState(_EpubViewLoadingState.success);\n    } catch (error) {\n      debugPrint(error.toString());\n      _epubViewState!\n        .._loadingError = error is Exception ? error : Exception('An unexpected error occurred')\n        .._changeLoadingState(_EpubViewLoadingState.error);\n    }\n  }\n\n  void _attach(_EpubViewState epubReaderViewState) {\n    _epubViewState = epubReaderViewState;\n\n    _loadDocument(document);\n  }\n\n  void _detach() {\n    _epubViewState = null;\n  }\n\n  void dispose() {\n    _epubViewState = null;\n  }\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/colorpicker.dart", "file_name": "colorpicker.dart", "line": 174, "line_from": 174, "line_to": 524, "snippet": "  void initState() {\n    currentHsvColor = (widget.pickerHsvColor != null)\n        ? widget.pickerHsvColor as HSVColor\n        : HSVColor.fromColor(widget.pickerColor);\n    // If there's no initial text in `hexInputController`,\n    if (widget.hexInputController?.text.isEmpty == true) {\n      // set it to the current's color HEX value.\n      widget.hexInputController?.text = colorToHex(\n        currentHsvColor.toColor(),\n        enableAlpha: widget.enableAlpha,\n      );\n    }\n    // Listen to the text input, If there is an `hexInputController` provided.\n    widget.hexInputController?.addListener(colorPickerTextInputListener);\n    if (widget.colorHistory != null && widget.onHistoryChanged != null) {\n      colorHistory = widget.colorHistory ?? [];\n    }\n    super.initState();\n  }\n\n  @override\n  void didUpdateWidget(ColorPicker oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    currentHsvColor = (widget.pickerHsvColor != null)\n        ? widget.pickerHsvColor as HSVColor\n        : HSVColor.fromColor(widget.pickerColor);\n  }\n\n  void colorPickerTextInputListener() {\n    // It can't be null really, since it's only listening if the controller\n    // is provided, but it may help to calm the Dart analyzer in the future.\n    if (widget.hexInputController == null) return;\n    // If a user is inserting/typing any text \u2014 try to get the color value from it,\n    // and interpret its transparency, dependent on the widget's settings.\n    final Color? color = colorFromHex(widget.hexInputController!.text,\n        enableAlpha: widget.enableAlpha);\n    // If it's the valid color:\n    if (color != null) {\n      // set it as the current color and\n      setState(() => currentHsvColor = HSVColor.fromColor(color));\n      // notify with a callback.\n      widget.onColorChanged(color);\n      if (widget.onHsvColorChanged != null) {\n        widget.onHsvColorChanged!(currentHsvColor);\n      }\n    }\n  }\n\n  @override\n  void dispose() {\n    widget.hexInputController?.removeListener(colorPickerTextInputListener);\n    super.dispose();\n  }\n\n  Widget colorPickerSlider(TrackType trackType) {\n    return ColorPickerSlider(\n      trackType,\n      currentHsvColor,\n      (HSVColor color) {\n        // Update text in `hexInputController` if provided.\n        widget.hexInputController?.text =\n            colorToHex(color.toColor(), enableAlpha: widget.enableAlpha);\n        setState(() => currentHsvColor = color);\n        widget.onColorChanged(currentHsvColor.toColor());\n        if (widget.onHsvColorChanged != null) {\n          widget.onHsvColorChanged!(currentHsvColor);\n        }\n      },\n      displayThumbColor: widget.displayThumbColor,\n    );\n  }\n\n  void onColorChanging(HSVColor color) {\n    // Update text in `hexInputController` if provided.\n    widget.hexInputController?.text =\n        colorToHex(color.toColor(), enableAlpha: widget.enableAlpha);\n    setState(() => currentHsvColor = color);\n    widget.onColorChanged(currentHsvColor.toColor());\n    if (widget.onHsvColorChanged != null) {\n      widget.onHsvColorChanged!(currentHsvColor);\n    }\n  }\n\n  Widget colorPicker() {\n    return ClipRRect(\n      borderRadius: widget.pickerAreaBorderRadius,\n      child:\n          ColorPickerArea(currentHsvColor, onColorChanging, widget.paletteType),\n    );\n  }\n\n  Widget sliderByPaletteType() {\n    switch (widget.paletteType) {\n      case PaletteType.hsv:\n      case PaletteType.hsvWithHue:\n      case PaletteType.hsl:\n      case PaletteType.hslWithHue:\n        return colorPickerSlider(TrackType.hue);\n      case PaletteType.hsvWithValue:\n      case PaletteType.hueWheel:\n        return colorPickerSlider(TrackType.value);\n      case PaletteType.hsvWithSaturation:\n        return colorPickerSlider(TrackType.saturation);\n      case PaletteType.hslWithLightness:\n        return colorPickerSlider(TrackType.lightness);\n      case PaletteType.hslWithSaturation:\n        return colorPickerSlider(TrackType.saturationForHSL);\n      case PaletteType.rgbWithBlue:\n        return colorPickerSlider(TrackType.blue);\n      case PaletteType.rgbWithGreen:\n        return colorPickerSlider(TrackType.green);\n      case PaletteType.rgbWithRed:\n        return colorPickerSlider(TrackType.red);\n      default:\n        return const SizedBox();\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (MediaQuery.of(context).orientation == Orientation.portrait ||\n        widget.portraitOnly) {\n      return Column(\n        children: <Widget>[\n          SizedBox(\n            width: widget.colorPickerWidth,\n            height: widget.colorPickerWidth * widget.pickerAreaHeightPercent,\n            child: colorPicker(),\n          ),\n          // Padding(\n          //   padding: const EdgeInsets.fromLTRB(15.0, 5.0, 10.0, 5.0),\n          //   child: Row(\n          //     mainAxisAlignment: MainAxisAlignment.center,\n          //     children: <Widget>[\n          //       GestureDetector(\n          //         onTap: () => setState(() {\n          //           if (widget.onHistoryChanged != null && !colorHistory.contains(currentHsvColor.toColor())) {\n          //             colorHistory.add(currentHsvColor.toColor());\n          //             widget.onHistoryChanged!(colorHistory);\n          //           }\n          //         }),\n          //         child: ColorIndicator(currentHsvColor),\n          //       ),\n          //       Expanded(\n          //         child: Column(\n          //           children: <Widget>[\n          //             SizedBox(height: 40.0, width: widget.colorPickerWidth - 75.0, child: sliderByPaletteType()),\n          //             if (widget.enableAlpha)\n          //               SizedBox(\n          //                 height: 40.0,\n          //                 width: widget.colorPickerWidth - 75.0,\n          //                 child: colorPickerSlider(TrackType.alpha),\n          //               ),\n          //           ],\n          //         ),\n          //       ),\n          //     ],\n          //   ),\n          // ),\n          if (colorHistory.isNotEmpty)\n            SizedBox(\n              width: widget.colorPickerWidth,\n              height: 50,\n              child:\n                  ListView(scrollDirection: Axis.horizontal, children: <Widget>[\n                for (Color color in colorHistory)\n                  Padding(\n                    key: Key(color.hashCode.toString()),\n                    padding: const EdgeInsets.fromLTRB(15, 0, 0, 10),\n                    child: Center(\n                      child: GestureDetector(\n                        onTap: () => onColorChanging(HSVColor.fromColor(color)),\n                        child: ColorIndicator(HSVColor.fromColor(color),\n                            width: 30, height: 30),\n                      ),\n                    ),\n                  ),\n                const SizedBox(width: 15),\n              ]),\n            ),\n          if (widget.showLabel && widget.labelTypes.isNotEmpty)\n            FittedBox(\n              child: ColorPickerLabel(\n                currentHsvColor,\n                enableAlpha: widget.enableAlpha,\n                textStyle: widget.labelTextStyle,\n                colorLabelTypes: widget.labelTypes,\n              ),\n            ),\n          if (widget.hexInputBar)\n            ColorPickerInput(\n              currentHsvColor.toColor(),\n              (Color color) {\n                setState(() => currentHsvColor = HSVColor.fromColor(color));\n                widget.onColorChanged(currentHsvColor.toColor());\n                if (widget.onHsvColorChanged != null) {\n                  widget.onHsvColorChanged!(currentHsvColor);\n                }\n              },\n              enableAlpha: widget.enableAlpha,\n              embeddedText: false,\n            ),\n          const SizedBox(height: 20.0),\n        ],\n      );\n    } else {\n      return Row(\n        children: <Widget>[\n          SizedBox(\n              width: widget.colorPickerWidth,\n              height: widget.colorPickerWidth * widget.pickerAreaHeightPercent,\n              child: colorPicker()),\n          Column(\n            children: <Widget>[\n              Row(\n                children: <Widget>[\n                  const SizedBox(width: 20.0),\n                  GestureDetector(\n                    onTap: () => setState(() {\n                      if (widget.onHistoryChanged != null &&\n                          !colorHistory.contains(currentHsvColor.toColor())) {\n                        colorHistory.add(currentHsvColor.toColor());\n                        widget.onHistoryChanged!(colorHistory);\n                      }\n                    }),\n                    child: ColorIndicator(currentHsvColor),\n                  ),\n                  Column(\n                    children: <Widget>[\n                      SizedBox(\n                          height: 40.0,\n                          width: 260.0,\n                          child: sliderByPaletteType()),\n                      if (widget.enableAlpha)\n                        SizedBox(\n                            height: 40.0,\n                            width: 260.0,\n                            child: colorPickerSlider(TrackType.alpha)),\n                    ],\n                  ),\n                  const SizedBox(width: 10.0),\n                ],\n              ),\n              if (colorHistory.isNotEmpty)\n                SizedBox(\n                  width: widget.colorPickerWidth,\n                  height: 50,\n                  child: ListView(\n                      scrollDirection: Axis.horizontal,\n                      children: <Widget>[\n                        for (Color color in colorHistory)\n                          Padding(\n                            key: Key(color.hashCode.toString()),\n                            padding: const EdgeInsets.fromLTRB(15, 18, 0, 0),\n                            child: Center(\n                              child: GestureDetector(\n                                onTap: () =>\n                                    onColorChanging(HSVColor.fromColor(color)),\n                                onLongPress: () {\n                                  if (colorHistory.remove(color)) {\n                                    widget.onHistoryChanged!(colorHistory);\n                                    setState(() {});\n                                  }\n                                },\n                                child: ColorIndicator(HSVColor.fromColor(color),\n                                    width: 30, height: 30),\n                              ),\n                            ),\n                          ),\n                        const SizedBox(width: 15),\n                      ]),\n                ),\n              const SizedBox(height: 20.0),\n              if (widget.showLabel && widget.labelTypes.isNotEmpty)\n                FittedBox(\n                  child: ColorPickerLabel(\n                    currentHsvColor,\n                    enableAlpha: widget.enableAlpha,\n                    textStyle: widget.labelTextStyle,\n                    colorLabelTypes: widget.labelTypes,\n                  ),\n                ),\n              if (widget.hexInputBar)\n                ColorPickerInput(\n                  currentHsvColor.toColor(),\n                  (Color color) {\n                    setState(() => currentHsvColor = HSVColor.fromColor(color));\n                    widget.onColorChanged(currentHsvColor.toColor());\n                    if (widget.onHsvColorChanged != null) {\n                      widget.onHsvColorChanged!(currentHsvColor);\n                    }\n                  },\n                  enableAlpha: widget.enableAlpha,\n                  embeddedText: false,\n                ),\n              const SizedBox(height: 5),\n            ],\n          ),\n        ],\n      );\n    }\n  }\n}\n\n/// The Color Picker with sliders only. Support HSV, HSL and RGB color model.\nclass SlidePicker extends StatefulWidget {\n  const SlidePicker({\n    Key? key,\n    required this.pickerColor,\n    required this.onColorChanged,\n    this.colorModel = ColorModel.rgb,\n    this.enableAlpha = true,\n    this.sliderSize = const Size(260, 40),\n    this.showSliderText = true,\n    @Deprecated('Use Theme.of(context).textTheme.bodyText1 & 2 to alter text style.')\n        this.sliderTextStyle,\n    this.showParams = true,\n    @Deprecated('Use empty list in [labelTypes] to disable label.')\n        this.showLabel = true,\n    this.labelTypes = const [],\n    @Deprecated('Use Theme.of(context).textTheme.bodyText1 & 2 to alter text style.')\n        this.labelTextStyle,\n    this.showIndicator = true,\n    this.indicatorSize = const Size(280, 50),\n    this.indicatorAlignmentBegin = const Alignment(-1.0, -3.0),\n    this.indicatorAlignmentEnd = const Alignment(1.0, 3.0),\n    this.displayThumbColor = true,\n    this.indicatorBorderRadius = const BorderRadius.all(Radius.zero),\n  }) : super(key: key);\n\n  final Color pickerColor;\n  final ValueChanged<Color> onColorChanged;\n  final ColorModel colorModel;\n  final bool enableAlpha;\n  final Size sliderSize;\n  final bool showSliderText;\n  final TextStyle? sliderTextStyle;\n  final bool showLabel;\n  final bool showParams;\n  final List<ColorLabelType> labelTypes;\n  final TextStyle? labelTextStyle;\n  final bool showIndicator;\n  final Size indicatorSize;\n  final AlignmentGeometry indicatorAlignmentBegin;\n  final AlignmentGeometry indicatorAlignmentEnd;\n  final bool displayThumbColor;\n  final BorderRadius indicatorBorderRadius;\n\n  @override\n  State<StatefulWidget> createState() => _SlidePickerState();\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/colorpicker.dart", "file_name": "colorpicker.dart", "line": 530, "line_from": 530, "line_to": 722, "snippet": "  void initState() {\n    super.initState();\n    currentHsvColor = HSVColor.fromColor(widget.pickerColor);\n  }\n\n  @override\n  void didUpdateWidget(SlidePicker oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    currentHsvColor = HSVColor.fromColor(widget.pickerColor);\n  }\n\n  Widget colorPickerSlider(TrackType trackType) {\n    return ColorPickerSlider(\n      trackType,\n      currentHsvColor,\n      (HSVColor color) {\n        setState(() => currentHsvColor = color);\n        widget.onColorChanged(currentHsvColor.toColor());\n      },\n      displayThumbColor: widget.displayThumbColor,\n      fullThumbColor: true,\n    );\n  }\n\n  Widget indicator() {\n    return ClipRRect(\n      borderRadius: widget.indicatorBorderRadius,\n      clipBehavior: Clip.antiAliasWithSaveLayer,\n      child: GestureDetector(\n        onTap: () {\n          setState(\n              () => currentHsvColor = HSVColor.fromColor(widget.pickerColor));\n          widget.onColorChanged(currentHsvColor.toColor());\n        },\n        child: Container(\n          width: widget.indicatorSize.width,\n          height: widget.indicatorSize.height,\n          margin: const EdgeInsets.only(bottom: 15.0),\n          foregroundDecoration: BoxDecoration(\n            gradient: LinearGradient(\n              colors: [\n                widget.pickerColor,\n                widget.pickerColor,\n                currentHsvColor.toColor(),\n                currentHsvColor.toColor(),\n              ],\n              begin: widget.indicatorAlignmentBegin,\n              end: widget.indicatorAlignmentEnd,\n              stops: const [0.0, 0.5, 0.5, 1.0],\n            ),\n          ),\n          child: const CustomPaint(painter: CheckerPainter()),\n        ),\n      ),\n    );\n  }\n\n  String getColorParams(int pos) {\n    assert(pos >= 0 && pos < 4);\n    if (widget.colorModel == ColorModel.rgb) {\n      final Color color = currentHsvColor.toColor();\n      return [\n        color.red.toString(),\n        color.green.toString(),\n        color.blue.toString(),\n        '${(color.opacity * 100).round()}',\n      ][pos];\n    } else if (widget.colorModel == ColorModel.hsv) {\n      return [\n        currentHsvColor.hue.round().toString(),\n        (currentHsvColor.saturation * 100).round().toString(),\n        (currentHsvColor.value * 100).round().toString(),\n        (currentHsvColor.alpha * 100).round().toString(),\n      ][pos];\n    } else if (widget.colorModel == ColorModel.hsl) {\n      HSLColor hslColor = hsvToHsl(currentHsvColor);\n      return [\n        hslColor.hue.round().toString(),\n        (hslColor.saturation * 100).round().toString(),\n        (hslColor.lightness * 100).round().toString(),\n        (currentHsvColor.alpha * 100).round().toString(),\n      ][pos];\n    } else {\n      return '??';\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    double fontSize = 14;\n    if (widget.labelTextStyle != null &&\n        widget.labelTextStyle?.fontSize != null) {\n      fontSize = widget.labelTextStyle?.fontSize ?? 14;\n    }\n    final List<TrackType> trackTypes = [\n      if (widget.colorModel == ColorModel.hsv) ...[\n        TrackType.hue,\n        TrackType.saturation,\n        TrackType.value\n      ],\n      if (widget.colorModel == ColorModel.hsl) ...[\n        TrackType.hue,\n        TrackType.saturationForHSL,\n        TrackType.lightness\n      ],\n      if (widget.colorModel == ColorModel.rgb) ...[\n        TrackType.red,\n        TrackType.green,\n        TrackType.blue\n      ],\n      if (widget.enableAlpha) ...[TrackType.alpha],\n    ];\n    List<SizedBox> sliders = [\n      for (TrackType trackType in trackTypes)\n        SizedBox(\n          width: widget.sliderSize.width,\n          height: widget.sliderSize.height,\n          child: Row(\n            children: <Widget>[\n              if (widget.showSliderText)\n                Padding(\n                  padding: const EdgeInsets.symmetric(horizontal: 10.0),\n                  child: Text(\n                    trackType.toString().split('.').last[0].toUpperCase(),\n                    style: widget.sliderTextStyle ??\n                        Theme.of(context).textTheme.bodyText1,\n                  ),\n                ),\n              Expanded(child: colorPickerSlider(trackType)),\n              if (widget.showParams)\n                ConstrainedBox(\n                  constraints: BoxConstraints(minWidth: fontSize * 2 + 5),\n                  child: Text(\n                    getColorParams(trackTypes.indexOf(trackType)),\n                    style: widget.sliderTextStyle ??\n                        Theme.of(context).textTheme.bodyText2,\n                    textAlign: TextAlign.right,\n                  ),\n                ),\n            ],\n          ),\n        ),\n    ];\n\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      crossAxisAlignment: CrossAxisAlignment.center,\n      children: <Widget>[\n        if (widget.showIndicator) indicator(),\n        if (!widget.showIndicator) const SizedBox(height: 20),\n        ...sliders,\n        const SizedBox(height: 20.0),\n        if (widget.showLabel && widget.labelTypes.isNotEmpty)\n          Padding(\n            padding: const EdgeInsets.only(bottom: 20.0),\n            child: ColorPickerLabel(\n              currentHsvColor,\n              enableAlpha: widget.enableAlpha,\n              textStyle: widget.labelTextStyle,\n              colorLabelTypes: widget.labelTypes,\n            ),\n          ),\n      ],\n    );\n  }\n}\n\n/// The Color Picker with HUE Ring & HSV model.\nclass HueRingPicker extends StatefulWidget {\n  const HueRingPicker({\n    Key? key,\n    required this.pickerColor,\n    required this.onColorChanged,\n    this.portraitOnly = false,\n    this.colorPickerHeight = 250.0,\n    this.hueRingStrokeWidth = 20.0,\n    this.enableAlpha = false,\n    this.displayThumbColor = true,\n    this.pickerAreaBorderRadius = const BorderRadius.all(Radius.zero),\n  }) : super(key: key);\n\n  final Color pickerColor;\n  final ValueChanged<Color> onColorChanged;\n  final bool portraitOnly;\n  final double colorPickerHeight;\n  final double hueRingStrokeWidth;\n  final bool enableAlpha;\n  final bool displayThumbColor;\n  final BorderRadius pickerAreaBorderRadius;\n\n  @override\n  HueRingPickerState createState() => HueRingPickerState();\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 55, "line_from": 55, "line_to": 133, "snippet": "  void paint(Canvas canvas, Size size) {\n    final Rect rect = Offset.zero & size;\n    const Gradient gradientV = LinearGradient(\n      begin: Alignment.topCenter,\n      end: Alignment.bottomCenter,\n      colors: [Colors.white, Colors.black],\n    );\n    final Gradient gradientH = LinearGradient(\n      colors: [\n        Colors.white,\n        HSVColor.fromAHSV(1.0, hsvColor.hue, 1.0, 1.0).toColor(),\n      ],\n    );\n    canvas.drawRect(rect, Paint()..shader = gradientV.createShader(rect));\n    canvas.drawRect(\n      rect,\n      Paint()\n        ..blendMode = BlendMode.multiply\n        ..shader = gradientH.createShader(rect),\n    );\n\n    canvas.drawCircle(\n      Offset(size.width * hsvColor.saturation, size.height * (1 - hsvColor.value)),\n      size.height * 0.04,\n      Paint()\n        ..color = pointerColor ?? (useWhiteForeground(hsvColor.toColor()) ? Colors.white : Colors.black)\n        ..strokeWidth = 1.5\n        ..style = PaintingStyle.stroke,\n    );\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}\n\n/// Painter for HV mixture.\nclass HSVWithSaturationColorPainter extends CustomPainter {\n  const HSVWithSaturationColorPainter(this.hsvColor, {this.pointerColor});\n\n  final HSVColor hsvColor;\n  final Color? pointerColor;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Rect rect = Offset.zero & size;\n    const Gradient gradientV = LinearGradient(\n      begin: Alignment.topCenter,\n      end: Alignment.bottomCenter,\n      colors: [Colors.transparent, Colors.black],\n    );\n    final List<Color> colors = [\n      HSVColor.fromAHSV(1.0, 0.0, hsvColor.saturation, 1.0).toColor(),\n      HSVColor.fromAHSV(1.0, 60.0, hsvColor.saturation, 1.0).toColor(),\n      HSVColor.fromAHSV(1.0, 120.0, hsvColor.saturation, 1.0).toColor(),\n      HSVColor.fromAHSV(1.0, 180.0, hsvColor.saturation, 1.0).toColor(),\n      HSVColor.fromAHSV(1.0, 240.0, hsvColor.saturation, 1.0).toColor(),\n      HSVColor.fromAHSV(1.0, 300.0, hsvColor.saturation, 1.0).toColor(),\n      HSVColor.fromAHSV(1.0, 360.0, hsvColor.saturation, 1.0).toColor(),\n    ];\n    final Gradient gradientH = LinearGradient(colors: colors);\n    canvas.drawRect(rect, Paint()..shader = gradientH.createShader(rect));\n    canvas.drawRect(rect, Paint()..shader = gradientV.createShader(rect));\n\n    canvas.drawCircle(\n      Offset(\n        size.width * hsvColor.hue / 360,\n        size.height * (1 - hsvColor.value),\n      ),\n      size.height * 0.04,\n      Paint()\n        ..color = pointerColor ?? (useWhiteForeground(hsvColor.toColor()) ? Colors.white : Colors.black)\n        ..strokeWidth = 1.5\n        ..style = PaintingStyle.stroke,\n    );\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 143, "line_from": 143, "line_to": 226, "snippet": "  void paint(Canvas canvas, Size size) {\n    final Rect rect = Offset.zero & size;\n    const Gradient gradientV = LinearGradient(\n      begin: Alignment.topCenter,\n      end: Alignment.bottomCenter,\n      colors: [Colors.transparent, Colors.white],\n    );\n    final List<Color> colors = [\n      const HSVColor.fromAHSV(1.0, 0.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 60.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 120.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 180.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 240.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 300.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 360.0, 1.0, 1.0).toColor(),\n    ];\n    final Gradient gradientH = LinearGradient(colors: colors);\n    canvas.drawRect(rect, Paint()..shader = gradientH.createShader(rect));\n    canvas.drawRect(rect, Paint()..shader = gradientV.createShader(rect));\n    canvas.drawRect(\n      rect,\n      Paint()..color = Colors.black.withOpacity(1 - hsvColor.value),\n    );\n\n    canvas.drawCircle(\n      Offset(\n        size.width * hsvColor.hue / 360,\n        size.height * (1 - hsvColor.saturation),\n      ),\n      size.height * 0.04,\n      Paint()\n        ..color = pointerColor ?? (useWhiteForeground(hsvColor.toColor()) ? Colors.white : Colors.black)\n        ..strokeWidth = 1.5\n        ..style = PaintingStyle.stroke,\n    );\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}\n\n/// Painter for SL mixture.\nclass HSLWithHueColorPainter extends CustomPainter {\n  const HSLWithHueColorPainter(this.hslColor, {this.pointerColor});\n\n  final HSLColor hslColor;\n  final Color? pointerColor;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Rect rect = Offset.zero & size;\n    final Gradient gradientH = LinearGradient(\n      colors: [\n        const Color(0xff808080),\n        HSLColor.fromAHSL(1.0, hslColor.hue, 1.0, 0.5).toColor(),\n      ],\n    );\n    const Gradient gradientV = LinearGradient(\n      begin: Alignment.topCenter,\n      end: Alignment.bottomCenter,\n      stops: [0.0, 0.5, 0.5, 1],\n      colors: [\n        Colors.white,\n        Color(0x00ffffff),\n        Colors.transparent,\n        Colors.black,\n      ],\n    );\n    canvas.drawRect(rect, Paint()..shader = gradientH.createShader(rect));\n    canvas.drawRect(rect, Paint()..shader = gradientV.createShader(rect));\n\n    canvas.drawCircle(\n      Offset(size.width * hslColor.saturation, size.height * (1 - hslColor.lightness)),\n      size.height * 0.04,\n      Paint()\n        ..color = pointerColor ?? (useWhiteForeground(hslColor.toColor()) ? Colors.white : Colors.black)\n        ..strokeWidth = 1.5\n        ..style = PaintingStyle.stroke,\n    );\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 236, "line_from": 236, "line_to": 327, "snippet": "  void paint(Canvas canvas, Size size) {\n    final Rect rect = Offset.zero & size;\n    final List<Color> colors = [\n      HSLColor.fromAHSL(1.0, 0.0, hslColor.saturation, 0.5).toColor(),\n      HSLColor.fromAHSL(1.0, 60.0, hslColor.saturation, 0.5).toColor(),\n      HSLColor.fromAHSL(1.0, 120.0, hslColor.saturation, 0.5).toColor(),\n      HSLColor.fromAHSL(1.0, 180.0, hslColor.saturation, 0.5).toColor(),\n      HSLColor.fromAHSL(1.0, 240.0, hslColor.saturation, 0.5).toColor(),\n      HSLColor.fromAHSL(1.0, 300.0, hslColor.saturation, 0.5).toColor(),\n      HSLColor.fromAHSL(1.0, 360.0, hslColor.saturation, 0.5).toColor(),\n    ];\n    final Gradient gradientH = LinearGradient(colors: colors);\n    const Gradient gradientV = LinearGradient(\n      begin: Alignment.topCenter,\n      end: Alignment.bottomCenter,\n      stops: [0.0, 0.5, 0.5, 1],\n      colors: [\n        Colors.white,\n        Color(0x00ffffff),\n        Colors.transparent,\n        Colors.black,\n      ],\n    );\n    canvas.drawRect(rect, Paint()..shader = gradientH.createShader(rect));\n    canvas.drawRect(rect, Paint()..shader = gradientV.createShader(rect));\n\n    canvas.drawCircle(\n      Offset(size.width * hslColor.hue / 360, size.height * (1 - hslColor.lightness)),\n      size.height * 0.04,\n      Paint()\n        ..color = pointerColor ?? (useWhiteForeground(hslColor.toColor()) ? Colors.white : Colors.black)\n        ..strokeWidth = 1.5\n        ..style = PaintingStyle.stroke,\n    );\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}\n\n/// Painter for HS mixture.\nclass HSLWithLightnessColorPainter extends CustomPainter {\n  const HSLWithLightnessColorPainter(this.hslColor, {this.pointerColor});\n\n  final HSLColor hslColor;\n  final Color? pointerColor;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Rect rect = Offset.zero & size;\n    final List<Color> colors = [\n      const HSLColor.fromAHSL(1.0, 0.0, 1.0, 0.5).toColor(),\n      const HSLColor.fromAHSL(1.0, 60.0, 1.0, 0.5).toColor(),\n      const HSLColor.fromAHSL(1.0, 120.0, 1.0, 0.5).toColor(),\n      const HSLColor.fromAHSL(1.0, 180.0, 1.0, 0.5).toColor(),\n      const HSLColor.fromAHSL(1.0, 240.0, 1.0, 0.5).toColor(),\n      const HSLColor.fromAHSL(1.0, 300.0, 1.0, 0.5).toColor(),\n      const HSLColor.fromAHSL(1.0, 360.0, 1.0, 0.5).toColor(),\n    ];\n    final Gradient gradientH = LinearGradient(colors: colors);\n    const Gradient gradientV = LinearGradient(\n      begin: Alignment.topCenter,\n      end: Alignment.bottomCenter,\n      colors: [\n        Colors.transparent,\n        Color(0xFF808080),\n      ],\n    );\n    canvas.drawRect(rect, Paint()..shader = gradientH.createShader(rect));\n    canvas.drawRect(rect, Paint()..shader = gradientV.createShader(rect));\n    canvas.drawRect(\n      rect,\n      Paint()..color = Colors.black.withOpacity((1 - hslColor.lightness * 2).clamp(0, 1)),\n    );\n    canvas.drawRect(\n      rect,\n      Paint()..color = Colors.white.withOpacity(((hslColor.lightness - 0.5) * 2).clamp(0, 1)),\n    );\n\n    canvas.drawCircle(\n      Offset(size.width * hslColor.hue / 360, size.height * (1 - hslColor.saturation)),\n      size.height * 0.04,\n      Paint()\n        ..color = pointerColor ?? (useWhiteForeground(hslColor.toColor()) ? Colors.white : Colors.black)\n        ..strokeWidth = 1.5\n        ..style = PaintingStyle.stroke,\n    );\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 337, "line_from": 337, "line_to": 419, "snippet": "  void paint(Canvas canvas, Size size) {\n    final Rect rect = Offset.zero & size;\n    final Gradient gradientH = LinearGradient(\n      colors: [\n        Color.fromRGBO(color.red, 255, 0, 1.0),\n        Color.fromRGBO(color.red, 255, 255, 1.0),\n      ],\n    );\n    final Gradient gradientV = LinearGradient(\n      begin: Alignment.topCenter,\n      end: Alignment.bottomCenter,\n      colors: [\n        Color.fromRGBO(color.red, 255, 255, 1.0),\n        Color.fromRGBO(color.red, 0, 255, 1.0),\n      ],\n    );\n    canvas.drawRect(rect, Paint()..shader = gradientH.createShader(rect));\n    canvas.drawRect(\n      rect,\n      Paint()\n        ..shader = gradientV.createShader(rect)\n        ..blendMode = BlendMode.multiply,\n    );\n\n    canvas.drawCircle(\n      Offset(size.width * color.blue / 255, size.height * (1 - color.green / 255)),\n      size.height * 0.04,\n      Paint()\n        ..color = pointerColor ?? (useWhiteForeground(color) ? Colors.white : Colors.black)\n        ..strokeWidth = 1.5\n        ..style = PaintingStyle.stroke,\n    );\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}\n\n/// Painter for RB mixture.\nclass RGBWithGreenColorPainter extends CustomPainter {\n  const RGBWithGreenColorPainter(this.color, {this.pointerColor});\n\n  final Color color;\n  final Color? pointerColor;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Rect rect = Offset.zero & size;\n    final Gradient gradientH = LinearGradient(\n      colors: [\n        Color.fromRGBO(255, color.green, 0, 1.0),\n        Color.fromRGBO(255, color.green, 255, 1.0),\n      ],\n    );\n    final Gradient gradientV = LinearGradient(\n      begin: Alignment.topCenter,\n      end: Alignment.bottomCenter,\n      colors: [\n        Color.fromRGBO(255, color.green, 255, 1.0),\n        Color.fromRGBO(0, color.green, 255, 1.0),\n      ],\n    );\n    canvas.drawRect(rect, Paint()..shader = gradientH.createShader(rect));\n    canvas.drawRect(\n      rect,\n      Paint()\n        ..shader = gradientV.createShader(rect)\n        ..blendMode = BlendMode.multiply,\n    );\n\n    canvas.drawCircle(\n      Offset(size.width * color.blue / 255, size.height * (1 - color.red / 255)),\n      size.height * 0.04,\n      Paint()\n        ..color = pointerColor ?? (useWhiteForeground(color) ? Colors.white : Colors.black)\n        ..strokeWidth = 1.5\n        ..style = PaintingStyle.stroke,\n    );\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 429, "line_from": 429, "line_to": 515, "snippet": "  void paint(Canvas canvas, Size size) {\n    final Rect rect = Offset.zero & size;\n    final Gradient gradientH = LinearGradient(\n      colors: [\n        Color.fromRGBO(0, 255, color.blue, 1.0),\n        Color.fromRGBO(255, 255, color.blue, 1.0),\n      ],\n    );\n    final Gradient gradientV = LinearGradient(\n      begin: Alignment.topCenter,\n      end: Alignment.bottomCenter,\n      colors: [\n        Color.fromRGBO(255, 255, color.blue, 1.0),\n        Color.fromRGBO(255, 0, color.blue, 1.0),\n      ],\n    );\n    canvas.drawRect(rect, Paint()..shader = gradientH.createShader(rect));\n    canvas.drawRect(\n      rect,\n      Paint()\n        ..shader = gradientV.createShader(rect)\n        ..blendMode = BlendMode.multiply,\n    );\n\n    canvas.drawCircle(\n      Offset(size.width * color.red / 255, size.height * (1 - color.green / 255)),\n      size.height * 0.04,\n      Paint()\n        ..color = pointerColor ?? (useWhiteForeground(color) ? Colors.white : Colors.black)\n        ..strokeWidth = 1.5\n        ..style = PaintingStyle.stroke,\n    );\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}\n\n/// Painter for hue color wheel.\nclass HUEColorWheelPainter extends CustomPainter {\n  const HUEColorWheelPainter(this.hsvColor, {this.pointerColor});\n\n  final HSVColor hsvColor;\n  final Color? pointerColor;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    Rect rect = Offset.zero & size;\n    Offset center = Offset(size.width / 2, size.height / 2);\n    double radio = size.width <= size.height ? size.width / 2 : size.height / 2;\n\n    final List<Color> colors = [\n      const HSVColor.fromAHSV(1.0, 360.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 300.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 240.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 180.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 120.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 60.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 0.0, 1.0, 1.0).toColor(),\n    ];\n    final Gradient gradientS = SweepGradient(colors: colors);\n    const Gradient gradientR = RadialGradient(\n      colors: [\n        Colors.white,\n        Color(0x00FFFFFF),\n      ],\n    );\n    canvas.drawCircle(center, radio, Paint()..shader = gradientS.createShader(rect));\n    canvas.drawCircle(center, radio, Paint()..shader = gradientR.createShader(rect));\n    canvas.drawCircle(center, radio, Paint()..color = Colors.black.withOpacity(1 - hsvColor.value));\n\n    canvas.drawCircle(\n      Offset(\n        center.dx + hsvColor.saturation * radio * cos((hsvColor.hue * pi / 180)),\n        center.dy - hsvColor.saturation * radio * sin((hsvColor.hue * pi / 180)),\n      ),\n      size.height * 0.04,\n      Paint()\n        ..color = pointerColor ?? (useWhiteForeground(hsvColor.toColor()) ? Colors.white : Colors.black)\n        ..strokeWidth = 1.5\n        ..style = PaintingStyle.stroke,\n    );\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 526, "line_from": 526, "line_to": 605, "snippet": "  void paint(Canvas canvas, Size size) {\n    Rect rect = Offset.zero & size;\n    Offset center = Offset(size.width / 2, size.height / 2);\n    double radio = size.width <= size.height ? size.width / 2 : size.height / 2;\n\n    final List<Color> colors = [\n      const HSVColor.fromAHSV(1.0, 360.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 300.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 240.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 180.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 120.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 60.0, 1.0, 1.0).toColor(),\n      const HSVColor.fromAHSV(1.0, 0.0, 1.0, 1.0).toColor(),\n    ];\n    canvas.drawCircle(\n      center,\n      radio,\n      Paint()\n        ..shader = SweepGradient(colors: colors).createShader(rect)\n        ..style = PaintingStyle.stroke\n        ..strokeWidth = strokeWidth,\n    );\n\n    final Offset offset = Offset(\n      center.dx + radio * cos((hsvColor.hue * pi / 180)),\n      center.dy - radio * sin((hsvColor.hue * pi / 180)),\n    );\n    canvas.drawShadow(Path()..addOval(Rect.fromCircle(center: offset, radius: 12)), Colors.black, 3.0, true);\n    canvas.drawCircle(\n      offset,\n      size.height * 0.04,\n      Paint()\n        ..color = Colors.white\n        ..style = PaintingStyle.fill,\n    );\n    if (displayThumbColor) {\n      canvas.drawCircle(\n        offset,\n        size.height * 0.03,\n        Paint()\n          ..color = hsvColor.toColor()\n          ..style = PaintingStyle.fill,\n      );\n    }\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}\n\nclass _SliderLayout extends MultiChildLayoutDelegate {\n  static const String track = 'track';\n  static const String thumb = 'thumb';\n  static const String gestureContainer = 'gesturecontainer';\n\n  @override\n  void performLayout(Size size) {\n    layoutChild(\n      track,\n      BoxConstraints.tightFor(\n        width: size.width - 30.0,\n        height: size.height / 5,\n      ),\n    );\n    positionChild(track, Offset(15.0, size.height * 0.4));\n    layoutChild(\n      thumb,\n      BoxConstraints.tightFor(width: 5.0, height: size.height / 4),\n    );\n    positionChild(thumb, Offset(0.0, size.height * 0.4));\n    layoutChild(\n      gestureContainer,\n      BoxConstraints.tightFor(width: size.width, height: size.height),\n    );\n    positionChild(gestureContainer, Offset.zero);\n  }\n\n  @override\n  bool shouldRelayout(_SliderLayout oldDelegate) => false;\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 615, "line_from": 615, "line_to": 753, "snippet": "  void paint(Canvas canvas, Size size) {\n    final Rect rect = Offset.zero & size;\n    if (trackType == TrackType.alpha) {\n      final Size chessSize = Size(size.height / 2, size.height / 2);\n      Paint chessPaintB = Paint()..color = const Color(0xffcccccc);\n      Paint chessPaintW = Paint()..color = Colors.white;\n      List.generate((size.height / chessSize.height).round(), (int y) {\n        List.generate((size.width / chessSize.width).round(), (int x) {\n          canvas.drawRect(\n            Offset(chessSize.width * x, chessSize.width * y) & chessSize,\n            (x + y) % 2 != 0 ? chessPaintW : chessPaintB,\n          );\n        });\n      });\n    }\n\n    switch (trackType) {\n      case TrackType.hue:\n        final List<Color> colors = [\n          const HSVColor.fromAHSV(1.0, 0.0, 1.0, 1.0).toColor(),\n          const HSVColor.fromAHSV(1.0, 60.0, 1.0, 1.0).toColor(),\n          const HSVColor.fromAHSV(1.0, 120.0, 1.0, 1.0).toColor(),\n          const HSVColor.fromAHSV(1.0, 180.0, 1.0, 1.0).toColor(),\n          const HSVColor.fromAHSV(1.0, 240.0, 1.0, 1.0).toColor(),\n          const HSVColor.fromAHSV(1.0, 300.0, 1.0, 1.0).toColor(),\n          const HSVColor.fromAHSV(1.0, 360.0, 1.0, 1.0).toColor(),\n        ];\n        Gradient gradient = LinearGradient(colors: colors);\n        canvas.drawRect(rect, Paint()..shader = gradient.createShader(rect));\n        break;\n      case TrackType.saturation:\n        final List<Color> colors = [\n          HSVColor.fromAHSV(1.0, hsvColor.hue, 0.0, 1.0).toColor(),\n          HSVColor.fromAHSV(1.0, hsvColor.hue, 1.0, 1.0).toColor(),\n        ];\n        Gradient gradient = LinearGradient(colors: colors);\n        canvas.drawRect(rect, Paint()..shader = gradient.createShader(rect));\n        break;\n      case TrackType.saturationForHSL:\n        final List<Color> colors = [\n          HSLColor.fromAHSL(1.0, hsvColor.hue, 0.0, 0.5).toColor(),\n          HSLColor.fromAHSL(1.0, hsvColor.hue, 1.0, 0.5).toColor(),\n        ];\n        Gradient gradient = LinearGradient(colors: colors);\n        canvas.drawRect(rect, Paint()..shader = gradient.createShader(rect));\n        break;\n      case TrackType.value:\n        final List<Color> colors = [\n          HSVColor.fromAHSV(1.0, hsvColor.hue, 1.0, 0.0).toColor(),\n          HSVColor.fromAHSV(1.0, hsvColor.hue, 1.0, 1.0).toColor(),\n        ];\n        Gradient gradient = LinearGradient(colors: colors);\n        canvas.drawRect(rect, Paint()..shader = gradient.createShader(rect));\n        break;\n      case TrackType.lightness:\n        final List<Color> colors = [\n          HSLColor.fromAHSL(1.0, hsvColor.hue, 1.0, 0.0).toColor(),\n          HSLColor.fromAHSL(1.0, hsvColor.hue, 1.0, 0.5).toColor(),\n          HSLColor.fromAHSL(1.0, hsvColor.hue, 1.0, 1.0).toColor(),\n        ];\n        Gradient gradient = LinearGradient(colors: colors);\n        canvas.drawRect(rect, Paint()..shader = gradient.createShader(rect));\n        break;\n      case TrackType.red:\n        final List<Color> colors = [\n          hsvColor.toColor().withRed(0).withOpacity(1.0),\n          hsvColor.toColor().withRed(255).withOpacity(1.0),\n        ];\n        Gradient gradient = LinearGradient(colors: colors);\n        canvas.drawRect(rect, Paint()..shader = gradient.createShader(rect));\n        break;\n      case TrackType.green:\n        final List<Color> colors = [\n          hsvColor.toColor().withGreen(0).withOpacity(1.0),\n          hsvColor.toColor().withGreen(255).withOpacity(1.0),\n        ];\n        Gradient gradient = LinearGradient(colors: colors);\n        canvas.drawRect(rect, Paint()..shader = gradient.createShader(rect));\n        break;\n      case TrackType.blue:\n        final List<Color> colors = [\n          hsvColor.toColor().withBlue(0).withOpacity(1.0),\n          hsvColor.toColor().withBlue(255).withOpacity(1.0),\n        ];\n        Gradient gradient = LinearGradient(colors: colors);\n        canvas.drawRect(rect, Paint()..shader = gradient.createShader(rect));\n        break;\n      case TrackType.alpha:\n        final List<Color> colors = [\n          hsvColor.toColor().withOpacity(0.0),\n          hsvColor.toColor().withOpacity(1.0),\n        ];\n        Gradient gradient = LinearGradient(colors: colors);\n        canvas.drawRect(rect, Paint()..shader = gradient.createShader(rect));\n        break;\n    }\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}\n\n/// Painter for thumb of slider.\nclass ThumbPainter extends CustomPainter {\n  const ThumbPainter({this.thumbColor, this.fullThumbColor = false});\n\n  final Color? thumbColor;\n  final bool fullThumbColor;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    canvas.drawShadow(\n      Path()\n        ..addOval(\n          Rect.fromCircle(center: const Offset(0.5, 2.0), radius: size.width * 1.8),\n        ),\n      Colors.black,\n      3.0,\n      true,\n    );\n    canvas.drawCircle(\n        Offset(0.0, size.height * 0.4),\n        size.height,\n        Paint()\n          ..color = Colors.white\n          ..style = PaintingStyle.fill);\n    if (thumbColor != null) {\n      canvas.drawCircle(\n          Offset(0.0, size.height * 0.4),\n          size.height * (fullThumbColor ? 1.0 : 0.65),\n          Paint()\n            ..color = thumbColor!\n            ..style = PaintingStyle.fill);\n    }\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 762, "line_from": 762, "line_to": 808, "snippet": "  void paint(Canvas canvas, Size size) {\n    final Size chessSize = Size(size.width / 10, size.height / 10);\n    final Paint chessPaintB = Paint()..color = const Color(0xFFCCCCCC);\n    final Paint chessPaintW = Paint()..color = Colors.white;\n    List.generate((size.height / chessSize.height).round(), (int y) {\n      List.generate((size.width / chessSize.width).round(), (int x) {\n        canvas.drawRect(\n          Offset(chessSize.width * x, chessSize.height * y) & chessSize,\n          (x + y) % 2 != 0 ? chessPaintW : chessPaintB,\n        );\n      });\n    });\n\n    canvas.drawCircle(\n        Offset(size.width / 2, size.height / 2),\n        size.height / 2,\n        Paint()\n          ..color = color\n          ..style = PaintingStyle.fill);\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}\n\n/// Painter for chess type alpha background in slider track widget.\nclass CheckerPainter extends CustomPainter {\n  const CheckerPainter();\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Size chessSize = Size(size.height / 6, size.height / 6);\n    Paint chessPaintB = Paint()..color = const Color(0xffcccccc);\n    Paint chessPaintW = Paint()..color = Colors.white;\n    List.generate((size.height / chessSize.height).round(), (int y) {\n      List.generate((size.width / chessSize.width).round(), (int x) {\n        canvas.drawRect(\n          Offset(chessSize.width * x, chessSize.width * y) & chessSize,\n          (x + y) % 2 != 0 ? chessPaintW : chessPaintB,\n        );\n      });\n    });\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 841, "line_from": 841, "line_to": 958, "snippet": "  void initState() {\n    super.initState();\n    _colorType = widget.colorLabelTypes[0];\n  }\n\n  List<String> colorValue(HSVColor hsvColor, ColorLabelType colorLabelType) {\n    if (colorLabelType == ColorLabelType.hex) {\n      final Color color = hsvColor.toColor();\n      return [\n        color.red.toRadixString(16).toUpperCase().padLeft(2, '0'),\n        color.green.toRadixString(16).toUpperCase().padLeft(2, '0'),\n        color.blue.toRadixString(16).toUpperCase().padLeft(2, '0'),\n        color.alpha.toRadixString(16).toUpperCase().padLeft(2, '0'),\n      ];\n    } else if (colorLabelType == ColorLabelType.rgb) {\n      final Color color = hsvColor.toColor();\n      return [\n        color.red.toString(),\n        color.green.toString(),\n        color.blue.toString(),\n        '${(color.opacity * 100).round()}%',\n      ];\n    } else if (colorLabelType == ColorLabelType.hsv) {\n      return [\n        '${hsvColor.hue.round()}\u00b0',\n        '${(hsvColor.saturation * 100).round()}%',\n        '${(hsvColor.value * 100).round()}%',\n        '${(hsvColor.alpha * 100).round()}%',\n      ];\n    } else if (colorLabelType == ColorLabelType.hsl) {\n      HSLColor hslColor = hsvToHsl(hsvColor);\n      return [\n        '${hslColor.hue.round()}\u00b0',\n        '${(hslColor.saturation * 100).round()}%',\n        '${(hslColor.lightness * 100).round()}%',\n        '${(hsvColor.alpha * 100).round()}%',\n      ];\n    } else {\n      return ['??', '??', '??', '??'];\n    }\n  }\n\n  List<Widget> colorValueLabels() {\n    double fontSize = 14;\n    if (widget.textStyle != null && widget.textStyle?.fontSize != null) fontSize = widget.textStyle?.fontSize ?? 14;\n\n    return [\n      for (String item in _colorTypes[_colorType] ?? [])\n        if (widget.enableAlpha || item != 'A')\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 4.0),\n            child: ConstrainedBox(\n              constraints: BoxConstraints(minWidth: fontSize * 2),\n              child: IntrinsicHeight(\n                child: Column(\n                  children: <Widget>[\n                    Text(\n                      item,\n                      style: widget.textStyle ?? Theme.of(context).textTheme.bodyText1,\n                    ),\n                    const SizedBox(height: 10.0),\n                    Expanded(\n                      child: Text(\n                        colorValue(widget.hsvColor, _colorType)[_colorTypes[_colorType]!.indexOf(item)],\n                        overflow: TextOverflow.ellipsis,\n                        style: widget.textStyle ?? Theme.of(context).textTheme.bodyText2,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          )\n    ];\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(mainAxisAlignment: MainAxisAlignment.center, children: <Widget>[\n      DropdownButton(\n        value: _colorType,\n        onChanged: (ColorLabelType? type) {\n          if (type != null) setState(() => _colorType = type);\n        },\n        items: [\n          for (ColorLabelType type in widget.colorLabelTypes)\n            DropdownMenuItem(\n              value: type,\n              child: Text(type.toString().split('.').last.toUpperCase()),\n            )\n        ],\n      ),\n      const SizedBox(width: 10.0),\n      ...colorValueLabels(),\n    ]);\n  }\n}\n\n/// Provide hex input wiget for 3/6/8 digits.\nclass ColorPickerInput extends StatefulWidget {\n  const ColorPickerInput(\n    this.color,\n    this.onColorChanged, {\n    Key? key,\n    this.enableAlpha = true,\n    this.embeddedText = false,\n    this.disable = false,\n  }) : super(key: key);\n\n  final Color color;\n  final ValueChanged<Color> onColorChanged;\n  final bool enableAlpha;\n  final bool embeddedText;\n  final bool disable;\n\n  @override\n  ColorPickerInputState createState() => ColorPickerInputState();\n}"}, {"structure_type": "function", "name": "dispose", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 965, "line_from": 965, "line_to": 1153, "snippet": "  void dispose() {\n    textEditingController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (inputColor != widget.color.value) {\n      textEditingController.text = '#${widget.color.red.toRadixString(16).toUpperCase().padLeft(2, '0')}${widget.color.green.toRadixString(16).toUpperCase().padLeft(2, '0')}${widget.color.blue.toRadixString(16).toUpperCase().padLeft(2, '0')}${widget.enableAlpha ? widget.color.alpha.toRadixString(16).toUpperCase().padLeft(2, '0') : ''}';\n    }\n    return Padding(\n      padding: const EdgeInsets.only(top: 5.0),\n      child: Row(mainAxisAlignment: MainAxisAlignment.center, children: [\n        if (!widget.embeddedText) Text('Hex', style: Theme.of(context).textTheme.bodyText1),\n        const SizedBox(width: 10),\n        SizedBox(\n          width: (Theme.of(context).textTheme.bodyText2?.fontSize ?? 14) * 10,\n          child: TextField(\n            enabled: !widget.disable,\n            controller: textEditingController,\n            inputFormatters: [\n              UpperCaseTextFormatter(),\n              FilteringTextInputFormatter.allow(RegExp(kValidHexPattern)),\n            ],\n            decoration: InputDecoration(\n              isDense: true,\n              label: widget.embeddedText ? const Text('Hex') : null,\n              contentPadding: const EdgeInsets.symmetric(vertical: 5),\n            ),\n            onChanged: (String value) {\n              String input = value;\n              if (value.length == 9) {\n                input = value.split('').getRange(7, 9).join() + value.split('').getRange(1, 7).join();\n              }\n              final Color? color = colorFromHex(input);\n              if (color != null) {\n                widget.onColorChanged(color);\n                inputColor = color.value;\n              }\n            },\n          ),\n        ),\n      ]),\n    );\n  }\n}\n\n/// 9 track types for slider picker widget.\nclass ColorPickerSlider extends StatelessWidget {\n  const ColorPickerSlider(\n    this.trackType,\n    this.hsvColor,\n    this.onColorChanged, {\n    Key? key,\n    this.displayThumbColor = false,\n    this.fullThumbColor = false,\n  }) : super(key: key);\n\n  final TrackType trackType;\n  final HSVColor hsvColor;\n  final ValueChanged<HSVColor> onColorChanged;\n  final bool displayThumbColor;\n  final bool fullThumbColor;\n\n  void slideEvent(RenderBox getBox, BoxConstraints box, Offset globalPosition) {\n    double localDx = getBox.globalToLocal(globalPosition).dx - 15.0;\n    double progress = localDx.clamp(0.0, box.maxWidth - 30.0) / (box.maxWidth - 30.0);\n    switch (trackType) {\n      case TrackType.hue:\n        // 360 is the same as zero\n        // if set to 360, sliding to end goes to zero\n        onColorChanged(hsvColor.withHue(progress * 359));\n        break;\n      case TrackType.saturation:\n        onColorChanged(hsvColor.withSaturation(progress));\n        break;\n      case TrackType.saturationForHSL:\n        onColorChanged(hslToHsv(hsvToHsl(hsvColor).withSaturation(progress)));\n        break;\n      case TrackType.value:\n        onColorChanged(hsvColor.withValue(progress));\n        break;\n      case TrackType.lightness:\n        onColorChanged(hslToHsv(hsvToHsl(hsvColor).withLightness(progress)));\n        break;\n      case TrackType.red:\n        onColorChanged(HSVColor.fromColor(hsvColor.toColor().withRed((progress * 0xff).round())));\n        break;\n      case TrackType.green:\n        onColorChanged(HSVColor.fromColor(hsvColor.toColor().withGreen((progress * 0xff).round())));\n        break;\n      case TrackType.blue:\n        onColorChanged(HSVColor.fromColor(hsvColor.toColor().withBlue((progress * 0xff).round())));\n        break;\n      case TrackType.alpha:\n        onColorChanged(hsvColor.withAlpha(localDx.clamp(0.0, box.maxWidth - 30.0) / (box.maxWidth - 30.0)));\n        break;\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(builder: (BuildContext context, BoxConstraints box) {\n      double thumbOffset = 15.0;\n      Color thumbColor;\n      switch (trackType) {\n        case TrackType.hue:\n          thumbOffset += (box.maxWidth - 30.0) * hsvColor.hue / 360;\n          thumbColor = HSVColor.fromAHSV(1.0, hsvColor.hue, 1.0, 1.0).toColor();\n          break;\n        case TrackType.saturation:\n          thumbOffset += (box.maxWidth - 30.0) * hsvColor.saturation;\n          thumbColor = HSVColor.fromAHSV(1.0, hsvColor.hue, hsvColor.saturation, 1.0).toColor();\n          break;\n        case TrackType.saturationForHSL:\n          thumbOffset += (box.maxWidth - 30.0) * hsvToHsl(hsvColor).saturation;\n          thumbColor = HSLColor.fromAHSL(1.0, hsvColor.hue, hsvToHsl(hsvColor).saturation, 0.5).toColor();\n          break;\n        case TrackType.value:\n          thumbOffset += (box.maxWidth - 30.0) * hsvColor.value;\n          thumbColor = HSVColor.fromAHSV(1.0, hsvColor.hue, 1.0, hsvColor.value).toColor();\n          break;\n        case TrackType.lightness:\n          thumbOffset += (box.maxWidth - 30.0) * hsvToHsl(hsvColor).lightness;\n          thumbColor = HSLColor.fromAHSL(1.0, hsvColor.hue, 1.0, hsvToHsl(hsvColor).lightness).toColor();\n          break;\n        case TrackType.red:\n          thumbOffset += (box.maxWidth - 30.0) * hsvColor.toColor().red / 0xff;\n          thumbColor = hsvColor.toColor().withOpacity(1.0);\n          break;\n        case TrackType.green:\n          thumbOffset += (box.maxWidth - 30.0) * hsvColor.toColor().green / 0xff;\n          thumbColor = hsvColor.toColor().withOpacity(1.0);\n          break;\n        case TrackType.blue:\n          thumbOffset += (box.maxWidth - 30.0) * hsvColor.toColor().blue / 0xff;\n          thumbColor = hsvColor.toColor().withOpacity(1.0);\n          break;\n        case TrackType.alpha:\n          thumbOffset += (box.maxWidth - 30.0) * hsvColor.toColor().opacity;\n          thumbColor = hsvColor.toColor().withOpacity(hsvColor.alpha);\n          break;\n      }\n\n      return CustomMultiChildLayout(\n        delegate: _SliderLayout(),\n        children: <Widget>[\n          LayoutId(\n            id: _SliderLayout.track,\n            child: ClipRRect(\n              borderRadius: const BorderRadius.all(Radius.circular(50.0)),\n              child: CustomPaint(\n                  painter: TrackPainter(\n                trackType,\n                hsvColor,\n              )),\n            ),\n          ),\n          LayoutId(\n            id: _SliderLayout.thumb,\n            child: Transform.translate(\n              offset: Offset(thumbOffset, 0.0),\n              child: CustomPaint(\n                painter: ThumbPainter(\n                  thumbColor: displayThumbColor ? thumbColor : null,\n                  fullThumbColor: fullThumbColor,\n                ),\n              ),\n            ),\n          ),\n          LayoutId(\n            id: _SliderLayout.gestureContainer,\n            child: LayoutBuilder(\n              builder: (BuildContext context, BoxConstraints box) {\n                RenderBox? getBox = context.findRenderObject() as RenderBox?;\n                return GestureDetector(\n                  onPanDown: (DragDownDetails details) =>\n                      getBox != null ? slideEvent(getBox, box, details.globalPosition) : null,\n                  onPanUpdate: (DragUpdateDetails details) =>\n                      getBox != null ? slideEvent(getBox, box, details.globalPosition) : null,\n                );\n              },\n            ),\n          ),\n        ],\n      );\n    });\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 1169, "line_from": 1169, "line_to": 1321, "snippet": "  Widget build(BuildContext context) {\n    return Container(\n      width: width,\n      height: height,\n      decoration: BoxDecoration(\n        borderRadius: const BorderRadius.all(Radius.circular(1000.0)),\n        border: Border.all(color: const Color(0xffdddddd)),\n      ),\n      child: ClipRRect(\n        borderRadius: const BorderRadius.all(Radius.circular(1000.0)),\n        child: CustomPaint(painter: IndicatorPainter(hsvColor.toColor())),\n      ),\n    );\n  }\n}\n\n/// Provide Rectangle & Circle 2 categories, 10 variations of palette widget.\nclass ColorPickerArea extends StatelessWidget {\n  const ColorPickerArea(\n    this.hsvColor,\n    this.onColorChanged,\n    this.paletteType, {\n    Key? key,\n  }) : super(key: key);\n\n  final HSVColor hsvColor;\n  final ValueChanged<HSVColor> onColorChanged;\n  final PaletteType paletteType;\n\n  void _handleColorRectChange(double horizontal, double vertical) {\n    switch (paletteType) {\n      case PaletteType.hsv:\n      case PaletteType.hsvWithHue:\n        onColorChanged(hsvColor.withSaturation(horizontal).withValue(vertical));\n        break;\n      case PaletteType.hsvWithSaturation:\n        onColorChanged(hsvColor.withHue(horizontal * 360).withValue(vertical));\n        break;\n      case PaletteType.hsvWithValue:\n        onColorChanged(hsvColor.withHue(horizontal * 360).withSaturation(vertical));\n        break;\n      case PaletteType.hsl:\n      case PaletteType.hslWithHue:\n        onColorChanged(hslToHsv(\n          hsvToHsl(hsvColor).withSaturation(horizontal).withLightness(vertical),\n        ));\n        break;\n      case PaletteType.hslWithSaturation:\n        onColorChanged(hslToHsv(\n          hsvToHsl(hsvColor).withHue(horizontal * 360).withLightness(vertical),\n        ));\n        break;\n      case PaletteType.hslWithLightness:\n        onColorChanged(hslToHsv(\n          hsvToHsl(hsvColor).withHue(horizontal * 360).withSaturation(vertical),\n        ));\n        break;\n      case PaletteType.rgbWithRed:\n        onColorChanged(HSVColor.fromColor(\n          hsvColor.toColor().withBlue((horizontal * 255).round()).withGreen((vertical * 255).round()),\n        ));\n        break;\n      case PaletteType.rgbWithGreen:\n        onColorChanged(HSVColor.fromColor(\n          hsvColor.toColor().withBlue((horizontal * 255).round()).withRed((vertical * 255).round()),\n        ));\n        break;\n      case PaletteType.rgbWithBlue:\n        onColorChanged(HSVColor.fromColor(\n          hsvColor.toColor().withRed((horizontal * 255).round()).withGreen((vertical * 255).round()),\n        ));\n        break;\n      default:\n        break;\n    }\n  }\n\n  void _handleColorWheelChange(double hue, double radio) {\n    onColorChanged(hsvColor.withHue(hue).withSaturation(radio));\n  }\n\n  void _handleGesture(Offset position, BuildContext context, double height, double width) {\n    RenderBox? getBox = context.findRenderObject() as RenderBox?;\n    if (getBox == null) return;\n\n    Offset localOffset = getBox.globalToLocal(position);\n    double horizontal = localOffset.dx.clamp(0.0, width);\n    double vertical = localOffset.dy.clamp(0.0, height);\n\n    if (paletteType == PaletteType.hueWheel) {\n      Offset center = Offset(width / 2, height / 2);\n      double radio = width <= height ? width / 2 : height / 2;\n      double dist = sqrt(pow(horizontal - center.dx, 2) + pow(vertical - center.dy, 2)) / radio;\n      double rad = (atan2(horizontal - center.dx, vertical - center.dy) / pi + 1) / 2 * 360;\n      _handleColorWheelChange(((rad + 90) % 360).clamp(0, 360), dist.clamp(0, 1));\n    } else {\n      _handleColorRectChange(horizontal / width, 1 - vertical / height);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n      builder: (BuildContext context, BoxConstraints constraints) {\n        double width = constraints.maxWidth;\n        double height = constraints.maxHeight;\n\n        return RawGestureDetector(\n          gestures: {\n            _AlwaysWinPanGestureRecognizer: GestureRecognizerFactoryWithHandlers<_AlwaysWinPanGestureRecognizer>(\n              () => _AlwaysWinPanGestureRecognizer(),\n              (_AlwaysWinPanGestureRecognizer instance) {\n                instance\n                  ..onDown = ((details) => _handleGesture(details.globalPosition, context, height, width))\n                  ..onUpdate = ((details) => _handleGesture(details.globalPosition, context, height, width));\n              },\n            ),\n          },\n          child: Builder(\n            builder: (BuildContext _) {\n              switch (paletteType) {\n                case PaletteType.hsv:\n                case PaletteType.hsvWithHue:\n                  return CustomPaint(painter: HSVWithHueColorPainter(hsvColor));\n                case PaletteType.hsvWithSaturation:\n                  return CustomPaint(painter: HSVWithSaturationColorPainter(hsvColor));\n                case PaletteType.hsvWithValue:\n                  return CustomPaint(painter: HSVWithValueColorPainter(hsvColor));\n                case PaletteType.hsl:\n                case PaletteType.hslWithHue:\n                  return CustomPaint(painter: HSLWithHueColorPainter(hsvToHsl(hsvColor)));\n                case PaletteType.hslWithSaturation:\n                  return CustomPaint(painter: HSLWithSaturationColorPainter(hsvToHsl(hsvColor)));\n                case PaletteType.hslWithLightness:\n                  return CustomPaint(painter: HSLWithLightnessColorPainter(hsvToHsl(hsvColor)));\n                case PaletteType.rgbWithRed:\n                  return CustomPaint(painter: RGBWithRedColorPainter(hsvColor.toColor()));\n                case PaletteType.rgbWithGreen:\n                  return CustomPaint(painter: RGBWithGreenColorPainter(hsvColor.toColor()));\n                case PaletteType.rgbWithBlue:\n                  return CustomPaint(painter: RGBWithBlueColorPainter(hsvColor.toColor()));\n                case PaletteType.hueWheel:\n                  return CustomPaint(painter: HUEColorWheelPainter(hsvColor));\n                default:\n                  return const CustomPaint();\n              }\n            },\n          ),\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "_handleGesture", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/palette.dart", "file_name": "palette.dart", "line": 1338, "line_from": 1338, "line_to": 1389, "snippet": "  void _handleGesture(Offset position, BuildContext context, double height, double width) {\n    RenderBox? getBox = context.findRenderObject() as RenderBox?;\n    if (getBox == null) return;\n\n    Offset localOffset = getBox.globalToLocal(position);\n    double horizontal = localOffset.dx.clamp(0.0, width);\n    double vertical = localOffset.dy.clamp(0.0, height);\n\n    Offset center = Offset(width / 2, height / 2);\n    double radio = width <= height ? width / 2 : height / 2;\n    double dist = sqrt(pow(horizontal - center.dx, 2) + pow(vertical - center.dy, 2)) / radio;\n    double rad = (atan2(horizontal - center.dx, vertical - center.dy) / pi + 1) / 2 * 360;\n    if (dist > 0.7 && dist < 1.3) onColorChanged(hsvColor.withHue(((rad + 90) % 360).clamp(0, 360)));\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n      builder: (BuildContext context, BoxConstraints constraints) {\n        double width = constraints.maxWidth;\n        double height = constraints.maxHeight;\n\n        return RawGestureDetector(\n          gestures: {\n            _AlwaysWinPanGestureRecognizer: GestureRecognizerFactoryWithHandlers<_AlwaysWinPanGestureRecognizer>(\n              () => _AlwaysWinPanGestureRecognizer(),\n              (_AlwaysWinPanGestureRecognizer instance) {\n                instance\n                  ..onDown = ((details) => _handleGesture(details.globalPosition, context, height, width))\n                  ..onUpdate = ((details) => _handleGesture(details.globalPosition, context, height, width));\n              },\n            ),\n          },\n          child: CustomPaint(\n            painter: HueRingPainter(hsvColor, displayThumbColor: displayThumbColor, strokeWidth: strokeWidth),\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass _AlwaysWinPanGestureRecognizer extends PanGestureRecognizer {\n  @override\n  void addAllowedPointer(event) {\n    super.addAllowedPointer(event);\n    resolve(GestureDisposition.accepted);\n  }\n\n  @override\n  String get debugDescription => 'alwaysWin';\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "color_picker", "file_path": "sunnah_shop_flutter/lib/core/external_packages/color_picker/block_picker.dart", "file_name": "block_picker.dart", "line": 108, "line_from": 108, "line_to": 156, "snippet": "  void initState() {\n    _currentColor = widget.pickerColor;\n    super.initState();\n  }\n\n  void changeColor(Color color) {\n    setState(() => _currentColor = color);\n    widget.onColorChanged(color);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return widget.layoutBuilder(\n      context,\n      widget.availableColors,\n      (Color color) => widget.itemBuilder(\n        color,\n        (_currentColor != null && (widget.useInShowDialog ? true : widget.pickerColor != null))\n            ? (_currentColor?.value == color.value) &&\n                (widget.useInShowDialog ? true : widget.pickerColor?.value == color.value)\n            : false,\n        () => changeColor(color),\n      ),\n    );\n  }\n}\n\n// The blocky color picker you can alter the layout and shape with multiple choice.\nclass MultipleChoiceBlockPicker extends StatefulWidget {\n  const MultipleChoiceBlockPicker({\n    Key? key,\n    required this.pickerColors,\n    required this.onColorsChanged,\n    this.availableColors = _defaultColors,\n    this.useInShowDialog = true,\n    this.layoutBuilder = _defaultLayoutBuilder,\n    this.itemBuilder = _defaultItemBuilder,\n  }) : super(key: key);\n\n  final List<Color>? pickerColors;\n  final ValueChanged<List<Color>> onColorsChanged;\n  final List<Color> availableColors;\n  final bool useInShowDialog;\n  final PickerLayoutBuilder layoutBuilder;\n  final PickerItemBuilder itemBuilder;\n\n  @override\n  State<StatefulWidget> createState() => _MultipleChoiceBlockPickerState();\n}"}, {"structure_type": "class", "name": "DottedBorder extends StatelessWidget", "docstring": "Add a dotted border around any [child] widget. The [strokeWidth] property\ndefines the width of the dashed border and [color] determines the stroke\npaint color. [CircularIntervalList] is populated with the [dashPattern] to\nrender the appropriate pattern. The [radius] property is taken into account\nonly if the [borderType] is [BorderType.rRect]. A [customPath] can be passed in\nas a parameter if you want to draw a custom shaped border.", "module": "dotted_border", "file_path": "sunnah_shop_flutter/lib/core/external_packages/dotted_border/dotted_border.dart", "file_name": "dotted_border.dart", "line": 14, "line_from": 14, "line_to": 80, "snippet": "class DottedBorder extends StatelessWidget {\n  final Widget child;\n  final EdgeInsets padding;\n  final double strokeWidth;\n  final Color color;\n  final List<double> dashPattern;\n  final BorderType borderType;\n  final Radius radius;\n  final StrokeCap strokeCap;\n  final PathBuilder? customPath;\n\n  DottedBorder({\n    super.key,\n    required this.child,\n    this.color = Colors.black,\n    this.strokeWidth = 1,\n    this.borderType = BorderType.rect,\n    this.dashPattern = const <double>[3, 1],\n    this.padding = const EdgeInsets.all(2),\n    this.radius = const Radius.circular(0),\n    this.strokeCap = StrokeCap.butt,\n    this.customPath,\n  }) {\n    assert(_isValidDashPattern(dashPattern), 'Invalid dash pattern');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Stack(\n      children: <Widget>[\n        Positioned.fill(\n          child: CustomPaint(\n            painter: _DashPainter(\n              strokeWidth: strokeWidth,\n              radius: radius,\n              color: color,\n              borderType: borderType,\n              dashPattern: dashPattern,\n              customPath: customPath,\n              strokeCap: strokeCap,\n            ),\n          ),\n        ),\n        Padding(\n          padding: padding,\n          child: child,\n        ),\n      ],\n    );\n  }\n\n  /// Compute if [dashPattern] is valid. The following conditions need to be met\n  /// * Cannot be null or empty\n  /// * If [dashPattern] has only 1 element, it cannot be 0\n  bool _isValidDashPattern(List<double>? dashPattern) {\n    Set<double>? dashSet = dashPattern?.toSet();\n    if (dashSet == null) return false;\n    if (dashSet.length == 1 && dashSet.elementAt(0) == 0.0) return false;\n    if (dashSet.isEmpty) return false;\n    return true;\n  }\n}\n\n/// The different supported BorderTypes\nenum BorderType { circle, rRect, rect, oval }\n"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "html", "file_path": "sunnah_shop_flutter/lib/core/external_packages/html/html_parser.dart", "file_name": "html_parser.dart", "line": 859, "line_from": 859, "line_to": 950, "snippet": "  Widget build(BuildContext context) {\n    return Container(\n      decoration: BoxDecoration(\n        border: style.border,\n        color: style.backgroundColor,\n      ),\n      height: style.height,\n      width: style.width,\n      padding: style.padding?.nonNegative,\n      margin: style.margin?.nonNegative,\n      alignment: shrinkWrap ? null : style.alignment,\n      child: child ??\n          StyledText(\n            textSpan: TextSpan(\n              style: newContext.style.generateTextStyle(),\n              children: children,\n            ),\n            style: newContext.style,\n            renderContext: newContext,\n          ),\n    );\n  }\n}\n\nclass StyledText extends StatelessWidget {\n  final InlineSpan textSpan;\n  final Style style;\n  final double textScaleFactor;\n  final RenderContext renderContext;\n  final AnchorKey? key;\n  final bool _selectable;\n  final TextSelectionControls? selectionControls;\n  final ScrollPhysics? scrollPhysics;\n\n  const StyledText({\n    required this.textSpan,\n    required this.style,\n    this.textScaleFactor = 1.0,\n    required this.renderContext,\n    this.key,\n    this.selectionControls,\n    this.scrollPhysics,\n  })  : _selectable = false,\n        super(key: key);\n\n  const StyledText.selectable({\n    required TextSpan this.textSpan,\n    required this.style,\n    this.textScaleFactor = 1.0,\n    required this.renderContext,\n    this.key,\n    this.selectionControls,\n    this.scrollPhysics,\n  })  : _selectable = true,\n        super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    if (_selectable) {\n      return SelectableText.rich(\n        \n        textSpan as TextSpan,\n        style: style.generateTextStyle(),\n        textAlign: style.textAlign,\n        textDirection: style.direction,\n        textScaleFactor: textScaleFactor,\n        maxLines: style.maxLines,\n        selectionControls: selectionControls,\n        scrollPhysics: scrollPhysics,\n      );\n    }\n    return SizedBox(\n      width: consumeExpandedBlock(style.display, renderContext),\n      child: Text.rich(\n        textSpan,\n        style: style.generateTextStyle(),\n        textAlign: style.textAlign,\n        textDirection: style.direction,\n        textScaleFactor: textScaleFactor,\n        maxLines: style.maxLines,\n        overflow: style.textOverflow,\n      ),\n    );\n  }\n\n  double? consumeExpandedBlock(Display? display, RenderContext context) {\n    if ((display == Display.BLOCK || display == Display.LIST_ITEM) && !renderContext.parser.shrinkWrap) {\n      return double.infinity;\n    }\n    return null;\n  }\n}"}, {"structure_type": "function", "name": "ListStyleType.fromWidget", "docstring": "", "module": "html", "file_path": "sunnah_shop_flutter/lib/core/external_packages/html/style.dart", "file_name": "style.dart", "line": 539, "line_from": 539, "line_to": 557, "snippet": "  factory ListStyleType.fromWidget(Widget widget) => ListStyleType(\"\", widget: widget, type: \"widget\");\n\n  static const LOWER_ALPHA = ListStyleType(\"LOWER_ALPHA\");\n  static const UPPER_ALPHA = ListStyleType(\"UPPER_ALPHA\");\n  static const LOWER_LATIN = ListStyleType(\"LOWER_LATIN\");\n  static const UPPER_LATIN = ListStyleType(\"UPPER_LATIN\");\n  static const CIRCLE = ListStyleType(\"CIRCLE\");\n  static const DISC = ListStyleType(\"DISC\");\n  static const DECIMAL = ListStyleType(\"DECIMAL\");\n  static const LOWER_ROMAN = ListStyleType(\"LOWER_ROMAN\");\n  static const UPPER_ROMAN = ListStyleType(\"UPPER_ROMAN\");\n  static const SQUARE = ListStyleType(\"SQUARE\");\n  static const NONE = ListStyleType(\"NONE\");\n}\n\nenum ListStylePosition {\n  OUTSIDE,\n  INSIDE,\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "html", "file_path": "sunnah_shop_flutter/lib/core/external_packages/html/flutter_html.dart", "file_name": "flutter_html.dart", "line": 160, "line_from": 160, "line_to": 328, "snippet": "  void initState() {\n    super.initState();\n    documentElement = widget.data != null ? HtmlParser.parseHTML(widget.data!) : widget.documentElement!;\n  }\n\n  @override\n  void didUpdateWidget(Html oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if ((widget.data != null && oldWidget.data != widget.data) || oldWidget.documentElement != widget.documentElement) {\n      documentElement = widget.data != null ? HtmlParser.parseHTML(widget.data!) : widget.documentElement!;\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox(\n      width: widget.shrinkWrap ? null : MediaQuery.of(context).size.width,\n      child: HtmlParser(\n        key: widget._anchorKey,\n        htmlData: documentElement,\n        onLinkTap: widget.onLinkTap,\n        onAnchorTap: widget.onAnchorTap,\n        onImageTap: widget.onImageTap,\n        onCssParseError: widget.onCssParseError,\n        onImageError: widget.onImageError,\n        shrinkWrap: widget.shrinkWrap,\n        selectable: false,\n        style: widget.style,\n        customRenders: {}\n          ..addAll(widget.customRenders)\n          ..addAll(defaultRenders),\n        tagsList: widget.tagsList.isEmpty ? Html.tags : widget.tagsList,\n      ),\n    );\n  }\n}\n\nclass SelectableHtml extends StatefulWidget {\n  /// The `SelectableHtml` widget takes HTML as input and displays a RichText\n  /// tree of the parsed HTML content (which is selectable)\n  ///\n  /// **Attributes**\n  /// **data** *required* takes in a String of HTML data (required only for `Html` constructor).\n  /// **documentElement** *required* takes in a Element of HTML data (required only for `Html.fromDom` and `Html.fromElement` constructor).\n  ///\n  /// **onLinkTap** This function is called whenever a link (`<a href>`)\n  /// is tapped.\n  ///\n  /// **onAnchorTap** This function is called whenever an anchor (#anchor-id)\n  /// is tapped.\n  ///\n  /// **tagsList** Tag names in this array will be the only tags rendered. By default, all tags that support selectable content are rendered.\n  ///\n  /// **style** Pass in the style information for the Html here.\n  /// See [its wiki page](https://github.com/Sub6Resources/flutter_html/wiki/Style) for more info.\n  ///\n  /// **PLEASE NOTE**\n  ///\n  /// There are a few caveats due to Flutter [#38474](https://github.com/flutter/flutter/issues/38474):\n  ///\n  /// 1. The list of tags that can be rendered is significantly reduced.\n  /// Key omissions include no support for images/video/audio, table, and ul/ol because they all require widgets and `WidgetSpan`s.\n  ///\n  /// 2. No support for `customRender`, `customImageRender`, `onImageError`, `onImageTap`, `onMathError`, and `navigationDelegateForIframe`.\n  ///\n  /// 3. Styling support is significantly reduced. Only text-related styling works\n  /// (e.g. bold or italic), while container related styling (e.g. borders or padding/margin)\n  /// do not work because we can't use the `ContainerSpan` class (it needs an enclosing `WidgetSpan`).\n\n  SelectableHtml({\n    Key? key,\n    GlobalKey? anchorKey,\n    required this.data,\n    this.onLinkTap,\n    this.onAnchorTap,\n    this.onCssParseError,\n    this.shrinkWrap = false,\n    this.style = const {},\n    this.customRenders = const {},\n    this.tagsList = const [],\n    this.selectionControls,\n    this.scrollPhysics,\n  })  : documentElement = null,\n        assert(data != null),\n        _anchorKey = anchorKey ?? GlobalKey(),\n        super(key: key);\n\n  SelectableHtml.fromDom({\n    Key? key,\n    GlobalKey? anchorKey,\n    @required dom.Document? document,\n    this.onLinkTap,\n    this.onAnchorTap,\n    this.onCssParseError,\n    this.shrinkWrap = false,\n    this.style = const {},\n    this.customRenders = const {},\n    this.tagsList = const [],\n    this.selectionControls,\n    this.scrollPhysics,\n  })  : data = null,\n        assert(document != null),\n        documentElement = document!.documentElement,\n        _anchorKey = anchorKey ?? GlobalKey(),\n        super(key: key);\n\n  SelectableHtml.fromElement({\n    Key? key,\n    GlobalKey? anchorKey,\n    @required this.documentElement,\n    this.onLinkTap,\n    this.onAnchorTap,\n    this.onCssParseError,\n    this.shrinkWrap = false,\n    this.style = const {},\n    this.customRenders = const {},\n    this.tagsList = const [],\n    this.selectionControls,\n    this.scrollPhysics,\n  })  : data = null,\n        assert(documentElement != null),\n        _anchorKey = anchorKey ?? GlobalKey(),\n        super(key: key);\n\n  /// A unique key for this Html widget to ensure uniqueness of anchors\n  final GlobalKey _anchorKey;\n\n  /// The HTML data passed to the widget as a String\n  final String? data;\n\n  /// The HTML data passed to the widget as a pre-processed [dom.Element]\n  final dom.Element? documentElement;\n\n  /// A function that defines what to do when a link is tapped\n  final OnTap? onLinkTap;\n\n  /// A function that defines what to do when an anchor link is tapped. When this value is set,\n  /// the default anchor behaviour is overwritten.\n  final OnTap? onAnchorTap;\n\n  /// A function that defines what to do when CSS fails to parse\n  final OnCssParseError? onCssParseError;\n\n  /// A parameter that should be set when the HTML widget is expected to be\n  /// flexible\n  final bool shrinkWrap;\n\n  /// A list of HTML tags that are the only tags that are rendered. By default, this list is empty and all supported HTML tags are rendered.\n  final List<String> tagsList;\n\n  /// An API that allows you to override the default style for any HTML element\n  final Map<String, Style> style;\n\n  /// Custom Selection controls allows you to override default toolbar and build custom toolbar\n  /// options\n  final TextSelectionControls? selectionControls;\n\n  /// Allows you to override the default scrollPhysics for [SelectableText.rich]\n  final ScrollPhysics? scrollPhysics;\n\n  /// Either return a custom widget for specific node types or return null to\n  /// fallback to the default rendering.\n  final Map<CustomRenderMatcher, SelectableCustomRender> customRenders;\n\n  static List<String> get tags => List<String>.from(SELECTABLE_ELEMENTS);\n\n  @override\n  State<StatefulWidget> createState() => _SelectableHtmlState();\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/html/src/utils.dart", "file_name": "utils.dart", "line": 32, "line_from": 32, "line_to": 58, "snippet": "  final void Function()? onTap;\n\n  const MultipleTapGestureDetector({\n    Key? key,\n    required Widget child,\n    required this.onTap,\n  }) : super(key: key, child: child);\n\n  static MultipleTapGestureDetector? of(BuildContext context) {\n    return context.dependOnInheritedWidgetOfExactType<MultipleTapGestureDetector>();\n  }\n\n  @override\n  bool updateShouldNotify(MultipleTapGestureDetector oldWidget) => false;\n}\n\nclass CustomBorderSide {\n  CustomBorderSide({\n    this.color = const Color(0xFF000000),\n    this.width = 1.0,\n    this.style = BorderStyle.none,\n  }) : assert(width >= 0.0);\n\n  Color? color;\n  double width;\n  BorderStyle style;\n}"}, {"structure_type": "function", "name": "toWidget", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/html/src/replaced_element.dart", "file_name": "replaced_element.dart", "line": 77, "line_from": 77, "line_to": 166, "snippet": "  Widget toWidget(RenderContext context) {\n    StyledElement? node;\n    List<Widget> widgets = <Widget>[];\n    final rubySize = context.parser.style['rt']?.fontSize?.size ?? max(9.0, context.style.fontSize!.size! / 2);\n    final rubyYPos = rubySize + rubySize / 2;\n    List<StyledElement> children = [];\n    context.tree.children.forEachIndexed((index, element) {\n      if (!((element is TextContentElement)\n          && (element.text ?? \"\").trim().isEmpty\n          && index > 0\n          && index + 1 < context.tree.children.length\n          && context.tree.children[index - 1] is! TextContentElement\n          && context.tree.children[index + 1] is! TextContentElement)) {\n        children.add(element);\n      }\n    });\n    for (var c in children) {\n      if (c.name == \"rt\" && node != null) {\n        final widget = Stack(\n          alignment: Alignment.center,\n          children: <Widget>[\n            Container(\n                alignment: Alignment.bottomCenter,\n                child: Center(\n                    child: Transform(\n                        transform:\n                        Matrix4.translationValues(0, -(rubyYPos), 0),\n                        child: ContainerSpan(\n                          newContext: RenderContext(\n                            buildContext: context.buildContext,\n                            parser: context.parser,\n                            style: c.style,\n                            tree: c,\n                          ),\n                          style: c.style,\n                          child: Text(c.element!.innerHtml,\n                              style: c.style\n                                  .generateTextStyle()\n                                  .copyWith(fontSize: rubySize)),\n                        )))),\n            ContainerSpan(\n                newContext: context,\n                style: context.style,\n                children: node is TextContentElement ? null : [context.parser.parseTree(context, node)],\n                child: node is TextContentElement ? Text((node).text?.trim() ?? \"\",\n                    style: context.style.generateTextStyle()) : null),\n          ],\n        );\n        widgets.add(widget);\n      } else {\n        node = c;\n      }\n    }\n    return Padding(\n      padding: EdgeInsets.only(top: rubySize),\n      child: Wrap(\n        key: AnchorKey.of(context.parser.key, this),\n        runSpacing: rubySize,\n        children: widgets.map((e) => Row(\n          crossAxisAlignment: CrossAxisAlignment.end,\n          textBaseline: TextBaseline.alphabetic,\n          mainAxisSize: MainAxisSize.min,\n          children: [e],\n        )).toList(),\n      ),\n    );\n  }\n}\n\nReplacedElement parseReplacedElement(\n  dom.Element element,\n  List<StyledElement> children,\n) {\n  switch (element.localName) {\n    case \"br\":\n      return TextContentElement(\n        text: \"\\n\",\n        style: Style(whiteSpace: WhiteSpace.PRE),\n        element: element,\n        node: element\n      );\n    case \"ruby\":\n      return RubyElement(\n        element: element,\n        children: children,\n      );\n    default:\n      return EmptyContentElement(name: element.localName == null ? \"[[No Name]]\" : element.localName!);\n  }\n}"}, {"structure_type": "function", "name": "toWidget", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/html/src/layout_element.dart", "file_name": "layout_element.dart", "line": 29, "line_from": 29, "line_to": 47, "snippet": "  Widget toWidget(RenderContext context) {\n    // Not rendered; TableLayoutElement will instead consume its children\n    return Container(child: const Text(\"TABLE SECTION\"));\n  }\n}\n\nclass TableRowLayoutElement extends LayoutElement {\n  TableRowLayoutElement({\n    required String name,\n    required List<StyledElement> children,\n    required dom.Element node,\n  }) : super(name: name, children: children, node: node);\n\n  @override\n  Widget toWidget(RenderContext context) {\n    // Not rendered; TableLayoutElement will instead consume its children\n    return Container(child: const Text(\"TABLE ROW\"));\n  }\n}"}, {"structure_type": "function", "name": "toWidget", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/html/src/layout_element.dart", "file_name": "layout_element.dart", "line": 134, "line_from": 134, "line_to": 181, "snippet": "  Widget toWidget(RenderContext context) {\n    List<InlineSpan>? childrenList = children.map((tree) => context.parser.parseTree(context, tree)).toList();\n    List<InlineSpan> toRemove = [];\n    for (InlineSpan child in childrenList) {\n      if (child is TextSpan && child.text != null && child.text!.trim().isEmpty) {\n        toRemove.add(child);\n      }\n    }\n    for (InlineSpan child in toRemove) {\n      childrenList.remove(child);\n    }\n    InlineSpan? firstChild = childrenList.isNotEmpty == true ? childrenList.first : null;\n    return ExpansionTile(\n        key: AnchorKey.of(context.parser.key, this),\n        expandedAlignment: Alignment.centerLeft,\n        title: elementList.isNotEmpty == true && elementList.first.localName == \"summary\" ? StyledText(\n          textSpan: TextSpan(\n            style: style.generateTextStyle(),\n            children: firstChild == null ? [] : [firstChild],\n          ),\n          style: style,\n          renderContext: context,\n        ) : const Text(\"Details\"),\n        children: [\n          StyledText(\n            textSpan: TextSpan(\n              style: style.generateTextStyle(),\n              children: getChildren(childrenList, context, elementList.isNotEmpty == true && elementList.first.localName == \"summary\" ? firstChild : null)\n            ),\n            style: style,\n            renderContext: context,\n          ),\n        ]\n    );\n  }\n\n  List<InlineSpan> getChildren(List<InlineSpan> children, RenderContext context, InlineSpan? firstChild) {\n    if (firstChild != null) children.removeAt(0);\n    return children;\n  }\n}\n\nclass EmptyLayoutElement extends LayoutElement {\n  EmptyLayoutElement({required String name}) : super(name: name, children: []);\n\n  @override\n  Widget? toWidget(context) => null;\n}"}, {"structure_type": "function", "name": "[expandableContent]", "docstring": "", "module": "expandable_bottom_sheet", "file_path": "sunnah_shop_flutter/lib/core/external_packages/expandable_bottom_sheet/expandable_bottom_sheet.dart", "file_name": "expandable_bottom_sheet.dart", "line": 44, "line_from": 44, "line_to": 439, "snippet": "  /// [persistentHeader] is a Widget which is on top of the [expandableContent]\n  /// and will never be hidden. It is made for a widget which indicates the\n  /// user he can expand the content by dragging.\n  final Widget? persistentHeader;\n\n  /// [persistentFooter] is a widget which is always shown at the bottom. The [expandableContent]\n  /// is if it is expanded on top of it so you don't need margin to see all of\n  /// your content. You can use it for example for navigation or a menu.\n  final Widget? persistentFooter;\n\n  /// [persistentContentHeight] is the height of the content which will never\n  /// been contracted. It only relates to [expandableContent]. [persistentHeader]\n  /// and [persistentFooter] will not be affected by this.\n  final double persistentContentHeight;\n\n  /// [animationDurationExtend] is the duration for the animation if you stop\n  /// dragging with high speed.\n  final Duration animationDurationExtend;\n\n  /// [animationDurationContract] is the duration for the animation to bottom\n  /// if you stop dragging with high speed. If it is `null` [animationDurationExtend] will be used.\n  final Duration animationDurationContract;\n\n  /// [animationCurveExpand] is the curve of the animation for expanding\n  /// the [expandableContent] if the drag ended with high speed.\n  final Curve animationCurveExpand;\n\n  /// [animationCurveContract] is the curve of the animation for contracting\n  /// the [expandableContent] if the drag ended with high speed.\n  final Curve animationCurveContract;\n\n  /// [onIsExtendedCallback] will be executed if the extend reaches its maximum.\n  final Function()? onIsExtendedCallback;\n\n  /// [onIsContractedCallback] will be executed if the extend reaches its minimum.\n  final Function()? onIsContractedCallback;\n\n  /// [enableToggle] will enable tap to toggle option on header.\n  final bool enableToggle;\n\n  /// [isDraggable] will make the [ExpandableBottomSheet] draggable by the user or not.\n  final bool isDraggable;\n  bool isExpanded;\n\n  /// Creates the [ExpandableBottomSheet].\n  ///\n  /// [persistentContentHeight] has to be greater 0.\n  ExpandableBottomSheet({\n    Key? key,\n    this.expandableContent,\n    this.background,\n    this.persistentHeader,\n    this.persistentFooter,\n    this.persistentContentHeight = 0.0,\n    this.animationCurveExpand = Curves.ease,\n    this.animationCurveContract = Curves.ease,\n    this.animationDurationExtend = const Duration(milliseconds: 250),\n    this.animationDurationContract = const Duration(milliseconds: 250),\n    this.onIsExtendedCallback,\n    this.onIsContractedCallback,\n    this.enableToggle = false,\n    this.isDraggable = true,\n    this.isExpanded = false,\n  })  : assert(persistentContentHeight >= 0),\n        super(key: key);\n\n  ExpandableBottomSheetState? expandableBottomSheetState;\n\n  // // ignore: no_logic_in_create_state\n  // ExpandableBottomSheetState createState() {\n  //   expandableBottomSheetState = ExpandableBottomSheetState();\n  //   return expandableBottomSheetState;\n  // }\n  @override\n  ExpandableBottomSheetState createState() => ExpandableBottomSheetState();\n}\n\nclass ExpandableBottomSheetState extends State<ExpandableBottomSheet>\n    with TickerProviderStateMixin {\n  final GlobalKey _contentKey = GlobalKey(debugLabel: 'contentKey');\n  final GlobalKey _headerKey = GlobalKey(debugLabel: 'headerKey');\n  final GlobalKey _footerKey = GlobalKey(debugLabel: 'footerKey');\n\n  late AnimationController _controller;\n\n  double _draggableHeight = 0;\n  double? _positionOffset;\n  double _startOffsetAtDragDown = 0;\n  double? _startPositionAtDragDown = 0;\n\n  double _minOffset = 0;\n  double _maxOffset = 0;\n  double _animationMinOffset = 0;\n\n  AnimationStatus _oldStatus = AnimationStatus.dismissed;\n\n  bool _useDrag = true;\n  bool _callCallbacks = false;\n\n  /// Expands the content of the widget.\n  void expand() {\n    _afterUpdateWidgetBuild(false);\n    _callCallbacks = true;\n    widget.isExpanded = true;\n    _animateToTop();\n  }\n\n  /// Contracts the content of the widget.\n  void contract() {\n    _afterUpdateWidgetBuild(false);\n    _callCallbacks = true;\n    _animateToBottom();\n  }\n\n  /// The status of the expansion.\n  ExpansionStatus get expansionStatus {\n    if (_positionOffset == null) return ExpansionStatus.contracted;\n    if (_positionOffset == _maxOffset) return ExpansionStatus.contracted;\n    if (_positionOffset == _minOffset) return ExpansionStatus.expanded;\n    return ExpansionStatus.middle;\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      vsync: this,\n      lowerBound: 0.0,\n      upperBound: 1.0,\n    );\n    _controller.addStatusListener(_handleAnimationStatusUpdate);\n    WidgetsBinding.instance\n        .addPostFrameCallback((_) => _afterUpdateWidgetBuild(true));\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    WidgetsBinding.instance\n        .addPostFrameCallback((_) => _afterUpdateWidgetBuild(false));\n    return Column(\n      mainAxisSize: MainAxisSize.max,\n      children: <Widget>[\n        Expanded(\n          child: Stack(\n            clipBehavior: Clip.hardEdge,\n            children: <Widget>[\n              Align(\n                alignment: Alignment.topLeft,\n                child: widget.background,\n              ),\n              AnimatedBuilder(\n                animation: _controller,\n                builder: (_, Widget? child) {\n                  if (_controller.isAnimating) {\n                    _positionOffset = _animationMinOffset +\n                        _controller.value * _draggableHeight;\n                  }\n                  return Positioned(\n                    top: _positionOffset,\n                    right: 0.0,\n                    left: 0.0,\n                    child: child!,\n                  );\n                },\n                child: GestureDetector(\n                  onTap: _toggle,\n                  onVerticalDragDown: widget.isDraggable ? _dragDown : (_) {},\n                  onVerticalDragUpdate:\n                      widget.isDraggable ? _dragUpdate : (_) {},\n                  onVerticalDragEnd: widget.isDraggable ? _dragEnd : (_) {},\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: <Widget>[\n                      Container(\n                          key: _headerKey,\n                          child: widget.persistentHeader ?? Container()),\n                      Container(\n                        key: _contentKey,\n                        child: widget.expandableContent,\n                      ),\n                    ],\n                  ),\n                ),\n              )\n            ],\n          ),\n        ),\n        Container(\n            key: _footerKey, child: widget.persistentFooter ?? Container()),\n      ],\n    );\n  }\n\n  void _handleAnimationStatusUpdate(AnimationStatus status) {\n    if (status == AnimationStatus.completed) {\n      if (_oldStatus == AnimationStatus.forward) {\n        setState(() {\n          _draggableHeight = _maxOffset - _minOffset;\n          _positionOffset = _minOffset;\n        });\n        if (widget.onIsExtendedCallback != null && _callCallbacks) {\n          widget.onIsExtendedCallback!();\n        }\n      }\n      if (_oldStatus == AnimationStatus.reverse) {\n        setState(() {\n          _draggableHeight = _maxOffset - _minOffset;\n          _positionOffset = _maxOffset;\n        });\n        if (widget.onIsContractedCallback != null && _callCallbacks) {\n          widget.onIsContractedCallback!();\n        }\n      }\n    }\n  }\n\n  void _afterUpdateWidgetBuild(bool isFirstBuild) {\n    double headerHeight = _headerKey.currentContext!.size!.height;\n    double footerHeight = _footerKey.currentContext!.size!.height;\n    double contentHeight = _contentKey.currentContext!.size!.height;\n\n    double checkedPersistentContentHeight =\n        (widget.persistentContentHeight < contentHeight)\n            ? widget.persistentContentHeight\n            : contentHeight;\n\n    _minOffset =\n        context.size!.height - headerHeight - contentHeight - footerHeight;\n    _maxOffset = context.size!.height -\n        headerHeight -\n        footerHeight -\n        checkedPersistentContentHeight;\n\n    if (!isFirstBuild) {\n      _positionOutOfBounds();\n    } else {\n      setState(() {\n        _positionOffset = _maxOffset;\n        _draggableHeight = _maxOffset - _minOffset;\n      });\n    }\n  }\n\n  void _positionOutOfBounds() {\n    if (_positionOffset! < _minOffset) {\n      //the extend is larger than contentHeight\n      _callCallbacks = false;\n      _animateToMin();\n    } else {\n      if (_positionOffset! > _maxOffset) {\n        //the extend is smaller than persistentContentHeight\n        _callCallbacks = false;\n        _animateToMax();\n      } else {\n        _draggableHeight = _maxOffset - _minOffset;\n      }\n    }\n  }\n\n  void _animateOnIsAnimating() {\n    if (_controller.isAnimating) {\n      _controller.stop();\n    }\n  }\n\n  void _toggle() {\n    if (widget.enableToggle) {\n      if (expansionStatus == ExpansionStatus.expanded) {\n        _callCallbacks = true;\n        _animateToBottom();\n      }\n      if (expansionStatus == ExpansionStatus.contracted) {\n        _callCallbacks = true;\n        _animateToTop();\n      }\n    }\n  }\n\n  void _dragDown(DragDownDetails details) {\n    if (_controller.isAnimating) {\n      _useDrag = false;\n    } else {\n      _useDrag = true;\n      _startOffsetAtDragDown = details.localPosition.dy;\n      _startPositionAtDragDown = _positionOffset;\n    }\n  }\n\n  void _dragUpdate(DragUpdateDetails details) {\n    if (!_useDrag) return;\n    double offset = details.localPosition.dy;\n    double newOffset =\n        _startPositionAtDragDown! + offset - _startOffsetAtDragDown;\n    if (_minOffset <= newOffset && _maxOffset >= newOffset) {\n      setState(() {\n        _positionOffset = newOffset;\n      });\n    } else {\n      if (_minOffset > newOffset) {\n        setState(() {\n          _positionOffset = _minOffset;\n        });\n      }\n      if (_maxOffset < newOffset) {\n        setState(() {\n          _positionOffset = _maxOffset;\n        });\n      }\n    }\n  }\n\n  void _dragEnd(DragEndDetails details) {\n    if (_startPositionAtDragDown == _positionOffset || !_useDrag) return;\n    if (details.primaryVelocity! < -250) {\n      //drag up ended with high speed\n      _callCallbacks = true;\n      _animateToTop();\n    } else {\n      if (details.primaryVelocity! > 250) {\n        //drag down ended with high speed\n        _callCallbacks = true;\n        _animateToBottom();\n      } else {\n        if (_positionOffset == _maxOffset &&\n            widget.onIsContractedCallback != null) {\n          widget.onIsContractedCallback!();\n        }\n        if (_positionOffset == _minOffset &&\n            widget.onIsExtendedCallback != null) {\n          widget.onIsExtendedCallback!();\n        }\n      }\n    }\n  }\n\n  void _animateToTop() {\n    booksC.isBottomSheetExpanded.value = true;\n    _animateOnIsAnimating();\n    _controller.value = (_positionOffset! - _minOffset) / _draggableHeight;\n    _animationMinOffset = _minOffset;\n    _oldStatus = AnimationStatus.forward;\n    _controller.animateTo(\n      0.0,\n      duration: widget.animationDurationExtend,\n      curve: widget.animationCurveExpand,\n    );\n  }\n\n  void _animateToBottom() {\n    booksC.isBottomSheetExpanded.value = false;\n    _animateOnIsAnimating();\n\n    _controller.value = (_positionOffset! - _minOffset) / _draggableHeight;\n    _animationMinOffset = _minOffset;\n    _oldStatus = AnimationStatus.reverse;\n    _controller.animateTo(\n      1.0,\n      duration: widget.animationDurationContract,\n      curve: widget.animationCurveContract,\n    );\n  }\n\n  void _animateToMax() {\n    _animateOnIsAnimating();\n\n    _controller.value = 1.0;\n    _draggableHeight = _positionOffset! - _maxOffset;\n    _animationMinOffset = _maxOffset;\n    _oldStatus = AnimationStatus.reverse;\n    _controller.animateTo(\n      0.0,\n      duration: widget.animationDurationExtend,\n      curve: widget.animationCurveExpand,\n    );\n  }\n\n  void _animateToMin() {\n    _animateOnIsAnimating();\n\n    _controller.value = 1.0;\n    _draggableHeight = _positionOffset! - _minOffset;\n    _animationMinOffset = _minOffset;\n    _oldStatus = AnimationStatus.forward;\n    _controller.animateTo(\n      0.0,\n      duration: widget.animationDurationContract,\n      curve: widget.animationCurveContract,\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}"}, {"structure_type": "function", "name": "[]=", "docstring": "Updates the [Selection] with the provided key.", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/selections.dart", "file_name": "selections.dart", "line": 36, "line_from": 36, "line_to": 150, "snippet": "  void operator []=(int key, Selection selection) {\n    _selectionsMap[key] = selection;\n  }\n\n  /// Returns `true` if text is selected in any selections.\n  bool get isTextSelected {\n    // First make sure all selections are refreshed from cachedParagraphs?\n    //\n    // The call to _refreshSelectionsAsNeeded is commented out for now because\n    // the only way cachedParagraphs can affect the outcome is if the selection\n    // is invalidated because its range of selected text no longer exists in\n    // cachedParagraphs -- and that should be handled in other code.\n    //\n    // _refreshSelectionsAsNeeded();\n\n    return _selectionsMap.values.firstWhereOrNull((e) => e.isTextSelected) !=\n        null;\n  }\n\n  /// If text is selected in any selections, deselects it. Returns `true` if\n  /// any selections were deselected.\n  bool deselectAll() {\n    var didDeselectAny = false;\n    for (final entry in _selectionsMap.entries) {\n      if (entry.value.isTextSelected) {\n        _selectionsMap[entry.key] = entry.value.cleared();\n        didDeselectAny = true;\n      }\n    }\n    return didDeselectAny;\n  }\n\n  /// Info related to selecting text via double-tap or dragging selection\n  /// handles -- only used with the [main] selection.\n  final dragInfo = SelectionDragInfo();\n\n  /// The cached paragraphs.\n  ///\n  /// Note, the same instance of [cachedParagraphs] is shared between\n  /// `_SelectableState._selections` and `SelectableController._selections`,\n  /// so that they are always in sync and up to date.\n  Paragraphs get cachedParagraphs => _cachedParagraphs;\n  var _cachedParagraphs = Paragraphs();\n\n  /// Returns an iterable of the non-empty selections, if any.\n  Iterable<Selection> get nonEmptySelections {\n    // First make sure all selections are refreshed from cachedParagraphs.\n    _refreshSelectionsAsNeeded();\n\n    return _selectionsMap.values.where((e) => e.isTextSelected);\n  }\n\n  /// Updates with the [newSelections], returning `true` if any selections\n  /// changed.\n  bool updateWithSelections(Selections newSelections) {\n    // The same instance of [cachedParagraphs] is shared between\n    // `_SelectableState._selections` and `SelectableController._selections`,\n    // so that they are always in sync and up to date.\n    _cachedParagraphs = newSelections.cachedParagraphs;\n\n    final changed = !areEqualMaps(newSelections._selectionsMap, _selectionsMap);\n    if (changed) {\n      _selectionsMap.clear();\n      for (final entry in newSelections._selectionsMap.entries) {\n        _selectionsMap[entry.key] = entry.value;\n      }\n    }\n\n    return changed;\n  }\n\n  //\n  // PRIVATE\n  //\n\n  final _selectionsMap = <int, Selection>{};\n\n  /// Refreshes all selections that need refreshing from cachedParagraphs.\n  void _refreshSelectionsAsNeeded() {\n    _selectionsMap.keys.forEach(_selectionWithKey);\n  }\n\n  /// Returns the selection with [key], after first refreshing it from\n  /// cachedParagraphs if needed.\n  Selection? _selectionWithKey(int key, {bool useDragInfo = true}) {\n    var selection = _selectionsMap[key];\n    if (selection != null) {\n      final isSelectingWordOrDraggingHandle =\n          useDragInfo && key == 0 && dragInfo.isSelectingWordOrDraggingHandle;\n      if (isSelectingWordOrDraggingHandle ||\n          (selection.isTextSelected &&\n              selection.version != cachedParagraphs.version)) {\n        // dmPrint('Selectable: refreshing selection $key with layout '\n        //     '${cachedParagraphs.version}, selecting word or dragging '\n        //     'handle: $isSelectingWordOrDraggingHandle');\n        var updatedSelection = selection.updatedWith(\n          cachedParagraphs,\n          // Only the [main] selection (i.e. key == 0) uses [dragInfo].\n          useDragInfo && key == 0 ? dragInfo : null,\n        );\n\n        // If the selection was hidden and was updated from having no selected\n        // text to having selected text, unhide it.\n        if (selection.isHidden &&\n            !selection.isTextSelected &&\n            updatedSelection.isTextSelected) {\n          updatedSelection = updatedSelection.copyWith(isHidden: false);\n        }\n\n        _selectionsMap[key] = selection = updatedSelection;\n      }\n    }\n    return selection;\n  }\n}"}, {"structure_type": "function", "name": "_incVersion", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/selections.dart", "file_name": "selections.dart", "line": 166, "line_from": 166, "line_to": 289, "snippet": "  void _incVersion() => _version = _version.incWithJsSafeWrap();\n\n  /// Updates the paragraph list with all [SelectionParagraph]s contained in\n  /// the [renderBox].\n  void updateCachedParagraphsWithRenderBox(RenderBox renderBox) {\n    if (!renderBox.hasSize) {\n      assert(false);\n      return; //------------------------------------------------------------>\n    }\n\n    // dmPrint('Selectable: updating cached paragraphs with renderBox size: '\n    //     '${renderBox.size}');\n\n    var paragraphsHaveChanged = _paragraphList.isEmpty;\n    final newParagraphs = <SelectionParagraph>[];\n    var charIndex = 0;\n\n    renderBox._visitChildrenAndTextRenderers((ro) {\n      final rt = ro.asRenderText();\n      if (rt != null) {\n        final paragraphIndex = newParagraphs.length;\n        final paragraph = SelectionParagraph.from(rt,\n            ancestor: renderBox,\n            paragraphIndex: paragraphIndex,\n            firstCharIndex: charIndex);\n        if (paragraph != null) {\n          // If we're not expecting the paragraph to have changed,\n          // check to see if it has...\n          if (!paragraphsHaveChanged) {\n            final cachedParagraph = paragraphIndex < _paragraphList.length\n                ? _paragraphList[paragraphIndex]\n                : null;\n            if (cachedParagraph == null) {\n              paragraphsHaveChanged = true;\n              // dmPrint('Selections: paragraph $paragraphIndex was added.');\n            } else if (cachedParagraph.firstCharIndex != charIndex) {\n              paragraphsHaveChanged = true;\n              // dmPrint('Selections: paragraph $paragraphIndex\u2019s first '\n              //     'character index changed from '\n              //     '${cachedParagraph.firstCharIndex} to $charIndex');\n            } else if (cachedParagraph.text != paragraph.text) {\n              paragraphsHaveChanged = true;\n              // dmPrint('Selections: paragraph $paragraphIndex\u2019s text '\n              //     'changed from \"${cachedParagraph.text}\" to '\n              //     '\"${paragraph.text}\"');\n            } else if (cachedParagraph.rect != paragraph.rect) {\n              paragraphsHaveChanged = true;\n              // dmPrint('Selections: paragraph $paragraphIndex\u2019s rect '\n              //     'changed from \"${cachedParagraph.rect}\" to '\n              //     '\"${paragraph.rect}\"');\n            }\n          }\n\n          // dmPrint('Adding paragraph with rect: $rect, range: $trimmedSel,\n          // text: \"$text\"\\n');\n          newParagraphs.add(paragraph);\n          charIndex += paragraph.text.length;\n        }\n      }\n\n      return true; // Continue walking the render tree.\n    });\n\n    if (_paragraphList.isEmpty && newParagraphs.isEmpty) {\n      paragraphsHaveChanged = false;\n    }\n\n    // Always replace _paragraphList with newParagraphs because the\n    // underlying render objects may have changed.\n    _paragraphList = newParagraphs;\n\n    if (paragraphsHaveChanged) {\n      _incVersion();\n      // dmPrint('Selections updated with ${newParagraphs.length} '\n      //     'paragraphs.');\n    } else {\n      // dmPrint('Selections checked for paragraph updates, found none.');\n    }\n  }\n}\n\nextension on RenderObject {\n  ///\n  /// Walks this [RenderObject] tree in a depth-first pre-order traversal,\n  /// calling [visitor] for each child.\n  ///\n  /// If [visitor] returns true, the walk continues, otherwise it is canceled.\n  ///\n  bool _visitChildrenAndTextRenderers(CancelableObjectVisitor visitor) {\n    var canceled = false;\n\n    late void Function(Object object) visitChildrenRecursively;\n\n    void recursiveRenderObjectVisitor(RenderObject object) {\n      // This is called for every child of the render object, even after the\n      // [visitor] function may have returned `false` for one of the children,\n      // so check if canceled before handling.\n      if (!canceled) {\n        canceled = !visitor(object);\n        if (!canceled) visitChildrenRecursively(object);\n      }\n    }\n\n    bool recursiveObjectVisitor(Object object) {\n      canceled = !visitor(object);\n      if (!canceled) visitChildrenRecursively(object);\n      return !canceled;\n    }\n\n    visitChildrenRecursively = (object) {\n      // Ignore RenderIgnoreSelectable objects if `ignoring` is true.\n      if (object is RenderIgnoreSelectable && object.ignoring) return;\n\n      if (object is VisitChildrenOfAnyTypeMixin) {\n        canceled = !object.visitChildrenOfAnyType(recursiveObjectVisitor);\n      } else if (object is RenderObject) {\n        object.visitChildren(recursiveRenderObjectVisitor);\n      }\n    };\n\n    visitChildrenRecursively(this);\n    return !canceled;\n  }\n}"}, {"structure_type": "function", "name": "addListener", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/selection_painter.dart", "file_name": "selection_painter.dart", "line": 57, "line_from": 57, "line_to": 132, "snippet": "  void addListener(VoidCallback listener) => _repaint?.addListener(listener);\n\n  /// Remove a previously registered closure from the list of closures that the\n  /// object notifies when it is time to repaint.\n  ///\n  /// The [SelectionPainter] implementation merely forwards to the same method\n  /// on the [Listenable] provided to the constructor in the `repaint` argument,\n  /// if it was not null.\n  @override\n  void removeListener(VoidCallback listener) =>\n      _repaint?.removeListener(listener);\n\n  /// Called whenever the object needs to paint. The [Canvas] has its coordinate\n  /// space configured such that the origin is at the top left of the box. The\n  /// area of the box is the size of the [size] argument.\n  ///\n  /// Paint operations should remain inside the given area. Graphical\n  /// operations outside the bounds may be silently ignored, clipped, or not\n  /// clipped. It may sometimes be difficult to guarantee that a certain\n  /// operation is inside the bounds (e.g., drawing a rectangle whose size is\n  /// determined by user inputs). In that case, consider calling\n  /// [Canvas.clipRect] at the beginning of [paint] so everything that follows\n  /// will be guaranteed to only draw within the clipped area.\n  ///\n  /// Implementations should be wary of correctly pairing any calls to\n  /// [Canvas.save]/[Canvas.saveLayer] and [Canvas.restore], otherwise all\n  /// subsequent painting on this canvas may be affected, with potentially\n  /// hilarious but confusing results.\n  void paint(Canvas canvas, Size size, Selection selection);\n\n  /// Called whenever a new instance of the custom painter delegate class is\n  /// provided to the [RenderSelectable] object, or any time that a new\n  /// [Selectable] object is created with a new instance of the custom painter\n  /// delegate class (which amounts to the same thing, because the latter is\n  /// implemented in terms of the former).\n  ///\n  /// If the new instance represents different information than the old\n  /// instance, then the method should return `true`, otherwise it should return\n  /// `false`.\n  ///\n  /// If the method returns `false`, then the [paint] call might be optimized\n  /// away.\n  ///\n  /// It's possible that the [paint] method will get called even if\n  /// [shouldRepaint] returns `false` (e.g. if an ancestor or descendant needed\n  /// to be repainted). It's also possible that the [paint] method will get\n  /// called without [shouldRepaint] being called at all (e.g. if the box\n  /// changes size).\n  ///\n  /// If a custom delegate has a particularly expensive paint function such that\n  /// repaints should be avoided as much as possible, a [RepaintBoundary] or\n  /// [RenderRepaintBoundary] (or other render object with\n  /// [RenderObject.isRepaintBoundary] set to true) might be helpful.\n  ///\n  /// The `oldDelegate` argument will never be null.\n  bool shouldRepaint(covariant SelectionPainter oldDelegate);\n\n  /// Called whenever a hit test is being performed on an object that is using\n  /// this custom paint delegate.\n  ///\n  /// The [position] is relative to the same coordinate space as the last\n  /// [paint] call.\n  ///\n  /// The default behavior is to consider all points to be hits for\n  /// background painters, and no points to be hits for foreground painters.\n  ///\n  /// Return `true` if the [position] corresponds to a point on the drawn image\n  /// that should be considered a \"hit\", `false` if it corresponds to a point\n  /// that should be considered outside the painted image, and null to use the\n  /// default behavior.\n  bool? hitTest(Offset position) => null;\n\n  @override\n  String toString() =>\n      '${describeIdentity(this)}(${_repaint?.toString() ?? ''})';\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/selection_painter.dart", "file_name": "selection_painter.dart", "line": 147, "line_from": 147, "line_to": 238, "snippet": "  void paint(Canvas canvas, Size size, Selection selection) {\n    final rects = selection.rects;\n\n    // dmPrint('SelectionPainter painting ${rects?.length ?? 0} rects.');\n\n    if (rects != null && rects.isNotEmpty) {\n      // final gradient = ui.Gradient.linear(\n      //   const Offset(87.2623 + 37.9092, 28.8384 + 123.4389),\n      //   const Offset(42.9205 + 37.9092, 35.0952 + 123.4389),\n      //   <Color>[\n      //     const Color(0x001A237E),\n      //     const Color(0x661A237E),\n      //   ],\n      // );\n\n      final opacity = opacityAnimation == null\n          ? 1.0\n          : opacityAnimation!.value.clamp(0.0, 1.0);\n      final paintColor = Color.lerp(null, color, opacity);\n      final paint = Paint()..color = paintColor ?? color;\n      // ..shader = gradient;\n\n      // dmPrint('DefaultSelectionPainter repainting with opacity $opacity '\n      //     'from animation value ${opacity.value}');\n\n      for (final rect in rects) {\n        canvas.drawRect(rect, paint);\n      }\n\n      /*\n      const radius = Radius.circular(8);\n      if (rects.length == 1) {\n        canvas.drawRRect(RRect.fromRectAndRadius(rects.first, radius), paint);\n      } else if (rects.length == 2) {\n        final r1 = rects.first;\n        final r2 = rects.last;\n\n        // If the rects are near each other.\n        if (r1.isNear(r2)) {\n          \n        }\n      } else {\n      for (final rect in rects) {\n        canvas.drawRRect(RRect.fromRectAndRadius(rect, radius), paint)\n      }\n      }\n      */\n\n      /*\n      final topLeft = rects.first.topLeft;\n      final path = Path()..moveToPt(topLeft);\n\n      var pt = topLeft;\n      var nextPt = rects.first.topRight;\n\n      for (final rect in rects) {\n        nextPt = rect.topRight;\n        if (pt != nextPt) {\n          path.lineTo(rect.right, rect.top);\n        }\n      }\n\n      final bottomRight = rects.last.bottomRight;\n      path.lineToPt(bottomRight);\n\n      for (final rect in rects.reversed) {\n        path.lineTo(rect.left, rect.bottom);\n      }\n\n      path.lineToPt(topLeft);\n\n      canvas.drawPath(path, paint);\n      */\n    }\n  }\n\n  @override\n  bool shouldRepaint(DefaultSelectionPainter oldDelegate) {\n    final needsRepaint = color != oldDelegate.color ||\n        opacityAnimation != oldDelegate.opacityAnimation;\n    // dmPrint('SelectionPainter '\n    //     '${needsRepaint ? 'needs repaint' : 'does not need repaint'}');\n    return needsRepaint;\n  }\n}\n\n/*\nextension on Path {\n  void moveToPt(Offset pt) => moveTo(pt.dx, pt.dy);\n\n  void lineToPt(Offset pt) => lineTo(pt.dx, pt.dy);\n}"}, {"structure_type": "function", "name": "maybeAutoscroll", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/selectable_build_helper.dart", "file_name": "selectable_build_helper.dart", "line": 25, "line_from": 25, "line_to": 195, "snippet": "  void maybeAutoscroll(\n    ScrollController? scrollController,\n    GlobalKey globalKey,\n    Offset? selectionPt,\n    double maxY,\n    double topOverlayHeight,\n  ) {\n    if (scrollController?.hasOneClient ?? false) {\n      _autoscroll(\n          scrollController, globalKey, selectionPt, maxY, topOverlayHeight);\n    }\n  }\n\n  /// Autoscrolls if the drag point is near the top or bottom of the viewport.\n  void _autoscroll(ScrollController? scrollController, GlobalKey globalKey,\n      Offset? dragPt, double maxY, double topOverlayHeight) {\n    assert(scrollController?.hasOneClient ?? false);\n\n    final renderObject = globalKey.currentContext!.findRenderObject();\n    if (!(renderObject is RenderBox && renderObject.hasSize)) {\n      return;\n    }\n\n    final vp = RenderAbstractViewport.of(renderObject);\n    assert(vp != null);\n    if (vp == null) return;\n\n    final renderObjScrollPos =\n        renderObject.getTransformTo(vp).getTranslation().y;\n    final renderObjectTop = scrollController!.offset + renderObjScrollPos;\n    final renderObjectBottom = maxY;\n    final scrollOffset = -renderObjScrollPos;\n    final viewportExtent = scrollController.position.viewportDimension;\n\n    final autoscrollAreaHeight = viewportExtent / 10.0;\n    const scrollDistanceMultiplier = 3.0;\n\n    final y = dragPt!.dy;\n    var scrollDelta = 0.0;\n\n    if (scrollOffset > -topOverlayHeight &&\n        y < scrollOffset + autoscrollAreaHeight + topOverlayHeight) {\n      scrollDelta =\n          y - (scrollOffset + autoscrollAreaHeight + topOverlayHeight);\n    } else if (y > scrollOffset + viewportExtent - autoscrollAreaHeight) {\n      scrollDelta = y - (scrollOffset + viewportExtent - autoscrollAreaHeight);\n    }\n\n    if (scrollDelta != 0.0) {\n      final newScrollOffset = math.min(\n          renderObjectBottom - viewportExtent + 100.0,\n          math.max(-renderObjectTop,\n              scrollOffset + (scrollDelta * scrollDistanceMultiplier)));\n      scrollController.animateTo(newScrollOffset + renderObjectTop,\n          duration: const Duration(milliseconds: 250), curve: Curves.ease);\n    }\n  }\n\n  /// Builds the selection handles and optionally the popup menu.\n  List<Widget> buildSelectionControls(\n    Selection selection,\n    BuildContext context,\n    BoxConstraints constraints,\n    SelectionDelegate selectionDelegate,\n    GlobalKey mainKey,\n    ScrollController? scrollController,\n    double topOverlayHeight,\n  ) {\n    // If there is no selection, return an empty list.\n    if (!selection.isTextSelected) return []; //---------------------------->\n\n    final leftLineHeight = selection.rects!.first.height;\n    final rightLineHeight = selection.rects!.last.height;\n\n    final leftOffset =\n        controls!.getHandleAnchor(TextSelectionHandleType.left, leftLineHeight);\n    final rightOffset = controls!\n        .getHandleAnchor(TextSelectionHandleType.right, rightLineHeight);\n\n    final leftHandlePt = selection.rects!.first.bottomLeft;\n    final rightHandlePt = (usingCupertinoControls\n        ? selection.rects!.last.topRight\n        : selection.rects!.last.bottomRight);\n\n    final leftPt = Offset(\n        leftHandlePt.dx - leftOffset.dx, leftHandlePt.dy - leftOffset.dy);\n    final rightPt = Offset(rightHandlePt.dx - rightOffset.dx, rightHandlePt.dy);\n\n    final leftSize = controls!.getHandleSize(leftLineHeight);\n    final rightSize = controls!.getHandleSize(rightLineHeight);\n\n    final leftRect =\n        Rect.fromLTWH(leftPt.dx, leftPt.dy, leftSize.width, leftSize.height)\n            .inflate(20);\n    final rightRect =\n        Rect.fromLTWH(rightPt.dx, rightPt.dy, rightSize.width, rightSize.height)\n            .inflate(20);\n\n    final isShowingPopupMenu = (showPopupMenu && !isScrolling);\n    // dmPrint('SelectionUpdater.buildSelectionControls isShowingPopupMenu ==\n    // $isShowingPopupMenu');\n    // dmPrint('buildSelectionControls, showPopupMenu = $showPopupMenu,\n    // isScrolling = $isScrolling');\n\n    return [\n      Positioned.fromRect(\n        rect: leftRect,\n        child: _SelectionHandle(\n          delegate: selectionDelegate,\n          handleType: SelectionHandleType.left,\n          mainKey: mainKey,\n          child: controls!.buildHandle(\n              context, TextSelectionHandleType.left, leftLineHeight),\n        ),\n      ),\n      Positioned.fromRect(\n        rect: rightRect,\n        child: _SelectionHandle(\n          delegate: selectionDelegate,\n          handleType: SelectionHandleType.right,\n          mainKey: mainKey,\n          child: controls!.buildHandle(\n              context, TextSelectionHandleType.right, rightLineHeight),\n        ),\n      ),\n      AnimatedOpacity(\n        opacity: isShowingPopupMenu ? 1.0 : 0.0,\n        duration: const Duration(milliseconds: 200),\n        child: IgnorePointer(\n          // Ignore gestures (e.g. taps) on the popup menu if it's not showing.\n          ignoring: !isShowingPopupMenu,\n          child: _PopupMenu(\n            constraints: constraints,\n            controls: controls!,\n            mainKey: mainKey,\n            scrollController: scrollController,\n            selectionDelegate: selectionDelegate,\n            selectionRects: selection.rects!,\n            topOverlayHeight: topOverlayHeight,\n            isShowing: isShowingPopupMenu,\n          ),\n        ),\n      ),\n    ];\n  }\n}\n\nclass _PopupMenu extends StatefulWidget {\n  const _PopupMenu({\n    required this.constraints,\n    required this.controls,\n    required this.mainKey,\n    required this.scrollController,\n    required this.selectionDelegate,\n    required this.selectionRects,\n    required this.topOverlayHeight,\n    required this.isShowing,\n  });\n\n  final BoxConstraints constraints;\n  final SelectionControls controls;\n  final GlobalKey mainKey;\n  final ScrollController? scrollController;\n  final SelectionDelegate selectionDelegate;\n  final List<Rect> selectionRects;\n  final double topOverlayHeight;\n  final bool isShowing;\n\n  @override\n  _PopupMenuState createState() => _PopupMenuState();\n}"}, {"structure_type": "function", "name": "didUpdateWidget", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/selectable_build_helper.dart", "file_name": "selectable_build_helper.dart", "line": 199, "line_from": 199, "line_to": 316, "snippet": "  void didUpdateWidget(covariant _PopupMenu old) {\n    super.didUpdateWidget(old);\n\n    // Only rebuild the menu if it is showing.\n    if (widget.isShowing) _menu = null;\n  }\n\n  Widget? _menu;\n\n  @override\n  Widget build(BuildContext context) {\n    if (_menu == null) {\n      // dmPrint('rebuilding menu...');\n\n      // [viewport] is the rectangle that can be seen, in render object\n      // coordinates, which defaults to the render object rect.\n      Rect? viewport = Rect.fromLTWH(\n          0, 0, widget.constraints.maxWidth, widget.constraints.maxHeight);\n\n      // If there is a scroll controller, update the viewport to the visible\n      // rect in render object coordinates.\n      if (widget.scrollController?.hasOneClient ?? false) {\n        final renderObject = widget.mainKey.currentContext!.findRenderObject();\n        final vp = RenderAbstractViewport.of(renderObject);\n        assert(vp != null);\n        if (vp != null) {\n          try {\n            final renderObjScrollPos =\n                renderObject!.getTransformTo(vp).getTranslation().y;\n            final scrollOffset = -renderObjScrollPos + widget.topOverlayHeight;\n            final viewportExtent =\n                widget.scrollController!.position.viewportDimension -\n                    widget.topOverlayHeight;\n            viewport =\n                Rect.fromLTWH(0, scrollOffset, viewport.width, viewportExtent)\n                    .intersect(viewport);\n            if (viewport.height < 50) viewport = null;\n          } catch (e) {\n            dmPrint('Selectable popup menu build error: $e');\n          }\n        }\n        // } else {\n        //   if (widget.scrollController == null) {\n        //     dmPrint('scrollController == null');\n        //   } else {\n        //     dmPrint('scrollController.clientCount: '\n        //         '${widget.scrollController!.clientCount}');\n        //   }\n      }\n\n      if (viewport != null) {\n        // dmPrint('buildPopupMenu with viewport $viewport');\n        _menu = widget.controls.buildPopupMenu(\n            context, viewport, widget.selectionRects, widget.selectionDelegate);\n      } else {\n        _menu = const SizedBox();\n      }\n    }\n\n    return _menu!;\n  }\n}\n\nclass _SelectionHandle extends StatelessWidget {\n  const _SelectionHandle({\n    required this.delegate,\n    required this.handleType,\n    required this.child,\n    required this.mainKey,\n  });\n\n  final SelectionDelegate delegate;\n  final SelectionHandleType handleType;\n  final Widget child;\n  final GlobalKey mainKey;\n\n  void _onPanStart(DragStartDetails details) =>\n      _onPan(details.globalPosition, details.kind);\n\n  void _onPanUpdate(DragUpdateDetails details) =>\n      _onPan(details.globalPosition, null);\n\n  void _onPan(Offset globalPosition, PointerDeviceKind? pointerKind) {\n    final mainKeyRenderObject = mainKey.currentContext!.findRenderObject();\n    if (mainKeyRenderObject is RenderBox) {\n      final offset = mainKeyRenderObject.globalToLocal(globalPosition);\n      delegate.onDragSelectionHandleUpdate(handleType, offset,\n          kind: pointerKind);\n    }\n  }\n\n  void _onPanEnd(DragEndDetails details) {\n    // dmPrint('onPanEnd');\n    delegate.onDragSelectionHandleEnd(handleType);\n  }\n\n  void _onPanCancel() {\n    // dmPrint('onPanCancel');\n    delegate.onDragSelectionHandleEnd(handleType);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return SelectablePanGestureDetector(\n      onPanStart: _onPanStart,\n      onPanUpdate: _onPanUpdate,\n      onPanEnd: _onPanEnd,\n      onPanCancel: _onPanCancel,\n      dragStartBehavior: DragStartBehavior.down,\n      behavior: HitTestBehavior.translucent,\n      child: Container(\n        padding: const EdgeInsets.all(20),\n        //color: Colors.orange.withAlpha(50),\n        child: child,\n      ),\n    );\n  }\n}"}, {"structure_type": "class", "name": "SelectionControls", "docstring": "An interface for building the selection UI, to be provided by the\nimplementor of the popup menu widget.", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/selection_controls.dart", "file_name": "selection_controls.dart", "line": 21, "line_from": 21, "line_to": 199, "snippet": "abstract class SelectionControls {\n  // Adapted from TextSelectionControls in\n  // flutter/lib/src/widgets/text_selection.dart\n\n  Widget buildHandle(BuildContext context, TextSelectionHandleType type,\n      double textLineHeight);\n\n  Offset getHandleAnchor(TextSelectionHandleType type, double textLineHeight);\n\n  Widget buildPopupMenu(\n    BuildContext context,\n    Rect viewport,\n    List<Rect>? selectionRects,\n    SelectionDelegate delegate,\n  );\n\n  /// Returns the size of the selection handle.\n  Size getHandleSize(double textLineHeight);\n}\n\nenum SelectionHandleType { left, right }\n\nmixin SelectionDelegate {\n  void onDragSelectionHandleUpdate(SelectionHandleType handle, Offset offset,\n      {PointerDeviceKind? kind}) {}\n  void onDragSelectionHandleEnd(SelectionHandleType handle) {}\n  SelectableController? get controller;\n  Iterable<SelectableMenuItem> get menuItems;\n  void hidePopupMenu() {}\n}\n\nenum SelectableMenuItemType { copy, define, webSearch, other }\n\ntypedef SelectableMenuItemHandlerFunc = bool Function(\n    SelectableController? controller);\n\n@immutable\nclass SelectableMenuItem {\n  const SelectableMenuItem({\n    this.type = SelectableMenuItemType.other,\n    String? title,\n    SelectableMenuItemHandlerFunc? isEnabled,\n    SelectableMenuItemHandlerFunc? handler,\n  })  : assert(type != null && // ignore: unnecessary_null_comparison\n            (type != SelectableMenuItemType.other ||\n                (title != null && isEnabled != null && handler != null))),\n        title = title ??\n            (type == SelectableMenuItemType.copy\n                ? 'Copy'\n                : type == SelectableMenuItemType.define\n                    ? 'Define'\n                    : type == SelectableMenuItemType.webSearch\n                        ? 'WebSearch'\n                        : null),\n        isEnabled = isEnabled ??\n            (type == SelectableMenuItemType.copy\n                ? _canCopy\n                : type == SelectableMenuItemType.define\n                    ? _canDefine\n                    : type == SelectableMenuItemType.webSearch\n                        ? _canWebSearch\n                        : null),\n        handler = handler ??\n            (type == SelectableMenuItemType.copy\n                ? _handleCopy\n                : type == SelectableMenuItemType.define\n                    ? _handleDefine\n                    : type == SelectableMenuItemType.webSearch\n                        ? _handleWebSearch\n                        : null);\n\n  final SelectableMenuItemType type;\n  final String? title;\n  final SelectableMenuItemHandlerFunc? isEnabled;\n  final SelectableMenuItemHandlerFunc? handler;\n}\n\n//\n// PRIVATE\n//\n\n// ignore: prefer_function_declarations_over_variables\nbool _canCopy(SelectableController? controller) {\n  return controller?.isTextSelected ?? false;\n}\n\nbool _handleCopy(SelectableController? controller) {\n  if (controller?.isTextSelected ?? false) {\n    Clipboard.setData(ClipboardData(text: _selectedText(controller)));\n    controller?.deselectAll();\n    return true;\n  }\n  return false;\n}\n\nbool _canDefine(SelectableController? controller) {\n  final text = _selectedText(controller);\n  if (text.isNotEmpty && (!text.contains(' ') || text.split(' ').length <= 2)) {\n    return true;\n  }\n  return false;\n}\n\nbool _handleDefine(SelectableController? controller) {\n  final text = _selectedText(controller);\n  if (text.isNotEmpty) {\n    final url = _search(text, define: true);\n    // delegate.hidePopupMenu();\n    _launchBrowserWithUrl(url);\n    return true;\n  }\n  return false;\n}\n\nbool _canWebSearch(SelectableController? controller) {\n  return _selectedText(controller).isNotEmpty;\n}\n\nbool _handleWebSearch(SelectableController? controller) {\n  final text = _selectedText(controller);\n  if (text.isNotEmpty) {\n    final url = _search(text);\n    _launchBrowserWithUrl(url);\n    return true;\n  }\n  return false;\n}\n\nString _selectedText(SelectableController? controller) {\n  return controller?.getSelection()?.text?.trim() ?? '';\n}\n\nFuture<void> _launchBrowserWithUrl(String url) async {\n  try {\n    final uri = Uri.parse(url);\n    if (await launcher.canLaunchUrl(uri)) {\n      await launcher.launchUrl(uri);\n    }\n  }\n  // ignore: avoid_catches_without_on_clauses\n  catch (e) {\n    dmPrint('WARNING: Selectable is unable to launch the browser with '\n        'url \"$url\": $e');\n  }\n}\n\nString _search(String text, {bool define = false}) {\n  if (text.toLowerCase().startsWith('http')) {\n    return text;\n  }\n\n  //return _duckDuckGoSearch(text, define: define);\n  return _googleSearch(text, define: define);\n}\n\nString _googleSearch(String text, {bool define = false}) {\n  final params = <String, dynamic>{'q': define ? 'define $text' : text};\n  return Uri(\n    scheme: 'https',\n    host: 'google.com',\n    path: 'search',\n    queryParameters: params,\n  ).toString();\n}\n\n// ignore: unused_element\nString _duckDuckGoSearch(String text, {bool define = false}) {\n  final params = <String, dynamic>{\n    'q': text,\n    if (define) 'ia': 'definition',\n  };\n  return Uri(\n    scheme: 'https',\n    host: 'duckduckgo.com',\n    queryParameters: params,\n  ).toString();\n}\n"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/selectable.dart", "file_name": "selectable.dart", "line": 44, "line_from": 44, "line_to": 523, "snippet": "  final Widget child;\n  final Color? selectionColor;\n  final bool showSelection;\n  final bool selectWordOnLongPress;\n  final bool selectWordOnDoubleTap;\n  final bool showPopup;\n  final bool showSelectionControls;\n  final Iterable<SelectableMenuItem>? popupMenuItems;\n  final SelectableController? selectionController;\n  final ScrollController? scrollController;\n  final double topOverlayHeight;\n\n  @override\n  // ignore: library_private_types_in_public_api\n  _SelectableState createState() => _SelectableState();\n}\n\nclass _SelectableState extends State<Selectable>\n    with SelectionDelegate, TickerProviderStateMixin {\n  final GlobalKey _globalKey = GlobalKey();\n\n  SelectableController? _selectionController;\n  bool _weOwnSelCtrlr = true;\n  bool get _widgetOwnsSelCtrlr => !_weOwnSelCtrlr;\n\n  ScrollController? _scrollController;\n  ScrollPosition? _scrollPosition;\n\n  final _selections = Selections();\n  final _buildHelper = SelectableBuildHelper();\n\n  late AnimationController _selectionOpacityController;\n  var _selectionIsHidden = false;\n  static const _selOpacityAnimationDuration = Duration(milliseconds: 1000);\n\n  @override\n  void initState() {\n    super.initState();\n    updateState();\n\n    if (_selectionController != null) {\n      _selectionIsHidden = _selectionController!.getSelection()!.isHidden;\n    }\n    _selectionOpacityController = AnimationController(\n      duration: _selOpacityAnimationDuration,\n      value: _selectionIsHidden ? 0.0 : 1.0,\n      vsync: this,\n    );\n  }\n\n  @override\n  void didUpdateWidget(Selectable oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    updateState();\n  }\n\n  void updateState() {\n    if (_selectionController == null ||\n        (!identical(_selectionController, widget.selectionController) &&\n            (_widgetOwnsSelCtrlr || widget.selectionController != null))) {\n      // First, remove the listener and, if we own it, dispose of the current\n      // controller.\n      if (_selectionController != null) {\n        _selectionController!.removeListener(_selectionControllerListener);\n        if (_weOwnSelCtrlr) _selectionController!.dispose();\n        _selectionController = null;\n      }\n\n      // Next, save a reference to the widget's controller, or create a new\n      // controller.\n      if (widget.selectionController != null) {\n        _selectionController = widget.selectionController;\n        _weOwnSelCtrlr = false;\n      } else {\n        _selectionController = SelectableController();\n        _weOwnSelCtrlr = true;\n      }\n\n      // And finally, call `_updateWith` and `addListener` on the new\n      // controller.\n      if (_selectionController != null) {\n        _selectionController!\n          .._updateWithSelections(_selections)\n          ..addListener(_selectionControllerListener);\n      }\n    }\n  }\n\n  @override\n  void dispose() {\n    _selectionOpacityController.dispose();\n\n    _selectionController?.removeListener(_selectionControllerListener);\n    if (_weOwnSelCtrlr) _selectionController?.dispose();\n    _selectionController = null;\n\n    _removeListenerFromScrollController();\n\n    super.dispose();\n  }\n\n  void _refresh([VoidCallback? fn]) => !mounted\n      ? null\n      : isBuilding\n          ? WidgetsBinding.instance\n              .addPostFrameCallback((timeStamp) => setState(fn ?? () {}))\n          : setState(fn ?? () {});\n\n  void _selectionControllerListener() {\n    if (!mounted || _selectionController == null) return;\n\n    final sc = _selectionController!;\n\n    if (sc.isTextSelected &&\n        _selections.main.isHidden != sc.getSelection()!.isHidden) {\n      // ignore: avoid_positional_boolean_parameters\n      // String bToStr(bool isHidden) => isHidden ? 'hidden' : 'visible';\n      // dmPrint('Selection state changed from '\n      //     '${bToStr(_selections.main.isHidden)} to '\n      //     '${bToStr(sc.isHidden)}.');\n      _selectionIsHidden = sc.getSelection()!.isHidden;\n      if (_selectionIsHidden) {\n        _selectionOpacityController.reverse();\n      } else {\n        _selectionOpacityController.forward();\n      }\n    }\n\n    // Update [_selections] with [sc.state].\n    final changed = _selections.updateWithSelections(sc._selections);\n    if (changed) {\n      // dmPrint('Selectable rebuilding because SelectableController updated '\n      //     'the selection.');\n      _refresh();\n    } else if (sc._selections.isTextSelected && _buildHelper.showPopupMenu) {\n      // dmPrint('Selectable rebuilding to show the popup menu.');\n      _refresh();\n    }\n  }\n\n  void _updateSelectionControllerWithNewSelections() {\n    _selectionController?._updateWithSelections(_selections);\n  }\n\n  bool _hasChangedScrollController(ScrollController? scrollController) {\n    return _scrollController != scrollController ||\n        (scrollController != null &&\n            (!scrollController.hasOneClient ||\n                scrollController.position != _scrollPosition));\n  }\n\n  void _checkForUpdatedScrollController(ScrollController? scrollController) {\n    if (_hasChangedScrollController(scrollController)) {\n      _removeListenerFromScrollController();\n      if (scrollController?.hasOneClient ?? false) {\n        _scrollController = scrollController;\n        _scrollPosition = _scrollController!.position;\n        _scrollController!.position.isScrollingNotifier\n            .addListener(_isScrollingListener);\n        // dmPrint('Selectable: Added listener to scroll controller.');\n      } else if (scrollController != null) {\n        // dmPrint('Selectable: Cannot add listener, '\n        //     'scrollController.hasOneClient is false.');\n      }\n    }\n  }\n\n  void _removeListenerFromScrollController() {\n    if (_scrollPosition != null) {\n      // dmPrint('Selectable: Removed listener from scroll controller.');\n    }\n    if (_scrollController?.hasOneClient ?? false) {\n      _scrollController!.position.isScrollingNotifier\n          .removeListener(_isScrollingListener);\n    }\n    _scrollController = null;\n    _scrollPosition = null;\n  }\n\n  void _isScrollingListener() {\n    if (!mounted) return;\n    final isScrolling = (_scrollController?.hasOneClient ?? false) &&\n        (_scrollController?.position.isScrollingNotifier.value ?? false);\n    if (isScrolling != _buildHelper.isScrolling) {\n      // dmPrint(isScrolling ? 'STARTED SCROLLING...' : 'STOPPED SCROLLING.');\n      _buildHelper.isScrolling = isScrolling;\n      if (_selections.main.isTextSelected && _buildHelper.showPopupMenu) {\n        _refresh();\n      }\n    }\n  }\n\n  bool get isBuilding => _isBuilding;\n  var _isBuilding = false;\n\n  @override\n  Widget build(BuildContext context) {\n    _isBuilding = true;\n\n    // Add post-frame-callback?\n    if (_selectionController != null ||\n        _hasChangedScrollController(widget.scrollController)) {\n      WidgetsBinding.instance.addPostFrameCallback((timeStamp) {\n        _updateSelectionControllerWithNewSelections();\n        _checkForUpdatedScrollController(widget.scrollController);\n      });\n    }\n\n    if (kDebugMode || _buildHelper.controls == null) {\n      _buildHelper\n        ..usingCupertinoControls = _useCupertinoSelectionControls(context)\n        ..controls = _buildHelper.usingCupertinoControls\n            ? exCupertinoTextSelectionControls\n            : exMaterialTextSelectionControls;\n    }\n\n    // Ignore taps if text is not selected, because the child might want to\n    // handle them.\n    final ignoreTap =\n        !(widget.showSelectionControls && _selections.main.isTextSelected);\n\n    // This is how the selection color is set in the Flutter 2.5.2\n    // version of src/material/selectable_text.dart, except that\n    // it uses opacity of 0.40, which I think looks too dark.\n    const opacity = 0.25;\n    final selectionColor = widget.selectionColor ??\n        TextSelectionTheme.of(context).selectionColor ??\n        (_buildHelper.usingCupertinoControls\n            ? CupertinoTheme.of(context).primaryColor.withOpacity(opacity)\n            : Theme.of(context).colorScheme.primary.withOpacity(opacity));\n\n    final result = Stack(\n      key: _globalKey,\n      children: <Widget>[\n        GestureDetector(\n          behavior: HitTestBehavior.translucent,\n          onLongPressStart: widget.selectWordOnLongPress\n              ? (details) => _localTapOrLongPressPt = details.localPosition\n              : null,\n          onLongPress: widget.selectWordOnLongPress\n              ? () => _onLongPressOrDoubleTap(_localTapOrLongPressPt)\n              : null,\n          onTapDown: ignoreTap\n              ? null\n              : (details) => _localTapOrLongPressPt = details.localPosition,\n          onTap: ignoreTap ? null : () => _onTap(_localTapOrLongPressPt),\n          onDoubleTapDown: widget.selectWordOnDoubleTap\n              ? (details) => _localTapOrLongPressPt = details.localPosition\n              : null,\n          onDoubleTap: widget.selectWordOnDoubleTap\n              ? () => _onLongPressOrDoubleTap(_localTapOrLongPressPt)\n              : null,\n          child: SelectableRenderWidget(\n            paragraphs: _selections.cachedParagraphs,\n            selections: _selections,\n            foregroundPainter: widget.showSelection\n                ? _selectionController?.getCustomPainter() ??\n                    DefaultSelectionPainter(\n                      color: selectionColor,\n                      opacityAnimation:\n                          _selectionIsHidden == _selections.main.isHidden\n                              ? _selectionOpacityController\n                              : _selections.main.isHidden\n                                  ? kAlwaysDismissedAnimation\n                                  : kAlwaysCompleteAnimation,\n                    )\n                : null,\n            child: IgnorePointer(\n              // Ignore gestures (e.g. taps) on the child if text is selected.\n              ignoring: widget.showSelectionControls &&\n                  (_selections.dragInfo.isSelectingWordOrDraggingHandle ||\n                      _selections.main.isTextSelected),\n              child: widget.child,\n            ),\n          ),\n        ),\n        if (widget.showSelection &&\n            (_selections.dragInfo.isSelectingWordOrDraggingHandle ||\n                _selections.main.isTextSelected ||\n                _buildHelper.showParagraphRects))\n          Positioned.fill(\n            child: LayoutBuilder(\n              builder: (context, constraints) {\n                // If text is selected, and a handle is being dragged,\n                // autoscroll if necessary.\n                if (_selections.main.isTextSelected &&\n                    _selections.dragInfo.isDraggingHandle) {\n                  final paragraphs = _selections.cachedParagraphs.list;\n                  assert(paragraphs.isNotEmpty);\n                  _buildHelper.maybeAutoscroll(\n                    widget.scrollController,\n                    _globalKey,\n                    _selections.dragInfo.selectionPt,\n                    paragraphs.last.rect.bottom,\n                    widget.topOverlayHeight,\n                  );\n                }\n\n                // dmPrint('selection.update resulted in '\n                //    '${_selections.main.rects?.length ?? 0} selection rects');\n                _selections.dragInfo\n                  ..selectionPt = null\n                  ..handleType = null;\n\n                if ((_selections.main.rects?.isNotEmpty ?? false) ||\n                    _buildHelper.showParagraphRects) {\n                  return AnimatedOpacity(\n                    opacity: _selections.main.isHidden ? 0.0 : 1.0,\n                    duration: _selections.main.animationDuration,\n                    child: Stack(\n                      children: [\n                        // if (_selections.main.rects?.isNotEmpty ?? false)\n                        //   ..._selections.main\n                        //       .rects!\n                        //       .map<Widget>((r) =>\n                        //         _ColoredRect(rect: r, color: selectionColor))\n                        //       .toList(),\n                        if (widget.showSelectionControls)\n                          ..._buildHelper.buildSelectionControls(\n                            _selections.main,\n                            context,\n                            constraints,\n                            this,\n                            _globalKey,\n                            widget.scrollController,\n                            widget.topOverlayHeight,\n                          ),\n                        if (_buildHelper.showParagraphRects)\n                          ..._selections.cachedParagraphs.list\n                              .map<Widget>(\n                                (p) => _ColoredRect(\n                                  rect: p.rect,\n                                  color: Colors.yellow.withAlpha(50),\n                                  borderColor: Colors.orange,\n                                ),\n                              )\n                              .toList(),\n                      ],\n                    ),\n                  );\n                } else {\n                  // dmPrint('update() returned with nothing selected');\n\n                  // IgnorePointer needs to be refreshed because\n                  // _selectionPt == null now.\n                  Future.delayed(Duration.zero, _refresh);\n\n                  return const SizedBox();\n                }\n              },\n            ),\n          ),\n      ],\n    );\n\n    _isBuilding = false;\n    return result;\n  }\n\n  //\n  // PRIVATE\n  //\n\n  Offset? _localTapOrLongPressPt;\n\n  void _onLongPressOrDoubleTap(Offset? localPosition) {\n    if (!mounted) return;\n    final pt = localPosition;\n    // dmPrint('onLongPressOrDoubleTap at: $pt');\n    if (pt != null && !_selections.main.containsPoint(pt)) {\n      _refresh(() {\n        _buildHelper.showPopupMenu = widget.showPopup;\n        _selections.dragInfo\n          ..selectionPt = pt\n          ..handleType = null\n          ..areAnchorsSwapped = false;\n      });\n    }\n  }\n\n  void _onTap(Offset? localPosition) {\n    if (!mounted) return;\n    final pt = localPosition;\n    // dmPrint('onTap at: $pt');\n    if (pt != null && _selections.main.isTextSelected) {\n      _refresh(() {\n        if (_buildHelper.usingCupertinoControls &&\n            _selections.main.containsPoint(pt)) {\n          if (widget.showPopup) {\n            _buildHelper.showPopupMenu = !_buildHelper.showPopupMenu;\n          }\n        } else {\n          _selections[0] = _selections.main.cleared();\n        }\n      });\n    }\n  }\n\n  //\n  // SelectionDelegate\n  //\n\n  PointerDeviceKind? _pointerDeviceKind;\n\n  @override\n  Iterable<SelectableMenuItem> get menuItems =>\n      widget.popupMenuItems ?? _defaultMenuItems;\n\n  @override\n  SelectableController? get controller => _selectionController;\n\n  var _isDraggingSelectionHandle = false;\n  var _hasDraggedAReasonableDistance = false;\n  late Offset _dragStartPt;\n\n  @override\n  void onDragSelectionHandleUpdate(\n    SelectionHandleType handle,\n    Offset offset, {\n    PointerDeviceKind? kind,\n  }) {\n    // dmPrint('Drag at: $offset with $handle');\n    if (!mounted) return;\n\n    if (kind != null) {\n      // Save this now because it is only provided on drag-start.\n      _pointerDeviceKind = kind;\n    }\n\n    // Ignore drags that are less than a reasonable distance.\n    if (!_isDraggingSelectionHandle) {\n      _isDraggingSelectionHandle = true;\n      _hasDraggedAReasonableDistance = false;\n      _dragStartPt = offset;\n    } else if (!_hasDraggedAReasonableDistance) {\n      final distanceSquared = (offset - _dragStartPt).distanceSquared.abs();\n      // dmPrint('Drag distance squared: $distanceSquared');\n      if (distanceSquared > 100) {\n        _hasDraggedAReasonableDistance = true;\n      }\n    }\n\n    if (_hasDraggedAReasonableDistance) {\n      _refresh(() {\n        // For touch, offset the y value by -30.\n        final yOffset =\n            _pointerDeviceKind == PointerDeviceKind.touch ? -30.0 : 0.0;\n\n        _buildHelper.showPopupMenu = false;\n        _selections.dragInfo\n          ..selectionPt = Offset(offset.dx, offset.dy + yOffset)\n          ..handleType = handle;\n      });\n    }\n  }\n\n  @override\n  void onDragSelectionHandleEnd(SelectionHandleType handle) {\n    // dmPrint('Drag ended with $handle, _dragInfo.areAnchorsSwapped: '\n    //     '${_dragInfo.areAnchorsSwapped}');\n    if (!mounted) return;\n\n    _isDraggingSelectionHandle = false;\n\n    // Done dragging, reset areAnchorsSwapped after next build.\n    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {\n      _selections.dragInfo.areAnchorsSwapped = false;\n    });\n\n    if (widget.showPopup) {\n      _refresh(() => _buildHelper.showPopupMenu = widget.showPopup);\n    }\n  }\n\n  @override\n  void hidePopupMenu() {\n    if (!mounted) return;\n    _refresh(() => _buildHelper.showPopupMenu = false);\n  }\n}"}, {"structure_type": "function", "name": "each", "docstring": "Whether the painting is complex enough to benefit from caching.\n\nThe compositor contains a raster cache that holds bitmaps of layers in", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/selectable_render_widget.dart", "file_name": "selectable_render_widget.dart", "line": 50, "line_from": 50, "line_to": 403, "snippet": "  /// order to avoid the cost of repeatedly rendering those layers on each\n  /// frame. If this flag is not set, then the compositor will apply its own\n  /// heuristics to decide whether the this layer is complex enough to benefit\n  /// from caching.\n  ///\n  /// If both [painter] and [foregroundPainter] are null this flag is ignored.\n  final bool isComplex;\n\n  /// Whether the raster cache should be told that this painting is likely\n  /// to change in the next frame.\n  ///\n  /// If both [painter] and [foregroundPainter] are null this flag is ignored.\n  final bool willChange;\n\n  @override\n  RenderSelectableWidget createRenderObject(BuildContext context) {\n    return RenderSelectableWidget(\n      paragraphs: paragraphs,\n      selections: selections,\n      painter: painter,\n      foregroundPainter: foregroundPainter,\n      isComplex: isComplex,\n      willChange: willChange,\n    );\n  }\n\n  @override\n  void updateRenderObject(\n      BuildContext context, RenderSelectableWidget renderObject) {\n    renderObject\n      ..paragraphs = paragraphs\n      ..selections = selections\n      ..painter = painter\n      ..foregroundPainter = foregroundPainter\n      ..isComplex = isComplex\n      ..willChange = willChange;\n  }\n\n  @override\n  void didUnmountRenderObject(RenderSelectableWidget renderObject) {\n    renderObject\n      ..painter = null\n      ..foregroundPainter = null;\n  }\n}\n\n/// Provides a canvas on which to draw during the paint phase.\n///\n/// When asked to paint, [RenderSelectableWidget] first asks its [painter] to\n/// paint on the current canvas, then it paints its child, and then, after\n/// painting its child, it asks its [foregroundPainter] to paint. The coordinate\n/// system of the canvas matches the coordinate system of the\n/// [SelectableRenderWidget] object. The painters are expected to paint within a\n/// rectangle starting at the origin and encompassing a region of the given\n/// size. (If the painters paint outside those bounds, there might be\n/// insufficient memory allocated to rasterize the painting commands and the\n/// resulting behavior is undefined.)\n///\n/// Painters are implemented by subclassing or implementing [SelectionPainter].\n///\n/// Because custom paint calls its painters during paint, you cannot mark the\n/// tree as needing a new layout during the callback (the layout for this frame\n/// has already happened).\n///\n/// See also:\n///  * [SelectionPainter], the class that custom painter delegates should\n///    extend.\n///  * [Canvas], the API provided to custom painter delegates.\nclass RenderSelectableWidget extends RenderProxyBox {\n  /// Creates a render object that delegates its painting.\n  RenderSelectableWidget({\n    required Paragraphs paragraphs,\n    required Selections selections,\n    SelectionPainter? painter,\n    SelectionPainter? foregroundPainter,\n    this.isComplex = false,\n    this.willChange = false,\n    RenderBox? child,\n  })  : _paragraphs = paragraphs,\n        _selections = selections,\n        _painter = painter,\n        _foregroundPainter = foregroundPainter,\n        super(child);\n\n  /// The paragraphs.\n  Paragraphs get paragraphs => _paragraphs;\n  Paragraphs _paragraphs;\n\n  /// Set a new paragraphs object.\n  set paragraphs(Paragraphs value) {\n    if (_paragraphs == value) return;\n    _paragraphs = value;\n    // dmPrint('RenderSelectableWidget: new paragraphs object, needs layout.');\n    markNeedsLayout();\n  }\n\n  /// The selections.\n  Selections get selections => _selections;\n  Selections _selections;\n\n  /// Set a new selections object.\n  set selections(Selections value) {\n    if (_selections != value) {\n      _selections = value;\n\n      // Reset _selectionList so it is rebuilt when needed.\n      _selectionList = null;\n\n      // dmPrint('RenderSelectableWidget: new selections, needs repaint.');\n      markNeedsPaint();\n    } else {\n      // If the list of non-empty selections changed, need to repaint.\n      final newSelectionList = value.nonEmptySelections.toList();\n      if (!areEqualLists(newSelectionList, selectionList)) {\n        _selectionList = newSelectionList;\n\n        // dmPrint('RenderSelectableWidget: selection list changed, '\n        //     'needs repaint.');\n        markNeedsPaint();\n      }\n    }\n  }\n\n  /// Returns the list of non-empty selections.\n  List<Selection> get selectionList =>\n      _selectionList ??= selections.nonEmptySelections.toList();\n  List<Selection>? _selectionList;\n\n  /// The background custom paint delegate.\n  ///\n  /// This painter, if non-null, is called to paint behind the children.\n  SelectionPainter? get painter => _painter;\n  SelectionPainter? _painter;\n\n  /// Set a new background custom paint delegate.\n  ///\n  /// If the new delegate is the same as the previous one, this does nothing.\n  ///\n  /// If the new delegate is the same class as the previous one, then the new\n  /// delegate has its [SelectionPainter.shouldRepaint] called; if the result is\n  /// `true`, then the delegate will be called.\n  ///\n  /// If the new delegate is a different class than the previous one, then the\n  /// delegate will be called.\n  ///\n  /// If the new value is null, then there is no background custom painter.\n  set painter(SelectionPainter? value) {\n    if (_painter == value) {\n      return;\n    }\n    final oldPainter = _painter;\n    _painter = value;\n    _didUpdatePainter(_painter, oldPainter);\n  }\n\n  /// The foreground custom paint delegate.\n  ///\n  /// This painter, if non-null, is called to paint in front of the children.\n  SelectionPainter? get foregroundPainter => _foregroundPainter;\n  SelectionPainter? _foregroundPainter;\n\n  /// Set a new foreground custom paint delegate.\n  ///\n  /// If the new delegate is the same as the previous one, this does nothing.\n  ///\n  /// If the new delegate is the same class as the previous one, then the new\n  /// delegate has its [SelectionPainter.shouldRepaint] called; if the result is\n  /// `true`, then the delegate will be called.\n  ///\n  /// If the new delegate is a different class than the previous one, then the\n  /// delegate will be called.\n  ///\n  /// If the new value is null, then there is no foreground custom painter.\n  set foregroundPainter(SelectionPainter? value) {\n    if (_foregroundPainter == value) {\n      return;\n    }\n    final oldPainter = _foregroundPainter;\n    _foregroundPainter = value;\n    _didUpdatePainter(_foregroundPainter, oldPainter);\n  }\n\n  void _didUpdatePainter(\n      SelectionPainter? newPainter, SelectionPainter? oldPainter) {\n    // Check if we need to repaint.\n    if (newPainter == null) {\n      assert(oldPainter != null); // We should be called only for changes.\n      markNeedsPaint();\n    } else if (oldPainter == null ||\n        newPainter.runtimeType != oldPainter.runtimeType ||\n        newPainter.shouldRepaint(oldPainter)) {\n      markNeedsPaint();\n    }\n    if (attached) {\n      oldPainter?.removeListener(markNeedsPaint);\n      newPainter?.addListener(markNeedsPaint);\n    }\n  }\n\n  /// Whether to hint that this layer's painting should be cached.\n  ///\n  /// The compositor contains a raster cache that holds bitmaps of layers in\n  /// order to avoid the cost of repeatedly rendering those layers on each\n  /// frame. If this flag is not set, then the compositor will apply its own\n  /// heuristics to decide whether the this layer is complex enough to benefit\n  /// from caching.\n  bool isComplex;\n\n  /// Whether the raster cache should be told that this painting is likely\n  /// to change in the next frame.\n  bool willChange;\n\n  @override\n  double computeMinIntrinsicWidth(double height) {\n    if (child == null) return 0;\n    return super.computeMinIntrinsicWidth(height);\n  }\n\n  @override\n  double computeMaxIntrinsicWidth(double height) {\n    if (child == null) return 0;\n    return super.computeMaxIntrinsicWidth(height);\n  }\n\n  @override\n  double computeMinIntrinsicHeight(double width) {\n    if (child == null) return 0;\n    return super.computeMinIntrinsicHeight(width);\n  }\n\n  @override\n  double computeMaxIntrinsicHeight(double width) {\n    if (child == null) return 0;\n    return super.computeMaxIntrinsicHeight(width);\n  }\n\n  @override\n  void attach(PipelineOwner owner) {\n    super.attach(owner);\n    _painter?.addListener(markNeedsPaint);\n    _foregroundPainter?.addListener(markNeedsPaint);\n  }\n\n  @override\n  void detach() {\n    _painter?.removeListener(markNeedsPaint);\n    _foregroundPainter?.removeListener(markNeedsPaint);\n    super.detach();\n  }\n\n  @override\n  bool hitTestChildren(BoxHitTestResult result, {required Offset position}) {\n    if (_foregroundPainter != null &&\n        (_foregroundPainter!.hitTest(position) ?? false)) {\n      return true;\n    }\n    return super.hitTestChildren(result, position: position);\n  }\n\n  @override\n  bool hitTestSelf(Offset position) {\n    return _painter != null && (_painter!.hitTest(position) ?? true);\n  }\n\n  @override\n  void performLayout() {\n    super.performLayout();\n    if (child != null) {\n      _paragraphs.updateCachedParagraphsWithRenderBox(child!);\n\n      // Paragraphs changed, so the selection list is no longer up-to-date.\n      _selectionList = null;\n    }\n  }\n\n  @override\n  Size computeSizeForNoChild(BoxConstraints constraints) {\n    return constraints.constrain(Size.zero);\n  }\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    if (_painter != null) {\n      _paintWithPainter(context.canvas, offset, _painter!);\n      _setRasterCacheHints(context);\n    }\n    super.paint(context, offset);\n    if (_foregroundPainter != null) {\n      _paintWithPainter(context.canvas, offset, _foregroundPainter!);\n      _setRasterCacheHints(context);\n    }\n  }\n\n  void _paintWithPainter(\n      Canvas canvas, Offset offset, SelectionPainter painter) {\n    late int previousCanvasSaveCount;\n    canvas.save();\n    assert(() {\n      previousCanvasSaveCount = canvas.getSaveCount();\n      return true;\n    }());\n    if (offset != Offset.zero) {\n      canvas.translate(offset.dx, offset.dy);\n    }\n    for (final selection in selectionList) {\n      // dmPrint('painting selection rects ${selection.rects}}');\n      painter.paint(canvas, size, selection);\n    }\n    assert(() {\n      // This isn't perfect. For example, we can't catch the case of\n      // someone first restoring, then setting a transform or whatnot,\n      // then saving.\n      // If this becomes a real problem, we could add logic to the\n      // Canvas class to lock the canvas at a particular save count\n      // such that restore() fails if it would take the lock count\n      // below that number.\n      final canvasSaveCount = canvas.getSaveCount();\n      if (canvasSaveCount > previousCanvasSaveCount) {\n        throw FlutterError.fromParts(<DiagnosticsNode>[\n          ErrorSummary(\n            'The $painter custom painter called canvas.save() or '\n            'canvas.saveLayer() at least '\n            '${canvasSaveCount - previousCanvasSaveCount} more '\n            'time${canvasSaveCount - previousCanvasSaveCount == 1 ? '' : 's'} '\n            'than it called canvas.restore().',\n          ),\n          ErrorDescription(\n              'This leaves the canvas in an inconsistent state and will '\n              'probably result in a broken display.'),\n          ErrorHint(\n              'You must pair each call to save()/saveLayer() with a later '\n              'matching call to restore().'),\n        ]);\n      }\n      if (canvasSaveCount < previousCanvasSaveCount) {\n        throw FlutterError.fromParts(<DiagnosticsNode>[\n          ErrorSummary(\n            'The $painter custom painter called canvas.restore() '\n            '${previousCanvasSaveCount - canvasSaveCount} more '\n            'time${previousCanvasSaveCount - canvasSaveCount == 1 ? '' : 's'} '\n            'than it called canvas.save() or canvas.saveLayer().',\n          ),\n          ErrorDescription(\n              'This leaves the canvas in an inconsistent state and will result '\n              'in a broken display.'),\n          ErrorHint(\n              'You should only call restore() if you first called save() or '\n              'saveLayer().'),\n        ]);\n      }\n      return canvasSaveCount == previousCanvasSaveCount;\n    }());\n    canvas.restore();\n  }"}, {"structure_type": "function", "name": "setCustomPainter", "docstring": "Sets the custom selection painter to be used to paint selections.", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/selectable_controller.dart", "file_name": "selectable_controller.dart", "line": 243, "line_from": 243, "line_to": 275, "snippet": "  void setCustomPainter(SelectionPainter? painter, {int? key}) {\n    final k = key ?? 0;\n    if (painter == null) {\n      if (_painters.containsKey(k)) {\n        _painters.remove(k);\n        notifyListeners();\n      }\n    } else {\n      _painters[k] = painter;\n      notifyListeners();\n    }\n  }\n\n  /// Returns the selection painter, or null if none.\n  SelectionPainter? getCustomPainter({int? key}) => _painters[key ?? 0];\n\n  //\n  // PRIVATE\n  //\n\n  final _selections = Selections();\n  final _painters = <int, SelectionPainter>{};\n\n  /// Updates the [Selections]. This is called by Selectable when the\n  /// selection changes. It should not be called by any other code.\n  ///\n  /// Returns `true` if something changed and `notifyListeners` was called.\n  bool _updateWithSelections(Selections newSelections) {\n    final changed = _selections.updateWithSelections(newSelections);\n    if (changed) notifyListeners();\n    return changed;\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/pan_gesture_detector.dart", "file_name": "pan_gesture_detector.dart", "line": 133, "line_from": 133, "line_to": 187, "snippet": "  Widget build(BuildContext context) {\n    return RawGestureDetector(\n      gestures: {\n        SelectablePanGestureRecognizer: GestureRecognizerFactoryWithHandlers<\n            SelectablePanGestureRecognizer>(\n          SelectablePanGestureRecognizer.new,\n          (instance) {\n            instance\n              ..onDown = onPanDown\n              ..onStart = onPanStart\n              ..onUpdate = onPanUpdate\n              ..onEnd = onPanEnd\n              ..onCancel = onPanCancel\n              ..dragStartBehavior = dragStartBehavior;\n          },\n        ),\n      },\n      behavior: behavior,\n      excludeFromSemantics: excludeFromSemantics,\n      child: child,\n    );\n  }\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties.add(\n        EnumProperty<DragStartBehavior>('startBehavior', dragStartBehavior));\n  }\n}\n\n///\n/// SelectablePanGestureRecognizer\n///\nclass SelectablePanGestureRecognizer extends PanGestureRecognizer {\n  /// Create a gesture recognizer for tracking movement on a plane.\n  SelectablePanGestureRecognizer({super.debugOwner}) {\n    onDown = _onDown;\n  }\n\n  @override\n  set onDown(GestureDragDownCallback? func) {\n    super.onDown = (details) {\n      _onDown(details);\n      if (func != null) func(details);\n    };\n  }\n\n  void _onDown(DragDownDetails details) {\n    resolve(GestureDisposition.accepted);\n  }\n\n  @override\n  String get debugDescription => 'SelectablePanGestureRecognizer';\n}"}, {"structure_type": "function", "name": "updateRenderObject", "docstring": "", "module": "src", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/ignore_selectable.dart", "file_name": "ignore_selectable.dart", "line": 51, "line_from": 51, "line_to": 132, "snippet": "  void updateRenderObject(\n    BuildContext context,\n    RenderIgnoreSelectable renderObject,\n  ) {\n    renderObject\n      ..ignoring = ignoring\n      ..ignoringSemantics = ignoringSemantics;\n  }\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties\n      ..add(DiagnosticsProperty<bool>('ignoring', ignoring))\n      ..add(DiagnosticsProperty<bool>('ignoringSemantics', ignoringSemantics,\n          defaultValue: null));\n  }\n}\n\n/// A render object that is invisible for to selection via its [Selectable]\n/// ancestor widget.\n///\n/// When [ignoring] is true, this render object (and its subtree) is invisible\n/// to its [Selectable] ancestor. It still consumes space during layout and\n/// paints its child as usual.\n///\n/// When [ignoringSemantics] is true, the subtree will be invisible to the\n/// semantics layer (and thus e.g. accessibility tools). If [ignoringSemantics]\n/// is null, it uses the value of [ignoring].\nclass RenderIgnoreSelectable extends RenderProxyBox {\n  RenderIgnoreSelectable({\n    RenderBox? child,\n    bool ignoring = true,\n    bool? ignoringSemantics,\n  })  : _ignoring = ignoring,\n        _ignoringSemantics = ignoringSemantics,\n        super(child);\n\n  bool get ignoring => _ignoring;\n  bool _ignoring;\n  set ignoring(bool value) {\n    if (value == _ignoring) return;\n    _ignoring = value;\n    if (_ignoringSemantics == null || !_ignoringSemantics!) {\n      markNeedsSemanticsUpdate();\n    }\n  }\n\n  bool? get ignoringSemantics => _ignoringSemantics;\n  bool? _ignoringSemantics;\n  set ignoringSemantics(bool? value) {\n    if (value == _ignoringSemantics) {\n      return;\n    }\n    final oldEffectiveValue = _effectiveIgnoringSemantics;\n    _ignoringSemantics = value;\n    if (oldEffectiveValue != _effectiveIgnoringSemantics) {\n      markNeedsSemanticsUpdate();\n    }\n  }\n\n  bool get _effectiveIgnoringSemantics => ignoringSemantics ?? ignoring;\n\n  @override\n  void visitChildrenForSemantics(RenderObjectVisitor visitor) {\n    if (child != null && !_effectiveIgnoringSemantics) {\n      visitor(child!);\n    }\n  }\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties\n      ..add(DiagnosticsProperty<bool>('ignoring', ignoring))\n      ..add(DiagnosticsProperty<bool>(\n          'ignoringSemantics', _effectiveIgnoringSemantics,\n          description: ignoringSemantics == null\n              ? 'implicitly $_effectiveIgnoringSemantics'\n              : null));\n  }\n}"}, {"structure_type": "function", "name": "updateRenderObject", "docstring": "", "module": "cupertino", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/cupertino/text_selection.dart", "file_name": "text_selection.dart", "line": 97, "line_from": 97, "line_to": 114, "snippet": "  void updateRenderObject(\n      BuildContext context, _PopupMenuRenderBox renderObject) {\n    renderObject\n      ..barTopY = _barTopY\n      ..arrowTipX = _arrowTipX\n      ..isArrowPointingDown = _isArrowPointingDown;\n  }\n}\n\nclass _PopupMenuParentData extends BoxParentData {\n  // The x offset from the tip of the arrow to the center of the popup menu.\n  // Positive if the tip of the arrow has a larger x-coordinate than the\n  // center of the popup menu.\n  late double arrowXOffsetFromCenter;\n  @override\n  String toString() =>\n      'offset=$offset, arrowXOffsetFromCenter=$arrowXOffsetFromCenter';\n}"}, {"structure_type": "function", "name": "setupParentData", "docstring": "", "module": "cupertino", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/cupertino/text_selection.dart", "file_name": "text_selection.dart", "line": 161, "line_from": 161, "line_to": 317, "snippet": "  void setupParentData(RenderObject child) {\n    if (child.parentData is! _PopupMenuParentData) {\n      child.parentData = _PopupMenuParentData();\n    }\n  }\n\n  @override\n  void performLayout() {\n    size = constraints.biggest;\n\n    if (child == null) {\n      return;\n    }\n    final BoxConstraints enforcedConstraint = constraints\n        .deflate(\n            const EdgeInsets.symmetric(horizontal: _kPopupMenuScreenPadding))\n        .loosen();\n\n    child!.layout(\n      heightConstraint.enforce(enforcedConstraint),\n      parentUsesSize: true,\n    );\n    final _PopupMenuParentData childParentData =\n        (child!.parentData as _PopupMenuParentData?)!;\n\n    // The local x-coordinate of the center of the popup menu.\n    final double lowerBound = child!.size.width / 2 + _kPopupMenuScreenPadding;\n    final double upperBound =\n        size.width - child!.size.width / 2 - _kPopupMenuScreenPadding;\n    final double adjustedCenterX = _arrowTipX!.clamp(lowerBound, upperBound);\n\n    childParentData.offset =\n        Offset(adjustedCenterX - child!.size.width / 2, _barTopY!);\n    childParentData.arrowXOffsetFromCenter = _arrowTipX! - adjustedCenterX;\n  }\n\n  // The path is described in the popup menu's coordinate system.\n  Path _clipPath() {\n    final _PopupMenuParentData childParentData =\n        (child!.parentData as _PopupMenuParentData?)!;\n    final Path rrect = Path()\n      ..addRRect(\n        RRect.fromRectAndRadius(\n          Offset(\n                0,\n                _isArrowPointingDown! ? 0 : _kPopupMenuArrowSize.height,\n              ) &\n              Size(child!.size.width,\n                  child!.size.height - _kPopupMenuArrowSize.height),\n          _kPopupMenuBorderRadius,\n        ),\n      );\n\n    final double arrowTipX =\n        child!.size.width / 2 + childParentData.arrowXOffsetFromCenter;\n\n    final double arrowBottomY = _isArrowPointingDown!\n        ? child!.size.height - _kPopupMenuArrowSize.height\n        : _kPopupMenuArrowSize.height;\n\n    final double arrowTipY = _isArrowPointingDown! ? child!.size.height : 0;\n\n    final Path arrow = Path()\n      ..moveTo(arrowTipX, arrowTipY)\n      ..lineTo(arrowTipX - _kPopupMenuArrowSize.width / 2, arrowBottomY)\n      ..lineTo(arrowTipX + _kPopupMenuArrowSize.width / 2, arrowBottomY)\n      ..close();\n\n    return Path.combine(PathOperation.union, rrect, arrow);\n  }\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    if (child == null) {\n      return;\n    }\n\n    final _PopupMenuParentData childParentData =\n        (child!.parentData as _PopupMenuParentData?)!;\n    context.pushClipPath(\n      needsCompositing,\n      offset + childParentData.offset,\n      Offset.zero & child!.size,\n      _clipPath(),\n      (PaintingContext innerContext, Offset innerOffset) =>\n          innerContext.paintChild(child!, innerOffset),\n    );\n  }\n\n  Paint? _debugPaint;\n\n  @override\n  void debugPaintSize(PaintingContext context, Offset offset) {\n    assert(() {\n      if (child == null) {\n        return true;\n      }\n\n      _debugPaint ??= Paint()\n        ..shader = ui.Gradient.linear(\n          Offset.zero,\n          const Offset(10.0, 10.0),\n          <Color>[\n            const Color(0x00000000),\n            const Color(0xFFFF00FF),\n            const Color(0xFFFF00FF),\n            const Color(0x00000000)\n          ],\n          <double>[0.25, 0.25, 0.75, 0.75],\n          TileMode.repeated,\n        )\n        ..strokeWidth = 2.0\n        ..style = PaintingStyle.stroke;\n\n      final _PopupMenuParentData childParentData =\n          (child!.parentData as _PopupMenuParentData?)!;\n      context.canvas.drawPath(\n          _clipPath().shift(offset + childParentData.offset), _debugPaint!);\n      return true;\n    }());\n  }\n}\n\n/// Draws a single text selection handle with a bar and a ball.\nclass _TextSelectionHandlePainter extends CustomPainter {\n  const _TextSelectionHandlePainter(this.color);\n\n  final Color color;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Paint paint = Paint()\n      ..color = color\n      ..strokeWidth = 2.0;\n    canvas.drawCircle(\n      const Offset(_kSelectionHandleRadius, _kSelectionHandleRadius),\n      _kSelectionHandleRadius,\n      paint,\n    );\n    // Draw line so it slightly overlaps the circle.\n    canvas.drawLine(\n      const Offset(\n        _kSelectionHandleRadius,\n        2 * _kSelectionHandleRadius - _kSelectionHandleOverlap,\n      ),\n      Offset(\n        _kSelectionHandleRadius,\n        size.height,\n      ),\n      paint,\n    );\n  }\n\n  @override\n  bool shouldRepaint(_TextSelectionHandlePainter oldPainter) =>\n      color != oldPainter.color;\n}"}, {"structure_type": "function", "name": "=", "docstring": "", "module": "cupertino", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/cupertino/text_selection.dart", "file_name": "text_selection.dart", "line": 382, "line_from": 382, "line_to": 471, "snippet": "    final Widget onePhysicalPixelVerticalDivider =\n        SizedBox(width: 1.0 / MediaQuery.of(context).devicePixelRatio);\n    final EdgeInsets arrowPadding = isArrowPointingDown\n        ? EdgeInsets.only(bottom: _kPopupMenuArrowSize.height)\n        : EdgeInsets.only(top: _kPopupMenuArrowSize.height);\n\n    // dmPrint('_CupertinoTextSelectionControls.buildPopupMenu');\n\n    void addPopupMenuButtonIfNeeded(\n      String? text,\n      bool Function(SelectableController?) predicate,\n      bool Function(SelectableController?)? onPressed,\n    ) {\n      if (!predicate(delegate.controller)) {\n        // dmPrint('NOT showing $text menu because isEnabled returned `false`');\n        return;\n      }\n\n      if (items.isNotEmpty) {\n        items.add(onePhysicalPixelVerticalDivider);\n      }\n\n      items.add(CupertinoButton(\n        color: _kPopupMenuBackgroundColor,\n        minSize: _kPopupMenuHeight,\n        padding: _kPopupMenuButtonPadding.add(arrowPadding),\n        borderRadius: null,\n        pressedOpacity: 0.7,\n        onPressed: () => onPressed!(delegate.controller),\n        child: Text(\n          text!,\n          style: _kPopupMenuButtonFontStyle,\n          textScaleFactor: 1.0,\n        ),\n      ));\n    }\n\n    for (final item in delegate.menuItems) {\n      addPopupMenuButtonIfNeeded(item.title, item.isEnabled!, item.handler);\n    }\n\n    return _CupertinoTextSelectionPopupMenu._(\n      barTopY: localBarTopY,\n      arrowTipX: arrowTipX,\n      isArrowPointingDown: isArrowPointingDown,\n      child: items.isEmpty\n          ? null\n          : DecoratedBox(\n              decoration: const BoxDecoration(color: _kPopupMenuDividerColor),\n              child: Row(mainAxisSize: MainAxisSize.min, children: items),\n            ),\n    );\n  }\n\n  /// Builder for iOS text selection edges.\n  @override\n  Widget buildHandle(BuildContext context, TextSelectionHandleType type,\n      double textLineHeight) {\n    // We want a size that's a vertical line the height of the text plus a 18.0\n    // padding in every direction that will constitute the selection drag area.\n    final Size desiredSize = getHandleSize(textLineHeight);\n\n    final Widget handle = SizedBox.fromSize(\n      size: desiredSize,\n      child: CustomPaint(\n        painter: _TextSelectionHandlePainter(\n            CupertinoTheme.of(context).primaryColor),\n      ),\n    );\n\n    // [buildHandle]'s widget is positioned at the selection cursor's bottom\n    // baseline. We transform the handle such that the SizedBox is superimposed\n    // on top of the text selection endpoints.\n    switch (type) {\n      case TextSelectionHandleType.left:\n        return handle;\n      case TextSelectionHandleType.right:\n        // Right handle is a vertical mirror of the left.\n        return Transform(\n          transform: Matrix4.identity()\n            ..translate(desiredSize.width / 2, desiredSize.height / 2)\n            ..rotateZ(math.pi)\n            ..translate(-desiredSize.width / 2, -desiredSize.height / 2),\n          child: handle,\n        );\n      // iOS doesn't draw anything for collapsed selections.\n      case TextSelectionHandleType.collapsed:\n        return const SizedBox();\n    }\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "material", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/material/text_selection.dart", "file_name": "text_selection.dart", "line": 33, "line_from": 33, "line_to": 94, "snippet": "  Widget build(BuildContext context) {\n    final isDarkMode = Theme.of(context).brightness == Brightness.dark;\n    //final localizations = MaterialLocalizations.of(context);\n    final items = delegate!.menuItems\n        .expand<Widget>((e) => e.isEnabled!(delegate!.controller)\n            ? [\n                _Button(\n                  title: e.title,\n                  isDarkMode: isDarkMode,\n                  onPressed: () => e.handler!(delegate!.controller),\n                )\n              ]\n            : [])\n        .toList();\n\n    // If there is no option available, build an empty widget.\n    if (items.isEmpty) {\n      // dmPrint('_TextSelectionPopupMenu is not showing because '\n      //     'items.isEmpty.');\n      return SizedBox.shrink();\n    }\n\n    return Material(\n      elevation: 4.0,\n      color: Theme.of(context).canvasColor,\n      borderRadius: BorderRadius.circular(8),\n      child: Theme(\n        data: ThemeData(buttonTheme: ButtonThemeData(minWidth: 0)),\n        child: Container(\n          height: _kPopupMenuHeight,\n          padding: EdgeInsets.symmetric(horizontal: _kButtonPadding),\n          child: Row(mainAxisSize: MainAxisSize.min, children: items),\n        ),\n      ),\n    );\n  }\n}\n\nconst TextStyle popupMenuTextStyle = TextStyle(\n  fontSize: 16,\n  fontWeight: FontWeight.w500,\n);\n\nclass _Button extends StatelessWidget {\n  const _Button({this.title, this.isDarkMode, this.onPressed});\n\n  final String? title;\n  final bool? isDarkMode;\n  final void Function()? onPressed;\n\n  @override\n  Widget build(BuildContext context) => TextButton(\n        style: TextButton.styleFrom(\n            padding: EdgeInsets.symmetric(horizontal: _kButtonPadding)),\n        onPressed: onPressed,\n        child: Text(\n          title!,\n          style: popupMenuTextStyle.copyWith(\n              color: isDarkMode! ? Colors.white : Colors.black),\n        ),\n      );\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "material", "file_path": "sunnah_shop_flutter/lib/core/external_packages/selectable/src/material/text_selection.dart", "file_name": "text_selection.dart", "line": 140, "line_from": 140, "line_to": 263, "snippet": "  void paint(Canvas canvas, Size size) {\n    final Paint paint = Paint()..color = color!;\n    final double radius = size.width / 2.0;\n    canvas.drawCircle(Offset(radius, radius), radius, paint);\n    canvas.drawRect(Rect.fromLTWH(0.0, 0.0, radius, radius), paint);\n  }\n\n  @override\n  bool shouldRepaint(_TextSelectionHandlePainter oldPainter) {\n    return color != oldPainter.color;\n  }\n}\n\nclass _MaterialTextSelectionControls extends SelectionControls {\n  /// Returns the size of the Material handle.\n  @override\n  Size getHandleSize(double textLineHeight) =>\n      const Size(_kHandleSize, _kHandleSize);\n\n  /// Builder for material-style copy/paste text selection popup menu.\n  @override\n  Widget buildPopupMenu(\n    BuildContext context,\n    Rect viewport,\n    List<Rect>? selectionRects,\n    SelectionDelegate delegate,\n  ) {\n    assert(debugCheckHasMediaQuery(context));\n    assert(debugCheckHasMaterialLocalizations(context));\n\n    const double popupMenuHeightNeeded = _kPopupMenuScreenPadding +\n        _kPopupMenuHeight +\n        _kPopupMenuContentDistance;\n\n    var localBarTopY = 0.0;\n\n    // Will fit above?\n    if (selectionRects!.first.top - viewport.top >= popupMenuHeightNeeded) {\n      localBarTopY = math.min(\n          viewport.bottom - (_kPopupMenuContentDistance * 3.0),\n          selectionRects.first.top - _kPopupMenuContentDistance);\n    }\n\n    // Will fit below?\n    else if (viewport.bottom - selectionRects.last.bottom >=\n        _kHandleSize + _kPopupMenuHeight + _kPopupMenuContentDistance) {\n      localBarTopY = math.max(\n          viewport.top + _kPopupMenuContentDistance + _kPopupMenuHeight,\n          selectionRects.last.bottom +\n              _kHandleSize +\n              _kPopupMenuHeight +\n              _kPopupMenuContentDistance);\n    }\n\n    // Show in center.\n    else {\n      localBarTopY = viewport.center.dy;\n    }\n\n    final Offset preciseMidpoint = Offset(\n        (selectionRects.last.left + selectionRects.first.right) / 2.0,\n        localBarTopY);\n\n    return CustomSingleChildLayout(\n      delegate: _TextSelectionPopupMenuLayout(\n        viewport.width,\n        preciseMidpoint,\n      ),\n      child: _TextSelectionPopupMenu(delegate: delegate),\n    );\n  }\n\n  /// Builder for material-style text selection handles.\n  @override\n  Widget buildHandle(\n      BuildContext context, TextSelectionHandleType type, double textHeight) {\n    final ThemeData theme = Theme.of(context);\n    final Color handleColor =\n        TextSelectionTheme.of(context).selectionHandleColor ??\n            theme.colorScheme.primary;\n    final Widget handle = SizedBox(\n      width: _kHandleSize,\n      height: _kHandleSize,\n      child: CustomPaint(\n        painter: _TextSelectionHandlePainter(\n          color: handleColor,\n        ),\n      ),\n    );\n\n    // [handle] is a circle, with a rectangle in the top left quadrant of that\n    // circle (an onion pointing to 10:30). We rotate [handle] to point\n    // straight up or up-right depending on the handle type.\n    switch (type) {\n      case TextSelectionHandleType.left: // points up-right\n        return Transform.rotate(\n          angle: math.pi / 2.0,\n          child: handle,\n        );\n      case TextSelectionHandleType.right: // points up-left\n        return handle;\n      case TextSelectionHandleType.collapsed: // points up\n        return Transform.rotate(\n          angle: math.pi / 4.0,\n          child: handle,\n        );\n    }\n  }\n\n  /// Gets anchor for material-style text selection handles.\n  ///\n  /// See [SelectionControls.getHandleAnchor].\n  @override\n  Offset getHandleAnchor(TextSelectionHandleType type, double textLineHeight) {\n    switch (type) {\n      case TextSelectionHandleType.left:\n        return const Offset(_kHandleSize, 0);\n      case TextSelectionHandleType.right:\n        return Offset.zero;\n      default:\n        return const Offset(_kHandleSize / 2, -4);\n    }\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "expansion_widget", "file_path": "sunnah_shop_flutter/lib/core/external_packages/expansion_widget/title_builder.dart", "file_name": "title_builder.dart", "line": 26, "line_from": 26, "line_to": 150, "snippet": "  Widget build(BuildContext context) {\n    return InkWell(\n        onTap: () => toogleFunction!(animated: true),\n        child: MediaQuery(\n          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Container(\n              padding: EdgeInsets.symmetric(vertical: active! ? Get.width * .01 : Get.width * .035),\n              child: Row(\n                crossAxisAlignment: CrossAxisAlignment.center,\n                children: [\n                  Expanded(\n                    child: Padding(\n                      padding: paddingH20,\n                      child: Row(\n                        mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                        children: [\n                          Flexible(\n                            child: Text(\n                              title!,\n                              overflow: TextOverflow.clip,\n                              style: TextStyle(\n                                  fontSize: Get.width * .04,\n                                  // fontWeight: FontWeight.w600,\n                                  color: animationValue! < 0.5\n                                      ? Theme.of(context).textTheme.headline2!.color!\n                                      : Theme.of(context).secondaryHeaderColor),\n                            ),\n                          ),\n                          isExpaned!\n                              ? Transform.rotate(\n                                  angle: math.pi * animationValue! / 1,\n                                  alignment: Alignment.center,\n                                  child: Icon(CupertinoIcons.chevron_down,\n                                      color: animationValue! < 0.5\n                                          ? Colors.grey\n                                          : Theme.of(context).secondaryHeaderColor,\n                                      size: Get.width * .04),\n                                )\n                              : const SizedBox.shrink(),\n                        ],\n                      ),\n                    ),\n                  ),\n                  active!\n                      ? Container(\n                          width: 4.3,\n                          height: Get.width * .12,\n                          decoration: BoxDecoration(\n                            borderRadius: const BorderRadius.only(\n                              topLeft: Radius.circular(100),\n                              bottomLeft: Radius.circular(100),\n                            ),\n                            color: Theme.of(context).secondaryHeaderColor,\n                          ),\n                        )\n                      : const SizedBox.shrink()\n                ],\n              ),\n            ),\n          ),\n        ));\n  }\n}\n\nclass TitleBuilder extends StatelessWidget {\n  const TitleBuilder(\n      {Key? key,\n      @required this.icon,\n      @required this.toogleFunction,\n      @required this.title,\n      @required this.animationValue,\n      e})\n      : super(key: key);\n\n  final Function? toogleFunction;\n  final String? title;\n  final String? icon;\n  final double? animationValue;\n\n  @override\n  Widget build(BuildContext context) {\n    return Obx(() => InkWell(\n        onTap: () => toogleFunction!(animated: true),\n        child: MediaQuery(\n          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Row(\n              crossAxisAlignment: CrossAxisAlignment.center,\n              children: [\n                Expanded(\n                  child: Padding(\n                    padding: paddingRight12,\n                    child: Row(\n                      mainAxisAlignment: MainAxisAlignment.end,\n                      children: [\n                        // SVGTitle(\n                        //     color: settings.nightMode.value\n                        //         ? Colors.white\n                        //         : animationValue! < 0.5\n                        //             ? Theme.of(context).textTheme.headline2!.color!\n                        //             : Theme.of(context).secondaryHeaderColor,\n                        //     title: title,\n                        //     icon: icon),\n                        Transform.rotate(\n                          angle: math.pi * animationValue! / 1,\n                          alignment: Alignment.center,\n                          child: Icon(CupertinoIcons.chevron_down,\n                              color: animationValue! < 0.5 || settingsC.nightMode.value\n                                  ? Colors.grey\n                                  : Theme.of(context).secondaryHeaderColor,\n                              size: Get.width * .04),\n                        )\n                      ],\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        )));\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "The builder of title.\n\nTypically a [Button] widget that call [toggleFunction] when pressed.", "module": "expansion_widget", "file_path": "sunnah_shop_flutter/lib/core/external_packages/expansion_widget/expansion_widget.dart", "file_name": "expansion_widget.dart", "line": 28, "line_from": 28, "line_to": 85, "snippet": "  final Widget Function(double animationValue, double easeInValue,\n      bool isExpanded, Function({bool animated}) toggleFunction) titleBuilder;\n\n  /// Function to save expansion state\n  /// Called when expansion state changed\n  final void Function(bool isExpanded)? onSaveState;\n\n  /// function to restore expansion state.\n  /// Return null if there is no state to store;\n  /// in this case, [initiallyExpanded] will be used\n  final bool? Function()? onRestoreState;\n\n  /// The length of time of animation\n  final Duration duration;\n\n  /// Called when the widget expands or collapses.\n  ///\n  /// When the widget starts expanding, this function is called with the value\n  /// true. When the tile starts collapsing, this function is called with\n  /// the value false.\n  final void Function(bool)? onExpansionChanged;\n\n  /// Called when the widget will change expanded state.\n  ///\n  /// When the widget is going to start expanding/collapsing, this function is\n  /// called with the value true/false.\n  ///\n  /// Return false to prevent expanded state to change.\n  /// Return true(default) to allow expanded state changing.\n  final bool Function(bool)? onExpansionWillChange;\n\n  /// The widget that are displayed when the expansionWidget expands.\n  final Widget content;\n\n  /// Specifies if the expansionWidget is initially expanded (true) or collapsed (false, the default).\n  final bool initiallyExpanded;\n\n  /// Specifies whether the state of the content is maintained when the expansionWidget expands and collapses.\n  ///\n  /// When true, the content are kept in the tree while the expansionWidget is collapsed.\n  /// When false (default), the content are removed from the tree when the expansionWidget is\n  /// collapsed and recreated upon expansion.\n  final bool maintainState;\n\n  /// Specifies the alignment of [content], which are arranged in a column when\n  /// the expansionWidget is expanded.\n  ///\n  /// The internals of the expanded expansionWidget make use of a [Column] widget for\n  /// [content], and [Align] widget to align the column. The `expandedAlignment`\n  /// parameter is passed directly into the [Align].\n  ///\n  /// Modifying this property controls the alignment of the column within the\n  /// expanded expansionWidget.\n  final Alignment expandedAlignment;\n\n  @override\n  ExpansionWidgetState createState() => ExpansionWidgetState();\n}"}, {"structure_type": "function", "name": "setupParentData", "docstring": "", "module": "rendering", "file_path": "sunnah_shop_flutter/lib/core/external_packages/staggered_grid_view/rendering/staggered_grid.dart", "file_name": "staggered_grid.dart", "line": 220, "line_from": 220, "line_to": 425, "snippet": "  void setupParentData(RenderObject child) {\n    if (child.parentData is! StaggeredGridParentData) {\n      child.parentData = StaggeredGridParentData();\n    }\n  }\n\n  StaggeredGridParentData _getParentData(RenderBox child) {\n    return child.parentData as StaggeredGridParentData;\n  }\n\n  @override\n  double computeMinIntrinsicWidth(double height) =>\n      _computeIntrinsicWidth(height);\n\n  @override\n  double computeMaxIntrinsicWidth(double height) =>\n      _computeIntrinsicWidth(height);\n\n  double _computeIntrinsicWidth(double height) => 0;\n\n  @override\n  double computeMinIntrinsicHeight(double width) =>\n      _computeIntrinsicHeight(width);\n\n  @override\n  double computeMaxIntrinsicHeight(double width) =>\n      _computeIntrinsicHeight(width);\n\n  double _computeIntrinsicHeight(double width) => 0;\n\n  @override\n  double? computeDistanceToActualBaseline(TextBaseline baseline) {\n    return defaultComputeDistanceToHighestActualBaseline(baseline);\n  }\n\n  bool _hasVisualOverflow = false;\n\n  @override\n  Size computeDryLayout(BoxConstraints constraints) {\n    final size = _computeSize(\n      constraints: constraints,\n      layoutChild: _dryLayoutChild,\n    );\n    return constraints.constrain(size);\n  }\n\n  Size _computeSize({\n    required BoxConstraints constraints,\n    required _ChildLayouter layoutChild,\n  }) {\n    final crossAxisExtent = mainAxis == Axis.vertical\n        ? constraints.maxWidth\n        : constraints.maxHeight;\n    final crossAxisCount =\n        delegate.getCrossAxisCount(crossAxisExtent, crossAxisSpacing);\n    final stride = (crossAxisExtent + crossAxisSpacing) / crossAxisCount;\n\n    int computeCrossAxisCellCount(\n      StaggeredGridParentData childParentData,\n      int crossAxisCount,\n    ) {\n      return math.min(\n        childParentData.crossAxisCellCount ?? 1,\n        crossAxisCount,\n      );\n    }\n\n    final offsets = List.filled(crossAxisCount, 0.0);\n    RenderBox? child = firstChild;\n    while (child != null) {\n      final childParentData = _getParentData(child);\n      final crossAxisCellCount = computeCrossAxisCellCount(\n        childParentData,\n        crossAxisCount,\n      );\n      final crossAxisExtent = stride * crossAxisCellCount - crossAxisSpacing;\n      final shouldFitContent = childParentData.mainAxisExtent == null &&\n          childParentData.mainAxisCellCount == null;\n      double mainAxisExtent = 0;\n      if (shouldFitContent) {\n        final childConstraints = mainAxis == Axis.vertical\n            ? BoxConstraints.tightFor(width: crossAxisExtent)\n            : BoxConstraints.tightFor(height: crossAxisExtent);\n        layoutChild(child, childConstraints, parentUsesSize: true);\n        final childSize = child.size;\n        mainAxisExtent =\n            mainAxis == Axis.vertical ? childSize.height : childSize.width;\n      } else {\n        final mainAxisCellCount = childParentData.mainAxisCellCount ?? 1;\n        final mainAxisFixedExtent = childParentData.mainAxisExtent;\n        mainAxisExtent =\n            mainAxisFixedExtent ?? stride * mainAxisCellCount - mainAxisSpacing;\n\n        // We set the real mainAxisExtent in case we need it if the axis direction\n        // is reversed.\n        childParentData._realMainAxisExtent = mainAxisExtent;\n\n        final childSize = mainAxis == Axis.vertical\n            ? Size(crossAxisExtent, mainAxisExtent)\n            : Size(mainAxisExtent, crossAxisExtent);\n        final childConstraints = BoxConstraints.tight(childSize);\n        layoutChild(child, childConstraints);\n      }\n\n      final origin = _findBestCandidate(offsets, crossAxisCellCount);\n      final mainAxisOffset = origin.mainAxisOffset;\n      final crossAxisOffset = origin.crossAxisIndex * stride;\n      final offset = mainAxis == Axis.vertical\n          ? Offset(crossAxisOffset, mainAxisOffset)\n          : Offset(mainAxisOffset, crossAxisOffset);\n\n      childParentData.offset = offset;\n\n      // Don't forget to update the offsets.\n      final nextTileOffset = mainAxisOffset + mainAxisExtent + mainAxisSpacing;\n      for (int i = 0; i < crossAxisCellCount; i++) {\n        offsets[origin.crossAxisIndex + i] = nextTileOffset;\n      }\n\n      child = childAfter(child);\n    }\n\n    final mainAxisExtent = offsets.reduce(math.max) - mainAxisSpacing;\n    if (axisDirectionIsReversed(axisDirection)) {\n      // If the axis direction is reversed, we need to reverse the main axis\n      // offsets.\n      child = firstChild;\n      while (child != null) {\n        final childParentData = _getParentData(child);\n        final offset = childParentData.offset;\n        final crossAxisOffset = offset.getCrossAxisOffset(mainAxis);\n        final mainAxisOffset = mainAxisExtent -\n            offset.getMainAxisOffset(mainAxis) -\n            childParentData._realMainAxisExtent!;\n        final newOffset = mainAxis == Axis.vertical\n            ? Offset(crossAxisOffset, mainAxisOffset)\n            : Offset(mainAxisOffset, crossAxisOffset);\n        childParentData.offset = newOffset;\n        child = childAfter(child);\n      }\n    }\n\n    if (mainAxis == Axis.vertical && textDirection == TextDirection.rtl) {\n      // If the direction is vertical && the text direction is right-to-left, we\n      // need to reverse the cross axis offsets.\n      child = firstChild;\n      while (child != null) {\n        final childParentData = _getParentData(child);\n        final crossAxisCellCount = computeCrossAxisCellCount(\n          childParentData,\n          crossAxisCount,\n        );\n        final crossAxisCellExtent =\n            stride * crossAxisCellCount - crossAxisSpacing;\n        final offset = childParentData.offset;\n        final crossAxisOffset =\n            crossAxisExtent - offset.dx - crossAxisCellExtent;\n        final mainAxisOffset = offset.dy;\n        final newOffset = Offset(crossAxisOffset, mainAxisOffset);\n        childParentData.offset = newOffset;\n        child = childAfter(child);\n      }\n    }\n\n    final size = mainAxis == Axis.vertical\n        ? Size(crossAxisExtent, mainAxisExtent)\n        : Size(mainAxisExtent, crossAxisExtent);\n    return size;\n  }\n\n  @override\n  void performLayout() {\n    final requestedSize = _computeSize(\n      constraints: constraints,\n      layoutChild: _layoutChild,\n    );\n    size = constraints.constrain(requestedSize);\n    _hasVisualOverflow = size != requestedSize;\n  }\n\n  @override\n  bool hitTestChildren(BoxHitTestResult result, {required Offset position}) {\n    return defaultHitTestChildren(result, position: position);\n  }\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    if (_hasVisualOverflow) {\n      context.pushClipRect(\n        needsCompositing,\n        offset,\n        Offset.zero & size,\n        defaultPaint,\n      );\n    } else {\n      defaultPaint(context, offset);\n    }\n  }\n}\n\nclass _TileOrigin {\n  const _TileOrigin(this.crossAxisIndex, this.mainAxisOffset);\n\n  final int crossAxisIndex;\n  final double mainAxisOffset;\n}"}, {"structure_type": "class", "name": "UniformTrackParentData extends ContainerBoxParentData<RenderBox>", "docstring": "", "module": "rendering", "file_path": "sunnah_shop_flutter/lib/core/external_packages/staggered_grid_view/rendering/uniform_track.dart", "file_name": "uniform_track.dart", "line": 7, "line_from": 7, "line_to": 177, "snippet": "class UniformTrackParentData extends ContainerBoxParentData<RenderBox> {}\n\nclass RenderUniformTrack extends RenderBox\n    with\n        ContainerRenderObjectMixin<RenderBox, UniformTrackParentData>,\n        RenderBoxContainerDefaultsMixin<RenderBox, UniformTrackParentData> {\n  RenderUniformTrack({\n    List<RenderBox>? children,\n    double spacing = 0,\n    required int division,\n    required AxisDirection direction,\n  })  : assert(spacing >= 0),\n        assert(division > 0),\n        _spacing = spacing,\n        _direction = direction,\n        _isHorizontal = axisDirectionToAxis(direction) == Axis.horizontal,\n        _isDirectionReversed = axisDirectionIsReversed(direction),\n        _division = division {\n    addAll(children);\n  }\n\n  double get spacing => _spacing;\n  double _spacing;\n\n  set spacing(double value) {\n    assert(value >= 0);\n    if (_spacing == value) {\n      return;\n    }\n    _spacing = value;\n    markNeedsLayout();\n  }\n\n  AxisDirection get direction => _direction;\n  AxisDirection _direction;\n\n  set direction(AxisDirection value) {\n    if (_direction == value) {\n      return;\n    }\n    _direction = value;\n    _isHorizontal = axisDirectionToAxis(value) == Axis.horizontal;\n    _isDirectionReversed = axisDirectionIsReversed(value);\n    markNeedsLayout();\n  }\n\n  bool _isHorizontal;\n  bool _isDirectionReversed;\n\n  int get division => _division;\n  int _division;\n\n  set division(int value) {\n    assert(value > 0);\n    if (_division == value) {\n      return;\n    }\n    _division = value;\n    markNeedsLayout();\n  }\n\n  @override\n  void setupParentData(RenderBox child) {\n    if (child.parentData is! UniformTrackParentData) {\n      child.parentData = UniformTrackParentData();\n    }\n  }\n\n  UniformTrackParentData _getParentData(RenderBox child) {\n    return child.parentData as UniformTrackParentData;\n  }\n\n  @override\n  bool hitTestChildren(BoxHitTestResult result, {required Offset position}) {\n    return defaultHitTestChildren(result, position: position);\n  }\n\n  @override\n  Size computeDryLayout(BoxConstraints constraints) {\n    return _computeSize(constraints, ChildLayoutHelper.dryLayoutChild);\n  }\n\n  Size _computeSize(BoxConstraints constraints, ChildLayouter layoutChild) {\n    final mainAxisExtent =\n        _isHorizontal ? constraints.maxWidth : constraints.maxHeight;\n    final childMainAxisExtent =\n        ((mainAxisExtent + spacing) / division) - spacing;\n    final childConstraints = _isHorizontal\n        ? BoxConstraints.tightFor(width: childMainAxisExtent)\n        : BoxConstraints.tightFor(height: childMainAxisExtent);\n    RenderBox? child = firstChild;\n\n    double getChildCrossAxisExtent(Size size) {\n      return _isHorizontal ? size.height : size.width;\n    }\n\n    double maxChildCrossAxisExtent = 0;\n\n    // First pass to get the maximum child cross axis extent.\n    while (child != null) {\n      final size = layoutChild(child, childConstraints);\n      maxChildCrossAxisExtent = math.max(\n        maxChildCrossAxisExtent,\n        getChildCrossAxisExtent(size),\n      );\n      child = childAfter(child);\n    }\n\n    return size = constraints.constrain(\n      _isHorizontal\n          ? Size(mainAxisExtent, maxChildCrossAxisExtent)\n          : Size(maxChildCrossAxisExtent, mainAxisExtent),\n    );\n  }\n\n  @override\n  void performLayout() {\n    size = _computeSize(constraints, ChildLayoutHelper.layoutChild);\n    final mainAxisExtent =\n        _isHorizontal ? constraints.maxWidth : constraints.maxHeight;\n    final childMainAxisExtent =\n        ((mainAxisExtent + spacing) / division) - spacing;\n    final maxChildCrossAxisExtent = _isHorizontal ? size.height : size.width;\n\n    double getChildCrossAxisExtent(RenderBox child) {\n      return _isHorizontal ? child.size.height : child.size.width;\n    }\n\n    // Second pass to position the children and relayout those who have not the\n    // maximum cross axis extent.\n    final secondPassChildConstraints = _isHorizontal\n        ? BoxConstraints.tightFor(\n            width: childMainAxisExtent,\n            height: maxChildCrossAxisExtent,\n          )\n        : BoxConstraints.tightFor(\n            height: childMainAxisExtent,\n            width: maxChildCrossAxisExtent,\n          );\n\n    RenderBox? child = firstChild;\n    final stride = childMainAxisExtent + spacing;\n    int index = 0;\n\n    double getMainAxisPosition(int index) {\n      final effectiveIndex =\n          _isDirectionReversed ? division - index - 1 : index;\n      return effectiveIndex * stride;\n    }\n\n    while (child != null) {\n      if (getChildCrossAxisExtent(child) != maxChildCrossAxisExtent) {\n        child.layout(secondPassChildConstraints, parentUsesSize: true);\n      }\n      final childParentData = _getParentData(child);\n      final childMainAxisPosition = getMainAxisPosition(index);\n      childParentData.offset = _isHorizontal\n          ? Offset(childMainAxisPosition, 0)\n          : Offset(0, childMainAxisPosition);\n      index++;\n      child = childParentData.nextSibling;\n    }\n  }\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    defaultPaint(context, offset);\n  }\n}\n"}, {"structure_type": "function", "name": "child,", "docstring": "", "module": "widgets", "file_path": "sunnah_shop_flutter/lib/core/external_packages/staggered_grid_view/widgets/staggered_grid_tile.dart", "file_name": "staggered_grid_tile.dart", "line": 12, "line_from": 12, "line_to": 25, "snippet": "    required Widget child,\n  })  : assert(crossAxisCellCount > 0),\n        assert(mainAxisCellCount == null || mainAxisCellCount > 0),\n        assert(mainAxisExtent == null || mainAxisExtent > 0),\n        super(key: key, child: child);\n\n  /// Creates a [StaggeredGrid]'s tile that takes a fixed number of cells along\n  /// the main axis.\n  const StaggeredGridTile.count({\n    Key? key,\n    required int crossAxisCellCount,\n    required num mainAxisCellCount,\n    required Widget child,\n  }) : this._("}, {"structure_type": "function", "name": "child,", "docstring": "", "module": "widgets", "file_path": "sunnah_shop_flutter/lib/core/external_packages/staggered_grid_view/widgets/staggered_grid_tile.dart", "file_name": "staggered_grid_tile.dart", "line": 39, "line_from": 39, "line_to": 54, "snippet": "    required Widget child,\n  }) : this._(\n          key: key,\n          crossAxisCellCount: crossAxisCellCount,\n          mainAxisCellCount: null,\n          mainAxisExtent: mainAxisExtent,\n          child: child,\n        );\n\n  /// Creates a [StaggeredGrid]'s tile that fits its main axis extent to its\n  /// [child]'s content\n  const StaggeredGridTile.fit({\n    Key? key,\n    required int crossAxisCellCount,\n    required Widget child,\n  }) : this._("}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "sunnah_shop_flutter/lib/core/external_packages/staggered_grid_view/widgets/sliver_aligned_grid.dart", "file_name": "sliver_aligned_grid.dart", "line": 130, "line_from": 130, "line_to": 196, "snippet": "  Widget build(BuildContext context) {\n    final localItemCount = itemCount;\n    return SliverLayoutBuilder(\n      builder: (context, constraints) {\n        final crossAxisCount = gridDelegate.getCrossAxisCount(\n          constraints,\n          crossAxisSpacing,\n        );\n        final listItemCount = localItemCount == null\n            ? null\n            : ((localItemCount + crossAxisCount - 1) ~/ crossAxisCount) * 2 - 1;\n        return SliverList(\n          delegate: SliverChildBuilderDelegate(\n            (context, index) {\n              if (index.isOdd) {\n                return _Gap(mainAxisExtent: mainAxisSpacing);\n              }\n\n              final startIndex = (index ~/ 2) * crossAxisCount;\n              final children = [\n                for (int i = 0; i < crossAxisCount; i++)\n                  _buildItem(context, startIndex + i, itemCount),\n              ].whereType<Widget>();\n\n              if (children.isEmpty) {\n                return null;\n              }\n\n              return UniformTrack(\n                direction: constraints.crossAxisDirection,\n                division: crossAxisCount,\n                spacing: crossAxisSpacing,\n                children: [...children],\n              );\n            },\n            childCount: listItemCount,\n          ),\n        );\n      },\n    );\n  }\n\n  Widget? _buildItem(BuildContext context, int index, int? childCount) {\n    if (index < 0 || (childCount != null && index >= childCount)) {\n      return null;\n    }\n\n    return itemBuilder(context, index);\n  }\n}\n\nclass _Gap extends StatelessWidget {\n  const _Gap({\n    Key? key,\n    required this.mainAxisExtent,\n  }) : super(key: key);\n\n  final double mainAxisExtent;\n\n  @override\n  Widget build(BuildContext context) {\n    final axis = axisDirectionToAxis(Scrollable.of(context)!.axisDirection);\n    return axis == Axis.vertical\n        ? SizedBox(height: mainAxisExtent)\n        : SizedBox(width: mainAxisExtent);\n  }\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "animated-segmented-tab", "file_path": "sunnah_shop_flutter/lib/core/external_packages/animated-segmented-tab/tab_bar.dart", "file_name": "tab_bar.dart", "line": 101, "line_from": 101, "line_to": 472, "snippet": "  void initState() {\n    super.initState();\n    _internalAnimationController = AnimationController(vsync: this);\n    _internalAnimationController.addListener(_handleInternalAnimationTick);\n  }\n\n  @override\n  void dispose() {\n    _internalAnimationController.removeListener(_handleInternalAnimationTick);\n    _internalAnimationController.dispose();\n    super.dispose();\n  }\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    _updateTabController();\n  }\n\n  @override\n  void didUpdateWidget(SegmentedTabControl oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.controller != oldWidget.controller) {\n      _updateTabController();\n    }\n  }\n\n  bool get _controllerIsValid => _controller?.animation != null;\n\n  void _updateTabController() {\n    final TabController? newController =\n        widget.controller ?? DefaultTabController.of(context);\n    assert(() {\n      if (newController == null) {\n        throw FlutterError(\n          'No TabController for ${widget.runtimeType}.\\n'\n          'When creating a ${widget.runtimeType}, you must either provide an explicit '\n          'TabController using the \"controller\" property, or you must ensure that there '\n          'is a DefaultTabController above the ${widget.runtimeType}.\\n'\n          'In this case, there was neither an explicit controller nor a default controller.',\n        );\n      }\n      return true;\n    }());\n\n    if (newController == _controller) {\n      return;\n    }\n\n    if (_controllerIsValid) {\n      _controller!.animation!.removeListener(_handleTabControllerAnimationTick);\n    }\n    _controller = newController;\n    if (_controller != null) {\n      _controller!.animation!.addListener(_handleTabControllerAnimationTick);\n    }\n  }\n\n  void _handleInternalAnimationTick() {\n    setState(() {\n      _currentIndicatorAlignment = _internalAnimation.value;\n    });\n  }\n\n  void _handleTabControllerAnimationTick() {\n    final currentValue = _controller!.animation!.value;\n    _animateIndicatorTo(_animationValueToAlignment(currentValue));\n  }\n\n  void _updateControllerIndex() {\n    _controller!.index = _internalIndex;\n  }\n\n  TickerFuture _animateIndicatorToNearest(\n      Offset pixelsPerSecond, double width) {\n    final nearest = _internalIndex;\n    final target = _animationValueToAlignment(nearest.toDouble());\n    _internalAnimation = _internalAnimationController.drive(AlignmentTween(\n      begin: _currentIndicatorAlignment,\n      end: target,\n    ));\n    final unitsPerSecondX = pixelsPerSecond.dx / width;\n    final unitsPerSecond = Offset(unitsPerSecondX, 0);\n    final unitVelocity = unitsPerSecond.distance;\n\n    const spring = SpringDescription(\n      mass: 30,\n      stiffness: 1,\n      damping: 1,\n    );\n\n    final simulation = SpringSimulation(spring, 0, 1, -unitVelocity);\n\n    return _internalAnimationController.animateWith(simulation);\n  }\n\n  TickerFuture _animateIndicatorTo(Alignment target) {\n    _internalAnimation = _internalAnimationController.drive(AlignmentTween(\n      begin: _currentIndicatorAlignment,\n      end: target,\n    ));\n\n    return _internalAnimationController.fling();\n  }\n\n  Alignment _animationValueToAlignment(double? value) {\n    if (value == null) {\n      return const Alignment(-1, 0);\n    }\n    final inPercents = value / (_controller!.length - 1);\n    final x = inPercents * 2 - 1;\n    return Alignment(x, 0);\n  }\n\n  int get _internalIndex => _alignmentToIndex(_currentIndicatorAlignment);\n\n  int _alignmentToIndex(Alignment alignment) {\n    final currentPosition =\n        (_controller!.length - 1) * _xToPercentsCoefficient(alignment);\n    return currentPosition.round();\n  }\n\n  /// Converts [Alignment.x] value in range -1..1 to 0..1 percents coefficient\n  double _xToPercentsCoefficient(Alignment alignment) {\n    return (alignment.x + 1) / 2;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final currentTab = widget.tabs[_internalIndex];\n\n    final textStyle =\n        widget.textStyle ?? Theme.of(context).textTheme.bodyText2!;\n\n    final selectedTabTextColor = currentTab.selectedTextColor ??\n        widget.selectedTabTextColor ??\n        Colors.white;\n\n    final tabTextColor = currentTab.textColor ??\n        widget.tabTextColor ??\n        Colors.white.withOpacity(0.7);\n\n    final backgroundColor = currentTab.backgroundColor ??\n        widget.backgroundColor ??\n        Theme.of(context).colorScheme.background;\n\n    final indicatorColor = currentTab.color ??\n        widget.indicatorColor ??\n        Theme.of(context).indicatorColor;\n\n    final borderRadius = BorderRadius.all(widget.radius);\n\n    return DefaultTextStyle(\n      style: widget.textStyle ?? DefaultTextStyle.of(context).style,\n      child: LayoutBuilder(builder: (context, constraints) {\n        final indicatorWidth =\n            (constraints.maxWidth - widget.indicatorPadding.horizontal) /\n                _controller!.length;\n\n        return ClipRRect(\n          borderRadius: BorderRadius.all(widget.radius),\n          child: SizedBox(\n            height: widget.height,\n            child: Stack(\n              children: [\n                AnimatedContainer(\n                  duration: kTabScrollDuration,\n                  curve: Curves.ease,\n                  decoration: BoxDecoration(\n                    color: backgroundColor,\n                    borderRadius: borderRadius,\n                  ),\n                  child: Material(\n                    color: Colors.transparent,\n                    child: _Labels(\n                      radius: widget.radius,\n                      splashColor: widget.splashColor,\n                      splashHighlightColor: widget.splashHighlightColor,\n                      callbackBuilder: _onTabTap(),\n                      availableSpace: constraints.maxWidth,\n                      tabs: widget.tabs,\n                      currentIndex: _internalIndex,\n                      textStyle: textStyle.copyWith(\n                        color: tabTextColor,\n                      ),\n                    ),\n                  ),\n                ),\n                Align(\n                  alignment: _currentIndicatorAlignment,\n                  child: GestureDetector(\n                    onPanDown: _onPanDown(),\n                    onPanUpdate: _onPanUpdate(constraints),\n                    onPanEnd: _onPanEnd(constraints),\n                    child: _SqueezeAnimated(\n                      currentTilePadding: _currentTilePadding,\n                      squeezeDuration: widget.squeezeDuration,\n                      builder: (_) => AnimatedContainer(\n                        duration: kTabScrollDuration,\n                        curve: Curves.ease,\n                        width: indicatorWidth,\n                        height:\n                            widget.height - widget.indicatorPadding.vertical,\n                        decoration: BoxDecoration(\n                          color: indicatorColor,\n                          borderRadius: BorderRadius.all(widget.radius),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n                _SqueezeAnimated(\n                  currentTilePadding: _currentTilePadding,\n                  squeezeDuration: widget.squeezeDuration,\n                  builder: (squeezePadding) => ClipPath(\n                    clipper: RRectRevealClipper(\n                      radius: widget.radius,\n                      clipperSize: Size(\n                        indicatorWidth,\n                        widget.height -\n                            widget.indicatorPadding.vertical -\n                            squeezePadding.vertical,\n                      ),\n                      offset: Offset(\n                        _xToPercentsCoefficient(_currentIndicatorAlignment) *\n                            (constraints.maxWidth - indicatorWidth),\n                        0,\n                      ),\n                    ),\n                    child: IgnorePointer(\n                      child: _Labels(\n                        radius: widget.radius,\n                        splashColor: widget.splashColor,\n                        splashHighlightColor: widget.splashHighlightColor,\n                        availableSpace: constraints.maxWidth,\n                        tabs: widget.tabs,\n                        currentIndex: _internalIndex,\n                        textStyle: textStyle.copyWith(\n                          color: selectedTabTextColor,\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        );\n      }),\n    );\n  }\n\n  VoidCallback Function(int)? _onTabTap() {\n    if (_controller!.indexIsChanging) {\n      return null;\n    }\n    return (int index) => () {\n          _internalAnimationController.stop();\n          _controller!.animateTo(index);\n        };\n  }\n\n  GestureDragDownCallback? _onPanDown() {\n    if (_controller!.indexIsChanging) {\n      return null;\n    }\n    return (details) {\n      _internalAnimationController.stop();\n      setState(() {\n        _currentTilePadding =\n            EdgeInsets.symmetric(vertical: widget.squeezeIntensity);\n      });\n    };\n  }\n\n  GestureDragUpdateCallback? _onPanUpdate(BoxConstraints constraints) {\n    if (_controller!.indexIsChanging) {\n      return null;\n    }\n    return (details) {\n      double x = _currentIndicatorAlignment.x +\n          details.delta.dx / (constraints.maxWidth / 2);\n      if (x < -1) {\n        x = -1;\n      } else if (x > 1) {\n        x = 1;\n      }\n      setState(() {\n        _currentIndicatorAlignment = Alignment(x, 0);\n      });\n    };\n  }\n\n  GestureDragEndCallback _onPanEnd(BoxConstraints constraints) {\n    return (details) {\n      _animateIndicatorToNearest(\n        details.velocity.pixelsPerSecond,\n        constraints.maxWidth,\n      );\n      _updateControllerIndex();\n      setState(() {\n        _currentTilePadding = EdgeInsets.zero;\n      });\n    };\n  }\n}\n\nclass _Labels extends StatelessWidget {\n  _Labels({\n    Key? key,\n    this.callbackBuilder,\n    required this.availableSpace,\n    required this.tabs,\n    required this.currentIndex,\n    required this.textStyle,\n    this.radius = const Radius.circular(20),\n    this.splashColor,\n    this.splashHighlightColor,\n  }) : super(key: key);\n\n  final VoidCallback Function(int index)? callbackBuilder;\n  final double availableSpace;\n  final List<SegmentTab> tabs;\n  final int currentIndex;\n  final TextStyle textStyle;\n  final EdgeInsets tabPadding = const EdgeInsets.symmetric(horizontal: 8);\n  final Radius radius;\n  final Color? splashColor;\n  final Color? splashHighlightColor;\n\n  late final width = availableSpace / tabs.length;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.spaceAround,\n        children: List.generate(\n          tabs.length,\n          (index) {\n            final tab = tabs[index];\n            return SizedBox(\n              width: width,\n              child: InkWell(\n                splashColor: tab.splashColor ?? splashColor,\n                highlightColor:\n                    tab.splashHighlightColor ?? splashHighlightColor,\n                borderRadius: BorderRadius.all(radius),\n                onTap: callbackBuilder?.call(index),\n                child: Padding(\n                  padding: tabPadding,\n                  child: Center(\n                    child: AnimatedDefaultTextStyle(\n                      duration: kTabScrollDuration,\n                      curve: Curves.ease,\n                      style: textStyle,\n                      child: Text(\n                        tab.label,\n                        overflow: TextOverflow.clip,\n                        maxLines: 1,\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "getTopSearchedQueries", "docstring": "", "module": "repositories", "file_path": "sunnah_shop_flutter/lib/data/repositories/search_repository_impl.dart", "file_name": "search_repository_impl.dart", "line": 30, "line_from": 30, "line_to": 85, "snippet": "  Future<Either<String, List<String>>> getTopSearchedQueries() async {\n    try {\n      final queries = await _appDataLocalDataSource.getQueries();\n      return Right(queries);\n    } on Exception catch (e) {\n      return Left(e.toString());\n    }\n  }\n\n  @override\n  Future<Either<String, List<AuthorModel>>> searchAuthors(String query) async {\n    try {\n      final authors = await _authorRemoteDataSource.searchAuthors(query);\n      return Right(authors);\n    } on Exception catch (e) {\n      return Left(e.toString());\n    }\n  }\n\n  @override\n  Future<Either<String, List<Book>>> searchBooks(String query) async {\n    try {\n      final books = await _bookRemoteDataSource.searchBooks(query);\n      await _appDataLocalDataSource.saveQuery(query);\n      return Right(books);\n    } on Exception catch (e) {\n      return Left(e.toString());\n    }\n  }\n\n  @override\n  Future<Either<String, List<PublisherModel>>> searchPublishers(\n      String query) async {\n    try {\n      final results = await _publisherLocalDataSource.searchPublishers(query);\n      if (results.isNotEmpty) {\n        return Right(results);\n      } else {\n        final results = (await _publisherRemoteDataSource.getPublishers(1));\n        final searchModel = SearchModel(results, query);\n        final filteredResults =\n            await worker.run(searchPublisherModelIterable, searchModel);\n        return Right(filteredResults);\n      }\n    } on Exception catch (e) {\n      return Left(e.toString());\n    }\n  }\n}\n\nclass SearchModel {\n  List<PublisherModel> models;\n  String query;\n\n  SearchModel(this.models, this.query);\n}"}, {"structure_type": "function", "name": "toAuthorsAsync", "docstring": "", "module": "dtos", "file_path": "sunnah_shop_flutter/lib/data/dtos/author_dto.dart", "file_name": "author_dto.dart", "line": 59, "line_from": 59, "line_to": 68, "snippet": "  Future<List<AuthorModel>> toAuthorsAsync() async {\n    return await worker.run(toAuthors, this);\n  }\n}\n\nextension AuthorDtoMapper on AuthorDto {\n  Future<AuthorModel> toAuthorAsync() async {\n    return await worker.run(toAuthor, this);\n  }\n}"}, {"structure_type": "function", "name": "createCustomer", "docstring": "", "module": "api", "file_path": "sunnah_shop_flutter/lib/data/services/api/api_service.dart", "file_name": "api_service.dart", "line": 29, "line_from": 29, "line_to": 445, "snippet": "  Future<bool> createCustomer(CustomerModelDto model) async {\n    bool done = false;\n    try {\n      var response = await Dio().post(\n          '${ApiConfig.wooCommerceURL}${ApiUrls.customerURL}?consumer_key=${ApiConfig.key}&consumer_secret=${ApiConfig.secret}',\n          data: model.toJson(),\n          options: Options(headers: {\n            HttpHeaders.contentTypeHeader: \"application/json\",\n          }));\n      if (response.statusCode == 201) {\n        done = true;\n      }\n    } on DioError catch (e) {\n      if (e.response!.statusCode == 404) {\n        done = false;\n      } else {\n        done = false;\n      }\n    }\n    return done;\n  }\n\n  Future<bool> loginCustomer(CustomerModelDto model) async {\n    bool done = false;\n    try {\n      var response = await Dio().post(\n          '${ApiConfig.wooCommerceURL}${ApiUrls.customerURL}?consumer_key=${ApiConfig.key}&consumer_secret=${ApiConfig.secret}',\n          data: model.toJson(),\n          options: Options(headers: {\n            HttpHeaders.contentTypeHeader: \"application/json\",\n          }));\n      if (response.statusCode == 201) {\n        done = true;\n      }\n    } on DioError catch (e) {\n      if (e.response!.statusCode == 404) {\n        done = false;\n      } else {\n        done = false;\n      }\n    }\n    return done;\n  }\n\n  Future<bool> updateCustomer(CustomerModelDto model) async {\n    bool done = false;\n    try {\n      var response = await Dio().post(\n          '${ApiConfig.wooCommerceURL}${ApiUrls.customerURL}?consumer_key=${ApiConfig.key}&consumer_secret=${ApiConfig.secret}',\n          data: model.toJson(),\n          options: Options(headers: {\n            HttpHeaders.contentTypeHeader: \"application/json\",\n          }));\n\n      if (response.statusCode == 201) {\n        done = true;\n      }\n    } on DioError catch (e) {\n      if (e.response!.statusCode == 404) {\n        done = false;\n      } else {\n        done = false;\n      }\n    }\n    return done;\n  }\n\n  Future<List<CategoryModel>> getCategories({int page = 1}) async {\n    List<CategoryModel> categories = [];\n    try {\n      final data = (await _wooCommerce\n          .getAsync(\"${ApiUrls.categoriesURL}/?page=$page\")) as List;\n      categories = data.map((json) => CategoryModel.fromJson(json)).toList();\n    } on Exception catch (e) {\n      e.printError();\n    }\n    return categories;\n  }\n\n  Future<List<VendorModelDto>> getPublishers({int page = 1}) async {\n    List<VendorModelDto> publishers = [];\n    try {\n      final param = \"${ApiUrls.storeURL}/?page=$page\";\n      final data =\n          (await _wooCommerce.getAsync(param, plugin: ApiPlugin.dokan)) as List;\n      publishers = data.map((json) => VendorModelDto.fromJson(json)).toList();\n    } on Exception catch (e) {\n      e.printError();\n      debugPrint(\"Could not get publishers -> ${e.toString()}\");\n    }\n    return publishers;\n  }\n\n  Future<VendorModelDto> getPublisher(int id) async {\n    var publisher = VendorModelDto();\n    try {\n      final param = \"${ApiUrls.storeURL}/$id/\";\n      final dataJson =\n          (await _wooCommerce.getAsync(param, plugin: ApiPlugin.dokan));\n      publisher = VendorModelDto.fromJson(dataJson);\n    } on Exception catch (e) {\n      e.printError();\n      debugPrint(\"Failed to get publisher -> $e\");\n    }\n    return publisher;\n  }\n\n  Future<List<ProductModelDto>> getProducts(int page,\n      {String orderBy = \"rating\"}) async {\n    List<ProductModelDto> products = [];\n    try {\n      final param =\n          \"${ApiUrls.productsURL}/?page=$page&per_page=10&orderby=$orderBy\";\n      final data =\n          (_wooCommerce.getAsync(param, plugin: ApiPlugin.wooCommerce)) as List;\n      products = data.map((json) => ProductModelDto.fromJson(json)).toList();\n    } on Exception catch (e) {\n      e.printError();\n      debugPrint(\"Failed to get products -> $e.\");\n    }\n    return products;\n  }\n\n  Future<String> getBookAuthor(int id) async {\n    String authorName = \"\";\n    try {\n      var data = (await _wooCommerce.getAsync(\"custom?product_id=$id\")) as List;\n      authorName = BookApiResponseDtoModel.fromJson(data.first).author ?? \"\";\n    } on Exception catch (e) {\n      e.printError();\n    }\n    return authorName;\n  }\n\n  Future<List<ProductModelDto>> getProductsByCategory(\n    int categoryId,\n    int page, {\n    String? orderBy = \"date\",\n  }) async {\n    final param =\n        \"${ApiUrls.productsURL}?page=$page&orderby=$orderBy&category=$categoryId\";\n    final data = (await _wooCommerce.getAsync(param)) as List;\n\n    List<ProductModelDto> productDtos = data\n        .map((productJson) => ProductModelDto.fromJson(productJson))\n        .toList();\n    return productDtos;\n  }\n\n  Future<List<ProductModelDto>> searchProducts(String query) async {\n    final param = \"${ApiUrls.productsURL}?search=$query\";\n    final data = (await _wooCommerce.getAsync(param)) as List;\n\n    List<ProductModelDto> productDtos = data\n        .map((productJson) => ProductModelDto.fromJson(productJson))\n        .toList();\n    return productDtos;\n  }\n\n  Future<Book> getProductById(int id) async {\n    final dataJson = await _wooCommerce.getAsync(\"products/$id\");\n    final product = ProductModelDto.fromJson(dataJson);\n    return product.toBook();\n  }\n\n  Future<List<ReviewApiResponseDtoModel>> getProductReviews(int bookId) async {\n    var reviews = <ReviewApiResponseDtoModel>[];\n    try {\n      final param = \"${ApiUrls.reviewsURL}/\"\n          \"?product=$bookId\";\n      final data = (await _wooCommerce.getAsync(param,\n          plugin: ApiPlugin.wooCommerce)) as List;\n      reviews =\n          data.map((json) => ReviewApiResponseDtoModel.fromJson(json)).toList();\n      return reviews;\n    } on Exception catch (e) {\n      debugPrint(\"Failed to load review -> $e\");\n    }\n\n    return [];\n  }\n\n  Future<void> createProductReview(\n    int productId,\n    String review,\n    String reviewer,\n    int rating,\n    String reviewerEmail,\n  ) async {\n    try {\n      final String param = ApiUrls.reviewsURL;\n      final Map<String, dynamic> bodyData = PostReviewModelDto(\n              productId: productId,\n              review: review,\n              reviewer: reviewer,\n              rating: rating,\n              reviewerEmail: reviewerEmail)\n          .toJson();\n      await _wooCommerce.postAsync(param, bodyData);\n    } on Exception catch (e) {\n      debugPrint(\"Failed to post review $e\");\n    }\n  }\n\n  Future<List<ProductModelDto>> getTopSellBooks(int page) async {\n    List<ProductModelDto> books = List.empty(growable: true);\n    try {\n      final param =\n          \"${ApiUrls.productsURL}/?page=$page&orderby=popularity&order=desc\";\n      final data = (await _wooCommerce.getAsync(param)) as List;\n      books = data\n          .map((productJson) => ProductModelDto.fromJson(productJson))\n          .toList();\n      return books;\n    } on Exception catch (e) {\n      e.printError();\n      debugPrint(\"Failed to get books $e\");\n      return books;\n    }\n  }\n\n  Future<List<ProductModelDto>> getTrendingBooks(int page) async {\n    List<ProductModelDto> books = List.empty(growable: true);\n    try {\n      final param =\n          \"${ApiUrls.productsURL}/?page=$page&orderby=rating&order=desc\";\n      final data = (await _wooCommerce.getAsync(param)) as List;\n      books = data\n          .map((productJson) => ProductModelDto.fromJson(productJson))\n          .toList();\n      return books;\n    } on Exception catch (e) {\n      e.printError();\n      debugPrint(\"Failed to get books $e\");\n      return books;\n    }\n  }\n\n  Future<List<ProductModelDto>> getProductsByVendorId(int vendorId) async {\n    if (vendorId < 0) throw Exception(\"Can't find this publisher\");\n\n    List<ProductModelDto> products = List.empty(growable: true);\n\n    final param = \"${ApiUrls.storeURL}/$vendorId/${ApiUrls.productsURL}\";\n    final data =\n        (await _wooCommerce.getAsync(param, plugin: ApiPlugin.dokan)) as List;\n\n    products = data\n        .map((productJson) => ProductModelDto.fromJson(productJson))\n        .toList();\n\n    return products;\n  }\n\n  Future<OrderPostResponseDto> createAOrder(\n    String firstName,\n    String lastName,\n    String address,\n    String city,\n    String postCode,\n    String country,\n    String email,\n    String phone,\n    String price,\n    List<LineItem> lineItems,\n    String paymentMethod,\n    bool setPaid,\n    String paymentMethodTitle,\n  ) async {\n    try {\n      final billing = BillingDto(\n        firstName: firstName,\n        lastName: lastName,\n        address1: address,\n        state: city,\n        postcode: postCode,\n        country: country,\n        email: email,\n        phone: phone,\n      );\n\n      final shipping = ShippingDto(\n        firstName: firstName,\n        lastName: lastName,\n        address1: address,\n        state: city,\n        postcode: postCode,\n        country: country,\n      );\n\n      final shippingLines = [\n        ShippingLines(\n          methodId: \"flat_rate\",\n          methodTitle: \"Flat Rate\",\n          total: price,\n        )\n      ];\n\n      final body = OrderPostBodyDto(\n        lineItems: lineItems,\n        paymentMethod: paymentMethod,\n        paymentMethodTitle: paymentMethodTitle,\n        shipping: shipping,\n        billing: billing,\n        shippingLines: shippingLines,\n        setPaid: setPaid,\n      );\n      debugPrint(body.toJson().toString());\n\n      final data = await _wooCommerce.postAsync(\n        \"orders?currency=BDT\",\n        body.toJson(),\n        plugin: ApiPlugin.wooCommerce,\n      );\n      debugPrint(data.toString());\n      return OrderPostResponseDto.fromJson(data);\n    } on DioError catch (e) {\n      debugPrint(e.response?.statusMessage ?? \"\");\n      return OrderPostResponseDto();\n    }\n  }\n\n  Future<List<AuthorDto>> getAuthorList(int page) async {\n    List<AuthorDto> authors = [];\n    try {\n      final data = (await _wooCommerce.getAsync(\n        \"${ApiUrls.getAllAuthorsUrl}/?page=$page\",\n        plugin: ApiPlugin.wordPressUser,\n      )) as List;\n      authors = data.map((json) => AuthorDto.fromJson(json)).toList();\n    } on Exception catch (e) {\n      e.printError();\n      debugPrint(\"Failed to get writers models ->$e\");\n    }\n    return authors;\n  }\n\n  Future<List<AuthorDto>> searchAuthors(String query) async {\n    List<AuthorDto> authors = [];\n    try {\n      final data = (await _wooCommerce.getAsync(\n        \"${ApiUrls.getAllTermsBySearch}/?search=$query\",\n        plugin: ApiPlugin.wordPressUser,\n      )) as List;\n      authors = data.map((json) => AuthorDto.fromJson(json)).toList();\n    } on Exception catch (e) {\n      e.printError();\n      debugPrint(\"Failed to search writers models ->$e\");\n    }\n    return authors;\n  }\n\n  Future<List<int>> getPurchasedBookIds(int customerId) async {\n    final purchasedBookIds = List<int>.empty(growable: true);\n    final lineItems = (await _wooCommerce.getAsync(\n            \"orders?status=completed?customer=$customerId\",\n            plugin: ApiPlugin.wooCommerce) as List)\n        .map((e) => PurchasedItemDto.fromJson(e).lineItems ?? [])\n        .toList();\n    for (List<PurchasedLineItems> item in lineItems) {\n      purchasedBookIds.addAll(item.map((e) => e.productId ?? -1));\n    }\n\n    return purchasedBookIds;\n  }\n\n  Future<void> saveAppData(\n    String userId,\n    String wishBookIdList,\n    String currentlyInCart,\n    String weeklyReadStatus,\n    String lastReadBook,\n    String bookShelf,\n  ) async {\n    final String param = \"${ApiUrls.insertUrl}\"\n        \"?user_ID=$userId\"\n        \"&wishbook_ID_list=$wishBookIdList\"\n        \"&currently_in_cart=$currentlyInCart\"\n        \"&weekly_read_status=$weeklyReadStatus\"\n        \"&last_read_book=$lastReadBook\"\n        \"&book_self=$bookShelf\";\n    debugPrint(\"Saving APP_DATA -> $param\");\n    await _wooCommerce.postAsync(param, <String, String>{},\n        plugin: ApiPlugin.wordPressUser);\n  }\n\n  Future<void> updateAppData(\n      String userId,\n      String wishBookIdList,\n      String currentlyInCart,\n      String weeklyReadStatus,\n      String lastReadBook,\n      String bookShelf) async {}\n\n  Future<List<UserDataDto>> getUserData() async {\n    return [];\n  }\n\n  Future<AuthorDto> getSingleAuthorDetails(int authorId) async {\n    final param = \"${ApiUrls.getAuthorById}?id=$authorId\";\n    final response =\n        await _wooCommerce.getAsync(param, plugin: ApiPlugin.wordPressUser);\n    final authorDto = AuthorDto.fromJson(response);\n    return authorDto;\n  }\n\n  Future<List<int>> getBooksByAuthorId(int authorId) async {\n    final param = \"${ApiUrls.getAllProductsByAuthorId}?id=$authorId\";\n    final response = (await _wooCommerce.getAsync(param,\n        plugin: ApiPlugin.wordPressUser)) as List;\n    final idList = response\n        .map((e) => int.tryParse(e.toString()) ?? 0)\n        .toList(growable: true);\n    idList.removeWhere((id) => id == 0);\n    return idList;\n  }\n}"}, {"structure_type": "function", "name": "getAsync", "docstring": "", "module": "woocommerce_api", "file_path": "sunnah_shop_flutter/lib/data/services/api/woocommerce_api/woocommerce_api.dart", "file_name": "woocommerce_api.dart", "line": 146, "line_from": 146, "line_to": 195, "snippet": "  Future<dynamic> getAsync(\n    String endPoint, {\n    ApiPlugin plugin = ApiPlugin.wooCommerce,\n  }) async {\n    final param = AuthUrlParam(\n      method: RequestMethod.get,\n      endPoint: endPoint,\n      url: this.url,\n      consumerKey: consumerKey,\n      consumerSecret: consumerSecret,\n      isHttps: isHttps ?? false,\n      plugin: plugin,\n    );\n    final String url = await compute(oAuthUrl, param);\n    debugPrint(\"url -> $url\");\n\n    try {\n      final response = await _dio.get(url);\n      if (response.statusCode == 200) {\n        return response.data;\n      }\n      _handleError(response);\n    } on SocketException {\n      throw Exception('No Internet connection.');\n    }\n  }\n\n  Future<dynamic> postAsync(String endPoint, Map data,\n      {ApiPlugin plugin = ApiPlugin.wooCommerce}) async {\n    final param = AuthUrlParam(\n      method: RequestMethod.post,\n      endPoint: endPoint,\n      plugin: plugin,\n      url: this.url,\n      consumerKey: consumerKey,\n      consumerSecret: consumerSecret,\n      isHttps: isHttps ?? false,\n    );\n    String url = await compute(oAuthUrl, param);\n    debugPrint(\"url -> $url\");\n    final response = await _dio.post(url, data: data);\n    if (response.statusCode == 201) return response.data;\n    _handleError(response);\n  }\n}\n\nenum RequestMethod {\n  post,\n  get,\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "bottomsheet", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/reader/components/bottomsheet/bottomsheet_header.dart", "file_name": "bottomsheet_header.dart", "line": 17, "line_from": 17, "line_to": 95, "snippet": "  Widget build(BuildContext context) {\n    return Container(\n      height: Get.width * .34,\n      decoration: BoxDecoration(\n          borderRadius: const BorderRadius.only(\n              topLeft: Radius.circular(20), topRight: Radius.circular(20)),\n          color: Theme.of(context).cardColor,\n          boxShadow: shadow()),\n      child: Column(\n        children: [\n          gap2,\n          Divider(\n              thickness: 3,\n              indent: Get.width * .42,\n              endIndent: Get.width * .42),\n          Column(\n            children: [\n              SliderTheme(\n                data: sliderThemeData(context),\n                child: Slider(\n                  activeColor: Theme.of(context).secondaryHeaderColor,\n                  inactiveColor:\n                      Theme.of(context).secondaryHeaderColor.withOpacity(0.3),\n                  min: 0,\n                  max: 120,\n                  divisions: 120,\n                  value: 1,\n                  onChanged: (value) {\n                    epubController!.jumpTo(index: value.toInt());\n                  },\n                ),\n              ).paddingSymmetric(horizontal: 5),\n              Text(\n                'Page ${0} of ${120}',\n                style: TextStyle(\n                  color: Theme.of(context).secondaryHeaderColor,\n                  fontSize: Get.width * .034,\n                ),\n              ),\n              gap8,\n              const BottomSheetTabBar()\n              // gap4,\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n}\n\n\n\n//  Row(\n//                 mainAxisAlignment: MainAxisAlignment.center,\n//                 children: [\n//                   Text(\n//                     'Page   ' + 0.toString(),\n//                     style: TextStyle(\n//                       color: Theme.of(context).secondaryHeaderColor,\n//                       fontSize: Get.width * .034,\n//                     ),\n//                   ),\n//                   gap8,\n//                   SizedBox(\n//                     width: Get.width * .62,\n//                     child: SliderTheme(\n//                       data: sliderThemeData(context),\n//                       child: Slider(\n//                         activeColor: Theme.of(context).secondaryHeaderColor,\n//                         inactiveColor: Theme.of(context)\n//                             .secondaryHeaderColor\n//                             .withOpacity(0.3),\n//                         min: 0,\n//                         max: 120,\n//                         divisions: 120,\n//                         value: 1,\n//                         onChanged: (value) {\n//                           epubController!.jumpTo(index: value.toInt());\n//                         },"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/settings/components/screen_settings.dart", "file_name": "screen_settings.dart", "line": 10, "line_from": 10, "line_to": 70, "snippet": "  Widget build(BuildContext context) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.start,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Text(\n          'Screen Modes',\n          style: TextStyle(\n            fontSize: Get.width * .042,\n            fontWeight: FontWeight.w500,\n          ),\n        ),\n        gap18,\n        Row(\n          children: [\n            Column(\n              children: [\n                svgBtn(\n                  onTap: () {},\n                  svg: 'assets/svg/fullscreen.svg',\n                  height: Get.width * .1,\n                ),\n                gap2,\n                const TitleName(title: 'Fullscreen'),\n              ],\n            ),\n            gap48,\n            Column(\n              children: [\n                svgBtn(\n                  onTap: () {},\n                  svg: 'assets/svg/rotate.svg',\n                  height: Get.width * .1,\n                ),\n                gap2,\n                const TitleName(title: 'Rotate'),\n              ],\n            ),\n          ],\n        )\n      ],\n    );\n  }\n}\n\nclass TitleName extends StatelessWidget {\n  const TitleName({Key? key, this.title}) : super(key: key);\n\n  final String? title;\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      title!,\n      style: TextStyle(\n        color: Colors.grey,\n        fontSize: Get.width * .035,\n        fontWeight: FontWeight.w500,\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "changeColor", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/settings/components/theme_settings.dart", "file_name": "theme_settings.dart", "line": 14, "line_from": 14, "line_to": 140, "snippet": "  void changeColor(Color color) {}\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.start,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Obx(\n          () => CustomSlider(\n            min: 0,\n            max: 100,\n            divisions: 100,\n            value: settingsC.readerfontSize.value,\n            title: 'Display Brightness'.tr,\n            trailing: '%',\n            titleStyle: TextStyle(\n              fontSize: Get.width * .04,\n              fontWeight: FontWeight.w500,\n            ),\n            onChanged: (value) {},\n          ),\n        ),\n        Container(\n          margin: const EdgeInsets.symmetric(vertical: 20, horizontal: 6),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.start,\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Text(\n                'Select Theme'.tr,\n                style: TextStyle(\n                  fontSize: Get.width * .04,\n                  fontWeight: FontWeight.w500,\n                ),\n              ),\n              SingleChildScrollView(\n                scrollDirection: Axis.horizontal,\n                child: Row(\n                  children: [\n                    Row(\n                      children: List.generate(\n                        themeColorList.length,\n                        (index) => Padding(\n                          padding: EdgeInsets.symmetric(\n                              vertical: Get.width * .03,\n                              horizontal: Get.width * .015),\n                          child: Obx(\n                            () => InkWell(\n                              splashColor: Colors.transparent,\n                              highlightColor: Colors.transparent,\n                              onTap: () {\n                                settingsC.selectedPicker.value = false;\n                                settingsC.themeSelectedItem.value =\n                                    themeColorList[index].id;\n                              },\n                              child: Container(\n                                decoration: BoxDecoration(\n                                    border: Border.all(\n                                        color: index == 0\n                                            ? Theme.of(context)\n                                                .secondaryHeaderColor\n                                            : Colors.transparent,\n                                        width: 2),\n                                    color: themeColorList[index].colorCode,\n                                    borderRadius: BorderRadius.circular(50)),\n                                height: Get.width * 0.12,\n                                width: Get.width * 0.12,\n                                child: Center(\n                                  child: Icon(\n                                    CupertinoIcons.checkmark,\n                                    size: Get.width * 0.07,\n                                    color: !settingsC.selectedPicker.value &&\n                                            settingsC.themeSelectedItem.value ==\n                                                themeColorList[index].id\n                                        ? Theme.of(context).secondaryHeaderColor\n                                        : Colors.transparent,\n                                  ),\n                                ),\n                              ),\n                            ),\n                          ),\n                        ),\n                      ),\n                    ),\n                    Obx(\n                      () => InkWell(\n                        splashColor: Colors.transparent,\n                        highlightColor: Colors.transparent,\n                        onTap: () {\n                          settingsC.selectedPicker.value = false;\n                          Get.dialog(const ColorPickerDialog());\n                        },\n                        child: Container(\n                          decoration: BoxDecoration(\n                              gradient: const SweepGradient(colors: [\n                                Color(0xffFF3B13),\n                                Color(0xff0047FF),\n                                Color(0xff01FF01),\n                                Color(0xffFFE400),\n                                Color(0xffFF2AF8),\n                              ]),\n                              borderRadius: BorderRadius.circular(50)),\n                          height: Get.width * 0.12,\n                          width: Get.width * 0.12,\n                          child: Center(\n                            child: Icon(\n                              CupertinoIcons.checkmark,\n                              size: Get.width * 0.07,\n                              color: settingsC.selectedPicker.value\n                                  ? Colors.white\n                                  : Colors.transparent,\n                            ),\n                          ),\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        )\n      ],\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/home/components/book_card.dart", "file_name": "book_card.dart", "line": 40, "line_from": 40, "line_to": 180, "snippet": "  Widget build(BuildContext context) {\n    return InkWell(\n      onTap: (() => Get.to(\n            () => BookDetailsPage(book: book ?? Book()),\n          )),\n      child: Container(\n        padding: EdgeInsets.only(\n          top: Get.width * .05,\n          bottom: Get.width * .03,\n          left: Get.width * .04,\n          right: Get.width * .04,\n        ),\n        width: Get.width * .42,\n        decoration: BoxDecoration(\n          boxShadow: [\n            BoxShadow(\n              color: Colors.black.withOpacity(.05),\n              blurRadius: 10,\n              spreadRadius: 5,\n            ),\n          ],\n          borderRadius: BorderRadius.circular(Get.width * .04),\n          color: Get.theme.cardColor,\n        ),\n        child: Column(\n            mainAxisAlignment: MainAxisAlignment.start,\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Center(\n                child: ClipRRect(\n                  borderRadius: radius(2),\n                  child: SizedBox(\n                    width: Get.width * .3,\n                    height: Get.width * .45,\n                    child: BookCoverImageLoader(imageUrl: image),\n                  ),\n                ),\n              ),\n              SizedBox(height: Get.height * .015),\n              Text(\n                name ?? \"N/A\",\n                overflow: TextOverflow.ellipsis,\n                style: TextStyle(\n                  fontSize: Get.width * .03,\n                  fontWeight: FontWeight.w600,\n                ),\n              ),\n              SizedBox(height: Get.width * .02),\n              Text(\n                author ?? \"N/A\",\n                maxLines: 1,\n                style: TextStyle(\n                  color: Colors.grey,\n                  fontSize: Get.width * .028,\n                ),\n              ),\n              lastRead == null\n                  ? PriceAndReview(\n                      purchasable: purchasable,\n                      salePrice: salePrice,\n                      regularPrice: regularPrice,\n                      totalReview: totalReview,\n                    )\n                  : LastReadIndicator(lastRead: lastRead),\n            ]),\n      ),\n    );\n  }\n}\n\nclass PriceAndReview extends StatelessWidget {\n  const PriceAndReview({\n    Key? key,\n    required this.salePrice,\n    required this.regularPrice,\n    required this.totalReview,\n    this.purchasable,\n  }) : super(key: key);\n\n  final String? salePrice;\n  final String? regularPrice;\n  final int? totalReview;\n  final bool? purchasable;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: paddingTop12,\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.spaceBetween,\n        children: [\n          Row(\n            children: [\n              Text(\n                purchasable ?? false ? '\u09f3 ${salePrice ?? \"0\"}' : 'Free',\n                style: TextStyle(\n                  color: Get.theme.secondaryHeaderColor,\n                  fontSize: Get.width * .035,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n              SizedBox(width: Get.width * .015),\n              regularPrice != null && (purchasable ?? true)\n                  ? Text(\n                      '\u09f3 ${regularPrice ?? \"0\"}',\n                      style: TextStyle(\n                        decoration: TextDecoration.lineThrough,\n                        color: Colors.grey.withOpacity(.8),\n                        fontSize: Get.width * .03,\n                      ),\n                    )\n                  : const SizedBox.shrink(),\n            ],\n          ),\n          totalReview != null\n              ? Row(\n                  children: [\n                    SvgPicture.asset(\n                      'assets/svg/star.svg',\n                      width: Get.width * .03,\n                      height: Get.width * .03,\n                      color: (totalReview ?? 0) > 0\n                          ? Colors.yellow.shade800\n                          : Colors.grey,\n                    ),\n                    SizedBox(width: Get.width * .015),\n                    Text(\n                      '(${totalReview ?? \"0\"})',\n                      style: TextStyle(\n                        color: Colors.grey.withOpacity(.8),\n                        fontSize: Get.width * .03,\n                      ),\n                    ),\n                  ],\n                )\n              : const SizedBox.shrink()\n        ],\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/home/components/feature_card.dart", "file_name": "feature_card.dart", "line": 39, "line_from": 39, "line_to": 206, "snippet": "  Widget build(BuildContext context) {\n    return Container(\n      margin: featureCard! ? padding(0) : paddingSym(4, 1.5),\n      padding: EdgeInsets.symmetric(\n          vertical: Get.width * .04, horizontal: Get.width * .04),\n      width: Get.width,\n      decoration: BoxDecoration(\n        boxShadow: [\n          BoxShadow(\n            color: Colors.black.withOpacity(featureCard! ? 0.05 : 0.03),\n            blurRadius: featureCard! ? 10 : 2,\n            spreadRadius: featureCard! ? 5 : 1,\n          ),\n        ],\n        borderRadius: BorderRadius.circular(Get.width * .04),\n        color: Theme.of(context).cardColor,\n      ),\n      child: Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          crossAxisAlignment: CrossAxisAlignment.center,\n          children: [\n            Row(\n              children: [\n                ClipRRect(\n                  borderRadius: radius(2),\n                  child: Center(\n                    child: SizedBox(\n                      width: featureCard! ? 27.w : 17.w,\n                      child: BookCoverImageLoader(imageUrl: image ?? \"\"),\n                    ),\n                  ),\n                ),\n                SizedBox(width: Get.width * .04),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  mainAxisAlignment: MainAxisAlignment.start,\n                  children: [\n                    SizedBox(height: featureCard! ? Get.height * .005 : .5.w),\n                    SizedBox(\n                      width: 50.w,\n                      child: Text(\n                        name ?? \"\",\n                        maxLines: featureCard! ? 2 : 1,\n                        overflow: TextOverflow.clip,\n                        style: TextStyle(\n                          height: 1.4,\n                          fontSize: featureCard! ? Get.width * .041 : 3.7.w,\n                          fontWeight: FontWeight.w600,\n                        ),\n                      ),\n                    ),\n                    SizedBox(height: featureCard! ? Get.width * .03 : 1.5.w),\n                    Text(\n                      author ?? \"N/A\",\n                      style: TextStyle(\n                        color: Colors.grey,\n                        fontSize: Get.width * .032,\n                      ),\n                    ),\n                    SizedBox(height: featureCard! ? Get.width * .035 : 1.5.w),\n                    totalReview != null\n                        ? Row(\n                            children: [\n                              SvgPicture.asset(\n                                'assets/svg/star.svg',\n                                width: featureCard! ? Get.width * .035 : 3.w,\n                              ),\n                              SizedBox(width: Get.width * .015),\n                              Text(\n                                '(${totalReview ?? 0})',\n                                style: TextStyle(\n                                  color: Colors.grey,\n                                  fontSize:\n                                      featureCard! ? Get.width * .035 : 3.w,\n                                ),\n                              ),\n                            ],\n                          )\n                        : const SizedBox.shrink(),\n                    SizedBox(height: featureCard! ? Get.width * .035 : 1.5.w),\n                    lastReadLabel ?? false\n                        ? Text(\n                            'Reading Progress'.tr,\n                            style: TextStyle(\n                              color: Colors.grey,\n                              fontSize: featureCard! ? Get.width * .035 : 3.w,\n                            ),\n                          )\n                        : shrink,\n                    lastRead == null\n                        ? PriceAndReview(\n                            purchased: purchased,\n                            salePrice: salePrice,\n                            featureCard: featureCard,\n                            regularPrice: regularPrice)\n                        : LastReadIndicator(\n                            lastRead: lastRead,\n                            width: 62.w,\n                            padding: paddingTop(2),\n                          ),\n                  ],\n                ),\n              ],\n            ),\n            trailing ?? shrink\n          ]),\n    );\n  }\n}\n\nclass PriceAndReview extends StatelessWidget {\n  const PriceAndReview({\n    Key? key,\n    required this.salePrice,\n    required this.featureCard,\n    required this.purchased,\n    required this.regularPrice,\n  }) : super(key: key);\n\n  final String? salePrice;\n  final bool? featureCard;\n  final String? regularPrice;\n  final bool? purchased;\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: [\n        purchased ?? false\n            ? Text(\n                'Purchased'.tr,\n                style: TextStyle(\n                  color: Theme.of(context).secondaryHeaderColor,\n                  fontSize: 3.2.w,\n                  fontWeight: FontWeight.bold,\n                ),\n              )\n            : shrink,\n        salePrice != null\n            ? Row(\n                children: [\n                  Text(\n                    '\u09f3 ${salePrice ?? 0}',\n                    style: TextStyle(\n                      color: Theme.of(context).secondaryHeaderColor,\n                      fontSize: featureCard! ? Get.width * .045 : 3.5.w,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                  SizedBox(width: Get.width * .02),\n                  regularPrice != null\n                      ? Text(\n                          purchased! ? 'Purchased'.tr : '\u09f3 ${regularPrice!}',\n                          style: TextStyle(\n                            decoration: TextDecoration.lineThrough,\n                            color: Colors.grey,\n                            fontSize: featureCard! ? Get.width * .035 : 3.w,\n                          ),\n                        )\n                      : shrink,\n                ],\n              )\n            : shrink,\n      ],\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "choose_by_book", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/choose_by_book/choose_by_book.dart", "file_name": "choose_by_book.dart", "line": 23, "line_from": 23, "line_to": 91, "snippet": "  Widget build(BuildContext context) {\n    return GetX(\n      init: Get.find<ChooseByBookScreenController>(),\n      builder: (controller) {\n        final chooseCategories = controller.chooseCategoriesObs.value;\n        return Scaffold(\n          backgroundColor: Get.theme.backgroundColor,\n          body: Column(\n            children: [\n              gap48,\n              Topbar(title: \"Choose By Book\".tr)\n                  .paddingSymmetric(horizontal: Get.width * .04),\n              gap16,\n              SizedBox(\n                width: Get.width,\n                height: Get.width * .07,\n                child: ScrollablePositionedList.builder(\n                    initialScrollIndex: settingsC.chooseBookIndex.value,\n                    padding: EdgeInsets.only(left: Get.width * .04),\n                    scrollDirection: Axis.horizontal,\n                    itemScrollController: scrollController,\n                    itemCount: chooseCategories.length,\n                    itemBuilder: (context, index) => Obx(\n                          () => InkWell(\n                            splashColor: Colors.transparent,\n                            highlightColor: Colors.transparent,\n                            onTap: (() =>\n                                settingsC.chooseBookIndex.value = index),\n                            child: PillText(\n                              text: chooseCategories[index].title,\n                              active: index == settingsC.chooseBookIndex.value,\n                            ),\n                          ),\n                        )),\n              ),\n              Obx(\n                () => AnimatedContainer(\n                  duration: 800.milliseconds,\n                  child: bookCategoryList(),\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n}\n\nbookCategoryList() {\n  switch (settingsC.chooseBookIndex.value) {\n    case 0:\n      return LastRead();\n    case 1:\n      return Trending();\n    case 2:\n      return const FreeBooks();\n    case 3:\n      return Categories();\n    case 4:\n      return TopSell();\n    case 5:\n      return Authors();\n    case 6:\n      return Publishers();\n    default:\n      return LastRead();\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "categoires", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/choose_by_book/categoires/top_sell.dart", "file_name": "top_sell.dart", "line": 17, "line_from": 17, "line_to": 92, "snippet": "  Widget build(BuildContext context) {\n    return GetX<ChooseByBookScreenController>(\n      init: Get.find<ChooseByBookScreenController>()..loadTopSellBooks(),\n      builder: (controller) {\n        final topSellBooks = controller.topSellBooksObs.value;\n        return Expanded(\n          child: AnimatedContainer(\n              duration: 800.milliseconds,\n              child: Column(\n                children: [\n                  TopSellBookList(\n                    scrollController: _scrollController,\n                    topSellBooks: topSellBooks,\n                    isLoading: controller.topSellLoading.value,\n                  ),\n                  controller.topSellPaging.value\n                      ? const LoadingIndicator()\n                      : const SizedBox.shrink(),\n                ],\n              )),\n        );\n      },\n    );\n  }\n}\n\nclass TopSellBookList extends StatelessWidget {\n  const TopSellBookList({\n    Key? key,\n    required ScrollController scrollController,\n    required this.topSellBooks,\n    this.isLoading = false,\n  })  : _scrollController = scrollController,\n        super(key: key);\n\n  final ScrollController _scrollController;\n  final List<Book> topSellBooks;\n  final bool isLoading;\n\n  @override\n  Widget build(BuildContext context) {\n    return Expanded(\n      child: AlignedGridView.count(\n        controller: _scrollController\n          ..addListener(\n            () => (_scrollController.reachedEnd())\n                ? Get.find<ChooseByBookScreenController>().loadTopSellBooks(paging: true)\n                : {},\n          ),\n        padding: EdgeInsets.only(\n          left: Get.width * .04,\n          right: Get.width * .04,\n          top: Get.width * .02,\n          bottom: Get.width * .04,\n        ),\n        itemCount: isLoading ? 15 : topSellBooks.length,\n        crossAxisCount: 2,\n        mainAxisSpacing: Get.width * .04,\n        crossAxisSpacing: Get.width * .04,\n        itemBuilder: (context, index) {\n          return isLoading\n              ? const BookCardShimmerLoader()\n              : BookCard(\n                  name: topSellBooks[index].bookName,\n                  image: topSellBooks[index].coverImageUrl,\n                  author: topSellBooks[index].authorNames,\n                  salePrice: topSellBooks[index].salePrice,\n                  regularPrice: topSellBooks[index].regularPrice,\n                  totalReview: topSellBooks[index].ratingCount,\n                  book: topSellBooks[index],\n                );\n        },\n      ).paddingOnly(top: Get.width * .03),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "categoires", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/choose_by_book/categoires/trending.dart", "file_name": "trending.dart", "line": 15, "line_from": 15, "line_to": 82, "snippet": "  Widget build(BuildContext context) {\n    return GetX(\n      init: Get.find<ChooseByBookScreenController>()..loadTrendingBooks(),\n      builder: (controller) {\n        final books = controller.trendingBooksObs.value;\n        final isLoading = controller.trendingLoading.value;\n        return Expanded(\n          child: AnimatedContainer(\n            duration: 800.milliseconds,\n            child: TrendingBookList(\n              scrollController: _scrollController,\n              books: books,\n              isLoading: isLoading,\n            ).paddingOnly(top: Get.width * .03),\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass TrendingBookList extends StatelessWidget {\n  const TrendingBookList({\n    Key? key,\n    required ScrollController scrollController,\n    required this.books,\n    this.isLoading = false,\n  })  : _scrollController = scrollController,\n        super(key: key);\n\n  final ScrollController _scrollController;\n  final List<Book> books;\n  final bool isLoading;\n\n  @override\n  Widget build(BuildContext context) {\n    return AlignedGridView.count(\n      controller: _scrollController\n        ..addListener(() => (_scrollController.position.maxScrollExtent ==\n                _scrollController.offset)\n            ? Get.find<ChooseByBookScreenController>().loadTrendingBooks(paging: true)\n            : {}),\n      padding: EdgeInsets.only(\n        left: Get.width * .04,\n        right: Get.width * .04,\n        top: Get.width * .02,\n        bottom: Get.width * .04,\n      ),\n      itemCount: isLoading ? 15 : books.length,\n      crossAxisCount: 2,\n      mainAxisSpacing: Get.width * .04,\n      crossAxisSpacing: Get.width * .04,\n      itemBuilder: (context, index) {\n        return isLoading\n            ? const BookCardShimmerLoader()\n            : BookCard(\n                name: books[index].bookName,\n                image: books[index].coverImageUrl,\n                author: books[index].authorNames,\n                salePrice: books[index].salePrice,\n                regularPrice: books[index].regularPrice,\n                totalReview: books[index].ratingCount,\n                book: books[index],\n              );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "categoires", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/choose_by_book/categoires/authors.dart", "file_name": "authors.dart", "line": 19, "line_from": 19, "line_to": 107, "snippet": "  Widget build(BuildContext context) {\n    return GetX<ChooseByBookScreenController>(\n      init: Get.find<ChooseByBookScreenController>()..loadAuthors(),\n      builder: (controller) {\n        final authors = controller.authorsObs.value;\n        final isLoading = controller.authorLoading.value;\n\n        return Expanded(\n          child: AlignedGridView.count(\n            controller: _scrollController\n              ..addListener(\n                () => _scrollController.reachedEnd() &&\n                        Get.find<ChooseByBookScreenController>()\n                            .authorsObs\n                            .dataRemains()\n                    ? Get.find<ChooseByBookScreenController>()\n                        .loadAuthors(paging: true)\n                    : {},\n              ),\n            padding: EdgeInsets.only(\n              left: Get.width * .04,\n              right: Get.width * .04,\n              top: Get.width * .02,\n              bottom: Get.width * .04,\n            ),\n            itemCount: isLoading ? 15 : authors.length,\n            crossAxisCount: 2,\n            mainAxisSpacing: Get.width * .04,\n            crossAxisSpacing: Get.width * .04,\n            itemBuilder: (context, index) {\n              return isLoading\n                  ? const AuthorCategoryCardShimmer()\n                  : AuthorCategoryCard(author: authors[index]);\n            },\n          ).paddingOnly(top: Get.width * .03),\n        );\n      },\n    );\n  }\n}\n\nclass AuthorCategoryCard extends StatelessWidget {\n  final AuthorModel author;\n\n  const AuthorCategoryCard({\n    Key? key,\n    required this.author,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: EdgeInsets.only(\n        left: Get.width * .04,\n        right: Get.width * .04,\n        top: Get.width * .04,\n        bottom: Get.width * .03,\n      ),\n      decoration: BoxDecoration(\n        boxShadow: shadow(),\n        color: Get.theme.cardColor,\n        borderRadius: radius10,\n      ),\n      child: Column(\n        children: [\n          author.image.isEmpty\n              ? const AuthorAvatar(svg: 'author')\n              : CircleAvatar(\n                  radius: Get.width * .1,\n                  backgroundImage: NetworkImage(\n                    author.image,\n                  ),\n                ),\n          gap10,\n          Text(\n            author.name,\n            textAlign: TextAlign.center,\n            style: TextStyle(\n              fontSize: Get.width * .038,\n              fontWeight: FontWeight.w600,\n            ),\n          ),\n          gap6,\n          TitleName(title: '${author.bookCount} books')\n        ],\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "categoires", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/choose_by_book/categoires/categories.dart", "file_name": "categories.dart", "line": 15, "line_from": 15, "line_to": 78, "snippet": "  Widget build(BuildContext context) {\n    return GetX<ChooseByBookScreenController>(\n      init: Get.find<ChooseByBookScreenController>()..loadCategories(),\n      builder: (controller) {\n        final categories = controller.categoriesObs.value;\n        return Expanded(\n          child: Column(\n            children: [\n              CategoriesList(\n                categoriesScrollController: _categoriesScrollController,\n                categories: categories,\n                isLoading: controller.categoryLoading.value,\n              ),\n              controller.categoryPaging.value\n                  ? const Padding(\n                      padding: EdgeInsets.symmetric(vertical: 20),\n                      child: LoadingIndicator(),\n                    )\n                  : shrink,\n            ],\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass CategoriesList extends StatelessWidget {\n  final bool isLoading;\n\n  const CategoriesList({\n    Key? key,\n    required ScrollController categoriesScrollController,\n    required this.categories,\n    this.isLoading = false,\n  })  : _scrollController = categoriesScrollController,\n        super(key: key);\n\n  final ScrollController _scrollController;\n  final List<CategoryModel> categories;\n\n  @override\n  Widget build(BuildContext context) {\n    return Expanded(\n      child: ListView.builder(\n        controller: _scrollController\n          ..addListener(\n            () => _scrollController.reachedEnd() &&\n                    Get.find<ChooseByBookScreenController>().categoriesObs.dataRemains()\n                ? Get.find<ChooseByBookScreenController>().loadCategories(paging: true)\n                : {},\n          ),\n        padding: EdgeInsets.symmetric(vertical: Get.width * .04),\n        itemCount: isLoading ? 20 : categories.length,\n        itemBuilder: (context, index) {\n          final category = isLoading ? null : categories[index];\n          return isLoading\n              ? const CategoryCardShimmer()\n              : CategoryCard(category: category!);\n        },\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "categoires", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/choose_by_book/categoires/publishers.dart", "file_name": "publishers.dart", "line": 16, "line_from": 16, "line_to": 71, "snippet": "  Widget build(BuildContext context) {\n    return GetX<ChooseByBookScreenController>(\n        init: Get.find<ChooseByBookScreenController>()..loadPublishers(),\n        builder: (controller) {\n          final publishers = controller.publishersObs.value;\n          final isLoading = controller.publisherLoading.value;\n          return Expanded(\n              child: PublishersList(\n            publisherScrollController: _publisherScrollController,\n            publishers: publishers,\n            isLoading: isLoading,\n          ));\n        });\n  }\n}\n\nclass PublishersList extends StatelessWidget {\n  const PublishersList({\n    Key? key,\n    required ScrollController publisherScrollController,\n    required this.publishers,\n    this.isLoading = false,\n  })  : _scrollController = publisherScrollController,\n        super(key: key);\n\n  final ScrollController _scrollController;\n  final List<PublisherModel> publishers;\n  final bool isLoading;\n\n  @override\n  Widget build(BuildContext context) {\n    return AlignedGridView.count(\n      controller: _scrollController\n        ..addListener(\n          () => _scrollController.reachedEnd()\n              ? Get.find<ChooseByBookScreenController>().loadPublishers(paging: true)\n              : {},\n        ),\n      padding: EdgeInsets.only(\n        left: Get.width * .04,\n        right: Get.width * .04,\n        top: Get.width * .02,\n        bottom: Get.width * .04,\n      ),\n      itemCount: isLoading ? 15 : publishers.length,\n      crossAxisCount: 2,\n      mainAxisSpacing: Get.width * .04,\n      crossAxisSpacing: Get.width * .04,\n      itemBuilder: (context, index) {\n        return isLoading\n            ? const PublisherCardShimmer()\n            : PublisherCard(publishers[index]);\n      },\n    ).paddingOnly(top: Get.width * .03);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/choose_by_book/components/category_card.dart", "file_name": "category_card.dart", "line": 17, "line_from": 17, "line_to": 134, "snippet": "  Widget build(BuildContext context) {\n    return InkWell(\n      onTap: () => Get.to(BookListByCategory(category)),\n      child: Container(\n        padding: EdgeInsets.symmetric(\n          horizontal: Get.width * .025,\n          vertical: Get.width * .025,\n        ),\n        margin: EdgeInsets.symmetric(\n          horizontal: Get.width * .04,\n          vertical: Get.width * .015,\n        ),\n        decoration: BoxDecoration(\n          boxShadow: [\n            BoxShadow(\n              color: Colors.grey.shade400.withOpacity(0.2),\n              spreadRadius: 1,\n              blurRadius: 1,\n            ),\n          ],\n          color: Theme.of(context).cardColor,\n          borderRadius: radius12,\n        ),\n        child: Row(\n          children: [\n            category.image?.src == null\n                ? AuthorAvatar(\n                    bgColor:\n                        Theme.of(context).secondaryHeaderColor.withOpacity(.07),\n                    svg: 'book',\n                    padding: padding(5),\n                    radius: radius14,\n                  )\n                : CircleAvatar(\n                    radius: Get.width * .1,\n                    backgroundImage:\n                        CachedNetworkImageProvider(category.image!.src!),\n                  ),\n            gap18,\n            Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                SizedBox(\n                  width: Get.width * 0.6,\n                  child: Text(\n                    category.name ?? \"Uncategorized\",\n                    overflow: TextOverflow.ellipsis,\n                    softWrap: false,\n                    textAlign: TextAlign.start,\n                    style: TextStyle(\n                      fontSize: Get.width * .038,\n                      fontWeight: FontWeight.w600,\n                    ),\n                  ),\n                ),\n                gap4,\n                TitleName(title: 'Total Books: ${category.count}')\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass CategoryCardShimmer extends StatelessWidget {\n  const CategoryCardShimmer({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: EdgeInsets.symmetric(\n        horizontal: Get.width * .025,\n        vertical: Get.width * .025,\n      ),\n      margin: EdgeInsets.symmetric(\n        horizontal: Get.width * .04,\n        vertical: Get.width * .015,\n      ),\n      decoration: BoxDecoration(\n        boxShadow: [\n          BoxShadow(\n            color: Colors.grey.shade400.withOpacity(0.2),\n            spreadRadius: 1,\n            blurRadius: 1,\n          ),\n        ],\n        color: Theme.of(context).cardColor,\n        borderRadius: radius12,\n      ),\n      child: Row(\n        children: [\n          AuthorAvatar(\n            bgColor: Theme.of(context).secondaryHeaderColor.withOpacity(.07),\n            svg: 'book',\n            padding: padding(5),\n            radius: radius14,\n          ),\n          gap18,\n          Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              SizedBox(\n                width: Get.width * 0.6,\n                child: const TextShimmerLoader(),\n              ),\n              gap4,\n              TextShimmerLoader(\n                shimmerWidth: Get.width * 0.4,\n              )\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/choose_by_book/components/publisher_card.dart", "file_name": "publisher_card.dart", "line": 18, "line_from": 18, "line_to": 92, "snippet": "  Widget build(BuildContext context) {\n    debugPrint(publisher.image);\n    return InkWell(\n      onTap: () => Get.to(() => ProfileDetails(\n            profileType: ProfileType.publisher,\n            id: publisher.id,\n          )),\n      child: Container(\n        padding: EdgeInsets.only(\n          left: Get.width * .04,\n          right: Get.width * .04,\n          top: Get.width * .04,\n          bottom: Get.width * .03,\n        ),\n        decoration: BoxDecoration(\n          boxShadow: shadow(),\n          color: Theme.of(context).cardColor,\n          borderRadius: radius10,\n        ),\n        child: Column(\n          children: [\n            CircleAvatar(\n              radius: Get.width * .1,\n              backgroundImage: CachedNetworkImageProvider(publisher.image),\n            ),\n            gap10,\n            Text(\n              publisher.name,\n              textAlign: TextAlign.center,\n              style: TextStyle(\n                fontSize: Get.width * .038,\n                fontWeight: FontWeight.w600,\n              ),\n            ),\n            gap6,\n            TitleName(title: '${publisher.bookCount} books')\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass PublisherCardShimmer extends StatelessWidget {\n  const PublisherCardShimmer({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: EdgeInsets.only(\n        left: Get.width * .04,\n        right: Get.width * .04,\n        top: Get.width * .04,\n        bottom: Get.width * .03,\n      ),\n      decoration: BoxDecoration(\n        boxShadow: shadow(),\n        color: Theme.of(context).cardColor,\n        borderRadius: radius10,\n      ),\n      child: Column(\n        children: [\n          CircleAvatar(\n            radius: Get.width * .1,\n            backgroundImage: const CachedNetworkImageProvider(\"\"),\n          ),\n          gap10,\n          const TextShimmerLoader(),\n          gap6,\n          TextShimmerLoader(shimmerWidth: Get.width * 0.12),\n        ],\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/self/components/book_self_card.dart", "file_name": "book_self_card.dart", "line": 28, "line_from": 28, "line_to": 97, "snippet": "  Widget build(BuildContext context) {\n    return InkWell(\n      onLongPress: onLongPress,\n      onTap: onTap,\n      child: Container(\n          decoration: cardDecoration(context),\n          padding: gridView! ? paddingSym(2, 4) : padding(4),\n          margin: paddingV(1),\n          child: Wrap(\n            runAlignment: WrapAlignment.center,\n            crossAxisAlignment: WrapCrossAlignment.center,\n            alignment: WrapAlignment.spaceBetween,\n            children: [\n              Wrap(\n                alignment: WrapAlignment.center,\n                runAlignment: WrapAlignment.center,\n                crossAxisAlignment: gridView!\n                    ? WrapCrossAlignment.start\n                    : WrapCrossAlignment.center,\n                children: [\n                  gridView!\n                      ? Container(\n                          alignment: Alignment.centerRight,\n                          // color: Colors.red,\n                          child: trailing)\n                      : shrink,\n                  gridView! ? shrink : gapW(1),\n                  icon(colorCode: colorCode),\n                  gridView! ? gapH(17) : gapW(6),\n                  Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    crossAxisAlignment: gridView!\n                        ? CrossAxisAlignment.center\n                        : CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        title!,\n                        textAlign: TextAlign.center,\n                        style: TextStyle(\n                            fontWeight: FontWeight.w600, fontSize: 10.sp),\n                      ),\n                      gapH(2),\n                      Text(\n                        '${'Total Books:'.tr} $subtitle',\n                        textAlign: TextAlign.center,\n                        style: TextStyle(\n                            color: Colors.grey.shade500, fontSize: 9.sp),\n                      ),\n                    ],\n                  )\n                ],\n              ),\n              !gridView! ? trailing! : shrink\n            ],\n          )),\n    );\n  }\n}\n\nWidget icon({int? colorCode}) {\n  Color color;\n\n  if (colorCode == null) color = Colors.green;\n  color = Color(colorCode!);\n\n  debugPrint(\"Color -> $color\");\n\n  return SvgPicture.asset('assets/svg/folder.svg',\n      fit: BoxFit.cover, color: color);\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/self/components/create_collection/components/search_book_for_collection.dart", "file_name": "search_book_for_collection.dart", "line": 16, "line_from": 16, "line_to": 167, "snippet": "  Widget build(BuildContext context) {\n    return GetX(\n      init: Get.find<SelfPageController>(),\n      builder: (controller) {\n        final uiState = controller.uiState.value;\n        return Theme(\n          data: Theme.of(context).copyWith(\n            dialogTheme: DialogTheme(\n              backgroundColor: Theme.of(context).cardColor,\n              shape: RoundedRectangleBorder(borderRadius: radius(6)),\n            ),\n          ),\n          child: AlertDialog(\n            contentPadding: EdgeInsets.only(top: 8.w),\n            insetPadding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 4.w),\n            content: SizedBox(\n              width: 100.w,\n              child: Stack(\n                children: [\n                  SingleChildScrollView(\n                    child: ListView.builder(\n                      shrinkWrap: true,\n                      physics: const NeverScrollableScrollPhysics(),\n                      padding: EdgeInsets.only(top: 25.w, bottom: 3.w),\n                      itemCount: uiState.booksLoading\n                          ? 14\n                          : uiState.purchasedBooks.length,\n                      itemBuilder: (context, index) {\n                        final book = uiState.booksLoading\n                            ? null\n                            : uiState.purchasedBooks[index];\n                        return InkWell(\n                          onTap: () async =>\n                              await controller.toggleBookSelection(book),\n                          child: uiState.booksLoading\n                              ? const FeatureCardLoading()\n                              : FeatureCard(\n                                  purchased: true,\n                                  author: book!.authorNames,\n                                  name: book.bookName,\n                                  image: book.coverImageUrl,\n                                  totalReview: book.ratingCount,\n                                  trailing: Container(\n                                    width: 5.w,\n                                    height: 5.w,\n                                    padding: padding(.8),\n                                    decoration: BoxDecoration(\n                                      borderRadius: radius(1.5),\n                                      color: controller.isBookSelected(book)\n                                          ? Theme.of(context)\n                                              .secondaryHeaderColor\n                                          : null,\n                                      border: !controller.isBookSelected(book)\n                                          ? Border.all(\n                                              color: Colors.grey.shade500)\n                                          : const Border(),\n                                    ),\n                                    child: SvgPicture.asset(\n                                      'assets/svg/check.svg',\n                                      color: Colors.white,\n                                    ),\n                                  )),\n                        );\n                      },\n                    ),\n                  ),\n                  Align(\n                    alignment: Alignment.topCenter,\n                    child: Container(\n                      color: Theme.of(context).cardColor,\n                      padding:\n                          EdgeInsets.only(left: 6.w, right: 6.w, bottom: 3.w),\n                      child: Wrap(\n                        children: [\n                          TextField(\n                              onChanged: (value) {\n                                selfC.searchBook(value);\n                              },\n                              decoration: inputDecoration(context,\n                                  hint: 'Search By book Name'.tr,\n                                  padding: EdgeInsets.only(left: 7.w))),\n                          gapH(4.w),\n                          Obx(() => Row(\n                                mainAxisAlignment:\n                                    MainAxisAlignment.spaceBetween,\n                                children: [\n                                  _title('Purchased Books'.tr),\n                                  InkWell(\n                                    onTap: () {\n                                      if (selfC.selectAll.value) {\n                                        selfC.selectAll.value = false;\n                                        selfC.selectBookCheckList.clear();\n                                      } else {\n                                        selfC.selectAll.value = true;\n                                        selfC.selectBookCheckList.addAll(\n                                            List.generate(bookList.length,\n                                                (index) => index));\n                                      }\n                                    },\n                                    child: _title(\n                                        selfC.selectAll.value\n                                            ? 'Deselect All'.tr\n                                            : 'Select All'.tr,\n                                        color: Theme.of(context)\n                                            .secondaryHeaderColor),\n                                  ),\n                                ],\n                              )),\n                        ],\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n            actions: [\n              Btn(\n                onTap: () {\n                  selfC.selectBookCheckList.clear();\n                  Get.back();\n                },\n                text: 'Cancel'.tr,\n                width: 30.w,\n                textSize: 11.sp,\n                height: 10.w,\n                color: Colors.grey.shade200,\n                textColor: Theme.of(context).iconTheme.color,\n              ),\n              gapW(3),\n              Btn(\n                onTap: () => Get.back(),\n                text: 'Done'.tr,\n                textSize: 11.sp,\n                width: 30.w,\n                height: 10.w,\n                color: Theme.of(context).secondaryHeaderColor,\n                textColor: Colors.white,\n              ),\n              gapW(2),\n            ],\n          ),\n        );\n      },\n    );\n  }\n}\n\nText _title(text, {color}) {\n  return Text(text,\n      style: TextStyle(\n          fontSize: 11.sp, fontWeight: FontWeight.w500, color: color));\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/book_details/components/writer_and_publication.dart", "file_name": "writer_and_publication.dart", "line": 29, "line_from": 29, "line_to": 67, "snippet": "  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Text(\n          \"Writer & Publication\",\n          style: TextStyle(\n            fontSize: Get.width * .042,\n            fontWeight: FontWeight.w600,\n          ),\n        ),\n        gap10,\n        ListTitleWidget(\n          ontap: () => Get.to(() => ProfileDetails(\n                id: authorId ?? -1,\n                profileType: ProfileType.author,\n              )),\n          title: authorName,\n          type: Type.author,\n          image: authorImage,\n        ),\n        ListTitleWidget(\n          ontap: () => Get.to(() => ProfileDetails(\n                profileType: ProfileType.publisher,\n                id: publisherId ?? -1,\n              )),\n          title: publisherName,\n          type: Type.publication,\n          image: publisherImage,\n        )\n      ],\n    );\n  }\n}\n\nenum Type {\n  author,\n  publication,\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/book_details/components/review_dialog.dart", "file_name": "review_dialog.dart", "line": 18, "line_from": 18, "line_to": 162, "snippet": "  Widget build(BuildContext context) {\n    final bookDetailsController = Get.find<BookDetailsController>();\n\n    Color getColor(Set<MaterialState> states) {\n      const Set<MaterialState> interactiveStates = <MaterialState>{\n        MaterialState.dragged,\n        MaterialState.hovered,\n      };\n      if (states.any(interactiveStates.contains)) {\n        return Theme.of(context).secondaryHeaderColor;\n      }\n      return Colors.grey;\n    }\n\n    return AlertDialog(\n      scrollable: true,\n      contentPadding:\n          EdgeInsets.only(top: 5.w, left: 5.w, right: 5.w, bottom: 3.w),\n      insetPadding: padding(5),\n      title: Center(child: Text('Write a Review'.tr)),\n      content: Column(\n        children: [\n          Container(\n            width: Get.width,\n            color: Theme.of(context).bottomSheetTheme.backgroundColor,\n            child: Form(\n              key: formKey,\n              child: Column(\n                children: [\n                  gapH(3),\n                  const ReviewStars(length: 5, active: true),\n                  gapH(4),\n                  Text('Reviews are visible to users and authors',\n                      style: Theme.of(context).textTheme.labelMedium),\n                  gapH(8),\n                  Container(\n                    constraints: BoxConstraints(maxHeight: 40.w),\n                    child: Theme(\n                      data: Theme.of(context).copyWith(\n                        scrollbarTheme: ScrollbarThemeData(\n                          thickness: MaterialStateProperty.all(10),\n                          crossAxisMargin: 2,\n                          mainAxisMargin: 20,\n                          thumbColor:\n                              MaterialStateProperty.resolveWith(getColor),\n                        ),\n                      ),\n                      child: Scrollbar(\n                          interactive: true,\n                          thickness: 5,\n                          radius: const Radius.circular(10),\n                          trackVisibility: false,\n                          controller: scrollController,\n                          child: Obx(\n                            () => TextField(\n                              onChanged: (v) {\n                                booksC.reviewTextCount.value = v;\n                              },\n                              scrollController: scrollController,\n                              controller: booksC.reviewTextController.value,\n                              decoration: inputDecoration(context,\n                                  controller: booksC.reviewTextController.value,\n                                  hint:\n                                      'Tell others what you think about this book (optional)'\n                                          .tr,\n                                  ispadding: true,\n                                  text:\n                                      '${booksC.reviewTextCount.value.length} ${'character(s)'.tr}'),\n                              minLines: 10,\n                              maxLines: null,\n                              inputFormatters: [\n                                LengthLimitingTextInputFormatter(2000)\n                              ],\n                              keyboardType: TextInputType.multiline,\n                            ),\n                          )),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ],\n      ),\n      actions: [\n        Row(\n          mainAxisAlignment: MainAxisAlignment.end,\n          children: [\n            Btn(\n              text: 'Cancel'.tr,\n              color: Colors.grey.withOpacity(.25),\n              width: 25.w,\n              height: 10.w,\n              onTap: () => Navigator.pop(context),\n              textColor: Theme.of(context).textTheme.headline2!.color,\n              textSize: 3.7.w,\n              isFontBold: true,\n            ),\n            gapW(5),\n            Btn(\n              text: 'Submit'.tr,\n              color: Theme.of(context).secondaryHeaderColor,\n              width: 25.w,\n              height: 10.w,\n              onTap: () {\n                final text = booksC.reviewTextController.value.text;\n                debugPrint(text);\n                bookDetailsController.createReview(5, text);\n                booksC.reviewTextController.value.clear();\n                Navigator.pop(context);\n              },\n              textSize: 3.7.w,\n              isFontBold: true,\n            ),\n            gapW(3),\n          ],\n        )\n      ],\n    );\n  }\n}\n\nclass ReviewStars extends StatelessWidget {\n  const ReviewStars({super.key, this.length, this.active = false});\n\n  final int? length;\n  final bool? active;\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: List.generate(\n        length!,\n        (index) => svgBtn(\n          svg: 'assets/svg/star.svg',\n          color: active!\n              ? null\n              : Theme.of(context).iconTheme.color!.withOpacity(.4),\n          height: Get.width * .06,\n        ).paddingSymmetric(horizontal: 7),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "sunnah_shop_flutter/lib/presentation/ui/screens/app/book_details/components/top_bar.dart", "file_name": "top_bar.dart", "line": 15, "line_from": 15, "line_to": 101, "snippet": "  Widget build(BuildContext context) {\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: [\n        InkWell(\n          splashColor: Colors.transparent,\n          highlightColor: Colors.transparent,\n          onTap: () => Get.back(),\n          child: Icon(\n            CupertinoIcons.chevron_left,\n            size: Get.width * .07,\n          ),\n        ),\n        Row(\n          children: [\n            svgBtn(\n              svg: 'assets/svg/share.svg',\n              height: Get.width * .06,\n              onTap: () async =>\n                  shareBook(bookDetailsController.uiState.value.book),\n              color: Theme.of(context).iconTheme.color,\n            ),\n            gap20,\n            const TopBarWishBtn(),\n            gap20,\n            const TopBarCartBtn(),\n          ],\n        )\n      ],\n    ).paddingSymmetric(horizontal: Get.width * .04);\n  }\n}\n\nclass TopBarCartBtn extends StatelessWidget {\n  const TopBarCartBtn({\n    Key? key,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Obx(\n      () => AnimatedContainer(\n        duration: 800.milliseconds,\n        child: SizedBox(\n          height: Get.width * .06,\n          width: Get.width * .06,\n          child: Stack(\n            children: [\n              Positioned(\n                bottom: 0,\n                top: 0,\n                child: svgBtn(\n                  svg: 'assets/svg/cart.svg',\n                  height: Get.width * .06,\n                  onTap: () => Get.to(() => const MyCartPage()),\n                  color: Get.find<GlobalCartController>()\n                          .cartItems\n                          .value\n                          .isNotEmpty\n                      ? Theme.of(context).secondaryHeaderColor\n                      : Theme.of(context).iconTheme.color,\n                ),\n              ),\n              Get.find<GlobalCartController>().cartItems.value.isNotEmpty\n                  ? Positioned(\n                      right: -1,\n                      top: -5,\n                      child: Text(\n                        Get.find<GlobalCartController>()\n                            .cartItems\n                            .value\n                            .length\n                            .toString(),\n                        style: TextStyle(\n                          color: Theme.of(context).secondaryHeaderColor,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    )\n                  : shrink,\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "sunnah_shop_flutter/lib/presentation/ui/widgets/book_title.dart", "file_name": "book_title.dart", "line": 25, "line_from": 25, "line_to": 72, "snippet": "  Widget build(BuildContext context) {\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: [\n        Text(\n          text!,\n          style: TextStyle(\n            fontSize: fontSize ?? Get.width * .042,\n            color: color ?? Theme.of(context).textTheme.headline2!.color,\n            fontWeight: fontWeight ?? FontWeight.w600,\n          ),\n        ),\n        seeAll!\n            ? InkWell(\n                splashColor: Colors.transparent,\n                highlightColor: Colors.transparent,\n                onTap: onTap,\n                child: Text(\n                  'See All'.tr,\n                  style: TextStyle(\n                    fontSize: Get.width * .032,\n                  ),\n                ),\n              )\n            : const SizedBox.shrink(),\n      ],\n    ).paddingSymmetric(horizontal: Get.width * .04);\n  }\n}\n\nclass BookTitleShimmer extends StatelessWidget {\n  const BookTitleShimmer({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: [\n        TextShimmerLoader(\n          shimmerWidth: Get.width * 0.64,\n        ),\n        TextShimmerLoader(\n          shimmerWidth: Get.width * 0.10,\n        ),\n      ],\n    ).paddingSymmetric(horizontal: Get.width * .04);\n  }\n}"}, {"structure_type": "function", "name": "onInit", "docstring": "", "module": "globals", "file_path": "sunnah_shop_flutter/lib/presentation/controller/globals/reader_tabs_controller.dart", "file_name": "reader_tabs_controller.dart", "line": 10, "line_from": 10, "line_to": 28, "snippet": "  void onInit() {\n    tabController = TabController(length: 5, vsync: this);\n\n    super.onInit();\n  }\n}\n\nclass BookmarkTabController extends GetxController\n    with GetSingleTickerProviderStateMixin {\n  TabController? tabController;\n\n  var currentIndex = 0.obs;\n\n  @override\n  void onInit() {\n    tabController = TabController(length: 3, vsync: this);\n    super.onInit();\n  }\n}"}, {"structure_type": "function", "name": "onInit", "docstring": "", "module": "globals", "file_path": "sunnah_shop_flutter/lib/presentation/controller/globals/reader_tabs_controller.dart", "file_name": "reader_tabs_controller.dart", "line": 37, "line_from": 37, "line_to": 54, "snippet": "  void onInit() {\n    tabController = TabController(length: 3, vsync: this);\n    super.onInit();\n  }\n}\n\nclass SelfTabController extends GetxController\n    with GetSingleTickerProviderStateMixin {\n  TabController? tabController;\n\n  var currentIndex = 0.obs;\n\n  @override\n  void onInit() {\n    tabController = TabController(length: 2, vsync: this);\n    super.onInit();\n  }\n}"}, {"structure_type": "function", "name": "jumpTo", "docstring": "Immediately, without animation, reconfigure the list so that the item at\n[index]'s leading edge is at the given [alignment].\n\nThe [alignment] specifies the desired position for the leading edge of the\nitem.  The [alignment] is expected to be a value in the range \\[0.0, 1.0\\]\nand represents a proportion along the main axis of the viewport.\n\nFor a vertically scrolling view that is not reversed:\n* 0 aligns the top edge of the item with the top edge of the view.\n* 1 aligns the top edge of the item with the bottom of the view.\n* 0.5 aligns the top edge of the item with the center of the view.\n\nFor a horizontally scrolling view that is not reversed:\n* 0 aligns the left edge of the item with the left edge of the view\n* 1 aligns the left edge of the item with the right edge of the view.\n* 0.5 aligns the left edge of the item with the center of the view.", "module": "globals", "file_path": "sunnah_shop_flutter/lib/presentation/controller/globals/scroll_positioned_controller.dart", "file_name": "scroll_positioned_controller.dart", "line": 201, "line_from": 201, "line_to": 647, "snippet": "  void jumpTo({required int index, double alignment = 0}) {\n    _scrollableListState!._jumpTo(index: index, alignment: alignment);\n  }\n\n  autoScroll({Duration? time}) {\n    var c = _scrollableListState!.primary.scrollController;\n\n    c\n        .animateTo(c.position.maxScrollExtent,\n            duration: time!, curve: Curves.linear)\n        .then((value) => c.animateTo(c.position.maxScrollExtent,\n            duration: time, curve: Curves.linear))\n        .then((value) => c.animateTo(c.position.maxScrollExtent,\n            duration: time, curve: Curves.linear));\n  }\n\n  lastPosition() {\n    var c = _scrollableListState?.primary.scrollController.offset;\n    return c ?? 0;\n  }\n\n  lastAyah() {\n    var c = _scrollableListState\n        ?.primary.itemPositionsNotifier.itemPositions.value\n        .map((e) => e.index)\n        .toList()\n        .first;\n    return c;\n  }\n\n  ScrollController getScrollController() {\n    return _scrollableListState!.primary.scrollController;\n  }\n\n  // getScroller() {\n  //   WidgetsBinding.instance!.addPostFrameCallback((timeStamp) {\n  //     return _scrollableListState!.primary.scrollController;\n  //   });\n  // }\n\n  goToLast(pos) {\n    var c = _scrollableListState!.primary.scrollController;\n    c.jumpTo(pos);\n  }\n\n  stopAutoScroll() {\n    _scrollableListState!.primary.scrollController\n        .animateTo(_scrollableListState!.primary.scrollController.offset,\n            duration: const Duration(microseconds: 10), curve: Curves.linear)\n        .then((value) => _scrollableListState!.primary.scrollController\n            .animateTo(_scrollableListState!.primary.scrollController.offset,\n                duration: const Duration(microseconds: 10),\n                curve: Curves.linear))\n        .then((value) => _scrollableListState!.primary.scrollController\n            .animateTo(_scrollableListState!.primary.scrollController.offset,\n                duration: const Duration(microseconds: 10),\n                curve: Curves.linear));\n  }\n\n  previousAyatScroll() {\n    _scrollableListState!.primary.scrollController\n        .animateTo(\n            _scrollableListState!.primary.scrollController.offset -\n                (Get.height * .072 * 2),\n            duration: const Duration(microseconds: 10),\n            curve: Curves.linear)\n        .then((value) => _scrollableListState!.primary.scrollController\n            .animateTo(\n                _scrollableListState!.primary.scrollController.offset -\n                    (Get.height * .072 * 2),\n                duration: const Duration(microseconds: 10),\n                curve: Curves.linear))\n        .then((value) => _scrollableListState!\n            .primary.scrollController\n            .animateTo(\n                _scrollableListState!.primary.scrollController.offset -\n                    (Get.height * .072 * 2),\n                duration: const Duration(microseconds: 10),\n                curve: Curves.linear));\n  }\n\n  /// Animate the list over [duration] using the given [curve] such that the\n  /// item at [index] ends up with its leading edge at the given [alignment].\n  /// See [jumpTo] for an explanation of alignment.\n  ///\n  /// The [duration] must be greater than 0; otherwise, use [jumpTo].\n  ///\n  /// When item position is not available, because it's too far, the scroll\n  /// is composed into three phases:\n  ///\n  ///  1. The currently displayed list view starts scrolling.\n  ///  2. Another list view, which scrolls with the same speed, fades over the\n  ///     first one and shows items that are close to the scroll target.\n  ///  3. The second list view scrolls and stops on the target.\n  ///\n  /// The [opacityAnimationWeights] can be used to apply custom weights to these\n  /// three stages of this animation. The default weights, `[40, 20, 40]`, are\n  /// good with default [Curves.linear].  Different weights might be better for\n  /// other cases.  For example, if you use [Curves.easeOut], consider setting\n  /// [opacityAnimationWeights] to `[20, 20, 60]`.\n  ///\n  /// See [TweenSequenceItem.weight] for more info.\n  Future<void> scrollTo({\n    required int index,\n    double alignment = 0,\n    required Duration duration,\n    Curve curve = Curves.linear,\n    List<double> opacityAnimationWeights = const [40, 20, 40],\n  }) {\n    assert(_scrollableListState != null);\n    assert(opacityAnimationWeights.length == 3);\n    assert(duration > Duration.zero);\n    return _scrollableListState!._scrollTo(\n      index: index,\n      alignment: alignment,\n      duration: duration,\n      curve: curve,\n      opacityAnimationWeights: opacityAnimationWeights,\n    );\n  }\n\n  void _attach(_ScrollablePositionedListState scrollableListState) {\n    assert(_scrollableListState == null);\n    _scrollableListState = scrollableListState;\n  }\n\n  void _detach() {\n    _scrollableListState = null;\n  }\n}\n\nclass _ScrollablePositionedListState extends State<ScrollablePositionedList>\n    with TickerProviderStateMixin {\n  /// Details for the primary (active) [ListView].\n  var primary = _ListDisplayDetails(const ValueKey('Ping'));\n\n  /// Details for the secondary (transitional) [ListView] that is temporarily\n  /// shown when scrolling a long distance.\n  var secondary = _ListDisplayDetails(const ValueKey('Pong'));\n\n  final opacity = ProxyAnimation(const AlwaysStoppedAnimation<double>(0));\n\n  void Function() startAnimationCallback = () {};\n\n  bool _isTransitioning = false;\n\n  @override\n  void initState() {\n    super.initState();\n    ItemPosition? initialPosition = PageStorage.of(context)!.readState(context);\n    primary.target = initialPosition?.index ?? widget.initialScrollIndex;\n    primary.alignment =\n        initialPosition?.itemLeadingEdge ?? widget.initialAlignment;\n    if (widget.itemCount > 0 && primary.target > widget.itemCount - 1) {\n      primary.target = widget.itemCount - 1;\n    }\n    widget.itemScrollController?._attach(this);\n    primary.itemPositionsNotifier.itemPositions.addListener(_updatePositions);\n    secondary.itemPositionsNotifier.itemPositions.addListener(_updatePositions);\n  }\n\n  @override\n  void deactivate() {\n    widget.itemScrollController?._detach();\n    super.deactivate();\n  }\n\n  @override\n  void dispose() {\n    primary.itemPositionsNotifier.itemPositions\n        .removeListener(_updatePositions);\n    secondary.itemPositionsNotifier.itemPositions\n        .removeListener(_updatePositions);\n    super.dispose();\n  }\n\n  @override\n  void didUpdateWidget(ScrollablePositionedList oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (oldWidget.itemScrollController?._scrollableListState == this) {\n      oldWidget.itemScrollController?._detach();\n    }\n    if (widget.itemScrollController?._scrollableListState != this) {\n      widget.itemScrollController?._detach();\n      widget.itemScrollController?._attach(this);\n    }\n\n    if (widget.itemCount == 0) {\n      setState(() {\n        primary.target = 0;\n        secondary.target = 0;\n      });\n    } else {\n      if (primary.target > widget.itemCount - 1) {\n        setState(() {\n          primary.target = widget.itemCount - 1;\n        });\n      }\n      if (secondary.target > widget.itemCount - 1) {\n        setState(() {\n          secondary.target = widget.itemCount - 1;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n      builder: (context, constraints) {\n        final cacheExtent = _cacheExtent(constraints);\n        return GestureDetector(\n          onPanDown: (_) => _stopScroll(canceled: true),\n          excludeFromSemantics: true,\n          child: Stack(\n            children: <Widget>[\n              PostMountCallback(\n                key: primary.key,\n                callback: startAnimationCallback,\n                child: FadeTransition(\n                  opacity: ReverseAnimation(opacity),\n                  child: NotificationListener<ScrollNotification>(\n                    onNotification: (_) => _isTransitioning,\n                    child: PositionedList(\n                      itemBuilder: widget.itemBuilder,\n                      separatorBuilder: widget.separatorBuilder,\n                      itemCount: widget.itemCount,\n                      positionedIndex: primary.target,\n                      controller: primary.scrollController,\n                      itemPositionsNotifier: primary.itemPositionsNotifier,\n                      scrollDirection: widget.scrollDirection,\n                      reverse: widget.reverse,\n                      cacheExtent: cacheExtent,\n                      alignment: primary.alignment,\n                      physics: widget.physics,\n                      shrinkWrap: widget.shrinkWrap,\n                      addSemanticIndexes: widget.addSemanticIndexes,\n                      semanticChildCount: widget.semanticChildCount,\n                      padding: widget.padding,\n                      addAutomaticKeepAlives: widget.addAutomaticKeepAlives,\n                      addRepaintBoundaries: widget.addRepaintBoundaries,\n                    ),\n                  ),\n                ),\n              ),\n              if (_isTransitioning)\n                PostMountCallback(\n                  key: secondary.key,\n                  callback: startAnimationCallback,\n                  child: FadeTransition(\n                    opacity: opacity,\n                    child: NotificationListener<ScrollNotification>(\n                      onNotification: (_) => false,\n                      child: PositionedList(\n                        itemBuilder: widget.itemBuilder,\n                        separatorBuilder: widget.separatorBuilder,\n                        itemCount: widget.itemCount,\n                        itemPositionsNotifier: secondary.itemPositionsNotifier,\n                        positionedIndex: secondary.target,\n                        controller: secondary.scrollController,\n                        scrollDirection: widget.scrollDirection,\n                        reverse: widget.reverse,\n                        cacheExtent: cacheExtent,\n                        alignment: secondary.alignment,\n                        physics: widget.physics,\n                        shrinkWrap: widget.shrinkWrap,\n                        addSemanticIndexes: widget.addSemanticIndexes,\n                        semanticChildCount: widget.semanticChildCount,\n                        padding: widget.padding,\n                        addAutomaticKeepAlives: widget.addAutomaticKeepAlives,\n                        addRepaintBoundaries: widget.addRepaintBoundaries,\n                      ),\n                    ),\n                  ),\n                ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n\n  double _cacheExtent(BoxConstraints constraints) => max(\n        constraints.maxHeight * _screenScrollCount,\n        widget.minCacheExtent ?? 0,\n      );\n\n  void _jumpTo({required int index, required double alignment}) {\n    _stopScroll(canceled: true);\n    if (index > widget.itemCount - 1) {\n      index = widget.itemCount - 1;\n    }\n    setState(() {\n      primary.scrollController.jumpTo(0);\n      primary.target = index;\n      primary.alignment = alignment;\n    });\n  }\n\n  Future<void> _scrollTo({\n    required int index,\n    required double alignment,\n    required Duration duration,\n    Curve curve = Curves.linear,\n    required List<double> opacityAnimationWeights,\n  }) async {\n    if (index > widget.itemCount - 1) {\n      index = widget.itemCount - 1;\n    }\n    if (_isTransitioning) {\n      _stopScroll(canceled: true);\n      SchedulerBinding.instance.addPostFrameCallback((_) {\n        _startScroll(\n          index: index,\n          alignment: alignment,\n          duration: duration,\n          curve: curve,\n          opacityAnimationWeights: opacityAnimationWeights,\n        );\n      });\n    } else {\n      await _startScroll(\n        index: index,\n        alignment: alignment,\n        duration: duration,\n        curve: curve,\n        opacityAnimationWeights: opacityAnimationWeights,\n      );\n    }\n  }\n\n  Future<void> _startScroll({\n    required int index,\n    required double alignment,\n    required Duration duration,\n    Curve curve = Curves.linear,\n    required List<double> opacityAnimationWeights,\n  }) async {\n    final direction = index > primary.target ? 1 : -1;\n    final itemPosition = primary.itemPositionsNotifier.itemPositions.value\n        .firstWhereOrNull(\n            (ItemPosition itemPosition) => itemPosition.index == index);\n    if (itemPosition != null) {\n      // Scroll directly.\n      final localScrollAmount = itemPosition.itemLeadingEdge *\n          primary.scrollController.position.viewportDimension;\n      await primary.scrollController.animateTo(\n          primary.scrollController.offset +\n              localScrollAmount -\n              alignment * primary.scrollController.position.viewportDimension,\n          duration: duration,\n          curve: curve);\n    } else {\n      final scrollAmount = _screenScrollCount *\n          primary.scrollController.position.viewportDimension;\n      final startCompleter = Completer<void>();\n      final endCompleter = Completer<void>();\n      startAnimationCallback = () {\n        SchedulerBinding.instance.addPostFrameCallback((_) {\n          startAnimationCallback = () {};\n\n          opacity.parent = _opacityAnimation(opacityAnimationWeights).animate(\n              AnimationController(vsync: this, duration: duration)..forward());\n          secondary.scrollController.jumpTo(-direction *\n              (_screenScrollCount *\n                      primary.scrollController.position.viewportDimension -\n                  alignment *\n                      secondary.scrollController.position.viewportDimension));\n\n          startCompleter.complete(primary.scrollController.animateTo(\n              primary.scrollController.offset + direction * scrollAmount,\n              duration: duration,\n              curve: curve));\n          endCompleter.complete(secondary.scrollController\n              .animateTo(0, duration: duration, curve: curve));\n        });\n      };\n      setState(() {\n        // TODO: _startScroll can be re-entrant, which invalidates this assert.\n        // assert(!_isTransitioning);\n        secondary.target = index;\n        secondary.alignment = alignment;\n        _isTransitioning = true;\n      });\n      await Future.wait<void>([startCompleter.future, endCompleter.future]);\n      _stopScroll();\n    }\n  }\n\n  void _stopScroll({bool canceled = false}) {\n    if (!_isTransitioning) {\n      return;\n    }\n\n    if (canceled) {\n      if (primary.scrollController.hasClients) {\n        primary.scrollController.jumpTo(primary.scrollController.offset);\n      }\n      if (secondary.scrollController.hasClients) {\n        secondary.scrollController.jumpTo(secondary.scrollController.offset);\n      }\n    }\n\n    setState(() {\n      if (opacity.value >= 0.5) {\n        // Secondary [ListView] is more visible than the primary; make it the\n        // new primary.\n        var temp = primary;\n        primary = secondary;\n        secondary = temp;\n      }\n      _isTransitioning = false;\n      opacity.parent = const AlwaysStoppedAnimation<double>(0);\n    });\n  }\n\n  Animatable<double> _opacityAnimation(List<double> opacityAnimationWeights) {\n    const startOpacity = 0.0;\n    const endOpacity = 1.0;\n    return TweenSequence<double>(<TweenSequenceItem<double>>[\n      TweenSequenceItem<double>(\n          tween: ConstantTween<double>(startOpacity),\n          weight: opacityAnimationWeights[0]),\n      TweenSequenceItem<double>(\n          tween: Tween<double>(begin: startOpacity, end: endOpacity),\n          weight: opacityAnimationWeights[1]),\n      TweenSequenceItem<double>(\n          tween: ConstantTween<double>(endOpacity),\n          weight: opacityAnimationWeights[2]),\n    ]);\n  }\n\n  void _updatePositions() {\n    final itemPositions = primary.itemPositionsNotifier.itemPositions.value\n        .where((ItemPosition position) =>\n            position.itemLeadingEdge < 1 && position.itemTrailingEdge > 0);\n    if (itemPositions.isNotEmpty) {\n      PageStorage.of(context)!.writeState(\n          context,\n          itemPositions.reduce((value, element) =>\n              value.itemLeadingEdge < element.itemLeadingEdge\n                  ? value\n                  : element));\n    }\n    widget.itemPositionsNotifier?.itemPositions.value = itemPositions;\n  }\n}"}, {"structure_type": "function", "name": "buildToolbar", "docstring": "", "module": "globals", "file_path": "sunnah_shop_flutter/lib/presentation/controller/globals/text_selection_controller.dart", "file_name": "text_selection_controller.dart", "line": 11, "line_from": 11, "line_to": 93, "snippet": "  Widget buildToolbar(\n    BuildContext? context,\n    Rect? globalEditableRegion,\n    double? textLineHeight,\n    Offset? selectionMidpoint,\n    List<TextSelectionPoint>? endpoints,\n    TextSelectionDelegate? delegate,\n    ClipboardStatusNotifier? clipboardStatus,\n    Offset? lastSecondaryTapDownPosition,\n  ) {\n    final TextSelectionPoint startTextSelectionPoint = endpoints![0];\n    final TextSelectionPoint endTextSelectionPoint =\n        endpoints.length > 1 ? endpoints[1] : endpoints[0];\n    final Offset anchorAbove = Offset(\n      globalEditableRegion!.left + selectionMidpoint!.dx,\n      globalEditableRegion.top +\n          startTextSelectionPoint.point.dy -\n          textLineHeight! -\n          _kToolbarContentDistance,\n    );\n    final Offset anchorBelow = Offset(\n      globalEditableRegion.left + selectionMidpoint.dx,\n      globalEditableRegion.top +\n          endTextSelectionPoint.point.dy +\n          _kToolbarContentDistanceBelow,\n    );\n    final value = delegate!.textEditingValue;\n    return MyTextSelectionToolbar(\n      anchorAbove: anchorAbove,\n      anchorBelow: anchorBelow,\n      clipboardStatus: clipboardStatus!,\n      handleCustomButton: () {\n        debugPrint(value.selection.textInside(value.text));\n        delegate.hideToolbar();\n      },\n    );\n  }\n}\n\nclass MyTextSelectionToolbar extends StatelessWidget {\n  const MyTextSelectionToolbar({\n    Key? key,\n    required this.anchorAbove,\n    required this.anchorBelow,\n    required this.clipboardStatus,\n    required this.handleCustomButton,\n  }) : super(key: key);\n\n  final Offset anchorAbove;\n  final Offset anchorBelow;\n  final ClipboardStatusNotifier clipboardStatus;\n  final VoidCallback? handleCustomButton;\n\n  @override\n  Widget build(BuildContext context) {\n    assert(debugCheckHasMaterialLocalizations(context));\n\n    final List<_TextSelectionToolbarItemData> items =\n        <_TextSelectionToolbarItemData>[\n      _TextSelectionToolbarItemData(\n        onPressed: handleCustomButton ?? () {},\n        label: 'Custom button',\n      ),\n    ];\n\n    int childIndex = 0;\n    return TextSelectionToolbar(\n      anchorAbove: anchorAbove,\n      anchorBelow: anchorBelow,\n      toolbarBuilder: (BuildContext context, Widget child) =>\n          Container(color: Colors.pink, child: child),\n      children: items\n          .map((_TextSelectionToolbarItemData itemData) =>\n              TextSelectionToolbarTextButton(\n                padding: TextSelectionToolbarTextButton.getPadding(\n                    childIndex++, items.length),\n                onPressed: itemData.onPressed,\n                child: Text(itemData.label),\n              ))\n          .toList(),\n    );\n  }\n}"}, {"structure_type": "function", "name": "loadData", "docstring": "", "module": "locals", "file_path": "sunnah_shop_flutter/lib/presentation/controller/locals/profile_details_controller.dart", "file_name": "profile_details_controller.dart", "line": 29, "line_from": 29, "line_to": 94, "snippet": "  Future<void> loadData(\n    ProfileType? profileType,\n    int? id, {\n    AuthorModel? author,\n  }) async {\n    if (id == null) return;\n    if (profileType == ProfileType.publisher) {\n      loadPublisher(id);\n    } else {\n      loadAuthor(id, author);\n    }\n  }\n\n  Future<void> loadPublisher(int publisherId) async {\n    id = publisherId;\n    final publisher = await apiService.getPublisher(publisherId);\n    avatarObs.value = publisher.gravatar ?? publisher.banner ?? \"\";\n    nameObs.value = publisher.storeName ?? \"No Name\";\n    descriptionObs.value = publisher.location ?? \"\";\n    followStatusObs.value = Random().nextBool();\n    followerCountObs.value = Random().nextInt(199);\n    loadPublisherBooks();\n  }\n\n  Future<void> loadAuthor(int authorId, AuthorModel? author) async {\n    id = authorId;\n\n    if (author != null) {\n      descriptionObs.value = author.description;\n      nameObs.value = author.name;\n      bookCountObs.value = author.bookCount;\n      bannerObs.value = author.image;\n      avatarObs.value = author.image;\n    }\n\n    final result = await _authorRepository.getSingleAuthorDetails(authorId);\n\n    result.fold(\n      (error) => debugPrint(error),\n      (author) {\n        descriptionObs.value = author.description;\n        nameObs.value = author.name;\n        bookCountObs.value = author.bookCount;\n        bannerObs.value = author.image;\n        avatarObs.value = author.image;\n        bookCountObs.value = author.bookCount;\n        booksObs.value = author.books;\n      },\n    );\n  }\n\n  void loadPublisherBooks() async {\n    (await _bookRepository.getBooksByPublishers(id, 1)).fold(\n      (error) {\n        // need to implement error handling with toast or something\n        debugPrint(\"Error in loading publisher book -> $error\");\n      },\n      (data) {\n        booksObs.value = data;\n        bookCountObs.value = data.length;\n      },\n    );\n  }\n\n  Future<void> loadFollowStatus() async {}\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "lib", "file_path": "nuraniqaida/lib/language_selection.dart", "file_name": "language_selection.dart", "line": 13, "line_from": 13, "line_to": 119, "snippet": "  Widget build(BuildContext context) {\n    return Scaffold(\n        backgroundColor: Colors.white,\n        resizeToAvoidBottomInset: false,\n        body: Container(\n          width: Get.width,\n          height: Get.height,\n          padding: EdgeInsets.symmetric(vertical: Get.height * .2),\n          decoration: pageDecoration(context),\n          child: Wrap(\n            children: [\n              SizedBox(\n                width: Get.width,\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.center,\n                  children: [\n                    Icon(Icons.g_translate_rounded,\n                        size: Get.width * .2, color: Get.theme.cardColor.withOpacity(.8)),\n                    SizedBox(height: Get.width * .02),\n                    Text(\n                      'Choose Language',\n                      style: TextStyle(\n                          color: Colors.white,\n                          fontSize: Get.width * .06,\n                          fontWeight: FontWeight.bold),\n\n                      // Text('PIC')\n                    ).paddingSymmetric(horizontal: Get.width * .04, vertical: Get.width * .04),\n                  ],\n                ),\n              ),\n              Column(children: [\n                LangButton(\n                    onPressed: () async {\n                      settings.clickedLangButton.value = true;\n\n                      await settings.getMainDB().then((value) {\n                        settings.onInit();\n                      }).then((value) {\n                        Get.back();\n                      });\n\n                      settings.languageSelectIndex.value = 0;\n                      hive.create(Keys.languageNow, settings.languageSelectIndex.value);\n\n                      Get.updateLocale(settings.language[settings.languageSelectIndex.value]);\n                      hive.create(Keys.isLanguageClick, true);\n                      settings.langEn.value = false;\n                      hive.create(Keys.langEn, settings.langEn.value);\n                    },\n                    title: 'Bengali (\u09ac\u09be\u0982\u09b2\u09be)'),\n                SizedBox(height: Get.width * .1),\n                LangButton(\n                    onPressed: () async {\n                      settings.clickedLangButton.value = true;\n\n                      await settings.getMainDB().then((value) {\n                        settings.onInit();\n                      }).then((value) {\n                        Get.back();\n                      });\n                      settings.languageSelectIndex.value = 1;\n                      hive.create(Keys.languageNow, settings.languageSelectIndex.value);\n\n                      Get.updateLocale(settings.language[settings.languageSelectIndex.value]);\n                      hive.create(Keys.isLanguageClick, true);\n                      settings.langEn.value = true;\n                      hive.create(Keys.langEn, settings.langEn.value);\n                    },\n                    title: 'English'),\n              ]).paddingOnly(top: Get.height * .1),\n              SizedBox(\n                width: Get.width,\n                height: Get.height * .2,\n                child: Obx(\n                    () => settings.clickedLangButton.value ? waiting() : const SizedBox.shrink()),\n              ),\n            ],\n          ).paddingSymmetric(horizontal: Get.width * .04, vertical: Get.height * 0.07),\n        ));\n  }\n}\n\nclass LangButton extends StatelessWidget {\n  const LangButton({Key? key, @required this.onPressed, @required this.title, this.islogin = false})\n      : super(key: key);\n  final Function()? onPressed;\n  final String? title;\n  final bool? islogin;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: EdgeInsets.symmetric(vertical: Get.width * .01),\n      width: Get.width,\n      decoration: BoxDecoration(\n          color: Get.theme.cardColor.withOpacity(.25), borderRadius: BorderRadius.circular(20)),\n      child: TextButton(\n          style: const ButtonStyle(visualDensity: VisualDensity.compact),\n          onPressed: onPressed,\n          child: Text(\n            title!,\n            style: TextStyle(fontSize: Get.width * .04, color: Colors.white),\n          )),\n    ).paddingSymmetric(horizontal: Get.width * .02);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "settings", "file_path": "nuraniqaida/lib/settings/settings.dart", "file_name": "settings.dart", "line": 776, "line_from": 776, "line_to": 805, "snippet": "  Widget build(BuildContext context) {\n    return Text(title,\n        overflow: TextOverflow.ellipsis,\n        style: TextStyle(\n            fontSize: Get.width * .038,\n            color: settings.gradient.value\n                ? Colors.white\n                : Theme.of(context).textTheme.headline2!.color));\n  }\n}\n\nclass SubTitle extends StatelessWidget {\n  const SubTitle(this.title, {Key? key}) : super(key: key);\n  final String title;\n\n  @override\n  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return Text(title,\n        style: TextStyle(\n            color: settings.gradient.value\n                ? Colors.white\n                : theme == 5\n                    ? const Color(0xff7F909F)\n                    : const Color(0xffAAAAAA),\n            fontSize: Get.width * .035),\n        textAlign: TextAlign.end);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "settings", "file_path": "nuraniqaida/lib/settings/settings.dart", "file_name": "settings.dart", "line": 811, "line_from": 811, "line_to": 874, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.end,\n      children: [\n        Flexible(\n            child: Text(\n          title,\n          overflow: TextOverflow.ellipsis,\n          style: TextStyle(\n              fontSize: Get.width * .035,\n              color: settings.gradient.value\n                  ? Colors.white\n                  : theme == 5\n                      ? const Color(0xff7F909F)\n                      : const Color(0xffAAAAAA)),\n        )),\n        Icon(\n          Icons.arrow_drop_down_outlined,\n          size: Get.width * 0.06,\n          color: settings.gradient.value ? Colors.white : const Color(0xffAAAAAA),\n        ),\n      ],\n    );\n  }\n}\n\nclass CardName extends StatelessWidget {\n  const CardName(this.text, this.icon, {Key? key, this.size = false}) : super(key: key);\n  final String? text;\n  final String? icon;\n  final bool size;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Row(\n          mainAxisAlignment: MainAxisAlignment.start,\n          children: [\n            SvgPicture.asset(\n              'assets/icons/$icon.svg',\n              height: size ? Get.width * .048 : Get.width * 0.055,\n              color:\n                  settings.gradient.value ? Colors.white : Theme.of(context).secondaryHeaderColor,\n            ).paddingOnly(top: Get.width * .005),\n            SizedBox(width: Get.width * 0.05),\n            Text(\n              text!,\n              style: TextStyle(\n                  color: settings.gradient.value\n                      ? Colors.white\n                      : Theme.of(context).textTheme.headline2!.color,\n                  fontSize: Get.width * 0.045,\n                  fontWeight: FontWeight.bold),\n            )\n          ],\n        ),\n        SizedBox(height: Get.width * .05),\n      ],\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "home", "file_path": "nuraniqaida/lib/home/index_card.dart", "file_name": "index_card.dart", "line": 29, "line_from": 29, "line_to": 185, "snippet": "  Widget build(BuildContext context) {\n    return Obx(\n      () => Container(\n              width: Get.width,\n              padding: EdgeInsets.only(\n                  left: settings.cardView.value ? Get.width * 0.015 : Get.width * .04),\n              decoration: BoxDecoration(\n                color: cardColor ?? Theme.of(context).appBarTheme.shadowColor,\n                borderRadius:\n                    settings.cardView.value ? BorderRadius.circular(8) : BorderRadius.zero,\n                boxShadow: [\n                  BoxShadow(\n                    // color: Colors.black.withOpacity(0.05),\n                    color: !settings.gradient.value && settings.cardView.value\n                        ? Theme.of(context).secondaryHeaderColor.withOpacity(0.15)\n                        : Colors.transparent,\n                    offset: !settings.gradient.value && settings.cardView.value\n                        ? const Offset(1, 1)\n                        : Offset.zero,\n                    blurRadius: !settings.gradient.value && settings.cardView.value ? 1 : 0,\n                    spreadRadius: !settings.gradient.value && settings.cardView.value ? 1 : 0,\n                  )\n                ],\n              ),\n              child: Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  Padding(\n                    padding: EdgeInsets.symmetric(\n                        horizontal: Get.width * .04,\n                        vertical: trailing != null ? Get.width * .035 : Get.width * .027),\n                    child: Row(\n                      children: [\n                        // StarAvatar(index: index),\n                        BoxAvatar(\n                            bgColor:\n                                // settings.nightMode.value\n                                //     ? const Color(0xff4D6C91).withOpacity(0.2):\n                                settings.gradient.value\n                                    ? Theme.of(context).cardColor.withOpacity(.2)\n                                    : Theme.of(context).secondaryHeaderColor.withOpacity(.1),\n                            textColor: settings.gradient.value\n                                ? Colors.white\n                                : Theme.of(context).textTheme.headline2!.color,\n                            color:\n                                // settings.nightMode.value\n                                //     ? Colors.white.withOpacity(.2) :\n                                settings.gradient.value\n                                    ? Theme.of(context).cardColor.withOpacity(.2)\n                                    : Theme.of(context).secondaryHeaderColor.withOpacity(.2),\n                            index: index),\n                        // IndexAvatar(\n                        //     textColor: settings.gradient.value\n                        //         ? Colors.white\n                        //         : Theme.of(context).textTheme\n                        // .headline2!\n                        // .color,\n                        //     color: settings.gradient.value\n                        //         ? Theme.of(context).cardColor.withOpacity(.15)\n                        //         : Theme.of(context)\n                        //             .secondaryHeaderColor\n                        //             .withOpacity(.2),\n                        //     index: index),\n                        Wrap(\n                          direction: Axis.vertical,\n                          children: [\n                            SizedBox(\n                              width: trailing != null ? null : Get.width * .6,\n                              child: Text(title!,\n                                  overflow: TextOverflow.clip,\n                                  style: TextStyle(\n                                      color: settings.gradient.value\n                                          ? Colors.white\n                                          : Theme.of(context).textTheme.headline2!.color,\n                                      fontSize: Get.width * .036)),\n                            ),\n                            subtitle != null\n                                ? Text(subtitle!,\n                                    overflow: TextOverflow.clip,\n                                    style: TextStyle(\n                                        color: settings.gradient.value\n                                            ? Colors.white.withOpacity(.7)\n                                            : Theme.of(context).disabledColor,\n                                        fontSize: Get.width * .03))\n                                : const SizedBox.shrink(),\n                          ],\n                        ).paddingOnly(left: Get.width * .06),\n                      ],\n                    ),\n                  ),\n                  trailing != null\n                      ? Column(\n                          children: [\n                            Text(settings.banNum(trailing!),\n                                    overflow: TextOverflow.clip,\n                                    style: TextStyle(\n                                        // fontFamily: 'Al Qalam',\n                                        color: settings.gradient.value\n                                            ? Colors.white.withOpacity(.8)\n                                            : Theme.of(context).disabledColor,\n                                        fontSize: Get.width * .045))\n                                .paddingOnly(left: Get.width * .06),\n                            Text('Ayah'.tr,\n                                    overflow: TextOverflow.clip,\n                                    style: TextStyle(\n                                        // fontFamily: 'Al Qalam',\n                                        color: settings.gradient.value\n                                            ? Colors.white.withOpacity(.8)\n                                            : Theme.of(context).disabledColor,\n                                        fontSize: Get.width * .032))\n                                .paddingOnly(left: Get.width * .06),\n                          ],\n                        ).paddingOnly(right: Get.width * .05)\n                      : const SizedBox.shrink(),\n                ],\n              ))\n          .paddingSymmetric(\n              horizontal: settings.cardView.value ? Get.width * .04 : 0,\n              vertical: settings.cardView.value ? Get.width * .012 : 0),\n    );\n  }\n}\n\n// class StarAvatar extends StatelessWidget {\n//   const StarAvatar({\n//     Key? key,\n//     required this.index,\n//   }) : super(key: key);\n\n//   final int? index;\n\n//   @override\n//   Widget build(BuildContext context) {\n//     return Stack(\n//       children: [\n//         SvgPicture.asset(\n//           'assets/images/star.svg',\n//           height: Get.width * .11,\n//           color: Theme.of(context).secondaryHeaderColor.withOpacity(.4),\n//         ),\n//         Container(\n//           padding: EdgeInsets.only(top: Get.width * .01, left: Get.width * .01),\n//           alignment: Alignment.center,\n//           width: Get.width * .1,\n//           height: Get.width * .1,\n//           // color: Colors.red,\n//           child: Text(\n//             settings.banNum(index),\n//             style: TextStyle(\n//                 fontSize: Get.width * .04,\n//                 color: Theme.of(context).textTheme.headline2!.color),\n//           ),\n//         )\n//       ],\n//     );\n//   }\n// }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "home", "file_path": "nuraniqaida/lib/home/index_card.dart", "file_name": "index_card.dart", "line": 202, "line_from": 202, "line_to": 270, "snippet": "  Widget build(BuildContext context) {\n    return Stack(\n      children: [\n        Positioned(\n          child: CustomPaint(\n            size: Size(Get.width * .10, Get.width * 0.11),\n            painter: RPSCustomPainter(\n                bg: bgColor ?? Theme.of(context).secondaryHeaderColor.withOpacity(.1),\n                bgStrk: color ?? Theme.of(context).secondaryHeaderColor.withOpacity(.4)),\n          ),\n        ),\n        Positioned.fill(\n          child: Align(\n            alignment: Alignment.center,\n            child: Text(\n              settings.banNum(index),\n              textAlign: TextAlign.center,\n              style: TextStyle(\n                color: textColor ?? Theme.of(context).textTheme.headline2!.color,\n                fontSize: Get.width * .038,\n              ),\n            ),\n          ),\n        )\n      ],\n    );\n  }\n}\n\nclass IndexAvatar extends StatelessWidget {\n  const IndexAvatar({Key? key, @required this.index, this.color, this.textColor, this.height})\n      : super(key: key);\n\n  final int? index;\n  final Color? color;\n  final Color? textColor;\n  final double? height;\n\n  @override\n  Widget build(BuildContext context) {\n    var languageEn = hive.get(Keys.languageNow) == 1;\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n        height: height ?? Get.width * .11,\n        width: height ?? Get.width * .11,\n        decoration: BoxDecoration(\n            color: color ?? Theme.of(context).secondaryHeaderColor,\n\n            // theme == 5\n            //     ? Color(0xff4D6C91).withOpacity(0.2)\n            //     : Color(0xffEE6638).withOpacity(.85),\n            borderRadius: BorderRadius.circular(50)),\n        child: Center(\n          child: Text(\n            settings.banNum(index),\n\n            // settings.banNum((index)),\n            style: TextStyle(\n              fontSize: Get.width * 0.04,\n              fontWeight: languageEn ? FontWeight.w600 : FontWeight.normal,\n              color: textColor ?? Theme.of(context).textTheme.headline2!.color,\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "home", "file_path": "nuraniqaida/lib/home/index_card.dart", "file_name": "index_card.dart", "line": 285, "line_from": 285, "line_to": 382, "snippet": "//   Widget build(BuildContext context) {\n//     return Container(\n//       child: Stack(\n//         children: [\n//           Positioned(\n//             child: CustomPaint(\n//               size: Size(Get.width * .10, Get.width * 0.11),\n//               painter: RPSCustomPainter(bg: bg, bgStrk: bgStrk),\n//             ),\n//           ),\n//           Positioned.fill(\n//             child: Align(\n//               alignment: Alignment.center,\n//               child: Text(\n//                 text,\n//                 style: TextStyle(\n//                   fontSize: 15,\n//                   color: Color(txtcolor),\n//                 ),\n//                 textAlign: TextAlign.center,\n//               ),\n//             ),\n//           )\n//         ],\n//       ),\n//     );\n//   }\n// }\n\nclass MidBox extends StatelessWidget {\n  const MidBox(\n      {Key? key,\n      @required this.svg,\n      @required this.text,\n      @required this.svgColor,\n      @required this.bg,\n      @required this.bgStrk})\n      : super(key: key);\n\n  final String? svg;\n  final String? text;\n  final int? svgColor;\n  final Color? bg;\n  final Color? bgStrk;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Row(\n          children: [\n            Padding(\n              padding: const EdgeInsets.all(3),\n              child: Card(\n                elevation: 0,\n                shape: const RoundedRectangleBorder(\n                    borderRadius: BorderRadius.all(Radius.circular(10))),\n                child: SizedBox(\n                  height: Get.width * .26,\n                  width: Get.width * .28,\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      Stack(\n                        children: [\n                          Positioned(\n                            child: CustomPaint(\n                              size: Size(Get.width * .14, Get.width * 0.15),\n                              painter: RPSCustomPainter(bg: bg, bgStrk: bgStrk),\n                            ),\n                          ),\n                          Positioned(\n                            top: Get.width * .037,\n                            left: Get.width * .032,\n                            child: SvgPicture.asset(\n                              svg!,\n                              color: Color(svgColor!),\n                              height: 30,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const SizedBox(height: 8),\n                      Text(\n                        text!,\n                        style: const TextStyle(fontSize: 13),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            )\n          ],\n        )\n      ],\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "home", "file_path": "nuraniqaida/lib/home/nurani_desc.dart", "file_name": "nurani_desc.dart", "line": 37, "line_from": 37, "line_to": 399, "snippet": "  Widget build(BuildContext context) {\n    return Scaffold(\n      // backgroundColor: Theme.of(context).primaryColor,\n      body: Obx(\n        () => Container(\n          // color: Theme.of(context).primaryColor,\n          decoration: pageDecoration(context),\n          child: Column(\n            children: [\n              DetailsTopBar(\n                playAudioBtn: settings.nuraniPlayAudioBtn.value,\n                audioPlay: true,\n                leadingBack: true,\n                text: 'Lesson'.tr + ': ' + settings.banNum(chap),\n                globalKey: scaffoldKey,\n                audioBtn: true,\n                audioBtnTap: () async {\n                  await audioC.stopPlayer();\n\n                  nuraniC.cancelled.value = false;\n                  if (!settings.audioExist.value && await settings.isConnected()) {\n                    audioC.downloadChapAudio(\n                      context,\n                      title: 'Noorani Qaida'.tr,\n                      downloadLink: 'http://sscoders.com/nooraniqaida/audio/ch$chap.aes',\n                      savedFileName: 'ch$chap.aes',\n                      unarchiveFileName: 'ch$chap',\n                      filePath: \"ch${chap}_/ch${chap}_1.mp3\",\n                    );\n                  } else {\n                    settings.nuraniPlayAudioBtn.value = !settings.nuraniPlayAudioBtn.value;\n                  }\n                  if (await settings.isConnected() != true) {\n                    CustomWidget.toast('No Internet Connection'.tr);\n                  }\n                },\n                trailing: true,\n                ontap: () async {\n                  await audioC.stopPlayer();\n                  Get.to(() => NooraniSlider(chap: chap, chapName: chapName, wCount: wCount),\n                      transition: Transition.fade);\n                },\n              ),\n              // Topbar(text: 'Noorani Qaida'.tr, fontsize: Get.width * 0.05),\n              Directionality(\n                textDirection: TextDirection.rtl,\n                child: Container(\n                  // padding: EdgeInsets.symmetric(horizontal: Get.width * .02),\n                  decoration: pagesDecoration(context),\n                  height: Get.height * .9,\n                  width: Get.width,\n                  child: ClipRRect(\n                    borderRadius: pageRadius(),\n                    child: SingleChildScrollView(\n                      child: Column(\n                        children: [\n                          Container(\n                            // padding: EdgeInsets.all(Get.width * .03),\n                            decoration: BoxDecoration(\n                              color: settings.gradient.value\n                                  ? Theme.of(context).cardColor.withOpacity(.9)\n                                  : Theme.of(context).cardColor,\n                              borderRadius: cardRadius(),\n                            ),\n                            child: ExpansionWidget(\n                                initiallyExpanded: true,\n                                duration: const Duration(milliseconds: 300),\n                                titleBuilder:\n                                    (double animationValue, _, bool isExpaned, toogleFunction) {\n                                  return titleBuilder(\n                                      chap, toogleFunction, context, chapName, animationValue);\n                                },\n                                content: Column(\n                                  children: [\n                                    Divider(\n                                      color: settings.nightMode.value\n                                          ? Colors.white.withOpacity(.5)\n                                          : Theme.of(context).primaryColor,\n                                      endIndent: 14,\n                                      indent: 14,\n                                      thickness: .9,\n                                    ),\n                                    RichWidget(settings.languageSelectIndex.value == 0\n                                        ? homeC.nuraniDesc[chap! - 1].textBn.toString()\n                                        : homeC.nuraniDesc[chap! - 1].textEn.toString()),\n                                  ],\n                                )),\n                          ).paddingOnly(\n                            left: Get.width * .03,\n                            right: Get.width * .03,\n                            top: settings.gradient.value ? Get.width * .02 : Get.width * .03,\n                          ),\n                          GridView.builder(\n                            shrinkWrap: true,\n                            physics: const NeverScrollableScrollPhysics(),\n                            padding: EdgeInsets.symmetric(\n                                vertical: Get.width * .02, horizontal: Get.width * .02),\n                            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n                              crossAxisCount: 3,\n                              childAspectRatio: 1,\n                            ),\n                            itemCount: int.parse(wCount!),\n                            itemBuilder: (context, index) {\n                              String harfName = \"\";\n                              if (chap == 1) {\n                                HarfModel harf = homeC.harfList[index];\n                                harfName = settings.langEn.value ? harf.nameEn! : harf.nameBn!;\n                              }\n                              return InkWell(\n                                splashColor: Colors.transparent,\n                                highlightColor: Colors.transparent,\n                                onLongPress: () async {\n                                  if (settings.nuraniPlayAudioBtn.value &&\n                                      settings.audioExist.value) {\n                                    if (!audioC.audioPlay.value) {\n                                      audioC.audioIndex.value = index;\n                                      audioC.currentAudioIndex.value = index;\n                                      audioC.playAudio(\n                                          'ch${chap}_/ch${chap}_${audioC.currentAudioIndex.value + 1}.mp3');\n                                    } else {\n                                      audioC.audioPlayer.pause();\n                                      audioC.audioPlay.value = false;\n\n                                      if (audioC.audioIndex.value != index) {\n                                        audioC.audioIndex.value = index;\n                                        audioC.currentAudioIndex.value = index;\n                                        audioC.playAudio(\n                                            'ch${chap}_/ch${chap}_${audioC.currentAudioIndex.value + 1}.mp3');\n                                      }\n                                    }\n                                  }\n                                  nuraniC.clickedHarafNurani.value = false;\n                                  Get.dialog(DialogSvg(index: index, chap: chap, wCount: wCount));\n                                },\n                                onTap: () async {\n                                  if (settings.audioExist.value) {\n                                    if (settings.nuraniPlayAudioBtn.value &&\n                                        settings.audioExist.value) {\n                                      if (!audioC.audioPlay.value) {\n                                        audioC.audioIndex.value = index;\n                                        audioC.currentAudioIndex.value = index;\n                                        audioC.playAudio(\n                                            'ch${chap}_/ch${chap}_${audioC.currentAudioIndex.value + 1}.mp3');\n                                      } else {\n                                        audioC.audioPlayer.pause();\n                                        audioC.audioPlay.value = false;\n\n                                        if (audioC.audioIndex.value != index) {\n                                          audioC.audioIndex.value = index;\n                                          audioC.currentAudioIndex.value = index;\n                                          audioC.playAudio(\n                                              'ch${chap}_/ch${chap}_${audioC.currentAudioIndex.value + 1}.mp3');\n                                        }\n                                      }\n                                      nuraniC.currentPage.value = index;\n                                    }\n                                  }\n                                },\n                                child: Obx(\n                                  () => Container(\n                                      decoration: BoxDecoration(\n                                        color: audioC.audioIndex.value == index &&\n                                                audioC.audioPlay.value\n                                            ? Theme.of(context).cardColor\n                                            : settings.gradient.value\n                                                ? Theme.of(context).cardColor.withOpacity(.9)\n                                                : Theme.of(context).cardColor,\n                                        borderRadius: BorderRadius.circular(8),\n                                        border: audioC.audioIndex.value == index &&\n                                                audioC.audioPlay.value &&\n                                                !settings.gradient.value\n                                            ? Border.all(\n                                                style: BorderStyle.solid,\n                                                color: Theme.of(context)\n                                                    .secondaryHeaderColor\n                                                    .withOpacity(.8),\n                                                width: 1)\n                                            : const Border(),\n                                      ),\n                                      width: Get.width * .1,\n                                      height: Get.height * .1,\n                                      child: Stack(\n                                        children: [\n                                          Padding(\n                                            padding: EdgeInsets.all(\n                                                chap == 1 ? Get.width * .06 : Get.width * .05),\n                                            child: Obx(() => SvgPicture.file(\n                                                  File(\n                                                      '${nuraniC.directoryPath.value}/nuraniqaida_svg/ch${chap}_${index + 1}_800.svg'),\n                                                  color:\n                                                      theme == 5 ? const Color(0xFFC2D7EF) : null,\n                                                )),\n                                          ),\n                                          chap == 1\n                                              ? Align(\n                                                  alignment: Alignment.bottomCenter,\n                                                  child: Text(\n                                                    harfName,\n                                                    textDirection: TextDirection.ltr,\n                                                    style: TextStyle(fontSize: Get.width * .038),\n                                                  ),\n                                                )\n                                              : const SizedBox.shrink()\n                                        ],\n                                      )).paddingAll(Get.width * .01),\n                                ),\n                              );\n                            },\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass DialogSvg extends StatelessWidget {\n  DialogSvg({Key? key, @required this.index, @required this.chap, @required this.wCount})\n      : super(key: key);\n\n  final int? index;\n  final int? chap;\n  final String? wCount;\n\n  final audioC = Get.put(AwesomeAudioController());\n  final nuraniC = Get.put(NooraniHafeziCotroller());\n\n  @override\n  Widget build(BuildContext context) {\n    nuraniC.onClickNuraniPageView(index!);\n    return AlertDialog(\n      backgroundColor: Theme.of(context).cardColor,\n      insetPadding: EdgeInsets.symmetric(\n        horizontal: Get.width * .04,\n      ),\n      content: InkWell(\n        splashColor: Colors.transparent,\n        highlightColor: Colors.transparent,\n        onTap: () async {\n          if (!settings.audioExist.value) {\n            if (await settings.isConnected()) {\n              audioC.downloadConfirm(\n                  ontap: () async {\n                    Get.back();\n                    nuraniC.cancelled.value = false;\n\n                    audioC.downloadChapAudio(\n                      context,\n                      title: 'Noorani Qaida'.tr,\n                      downloadLink: 'http://sscoders.com/nooraniqaida/audio/ch$chap.aes',\n                      savedFileName: 'ch$chap.aes',\n                      unarchiveFileName: 'ch$chap',\n                      filePath: \"ch${chap}_/ch${chap}_1.mp3\",\n                    );\n                    audioC.currentAudioIndex.value = index!;\n                    audioC.audioIndex.value = index!;\n\n                    audioC.playAudio(\n                        'ch${chap}_/ch${chap}_${audioC.currentAudioIndex.value + 1}.mp3');\n                  },\n                  link: 'http://sscoders.com/nooraniqaida/audio/ch$chap.aes',\n                  title: 'Lesson'.tr + ' ${settings.banNum(chap)} ' + 'Audio'.tr);\n            } else {\n              CustomWidget.toast('No Internet Connection'.tr);\n            }\n          } else {\n            if (!audioC.audioPlay.value) {\n              audioC.audioIndex.value = index!;\n\n              audioC.playAudio('ch${chap}_/ch${chap}_${audioC.currentAudioIndex.value + 1}.mp3');\n            } else {\n              audioC.audioPlayer.pause();\n              audioC.audioPlay.value = false;\n\n              if (audioC.audioIndex.value != index) {\n                audioC.audioIndex.value = index!;\n\n                audioC.playAudio('ch${chap}_/ch${chap}_${audioC.currentAudioIndex.value + 1}.mp3');\n              }\n            }\n          }\n        },\n        child: SizedBox(\n          child: Wrap(\n            children: [\n              SizedBox(\n                width: Get.width,\n                height: Get.width * .1,\n                child: Row(\n                  children: [\n                    Obx(\n                      () => audioC.audioPlay.value && audioC.audioIndex.value == index\n                          ? Icon(\n                              Icons.pause_circle_filled_outlined,\n                              size: Get.width * .09,\n                              color: Theme.of(context).primaryColor,\n                            )\n                          : Icon(\n                              Icons.play_circle_fill_outlined,\n                              size: Get.width * .09,\n                              color: Theme.of(context).primaryColor,\n                            ),\n                    )\n                  ],\n                ),\n              ),\n              Row(\n                children: [\n                  InkWell(\n                    splashColor: Colors.transparent,\n                    highlightColor: Colors.transparent,\n                    onTap: () => nuraniC.pageControllerForNM.value\n                        .nextPage(duration: const Duration(milliseconds: 100), curve: Curves.ease),\n                    child: Icon(Icons.arrow_back_ios_new, color: Theme.of(context).primaryColor),\n                  ),\n                  Container(\n                    height: Get.width * .7,\n                    width: Get.width * .65,\n                    decoration: BoxDecoration(\n                      color: Theme.of(context).cardColor,\n                    ),\n                    child: PageView.builder(\n                      onPageChanged: (int page) {\n                        audioC.pause();\n                        audioC.currentAudioIndex.value = page;\n                      },\n                      reverse: true,\n                      controller: nuraniC.pageControllerForNM.value,\n                      itemCount: int.parse(wCount!),\n                      itemBuilder: (context, pg) {\n                        return Obx(\n                          () => SvgPicture.file(\n                            File(\n                                '${nuraniC.directoryPath.value}/nuraniqaida_svg/ch${chap}_${pg + 1}_800.svg'),\n                            fit: BoxFit.contain,\n                          ),\n                        );\n                      },\n                    ),\n                  ),\n                  InkWell(\n                    splashColor: Colors.transparent,\n                    highlightColor: Colors.transparent,\n                    onTap: () => nuraniC.pageControllerForNM.value.previousPage(\n                        duration: const Duration(milliseconds: 100), curve: Curves.ease),\n                    child: Icon(Icons.arrow_forward_ios, color: Theme.of(context).primaryColor),\n                  ),\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "nuraniqaida/lib/home/widgets/middle_icon.dart", "file_name": "middle_icon.dart", "line": 13, "line_from": 13, "line_to": 118, "snippet": "//   Widget build(BuildContext context) {\n//     var theme = themeController.currentTheme.value;\n//     return InkWell(\n//       onTap: onTap,\n//       child: Column(\n//         children: [\n//           SvgPicture.asset(\n//             icon,\n//             color: Colors.white,\n//             height: Get.width * 0.07,\n//             width: Get.width * 0.07,\n//           ),\n//           SizedBox(height: Get.width * .028),\n//           Text(\n//             text,\n//             style: TextStyle(\n//               color: Colors.white,\n//               fontWeight: FontWeight.w600,\n//               fontSize: Get.width * 0.033,\n//             ),\n//           )\n//         ],\n//       ),\n//     );\n//   }\n// }\n\nclass MiddleIcon extends StatelessWidget {\n  const MiddleIcon(\n      {Key? key, @required this.icon, @required this.text, this.color, this.colorbg, this.onTap})\n      : super(key: key);\n  final String? icon;\n  final String? text;\n  final String? color;\n  final String? colorbg;\n  final Function()? onTap;\n\n  @override\n  Widget build(BuildContext context) {\n    var paddingSvg = text == 'VIDEO'\n        ? Get.width * .042\n        : text == 'SUPPORT' || text == 'TAJWEED' || text == 'MAKHRAJ' || text == 'LAST'\n            ? Get.width * .03\n            : Get.width * .025;\n    return Obx(\n      () => InkWell(\n        onTap: onTap,\n        child: Wrap(\n          alignment: WrapAlignment.center,\n          children: [\n            Container(\n              height: Get.width * .14,\n              width: Get.width * .14,\n              padding: EdgeInsets.only(\n                left: text == 'VIDEO'\n                    ? Get.width * .052\n                    : text == 'SUPPORT' || text == 'TAJWEED' || text == 'LAST' || text == 'MAKHRAJ'\n                        ? Get.width * .035\n                        : Get.width * .025,\n                right: paddingSvg,\n                bottom: paddingSvg,\n                top: paddingSvg,\n              ),\n              decoration: BoxDecoration(\n                color: settings.gradient.value\n                    ? Colors.white.withOpacity(.2)\n                    : settings.nightMode.value\n                        ? Theme.of(context).secondaryHeaderColor.withOpacity(.2)\n                        : Theme.of(context).secondaryHeaderColor.withOpacity(.8),\n                // color: Color(int.parse(color)).withOpacity(.08),\n                // color: theme == 5 && settings.simpleView.value\n                //     ? Theme.of(context).primaryColorDark\n                //     // : Color(int.parse(colorbg)),\n                //     : Theme.of(context).cardColor.withOpacity(.8),\n                // borderRadius: BorderRadius.circular(Get.width * .04)\n                borderRadius: BorderRadius.circular(20),\n              ),\n              child: SvgPicture.asset(\n                icon!,\n                // color: Color(int.parse(color)),\n                color: Colors.white,\n                // color: Color(0xffEE6638),\n                // color: theme == 0 || theme == 5\n                //     ? Color(0xff0B9D4A)\n                //     : Color(0xffEE6638),\n                // : Theme.of(context).primaryColor,\n                height: Get.width * 0.07,\n                width: Get.width * 0.07,\n              ),\n            ),\n            Text(\n              '$text'.tr,\n              style: TextStyle(\n                color: settings.gradient.value\n                    ? Colors.white\n                    : Theme.of(context).textTheme.headline2!.color,\n                fontWeight: FontWeight.w600,\n                fontSize: Get.width * 0.032,\n              ),\n            ).paddingOnly(top: Get.width * .025)\n          ],\n        ).paddingOnly(top: Get.width * .005),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "database", "file_path": "nuraniqaida/lib/database/download_musaf.dart", "file_name": "download_musaf.dart", "line": 15, "line_from": 15, "line_to": 182, "snippet": "  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n          width: Get.width,\n          padding: EdgeInsets.all(Get.width * 0.05),\n          // height: Get.width * 0.6,\n          decoration: BoxDecoration(\n              color: Theme.of(context).bottomSheetTheme.backgroundColor,\n              borderRadius: BorderRadius.circular(10)),\n          child: Obx(() {\n            var progressVal = (progress!.value * 100).floor();\n            return Wrap(\n              children: [\n                // Center(\n                //     child: Text(\"$surahID.\" + \"Sura\".tr + \"$surahName\",\n                //         style: TextStyle(\n                //             fontSize: Get.width * .045,\n                //             fontWeight: FontWeight.w600))),\n                // SizedBox(height: Get.width * 0.13),\n\n                Text(title!,\n                    style: TextStyle(\n                      fontSize: Get.width * .045,\n                      // fontWeight: FontWeight.w500,\n                    )),\n\n                // SizedBox(height: Get.width * 0.1),\n\n                SizedBox(height: Get.width * 0.13),\n                Center(\n                  child: Container(\n                    decoration: BoxDecoration(\n                        color: Theme.of(context).secondaryHeaderColor.withOpacity(.3),\n                        borderRadius: BorderRadius.circular(12)),\n                    height: Get.width * .03,\n                    width: Get.width,\n                    child: Align(\n                      alignment: Alignment.centerLeft,\n                      child: Container(\n                        decoration: BoxDecoration(\n                            color: Theme.of(context).secondaryHeaderColor,\n                            borderRadius: BorderRadius.circular(12)),\n                        width: Get.width * progress!.value * .82,\n                      ),\n                    ),\n                  ),\n                ),\n\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: [\n                    Text(\"Downloading\".tr + \" \" + progressVal.toString() + \"%\",\n                        style: TextStyle(\n                          fontSize: Get.width * .038,\n                          // fontWeight: FontWeight.w500,\n                        )),\n                    Text(\n                      progressVal.toString() + \"/100\",\n                      style: TextStyle(\n                        fontSize: Get.width * .038,\n                        // fontWeight: FontWeight.w500,\n                      ),\n                    ),\n                  ],\n                ),\n\n                SizedBox(height: Get.width * 0.1),\n\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.end,\n                  children: [\n                    InkWell(\n                      onTap: () {\n                        Navigator.pop(context);\n                      },\n                      child: Text(\n                        \"Hide\".tr,\n                        style: TextStyle(\n                            fontWeight: FontWeight.w600,\n                            fontSize: Get.width * .04,\n                            color: Theme.of(context).secondaryHeaderColor),\n                        textAlign: TextAlign.right,\n                      ),\n                    ).paddingOnly(right: Get.width * 0.05),\n                    InkWell(\n                      onTap: () {\n                        Navigator.pop(context);\n                        nurC.cancelled.value = true;\n                        CustomWidget.toast(\"You've cancelled the download\".tr);\n\n                        nurC.audioProgress.value = 0.0;\n                      },\n                      child: Text(\n                        \"Cancel\".tr,\n                        style: TextStyle(\n                            fontWeight: FontWeight.w600,\n                            fontSize: Get.width * .04,\n                            color: Theme.of(context).secondaryHeaderColor),\n                        textAlign: TextAlign.right,\n                      ),\n                    ),\n                  ],\n                ),\n\n                // if (audioController.downloadedAudio.value == ayat)\n                //   InkWell(\n                //     onTap: () {\n                //       audioController.update();\n                //       Get.back();\n                //     },\n                //     child: Container(\n                //       padding: EdgeInsets.zero,\n                //       width: Get.width,\n                //       child: Text(\n                //         \"OK\".tr,\n                //         style: TextStyle(\n                //             fontWeight: FontWeight.w600,\n                //             fontSize: Get.width * .04,\n                //             color: Theme.of(context).secondaryHeaderColor),\n                //         textAlign: TextAlign.right,\n                //       ),\n                //     ),\n                //   ),\n              ],\n            );\n          })),\n    );\n  }\n}\n\nclass Unziping extends StatelessWidget {\n  Unziping(Key? key, this.title) : super(key: key);\n  final String title;\n\n  final nurC = Get.put(NooraniHafeziCotroller());\n  @override\n  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n          width: Get.width,\n          padding: EdgeInsets.all(Get.width * 0.05),\n          // height: Get.width * 0.6,\n          decoration: BoxDecoration(\n              color: Theme.of(context).bottomSheetTheme.backgroundColor,\n              borderRadius: BorderRadius.circular(10)),\n          child: Wrap(\n            children: [\n              CircularProgressIndicator(\n                valueColor: AlwaysStoppedAnimation<Color>(Theme.of(context).secondaryHeaderColor),\n              ).paddingOnly(top: Get.width * 0.04),\n              SizedBox(width: Get.width * 0.07),\n              Text(\n                \"Processing\".tr + \" \" + title + \"...\",\n                style: TextStyle(\n                  fontSize: Get.width * .045,\n                  // fontWeight: FontWeight.w500,\n                ),\n              ).paddingOnly(top: Get.width * 0.04, bottom: Get.width * 0.04),\n\n              // SizedBox(height: Get.width * 0.1),\n              // SizedBox(height: Get.width * 0.13),\n            ],\n          )),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "nuraniqaida/lib/drawer/contact_us.dart", "file_name": "contact_us.dart", "line": 21, "line_from": 21, "line_to": 125, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      body: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Container(\n          decoration: pageDecoration(context),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Obx(\n              () => Column(\n                children: [\n                  Topbar(ontap: () {}, text: 'Contact Us'.tr, fontsize: Get.width * 0.05),\n                  Container(\n                    height: Get.height * .9,\n                    width: Get.width,\n                    padding: EdgeInsets.only(\n                        top: !settings.gradient.value && settings.cardView.value\n                            ? Get.width * .012\n                            : 0),\n                    decoration: pagesDecoration(context),\n                    child: ClipRRect(\n                      borderRadius: settings.appBarRadius.value\n                          ? BorderRadius.only(\n                              topLeft: Radius.circular(Get.width * .07),\n                              topRight: Radius.circular(Get.width * .07))\n                          : BorderRadius.zero,\n                      child: SingleChildScrollView(\n                        child: Column(\n                          mainAxisAlignment: MainAxisAlignment.start,\n                          children: [\n                            SizedBox(\n                                height:\n                                    settings.cardView.value ? Get.width * .01 : Get.width * .02),\n\n                            ///////////////////////////////////////////////////////////////////////////\n                            ////////////////////          Main Card               /////////////////////\n                            ///////////////////////////////////////////////////////////////////////////\n\n                            Container(\n                                    padding: EdgeInsets.symmetric(\n                                        vertical: Get.width * 0.04, horizontal: Get.width * .02),\n                                    decoration: cardRadius(context),\n                                    child: Column(\n                                      children: [\n                                        Html(\n                                            data: settings.langEn.value\n                                                ? homeC.drawerList[2].en!.replaceAll(\"\"\"\n\n\"\"\", '<br>')\n                                                : homeC.drawerList[2].bn!.replaceAll(\"\"\"\n\n\"\"\", '<br>'),\n                                            style: {\n                                              \"body\": Style(\n                                                lineHeight: LineHeight.number(1.2),\n                                                fontFamily: 'Kalpurush',\n                                                color: theme == 5\n                                                    ? const Color(0xFFC2D7EF)\n                                                    : Colors.black,\n                                                fontSize: FontSize(Get.width * 0.045),\n                                              ),\n                                            },\n                                            onLinkTap: (String? url, RenderContext context,\n                                                Map<String, String> attributes, element) async {\n                                              try {\n                                                await launchUrl(Uri.parse(url!));\n                                              } catch (e) {\n                                                debugPrint(e.toString());\n                                              }\n                                            }),\n                                      ],\n                                    ))\n                                .paddingSymmetric(\n                                    vertical: settings.cardView.value ? Get.width * .02 : 0),\n\n                            SizedBox(height: Get.width * .015),\n                          ],\n                        ).paddingOnly(\n                          left: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.02,\n                          right: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.01,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nBoxDecoration cardRadius(BuildContext context) {\n  var theme = themeController.currentTheme.value;\n  return BoxDecoration(\n      color: theme == 5 && settings.simpleView.value\n          ? Theme.of(context).primaryColorDark\n          : Theme.of(context).appBarTheme.shadowColor!.withOpacity(.9),\n      borderRadius: const BorderRadius.all(Radius.circular(12)));\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "nuraniqaida/lib/drawer/about_app.dart", "file_name": "about_app.dart", "line": 20, "line_from": 20, "line_to": 116, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      body: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Container(\n          decoration: pageDecoration(context),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Obx(\n              () => Column(\n                children: [\n                  Topbar(ontap: () {}, text: 'About App'.tr, fontsize: Get.width * 0.05),\n                  Container(\n                    height: Get.height * .9,\n                    width: Get.width,\n                    padding: EdgeInsets.only(\n                        top: !settings.gradient.value && settings.cardView.value\n                            ? Get.width * .012\n                            : 0),\n                    decoration: pagesDecoration(context),\n                    child: ClipRRect(\n                      borderRadius: settings.appBarRadius.value\n                          ? BorderRadius.only(\n                              topLeft: Radius.circular(Get.width * .07),\n                              topRight: Radius.circular(Get.width * .07))\n                          : BorderRadius.zero,\n                      child: SingleChildScrollView(\n                        child: Column(\n                          mainAxisAlignment: MainAxisAlignment.start,\n                          children: [\n                            SizedBox(\n                                height:\n                                    settings.cardView.value ? Get.width * .01 : Get.width * .02),\n\n                            ///////////////////////////////////////////////////////////////////////////\n                            ////////////////////          Main Card               /////////////////////\n                            ///////////////////////////////////////////////////////////////////////////\n\n                            Container(\n                                    padding: EdgeInsets.symmetric(\n                                        vertical: Get.width * 0.04, horizontal: Get.width * .02),\n                                    decoration: cardRadius(context),\n                                    child: Column(\n                                      children: [\n                                        Html(\n                                            data: settings.langEn.value\n                                                ? homeC.drawerList[3].en!.replaceAll(\"\"\"\n\n\"\"\", '<br>')\n                                                : homeC.drawerList[3].bn!.replaceAll(\"\"\"\n\n\"\"\", '<br>'),\n                                            style: {\n                                              \"body\": Style(\n                                                lineHeight: LineHeight.number(1.2),\n                                                fontFamily: 'Kalpurush',\n                                                color: theme == 5\n                                                    ? const Color(0xFFC2D7EF)\n                                                    : Colors.black,\n                                                fontSize: FontSize(Get.width * 0.045),\n                                              ),\n                                            }),\n                                      ],\n                                    ))\n                                .paddingSymmetric(\n                                    vertical: settings.cardView.value ? Get.width * .02 : 0),\n\n                            SizedBox(height: Get.width * .015),\n                          ],\n                        ).paddingOnly(\n                          left: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.02,\n                          right: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.01,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nBoxDecoration cardRadius(BuildContext context) {\n  var theme = themeController.currentTheme.value;\n  return BoxDecoration(\n      color: theme == 5 && settings.simpleView.value\n          ? Theme.of(context).primaryColorDark\n          : Theme.of(context).appBarTheme.shadowColor!.withOpacity(.9),\n      borderRadius: const BorderRadius.all(Radius.circular(12)));\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "nuraniqaida/lib/drawer/drawer.dart", "file_name": "drawer.dart", "line": 26, "line_from": 26, "line_to": 252, "snippet": "  Widget build(BuildContext context) {\n    // SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(\n    //   statusBarColor: Colors.transparent, // status bar color\n    //   statusBarBrightness: settings.gradient.value\n    //       ? Brightness.light\n    //       : Brightness.dark, //status bar brigtness\n    //   statusBarIconBrightness: settings.gradient.value\n    //       ? Brightness.light\n    //       : Brightness.dark, //status barIcon Brightness\n    //   systemNavigationBarIconBrightness:\n    //       settings.gradient.value ? Brightness.light : Brightness.dark,\n    // ));\n\n    // final iconColor = Theme.of(context).secondaryHeaderColor;\n    return Scaffold(\n      body: MediaQuery(\n          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n          child: Obx(\n            () => Container(\n              height: Get.height,\n              width: Get.width * .75,\n              // decoration: pageDecoration(context),\n              decoration: BoxDecoration(\n                color: !settings.gradient.value ? Theme.of(context).cardColor : null,\n                gradient: settings.gradient.value\n                    ? LinearGradient(begin: Alignment.topLeft, end: Alignment.bottomRight, colors: [\n                        Theme.of(context).secondaryHeaderColor,\n                        Theme.of(context).cardTheme.color!,\n                      ])\n                    : null,\n              ),\n              child: ClipRRect(\n                // borderRadius: BorderRadius.only(\n                //     topRight: Radius.circular(Get.width * .1),\n                //     bottomRight: Radius.circular(Get.width * .15)),\n                child: ListView(\n                  padding: EdgeInsets.only(\n                      top: Get.width * .05, left: Get.width * 0.04, bottom: Get.width * 0.2),\n                  children: [\n                    ListTile(\n                      onTap: () => Get.back(),\n                      // trailing: Icon(Icons.close,\n                      //     color: Theme.of(context).iconTheme.color,\n                      //     size: Get.width * .07),\n                      title: Text(\n                        'Muslim Qaida'.tr,\n                        style: TextStyle(\n                            fontSize: Get.width * .06,\n                            color: settings.gradient.value\n                                ? Colors.white\n                                : Theme.of(context).textTheme.headline2!.color,\n                            fontWeight: FontWeight.w600),\n                      ).paddingOnly(top: Get.width * .02),\n                      subtitle: Text(\n                        'Version:'.tr +\n                            \" \" +\n                            '${settings.banNum(1)}.${settings.banNum(0)}.${settings.banNum(0)}',\n                        style: TextStyle(\n                          fontSize: Get.width * .038,\n                          fontWeight: FontWeight.w400,\n                          color: settings.gradient.value\n                              ? Colors.white\n                              : Theme.of(context).iconTheme.color,\n                        ),\n                      ).paddingOnly(top: Get.width * .005),\n                    ).paddingOnly(\n                        bottom: Get.width * .03, left: Get.width * .01, top: Get.height * 0.02),\n                    const CustomDivider(),\n\n                    ListTile(\n                      leading: const LeadingSvg(icon: 'settings'),\n                      title: TitleName('Settings'.tr),\n                      onTap: () => Get.to(() => Settings(), transition: Transition.fade),\n                    ),\n                    ListTile(\n                      onTap: () => Get.to(() => SupportUs(), transition: Transition.fade),\n                      leading: const LeadingIcon(icon: Icons.paid_outlined),\n                      title: TitleName('Support Us'.tr),\n                    ),\n\n                    const CustomDivider(),\n                    ListTile(\n                      onTap: (() async {\n                        if (await settings.isConnected()) {\n                          launchUrl(Uri.parse(\n                              'https://play.google.com/store/apps/details?id=com.sscoders.muslimqaida'));\n                        } else {\n                          CustomWidget.toast('No Internet Connection'.tr);\n                        }\n                      }),\n                      leading: const LeadingSvg(icon: 'ratings'),\n                      title: TitleName('Give Rating/Review'.tr),\n                    ),\n                    ListTile(\n                      onTap: () => Get.to(() => PrivacyPolicy(), transition: Transition.fade),\n                      leading: LeadingSvg(icon: 'privacy', isSize: true, size: Get.width * .07),\n                      title: TitleName('Privacy Policy'.tr),\n                    ),\n                    ListTile(\n                      onTap: () => Get.to(() => AboutProject(), transition: Transition.fade),\n                      leading: const LeadingSvg(icon: 'about_us'),\n                      title: TitleName('About Project'.tr),\n                    ),\n                    ListTile(\n                      onTap: () => Get.to(() => const AboutUs(), transition: Transition.fade),\n                      leading: const LeadingSvg(icon: 'about_us'),\n                      title: TitleName('About Us'.tr),\n                    ),\n                    // ListTile(\n                    //   // onTap: () => Get.to(() => Thanks()),\n                    //   leading: LeadingIcon(Icons.favorite_outline),\n                    //   title: TitleName('Thanks & Credits'.tr),\n                    // ),\n                    ListTile(\n                      onTap: () => Get.to(() => ContactUs(), transition: Transition.fade),\n                      leading: const LeadingIcon(icon: Icons.mail_outline),\n                      title: TitleName('Contact Us'.tr),\n                    ),\n                    ListTile(\n                      onTap: () {\n                        Share.share(\"\"\"\nMuslim Qaida, SSCoders\nhttps://play.google.com/store/apps/details?id=com.sscoders.muslimqaida\n                                  \"\"\");\n                      },\n                      leading: const LeadingIcon(icon: Icons.share_outlined),\n                      title: TitleName('Share App'.tr),\n                    ),\n\n                    ListTile(\n                      onTap: () => Get.to(() => AboutApp(), transition: Transition.fade),\n                      leading: const LeadingSvg(icon: 'about_app'),\n                      title: TitleName('About App'.tr),\n                    ),\n                    ListTile(\n                      // onTap: () {\n                      //   launchUrl('http://facebook.com/sscoder');\n                      // },\n                      onTap: () async {\n                        if (await settings.isConnected()) {\n                          String? fbProtocolUrl;\n                          if (Platform.isIOS) {\n                            fbProtocolUrl = 'fb://profile/108840035227578';\n                          } else {\n                            fbProtocolUrl = 'fb://page/108840035227578';\n                          }\n\n                          String? fallbackUrl = 'https://www.facebook.com/muslim.qaaida';\n\n                          try {\n                            bool launched = await launchUrl(Uri.parse(fbProtocolUrl));\n\n                            if (!launched) {\n                              await launchUrl(Uri.parse(fallbackUrl));\n                            }\n                          } catch (e) {\n                            await launchUrl(Uri.parse(fallbackUrl));\n                          }\n                        } else {\n                          CustomWidget.toast('No Internet Connection'.tr);\n                        }\n                      },\n                      leading: LeadingSvg(icon: 'facebook', isSize: true, size: Get.width * .05),\n                      title: TitleName('Apps Page'.tr),\n                    ),\n                    ListTile(\n                      onTap: () async {\n                        if (await settings.isConnected()) {\n                          String? fbProtocolUrl;\n                          if (Platform.isIOS) {\n                            fbProtocolUrl = 'fb://profile/104948265453501';\n                          } else {\n                            fbProtocolUrl = 'fb://page/104948265453501';\n                          }\n\n                          String? fallbackUrl = 'https://www.facebook.com/sscoder';\n\n                          try {\n                            bool launched = await launchUrl(Uri.parse(fbProtocolUrl));\n\n                            if (!launched) {\n                              await launchUrl(Uri.parse(fallbackUrl));\n                            }\n                          } catch (e) {\n                            await launchUrl(Uri.parse(fallbackUrl));\n                          }\n                        } else {\n                          CustomWidget.toast('No Internet Connection'.tr);\n                        }\n                      },\n                      leading: LeadingSvg(icon: 'facebook', isSize: true, size: Get.width * .05),\n                      title: TitleName('Official Page'.tr),\n                    ),\n                    ListTile(\n                      leading: const LeadingIcon(icon: Icons.public),\n                      title: TitleName('Our Website'.tr),\n                      onTap: () async {\n                        if (await settings.isConnected()) {\n                          launchUrl(Uri.parse('http://sscoders.com'));\n                        } else {\n                          CustomWidget.toast('No Internet Connection'.tr);\n                        }\n                      },\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          )),\n    );\n  }\n}\n\nclass LeadingIcon extends StatelessWidget {\n  const LeadingIcon({Key? key, this.icon}) : super(key: key);\n\n  final IconData? icon;\n\n  @override\n  Widget build(BuildContext context) {\n    return Obx(\n      () => Icon(icon,\n          color: settings.gradient.value ? Colors.white : Theme.of(context).secondaryHeaderColor,\n          size: Get.width * 0.065),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "nuraniqaida/lib/drawer/drawer.dart", "file_name": "drawer.dart", "line": 261, "line_from": 261, "line_to": 283, "snippet": "  Widget build(BuildContext context) {\n    return Obx(\n      () => SvgPicture.asset(\n        'assets/icons/$icon.svg',\n        color: settings.gradient.value ? Colors.white : Theme.of(context).secondaryHeaderColor,\n        height: isSize! ? size : Get.width * .055,\n      ).paddingOnly(left: Get.width * .005),\n    );\n  }\n}\n\nclass CustomDivider extends StatelessWidget {\n  const CustomDivider({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Divider(\n        color: Theme.of(context).dividerColor.withOpacity(.5),\n        indent: Get.width * .02,\n        endIndent: Get.width * .05,\n        thickness: Get.width * .003);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "nuraniqaida/lib/drawer/about_project.dart", "file_name": "about_project.dart", "line": 20, "line_from": 20, "line_to": 116, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      body: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Container(\n          decoration: pageDecoration(context),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Obx(\n              () => Column(\n                children: [\n                  Topbar(ontap: () {}, text: 'About Us'.tr, fontsize: Get.width * 0.05),\n                  Container(\n                    height: Get.height * .9,\n                    width: Get.width,\n                    padding: EdgeInsets.only(\n                        top: !settings.gradient.value && settings.cardView.value\n                            ? Get.width * .012\n                            : 0),\n                    decoration: pagesDecoration(context),\n                    child: ClipRRect(\n                      borderRadius: settings.appBarRadius.value\n                          ? BorderRadius.only(\n                              topLeft: Radius.circular(Get.width * .07),\n                              topRight: Radius.circular(Get.width * .07))\n                          : BorderRadius.zero,\n                      child: SingleChildScrollView(\n                        child: Column(\n                          mainAxisAlignment: MainAxisAlignment.start,\n                          children: [\n                            SizedBox(\n                                height:\n                                    settings.cardView.value ? Get.width * .01 : Get.width * .02),\n\n                            ///////////////////////////////////////////////////////////////////////////\n                            ////////////////////          Main Card               /////////////////////\n                            ///////////////////////////////////////////////////////////////////////////\n\n                            Container(\n                                    padding: EdgeInsets.symmetric(\n                                        vertical: Get.width * 0.04, horizontal: Get.width * .02),\n                                    decoration: cardRadius(context),\n                                    child: Column(\n                                      children: [\n                                        Html(\n                                            data: settings.langEn.value\n                                                ? homeC.drawerList[1].en!.replaceAll(\"\"\"\n\n\"\"\", '<br>')\n                                                : homeC.drawerList[1].bn!.replaceAll(\"\"\"\n\n\"\"\", '<br>'),\n                                            style: {\n                                              \"body\": Style(\n                                                lineHeight: LineHeight.number(1.2),\n                                                fontFamily: 'Kalpurush',\n                                                color: theme == 5\n                                                    ? const Color(0xFFC2D7EF)\n                                                    : Colors.black,\n                                                fontSize: FontSize(Get.width * 0.045),\n                                              ),\n                                            }),\n                                      ],\n                                    ))\n                                .paddingSymmetric(\n                                    vertical: settings.cardView.value ? Get.width * .02 : 0),\n\n                            SizedBox(height: Get.width * .015),\n                          ],\n                        ).paddingOnly(\n                          left: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.02,\n                          right: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.01,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nBoxDecoration cardRadius(BuildContext context) {\n  var theme = themeController.currentTheme.value;\n  return BoxDecoration(\n      color: theme == 5 && settings.simpleView.value\n          ? Theme.of(context).primaryColorDark\n          : Theme.of(context).appBarTheme.shadowColor!.withOpacity(.9),\n      borderRadius: const BorderRadius.all(Radius.circular(12)));\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "nuraniqaida/lib/drawer/privacy_policy.dart", "file_name": "privacy_policy.dart", "line": 20, "line_from": 20, "line_to": 109, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      body: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Container(\n          decoration: pageDecoration(context),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Obx(\n              () => Column(\n                children: [\n                  Topbar(ontap: () {}, text: 'Privacy Policy'.tr, fontsize: Get.width * 0.05),\n                  Container(\n                    height: Get.height * .9,\n                    width: Get.width,\n                    padding: EdgeInsets.only(\n                        top: !settings.gradient.value && settings.cardView.value\n                            ? Get.width * .012\n                            : 0),\n                    decoration: pagesDecoration(context),\n                    child: ClipRRect(\n                      borderRadius: settings.appBarRadius.value\n                          ? BorderRadius.only(\n                              topLeft: Radius.circular(Get.width * .07),\n                              topRight: Radius.circular(Get.width * .07))\n                          : BorderRadius.zero,\n                      child: SingleChildScrollView(\n                        child: Column(\n                          mainAxisAlignment: MainAxisAlignment.start,\n                          children: [\n                            SizedBox(\n                                height:\n                                    settings.cardView.value ? Get.width * .01 : Get.width * .02),\n\n                            ///////////////////////////////////////////////////////////////////////////\n                            ////////////////////          Main Card               /////////////////////\n                            ///////////////////////////////////////////////////////////////////////////\n\n                            Container(\n                                    padding: EdgeInsets.symmetric(\n                                        vertical: Get.width * 0.04, horizontal: Get.width * .02),\n                                    decoration: cardRadius(context),\n                                    child: Column(\n                                      children: [\n                                        Html(data: homeC.drawerList[0].en!.replaceAll(\"\"\"\n\n\"\"\", '<br>'), style: {\n                                          \"body\": Style(\n                                            lineHeight: LineHeight.number(1.2),\n                                            fontFamily: 'Kalpurush',\n                                            color:\n                                                theme == 5 ? const Color(0xFFC2D7EF) : Colors.black,\n                                            fontSize: FontSize(Get.width * 0.045),\n                                          ),\n                                        }),\n                                      ],\n                                    ))\n                                .paddingSymmetric(\n                                    vertical: settings.cardView.value ? Get.width * .02 : 0),\n\n                            SizedBox(height: Get.width * .015),\n                          ],\n                        ).paddingOnly(\n                          left: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.02,\n                          right: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.01,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nBoxDecoration cardRadius(BuildContext context) {\n  var theme = themeController.currentTheme.value;\n  return BoxDecoration(\n      color: theme == 5 && settings.simpleView.value\n          ? Theme.of(context).primaryColorDark\n          : Theme.of(context).appBarTheme.shadowColor!.withOpacity(.9),\n      borderRadius: const BorderRadius.all(Radius.circular(12)));\n}"}, {"structure_type": "function", "name": "Function", "docstring": "The builder of title.\n\nTypically a [Button] widget that call [toggleFunction] when pressed.", "module": "Madaniqaida", "file_path": "nuraniqaida/lib/Madaniqaida/expansion_edited.dart", "file_name": "expansion_edited.dart", "line": 30, "line_from": 30, "line_to": 88, "snippet": "  final Widget Function(double animationValue, double easeInValue,\n      bool isExpanded, Function({bool animated}) toggleFunction) titleBuilder;\n\n  /// Function to save expansion state\n  /// Called when expansion state changed\n  final void Function(bool isExpanded)? onSaveState;\n\n  /// function to restore expansion state.\n  /// Return null if there is no state to store;\n  /// in this case, [initiallyExpanded] will be used\n  final bool? Function()? onRestoreState;\n\n  /// The length of time of animation\n  final Duration duration;\n\n  /// Called when the widget expands or collapses.\n  ///\n  /// When the widget starts expanding, this function is called with the value\n  /// true. When the tile starts collapsing, this function is called with\n  /// the value false.\n  final void Function(bool)? onExpansionChanged;\n\n  /// Called when the widget will change expanded state.\n  ///\n  /// When the widget is going to start expanding/collapsing, this function is\n  /// called with the value true/false.\n  ///\n  /// Return false to prevent expanded state to change.\n  /// Return true(default) to allow expanded state changing.\n  final bool Function(bool)? onExpansionWillChange;\n\n  /// The widget that are displayed when the expansionWidget expands.\n  final Widget content;\n\n  /// Specifies if the expansionWidget is initially expanded (true) or collapsed (false, the default).\n  final bool initiallyExpanded;\n\n  /// Specifies whether the state of the content is maintained when the expansionWidget expands and collapses.\n  ///\n  /// When true, the content are kept in the tree while the expansionWidget is collapsed.\n  /// When false (default), the content are removed from the tree when the expansionWidget is\n  /// collapsed and recreated upon expansion.\n  final bool maintainState;\n  final String? shortDesc;\n\n  /// Specifies the alignment of [content], which are arranged in a column when\n  /// the expansionWidget is expanded.\n  ///\n  /// The internals of the expanded expansionWidget make use of a [Column] widget for\n  /// [content], and [Align] widget to align the column. The `expandedAlignment`\n  /// parameter is passed directly into the [Align].\n  ///\n  /// Modifying this property controls the alignment of the column within the\n  /// expanded expansionWidget.\n  final Alignment expandedAlignment;\n\n  @override\n  ExpansionWidgetState createState() => ExpansionWidgetState();\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Madaniqaida", "file_path": "nuraniqaida/lib/Madaniqaida/madani_desc.dart", "file_name": "madani_desc.dart", "line": 36, "line_from": 36, "line_to": 432, "snippet": "  Widget build(BuildContext context) {\n    var madaniDescList = homeC.madaniDescList.where((e) => e.catId == lesson);\n    var madaniDesc =\n        settings.langEn.value ? madaniDescList.first.descEn : madaniDescList.first.descBn;\n\n    return Scaffold(\n      backgroundColor: Theme.of(context).primaryColor,\n      body: Obx(\n        () => Container(\n          decoration: pageDecoration(context),\n          child: Column(\n            children: [\n              DetailsTopBar(\n                playAudioBtn: settings.madaniPlayAudioBtn.value,\n                leadingBack: true,\n                text: 'Lesson'.tr + ': ' + settings.banNum(lesson),\n                globalKey: scaffoldKey,\n                trailing: true,\n                ontap: () {\n                  audioC.stopPlayer();\n                  audioC.currentAudioIndex.value = 1;\n                  Get.to(\n                      () => MadaniSlider(lesson: lesson, lessonName: lessonName, svgCount: wCount!),\n                      transition: Transition.fade);\n                },\n                audioBtn: true,\n                audioBtnTap: () async {\n                  await audioC.stopPlayer();\n                  nuraniC.cancelled.value = false;\n                  if (!settings.audioExist.value && await settings.isConnected()) {\n                    // 'l$lesson/l${lesson}_${audioC.currentAudioIndex.value + 1}.mp3'\n                    // http://sscoders.com/madaniqaida/audio/l${index + 1}.zip\n\n                    await audioC.downloadChapAudio(context,\n                        title: 'Madani Qaida'.tr,\n                        downloadLink: 'http://sscoders.com/nooraniqaida/audio/l$lesson.aes',\n                        savedFileName: 'l$lesson.aes',\n                        unarchiveFileName: 'l$lesson',\n                        filePath: \"l$lesson/l${lesson}_$wCount.mp3\");\n                  } else {\n                    settings.madaniPlayAudioBtn.value = !settings.madaniPlayAudioBtn.value;\n                  }\n                  if (await settings.isConnected() != true) {\n                    CustomWidget.toast('No Internet Connection'.tr);\n                  }\n                },\n              ),\n              Directionality(\n                textDirection: TextDirection.rtl,\n                child: Container(\n                  decoration: pagesDecoration(context),\n                  // padding: EdgeInsets.symmetric(horizontal: Get.width * .02),\n\n                  height: Get.height * .9,\n                  width: Get.width,\n                  child: ClipRRect(\n                    borderRadius: pageRadius(),\n                    child: SingleChildScrollView(\n                      child: Column(\n                        children: [\n                          Container(\n                            // padding: EdgeInsets.all(Get.width * .03),\n                            decoration: BoxDecoration(\n                              color: settings.gradient.value\n                                  ? Theme.of(context).cardColor.withOpacity(.9)\n                                  : Theme.of(context).cardColor,\n                              borderRadius: cardRadius(),\n                            ),\n                            child: ExpansionWidget(\n                                initiallyExpanded: false,\n                                shortDesc: madaniDesc!.substring(0, 120),\n                                duration: const Duration(milliseconds: 300),\n                                titleBuilder:\n                                    (double animationValue, _, bool isExpaned, toogleFunction) {\n                                  return titleBuilder(\n                                      lesson, toogleFunction, context, lessonName, animationValue);\n                                },\n                                content: Column(\n                                  children: [\n                                    Divider(\n                                      color: settings.nightMode.value\n                                          ? Colors.white.withOpacity(.5)\n                                          : Theme.of(context).primaryColor,\n                                      endIndent: 14,\n                                      indent: 14,\n                                      thickness: .9,\n                                    ),\n                                    RichWidget(madaniDesc),\n                                  ],\n                                )),\n                          ).paddingOnly(\n                            left: Get.width * .03,\n                            right: Get.width * .03,\n                            top: settings.gradient.value ? Get.width * .02 : Get.width * .03,\n                          ),\n\n                          ////////////////////////////////////////////////////////////////////////////\n                          /////////////////////// ARABIC LETTER GRIDVIEW /////////////////////////////\n\n                          GridView.builder(\n                            shrinkWrap: true,\n                            physics: const NeverScrollableScrollPhysics(),\n                            padding: EdgeInsets.symmetric(\n                                vertical: Get.width * .02, horizontal: Get.width * .02),\n                            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n                              crossAxisCount:\n                                  lesson == 1 || lesson == 15 || lesson == 14 || lesson == 12\n                                      ? 3\n                                      : lesson! > 17\n                                          ? 3\n                                          : 4,\n                              childAspectRatio: 1,\n                            ),\n                            itemCount: lesson == 11 ? wCount! - index11ExCount : wCount,\n                            itemBuilder: (context, index) {\n                              String harfName = \"\";\n                              if (lesson == 1) {\n                                HarfModel harf = homeC.harfList[index];\n                                harfName = settings.langEn.value ? harf.nameEn! : harf.nameBn!;\n                              }\n\n                              return InkWell(\n                                splashColor: Colors.transparent,\n                                highlightColor: Colors.transparent,\n                                onLongPress: () async {\n                                  if (settings.madaniPlayAudioBtn.value &&\n                                      settings.audioExist.value) {\n                                    if (!audioC.audioPlay.value) {\n                                      audioC.audioIndex.value = index;\n                                      audioC.currentAudioIndex.value = index;\n                                      audioC.playAudio(\n                                          'l$lesson/l${lesson}_${audioC.currentAudioIndex.value + 1}.mp3');\n                                    } else {\n                                      audioC.audioPlayer.pause();\n                                      audioC.audioPlay.value = false;\n\n                                      if (audioC.audioIndex.value != index) {\n                                        audioC.audioIndex.value = index;\n                                        audioC.currentAudioIndex.value = index;\n                                        audioC.playAudio(\n                                            'l$lesson/l${lesson}_${audioC.currentAudioIndex.value + 1}.mp3');\n                                      }\n                                    }\n                                  }\n\n                                  Get.dialog(DialogSvg(\n                                    index: index,\n                                    lesson: lesson,\n                                    svgCount: wCount!,\n                                    index11ExCount: index11ExCount,\n                                  ));\n                                },\n                                onTap: () async {\n                                  if (settings.audioExist.value) {\n                                    if (settings.madaniPlayAudioBtn.value &&\n                                        settings.audioExist.value) {\n                                      if (!audioC.audioPlay.value) {\n                                        audioC.audioIndex.value = index;\n                                        audioC.currentAudioIndex.value = index;\n                                        audioC.playAudio(\n                                            'l$lesson/l${lesson}_${audioC.currentAudioIndex.value + 1}.mp3');\n                                      } else {\n                                        audioC.audioPlayer.pause();\n                                        audioC.audioPlay.value = false;\n\n                                        if (audioC.audioIndex.value != index) {\n                                          audioC.audioIndex.value = index;\n                                          audioC.currentAudioIndex.value = index;\n                                          audioC.playAudio(\n                                              'l$lesson/l${lesson}_${audioC.currentAudioIndex.value + 1}.mp3');\n                                        }\n                                      }\n                                      nuraniC.currentPage.value = index;\n                                    }\n                                  }\n                                },\n                                child: Obx(\n                                  () => Container(\n                                      decoration: BoxDecoration(\n                                        color: audioC.audioIndex.value == index &&\n                                                audioC.audioPlay.value\n                                            ? Theme.of(context).cardColor\n                                            : settings.gradient.value\n                                                ? Theme.of(context).cardColor.withOpacity(.9)\n                                                : Theme.of(context).cardColor,\n                                        borderRadius: BorderRadius.circular(8),\n                                        border: audioC.audioIndex.value == index &&\n                                                audioC.audioPlay.value &&\n                                                !settings.gradient.value\n                                            ? Border.all(\n                                                style: BorderStyle.solid,\n                                                color: Theme.of(context)\n                                                    .secondaryHeaderColor\n                                                    .withOpacity(.8),\n                                                width: 1)\n                                            : const Border(),\n                                      ),\n                                      width: Get.width * .1,\n                                      height: Get.height * .1,\n                                      child: Stack(\n                                        children: [\n                                          Padding(\n                                            padding: EdgeInsets.all(Get.width * .02),\n                                            child: Obx(() => SvgPicture.file(\n                                                  File(\n                                                      '${nuraniC.directoryPath.value}/madaniqaida_svg/l${lesson}_${index + 1}.svg'),\n                                                  fit: BoxFit.contain,\n                                                  // color: Theme.of(context)\n                                                  //     .secondaryHeaderColor,\n                                                  color:\n                                                      theme == 5 ? const Color(0xFFC2D7EF) : null,\n                                                )),\n                                          ),\n                                          lesson == 1\n                                              ? Align(\n                                                  alignment: Alignment.bottomCenter,\n                                                  child: Text(\n                                                    harfName,\n                                                    textDirection: TextDirection.ltr,\n                                                    style: TextStyle(fontSize: Get.width * .038),\n                                                  ),\n                                                )\n                                              : const SizedBox.shrink()\n                                        ],\n                                      )).paddingAll(Get.width * .01),\n                                ),\n                              );\n                            },\n                          ),\n                          lesson == 11\n                              ? Lesson11Grid(svgCount: index11ExCount)\n                              : const SizedBox.shrink()\n                        ],\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass DialogSvg extends StatelessWidget {\n  DialogSvg({\n    Key? key,\n    required this.index,\n    required this.lesson,\n    required this.svgCount,\n    required this.index11ExCount,\n  }) : super(key: key);\n\n  final int? index;\n  final int? lesson;\n  final int svgCount;\n  final int index11ExCount;\n  final nuraniC = Get.put(NooraniHafeziCotroller());\n  final theme = themeController.currentTheme.value;\n  final audioC = Get.put(AwesomeAudioController());\n\n  @override\n  Widget build(BuildContext context) {\n    nuraniC.onClickNuraniPageView(index!);\n    return AlertDialog(\n      backgroundColor: Theme.of(context).cardColor,\n      insetPadding: EdgeInsets.symmetric(horizontal: Get.width * .04),\n      content: InkWell(\n        splashColor: Colors.transparent,\n        highlightColor: Colors.transparent,\n        onTap: () async {\n          if (!settings.audioExist.value) {\n            if (await settings.isConnected()) {\n              audioC.downloadConfirm(\n                  ontap: () async {\n                    Get.back();\n                    nuraniC.cancelled.value = false;\n                    await audioC.downloadChapAudio(context,\n                        title: 'Madani Qaida'.tr,\n                        downloadLink: 'http://sscoders.com/nooraniqaida/audio/l$lesson.aes',\n                        savedFileName: 'l$lesson.aes',\n                        unarchiveFileName: 'l$lesson',\n                        filePath: \"l$lesson/l${lesson}_$svgCount.mp3\");\n                    audioC.currentAudioIndex.value = index!;\n                    audioC.audioIndex.value = index!;\n\n                    audioC.playAudio(\n                        'l${lesson!}/l${lesson}_${audioC.currentAudioIndex.value + 1}.mp3');\n                  },\n                  link: 'http://sscoders.com/nooraniqaida/audio/l$lesson.aes',\n                  title: 'Lesson'.tr + ' ${settings.banNum(lesson)} ' + 'Audio'.tr);\n            } else {\n              CustomWidget.toast('No Internet Connection'.tr);\n            }\n          } else {\n            if (!audioC.audioPlay.value) {\n              audioC.audioIndex.value = index!;\n\n              audioC.playAudio('l${lesson!}/l${lesson}_${audioC.currentAudioIndex.value + 1}.mp3');\n            } else {\n              audioC.audioPlayer.pause();\n              audioC.audioPlay.value = false;\n\n              if (audioC.audioIndex.value != index) {\n                audioC.audioIndex.value = index!;\n\n                audioC\n                    .playAudio('l${lesson!}/l${lesson}_${audioC.currentAudioIndex.value + 1}.mp3');\n              }\n            }\n          }\n        },\n        child: SizedBox(\n          child: Wrap(\n            children: [\n              SizedBox(\n                width: Get.width,\n                height: Get.width * .1,\n                child: Row(\n                  children: [\n                    Obx(\n                      () => audioC.audioPlay.value && audioC.audioIndex.value == index\n                          ? Icon(\n                              Icons.pause_circle_filled_outlined,\n                              size: Get.width * .09,\n                              color: Theme.of(context).primaryColor,\n                            )\n                          : Icon(\n                              Icons.play_circle_fill_outlined,\n                              size: Get.width * .09,\n                              color: Theme.of(context).primaryColor,\n                            ),\n                    )\n                  ],\n                ),\n              ),\n              Row(\n                children: [\n                  InkWell(\n                    splashColor: Colors.transparent,\n                    highlightColor: Colors.transparent,\n                    onTap: () => nuraniC.pageControllerForNM.value\n                        .nextPage(duration: const Duration(milliseconds: 100), curve: Curves.ease),\n                    child: Icon(Icons.arrow_back_ios_new, color: Theme.of(context).primaryColor),\n                  ),\n                  Container(\n                    height: Get.width * .7,\n                    width: Get.width * .65,\n                    decoration: BoxDecoration(\n                      color: Theme.of(context).cardColor,\n                    ),\n                    child: PageView.builder(\n                      onPageChanged: (int page) {\n                        audioC.pause();\n                        audioC.currentAudioIndex.value = page;\n                      },\n                      reverse: true,\n                      controller: nuraniC.pageControllerForNM.value,\n                      itemCount: lesson == 11 ? svgCount - index11ExCount : svgCount,\n                      itemBuilder: (context, pg) {\n                        return Obx(\n                          () => theme == 5\n                              ? SvgPicture.file(\n                                  File(\n                                      '${nuraniC.directoryPath.value}/madaniqaida_svg/l${lesson}_${pg + 1}.svg'),\n                                  fit: BoxFit.contain,\n                                  color: Theme.of(context).secondaryHeaderColor,\n                                  // color: Color(\n                                  //     0xFFC2D7EF),\n                                )\n                              : SvgPicture.file(\n                                  File(\n                                      '${nuraniC.directoryPath.value}/madaniqaida_svg/l${lesson}_${pg + 1}.svg'),\n                                  fit: BoxFit.contain,\n                                ),\n                        );\n                      },\n                    ),\n                  ),\n                  InkWell(\n                    splashColor: Colors.transparent,\n                    highlightColor: Colors.transparent,\n                    onTap: () => nuraniC.pageControllerForNM.value.previousPage(\n                        duration: const Duration(milliseconds: 100), curve: Curves.ease),\n                    child: Icon(Icons.arrow_forward_ios, color: Theme.of(context).primaryColor),\n                  ),\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "builder.", "docstring": "", "module": "Madaniqaida", "file_path": "nuraniqaida/lib/Madaniqaida/Scroll_snap_list.dart", "file_name": "Scroll_snap_list.dart", "line": 17, "line_from": 17, "line_to": 158, "snippet": "  ///Widget builder.\n  final Widget Function(BuildContext, int) itemBuilder;\n\n  ///Animation curve\n  final Curve curve;\n\n  ///Animation duration in milliseconds (ms)\n  final int duration;\n\n  ///Pixel tolerance to trigger onReachEnd.\n  ///Default is itemSize/2\n  final double? endOfListTolerance;\n\n  ///Focus to an item when user tap on it. Inactive if the list-item have its own onTap detector (use state-key to help focusing instead).\n  final bool focusOnItemTap;\n\n  ///Method to manually trigger focus to an item. Call with help of `GlobalKey<ScrollSnapListState>`.\n  final void Function(int)? focusToItem;\n\n  ///Container's margin\n  final EdgeInsetsGeometry? margin;\n\n  ///Number of item in this list\n  final int itemCount;\n\n  ///Composed of the size of each item + its margin/padding.\n  ///Size used is width if `scrollDirection` is `Axis.horizontal`, height if `Axis.vertical`.\n  ///\n  ///Example:\n  ///- Horizontal list\n  ///- Card with `width` 100\n  ///- Margin is `EdgeInsets.symmetric(horizontal: 5)`\n  ///- itemSize is `100+5+5 = 110`\n  final double itemSize;\n\n  ///Global key that's used to call `focusToItem` method to manually trigger focus event.\n  // final Key? key;\n\n  ///Global key that passed to child ListView. Can be used for PageStorageKey\n  final Key? listViewKey;\n\n  ///Callback function when list snaps/focuses to an item\n  final void Function(int) onItemFocus;\n\n  ///Callback function when user reach end of list.\n  ///\n  ///Can be used to load more data from database.\n  final Function? onReachEnd;\n\n  ///Container's padding\n  final EdgeInsetsGeometry? padding;\n\n  ///Reverse scrollDirection\n  final bool reverse;\n\n  ///Calls onItemFocus (if it exists) when ScrollUpdateNotification fires\n  final bool? updateOnScroll;\n\n  ///An optional initial position which will not snap until after the first drag\n  final double? initialIndex;\n\n  ///ListView's scrollDirection\n  final Axis scrollDirection;\n\n  ///Allows external controller\n  final ScrollController listController;\n\n  ///Scale item's size depending on distance to center\n  final bool dynamicItemSize;\n\n  ///Custom equation to determine dynamic item scaling calculation\n  ///\n  ///Input parameter is distance between item position and center of ScrollSnapList (Negative for left side, positive for right side)\n  ///\n  ///Output value is scale size (must be >=0, 1 is normal-size)\n  ///\n  ///Need to set `dynamicItemSize` to `true`\n  final double Function(double distance)? dynamicSizeEquation;\n\n  ///Custom Opacity of items off center\n  final double? dynamicItemOpacity;\n\n  ///Anchor location for selected item in the list\n  final SelectedItemAnchor selectedItemAnchor;\n\n  /// {@macro flutter.widgets.scroll_view.shrinkWrap}\n  final bool shrinkWrap;\n\n  /// {@macro flutter.widgets.scroll_view.physics}\n  final ScrollPhysics? scrollPhysics;\n\n  ///{@macro flutter.material.Material.clipBehavior}\n  final Clip clipBehavior;\n\n  ///{@macro flutter.widgets.scroll_view.keyboardDismissBehavior}\n  final ScrollViewKeyboardDismissBehavior keyboardDismissBehavior;\n\n  ///Allow List items to be scrolled using other direction\n  ///(e.g scroll items vertically if `ScrollSnapList` axis is `Axis.horizontal`)\n  final bool allowAnotherDirection;\n\n  ///If set to false(default) scroll notification bubbling will be canceled. Set to true to\n  ///dispatch notifications to further ancestors.\n  final bool dispatchScrollNotifications;\n\n  ScrollSnapList(\n      {Key? key,\n      this.background,\n      required this.itemBuilder,\n      ScrollController? listController,\n      this.curve = Curves.ease,\n      this.allowAnotherDirection = true,\n      this.duration = 500,\n      this.endOfListTolerance,\n      this.focusOnItemTap = true,\n      this.focusToItem,\n      required this.itemCount,\n      required this.itemSize,\n      this.listViewKey,\n      this.margin,\n      required this.onItemFocus,\n      this.onReachEnd,\n      this.padding,\n      this.reverse = false,\n      this.updateOnScroll,\n      this.initialIndex,\n      this.scrollDirection = Axis.horizontal,\n      this.dynamicItemSize = false,\n      this.dynamicSizeEquation,\n      this.dynamicItemOpacity,\n      this.selectedItemAnchor = SelectedItemAnchor.middle,\n      this.shrinkWrap = false,\n      this.scrollPhysics,\n      this.clipBehavior = Clip.hardEdge,\n      this.keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual,\n      this.dispatchScrollNotifications = false})\n      : listController = listController ?? ScrollController(),\n        super(key: key);\n\n  @override\n  ScrollSnapListState createState() => ScrollSnapListState();\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "Madaniqaida", "file_path": "nuraniqaida/lib/Madaniqaida/Scroll_snap_list.dart", "file_name": "Scroll_snap_list.dart", "line": 229, "line_from": 229, "line_to": 278, "snippet": "    Widget child;\n    if (widget.dynamicItemSize) {\n      child = Transform.scale(\n        scale: calculateScale(index),\n        child: widget.itemBuilder(context, index),\n      );\n    } else {\n      child = widget.itemBuilder(context, index);\n    }\n\n    if (widget.dynamicItemOpacity != null) {\n      child = Opacity(child: child, opacity: calculateOpacity(index));\n    }\n\n    if (widget.focusOnItemTap) {\n      return GestureDetector(\n        onTap: () => focusToItem(index),\n        child: child,\n      );\n    }\n    return child;\n  }\n\n  ///Calculates target pixel for scroll animation\n  ///\n  ///Then trigger `onItemFocus`\n  double _calcCardLocation(\n      {double? pixel, required double itemSize, int? index}) {\n    //current pixel: pixel\n    //listPadding is not considered as moving pixel by scroll (0.0 is after padding)\n    //substracted by itemSize/2 (to center the item)\n    //divided by pixels taken by each item\n    int cardIndex = index ?? ((pixel! - itemSize / 2) / itemSize).ceil();\n\n    //Avoid index getting out of bounds\n    if (cardIndex < 0) {\n      cardIndex = 0;\n    } else if (cardIndex > widget.itemCount - 1) {\n      cardIndex = widget.itemCount - 1;\n    }\n\n    //trigger onItemFocus\n    if (cardIndex != previousIndex) {\n      previousIndex = cardIndex;\n      widget.onItemFocus(cardIndex);\n    }\n\n    //target position\n    return (cardIndex * itemSize);\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Madaniqaida", "file_path": "nuraniqaida/lib/Madaniqaida/drawer_svg_list.dart", "file_name": "drawer_svg_list.dart", "line": 21, "line_from": 21, "line_to": 104, "snippet": "//   Widget build(BuildContext context) {\n//     var theme = themeController.currentTheme.value;\n//     var svgCount = nuraniC.madaniQaidaSvg\n//         .where((e) => e.startsWith(\n//             '/data/user/0/com.sscoders.muslimqaida/databases/madaniqaida_svg/l${lesson}_'))\n//         .toList()\n//         .length;\n//     var iconColor = Theme.of(context).secondaryHeaderColor;\n//     return MediaQuery(\n//       data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n//       child: DrawerTheme(\n//         data: DrawerTheme.of(context).copyWith(elevation: 0),\n//         child: Align(\n//           alignment: Alignment.bottomLeft,\n//           child: Container(\n//             height: Get.height * .1,\n//             width: Get.width,\n//             decoration: BoxDecoration(\n//               color: Theme.of(context).cardColor,\n//             ),\n//             child: ClipRRect(\n//               child: ListView.builder(\n//                 scrollDirection: Axis.horizontal,\n//                 // padding: EdgeInsets.only(\n//                 //     left: Get.width * 0.04, bottom: Get.width * 0.05),\n//                 itemCount: svgCount,\n//                 itemBuilder: (context, index) {\n//                   return Column(\n//                     children: [\n//                       InkWell(\n//                         onTap: () {\n//                           audioC.currentAudioIndex.value = index + 1;\n//                           nuraniC.currentPage.value = index + 1;\n//                           Get.back();\n//                           audioC.pause();\n//                         },\n//                         child: Container(\n//                             padding: EdgeInsets.all(Get.width * .04),\n//                             // color: Colors.red,\n//                             height: Get.width * .2,\n//                             child: Obx(\n//                               () => theme == 5\n//                                   ? SvgPicture.file(\n//                                       File(\n//                                           '${nuraniC.directoryPath.value}/madaniqaida_svg/l${lesson}_${index + 1}.svg'),\n//                                       fit: BoxFit.contain,\n//                                       color: Theme.of(context)\n//                                           .secondaryHeaderColor,\n//                                       // color: Color(0xFFC2D7EF),\n//                                     )\n//                                   : SvgPicture.file(\n//                                       File(\n//                                           '${nuraniC.directoryPath.value}/madaniqaida_svg/l${lesson}_${index + 1}.svg'),\n//                                       fit: BoxFit.contain,\n//                                     ),\n//                             )),\n//                       ),\n//                       Divider(\n//                         color: Theme.of(context).dividerColor,\n//                         thickness: 1,\n//                       )\n//                     ],\n//                   );\n//                 },\n//               ),\n//             ),\n//           ),\n//         ),\n//       ),\n//     );\n//   }\n// }\n\n// class LeadingIcon extends StatelessWidget {\n//   const LeadingIcon(this.icon);\n\n//   final icon;\n\n//   @override\n//   Widget build(BuildContext context) {\n//     return Icon(icon,\n//         color: Theme.of(context).secondaryHeaderColor, size: Get.width * 0.065);\n//   }\n// }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Madaniqaida", "file_path": "nuraniqaida/lib/Madaniqaida/drawer_svg_list.dart", "file_name": "drawer_svg_list.dart", "line": 113, "line_from": 113, "line_to": 131, "snippet": "//   Widget build(BuildContext context) {\n//     return SvgPicture.asset(\n//       'assets/icons/$icon.svg',\n//       color: Theme.of(context).secondaryHeaderColor,\n//       height: isSize ? size : Get.width * .055,\n//     ).paddingOnly(left: Get.width * .005);\n//   }\n// }\n\n// class CustomDivider extends StatelessWidget {\n//   @override\n//   Widget build(BuildContext context) {\n//     return Divider(\n//         color: Theme.of(context).dividerColor.withOpacity(.5),\n//         indent: Get.width * .02,\n//         endIndent: Get.width * .05,\n//         thickness: Get.width * .003);\n//   }\n// }"}, {"structure_type": "function", "name": "0", "docstring": "", "module": "videos", "file_path": "nuraniqaida/lib/videos/youtube.dart", "file_name": "youtube.dart", "line": 19, "line_from": 19, "line_to": 207, "snippet": "    final Stream<QuerySnapshot> playlist = settings.languageSelectIndex.value == 0\n        ? FirebaseFirestore.instance.collection('playlist_bn').snapshots()\n        : FirebaseFirestore.instance.collection('playlist_en').snapshots();\n    return Scaffold(\n        backgroundColor: Theme.of(context).primaryColor,\n        body: Container(\n            decoration: pageDecoration(context),\n            child: Column(children: [\n              Topbar(\n                text: 'Tajweed Video'.tr,\n                fontsize: Get.width * .045,\n                ontap: () {},\n              ),\n              Container(\n                  // padding: EdgeInsets.symmetric(horizontal: Get.width * .02),\n                  decoration: pagesDecoration(context),\n                  height: Get.height * .9,\n                  width: Get.width,\n                  child: ClipRRect(\n                      borderRadius: pageRadius(),\n                      child: Column(\n                        children: [\n                          ConnectivityBuilder(\n                              builder: (context, isConnected, status) => StreamBuilder<\n                                      QuerySnapshot>(\n                                  stream: playlist,\n                                  builder: (context, snapshot) {\n                                    if (snapshot.hasData) {\n                                      final data = snapshot.data?.docs;\n\n                                      return data!.isEmpty\n                                          ? loader()\n                                          : Expanded(\n                                              child: ListView.builder(\n                                                  padding: EdgeInsets.symmetric(\n                                                      vertical: Get.width * .02),\n                                                  itemCount: data.length,\n                                                  itemBuilder: (context, index) {\n                                                    // final video = videoList[index];\n                                                    return Column(\n                                                      children: [\n                                                        Container(\n                                                                padding: EdgeInsets.only(\n                                                                    top: Get.width * .04,\n                                                                    bottom: Get.width * .04,\n                                                                    left: Get.width * .04),\n                                                                width: Get.width,\n                                                                decoration: BoxDecoration(\n                                                                  color: settings.gradient.value &&\n                                                                          settings.cardView.value\n                                                                      ? Theme.of(context)\n                                                                          .cardColor\n                                                                          .withOpacity(.2)\n                                                                      : settings.gradient.value &&\n                                                                              settings\n                                                                                  .simpleView.value\n                                                                          ? Colors.transparent\n                                                                          : Theme.of(context)\n                                                                              .cardColor,\n                                                                  borderRadius:\n                                                                      BorderRadius.circular(\n                                                                          Get.width * .04),\n                                                                  boxShadow: [\n                                                                    BoxShadow(\n                                                                      // color: Colors.black.withOpacity(0.05),\n                                                                      color: !settings\n                                                                                  .gradient.value &&\n                                                                              settings\n                                                                                  .cardView.value\n                                                                          ? Theme.of(context)\n                                                                              .secondaryHeaderColor\n                                                                              .withOpacity(0.15)\n                                                                          : Colors.transparent,\n                                                                      offset: !settings\n                                                                                  .gradient.value &&\n                                                                              settings\n                                                                                  .cardView.value\n                                                                          ? const Offset(1, 1)\n                                                                          : Offset.zero,\n                                                                      blurRadius: !settings\n                                                                                  .gradient.value &&\n                                                                              settings\n                                                                                  .cardView.value\n                                                                          ? 1\n                                                                          : 0,\n                                                                      spreadRadius: !settings\n                                                                                  .gradient.value &&\n                                                                              settings\n                                                                                  .cardView.value\n                                                                          ? 1\n                                                                          : 0,\n                                                                    )\n                                                                  ],\n                                                                ),\n                                                                child: InkWell(\n                                                                  onTap: () async {\n                                                                    var connection =\n                                                                        await (Connectivity()\n                                                                            .checkConnection());\n\n                                                                    if (!connection) {\n                                                                      CustomWidget.toast(\n                                                                          \"No Internet Connection\"\n                                                                              .tr);\n                                                                    } else {\n                                                                      Get.to(\n                                                                        () => TajweedVideo(\n                                                                          name: data[index]['name'],\n                                                                          id: data[index]['link'],\n                                                                        ),\n                                                                      );\n                                                                    }\n                                                                  },\n                                                                  child: Container(\n                                                                    padding: EdgeInsets.all(\n                                                                        Get.width * .02),\n                                                                    child: Row(\n                                                                      children: [\n                                                                        Icon(\n                                                                          Icons.video_library,\n                                                                          size: Get.width * .1,\n                                                                          color: settings\n                                                                                  .gradient.value\n                                                                              ? Colors.white\n                                                                              : Theme.of(context)\n                                                                                  .secondaryHeaderColor,\n                                                                        ),\n                                                                        SizedBox(\n                                                                            width: Get.width * .04),\n                                                                        SizedBox(\n                                                                          width: Get.width * .7,\n                                                                          child: Text(\n                                                                            data[index]['name'],\n                                                                            overflow:\n                                                                                TextOverflow.clip,\n                                                                            style: TextStyle(\n                                                                                color: settings\n                                                                                        .gradient\n                                                                                        .value\n                                                                                    ? Colors.white\n                                                                                    : Theme.of(\n                                                                                            context)\n                                                                                        .textTheme\n                                                                                        .headline2!\n                                                                                        .color,\n                                                                                fontSize:\n                                                                                    Get.width * .04,\n                                                                                fontWeight:\n                                                                                    FontWeight\n                                                                                        .bold),\n                                                                          ),\n                                                                        ),\n                                                                      ],\n                                                                    ),\n                                                                  ),\n                                                                ))\n                                                            .paddingSymmetric(\n                                                                horizontal: settings.cardView.value\n                                                                    ? Get.width * .04\n                                                                    : 0,\n                                                                vertical: settings.cardView.value\n                                                                    ? Get.width * .015\n                                                                    : 0),\n                                                        settings.simpleView.value &&\n                                                                index != data.length - 1\n                                                            ? Divider(\n                                                                color: settings.gradient.value &&\n                                                                        settings.simpleView.value\n                                                                    ? Theme.of(context)\n                                                                        .cardColor\n                                                                        .withOpacity(.5)\n                                                                    : Theme.of(context)\n                                                                        .disabledColor\n                                                                        .withOpacity(.5),\n                                                                height: Get.width * .002,\n                                                              )\n                                                            : const SizedBox.shrink(),\n                                                      ],\n                                                    );\n                                                  }),\n                                            );\n                                    } else {\n                                      return loader();\n                                    }\n                                  })),\n                        ],\n                      )))\n            ])));\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "TopBar", "file_path": "nuraniqaida/lib/TopBar/Topbar.dart", "file_name": "Topbar.dart", "line": 32, "line_from": 32, "line_to": 213, "snippet": "  Widget build(BuildContext context) {\n    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(\n      statusBarColor: settings.gradient.value\n          ? Colors.transparent\n          : Theme.of(context).primaryColor, // status bar color\n      statusBarBrightness: Platform.isAndroid\n          ? Brightness.light\n          : Brightness.dark, //status bar brigtness\n      statusBarIconBrightness: Platform.isAndroid\n          ? Brightness.light\n          : Brightness.dark, //status barIcon Brightness\n      systemNavigationBarIconBrightness:\n          Platform.isAndroid ? Brightness.light : Brightness.dark,\n    ));\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Center(\n        child: SizedBox(\n          // color: !settings.gradient.value\n          //     ? Theme.of(context).primaryColor\n          //     : Colors.transparent,\n          height: Get.height * .1,\n          width: Get.width,\n          child: Padding(\n            padding: EdgeInsets.only(\n              top: Get.width * 0.07,\n              left: Get.width * 0.05,\n              right: Get.width * 0.05,\n            ),\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.end,\n              children: [\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: [\n                    InkWell(\n                        borderRadius: BorderRadius.circular(100),\n                        onTap: () {\n                          widget.globalKey!.currentState!.toggle();\n                        },\n                        child: SizedBox(\n                          height: Get.width * 0.05,\n                          width: Get.width * 0.05,\n                          child: SvgPicture.asset(\n                            \"assets/icons/menu.svg\",\n                            height: Get.width * 0.04,\n                            width: Get.width * 0.04,\n                            // color: Theme.of(context).textTheme\n                            // .headline2!\n                            // .color,\n                            // color: Colors.white,\n                            color: Theme.of(context).primaryColorLight,\n                          ),\n                        )),\n                    TitleBar(text: widget.text, fontsize: Get.width * .055)\n                        .paddingOnly(left: Get.width * .02),\n\n                    // InkWell(\n                    //   onTap: () {\n                    //     showPickerIcons(context);\n                    //   },\n                    //   child: SvgPicture.asset(\n                    //     \"assets/icons/direct.svg\",\n                    //     height: Get.width * 0.045,\n                    //     width: Get.width * 0.045,\n                    //     color: Colors.black,\n                    //   ),\n                    // ),\n                    // InkWell(\n                    //   onTap: () {\n                    //     // Get.to(() => MyHomePage());\n                    //     // showAnimatedDialog(\n                    //     //   context: context,\n                    //     //   barrierDismissible: true,\n                    //     //   builder: (BuildContext context) {\n                    //     //     return SearchDialog();\n                    //     //   },\n                    //     //   animationType: DialogTransitionType.slideFromTop,\n                    //     //   curve: Curves.easeInOut,\n                    //     //   duration: Duration(milliseconds: 500),\n                    //     // );\n                    //   },\n                    //   child: SvgPicture.asset(\n                    //     \"assets/icons/search.svg\",\n                    //     height: Get.width * 0.045,\n                    //     width: Get.width * 0.045,\n                    //     color: Colors.white,\n                    //   ),\n                    // ),\n\n                    widget.googleSignin\n                        ? InkWell(\n                            onTap: () {\n                              // FirebaseDB().signIn().then((value) async {\n                              //   // Get.find<PlanController>().isLogedIn.value = true;\n                              //   await collectionController.getBackup();\n                              // }).then((value) =>\n                              //     CustomWidget.toast(\"Data retrieved from Google\"));\n                            },\n                            child: const Icon(Icons.login, color: Colors.white))\n                        : InkWell(\n                            onTap: () {\n                              Get.to(() => Settings(),\n                                  transition: Transition.fade);\n                              // showAnimatedDialog(\n                              //   context: context,\n                              //   barrierDismissible: true,\n                              //   builder: (BuildContext context) {\n                              //     return SearchDialog();\n                              //   },\n                              //   animationType: DialogTransitionType.slideFromTop,\n                              //   curve: Curves.easeInOut,\n                              //   duration: Duration(milliseconds: 500),\n                              // );\n                            },\n                            child: SvgPicture.asset(\n                              \"assets/icons/settings.svg\",\n                              height: Get.width * 0.055,\n                              width: Get.width * 0.055,\n                              // color: Colors.white,\n                              color: Theme.of(context).primaryColorLight,\n                              // color: Theme.of(context).textTheme\n                              // .headline2!\n                              // .color,\n                            ),\n                          ),\n\n                    widget.trailing\n                        ? InkWell(\n                            onTap: widget.ontap,\n                            child: Padding(\n                              padding: const EdgeInsets.only(\n                                  top: 8, bottom: 8, right: 0),\n                              child: SvgPicture.asset(\n                                'assets/icons/books.svg',\n                                height: Get.width * 0.050,\n                                color: Colors.white,\n                              ),\n                            ),\n                          )\n                        : const SizedBox.shrink()\n                  ],\n                ),\n              ],\n            ).paddingOnly(\n                bottom: settings.gradient.value ? 0 : Get.width * .01),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass DetailsTopBar extends StatefulWidget {\n  const DetailsTopBar({\n    Key? key,\n    @required this.text,\n    @required this.globalKey,\n    @required this.ontap,\n    this.audioBtnTap,\n    this.audioBtn = false,\n    this.playAudioBtn = false,\n    this.audioPlay = false,\n    this.trailing = false,\n    this.leadingBack = false,\n    this.quickTools = false,\n  }) : super(key: key);\n\n  final bool? trailing;\n  final bool? leadingBack;\n  final bool? quickTools;\n  final Function()? ontap;\n  final bool? audioPlay;\n  final bool? audioBtn;\n  final bool? playAudioBtn;\n  final Function()? audioBtnTap;\n  final String? text;\n  final GlobalKey<ScaffoldState>? globalKey;\n\n  @override\n  _DetailsTopBar createState() => _DetailsTopBar();\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "TopBar", "file_path": "nuraniqaida/lib/TopBar/Topbar.dart", "file_name": "Topbar.dart", "line": 220, "line_from": 220, "line_to": 396, "snippet": "  // void initState() {\n  //   super.initState();\n  // }\n\n  @override\n  Widget build(BuildContext context) {\n    // var languageEn = hive.get(Keys.languageNow) == 1;\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n        padding: EdgeInsets.symmetric(horizontal: Get.width * .04),\n        color: settings.gradient.value ? null : Theme.of(context).primaryColor,\n        height: Get.height * .1,\n        width: Get.width,\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.end,\n          children: [\n            Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: [\n                widget.leadingBack!\n                    ? InkWell(\n                        borderRadius: BorderRadius.circular(100),\n                        onTap: () async {\n                          await audioC.stopPlayer();\n                          Get.back();\n                        },\n                        child: Padding(\n                          padding: const EdgeInsets.only(\n                            left: 2.0,\n                            right: 4.0,\n                            top: 8.0,\n                            bottom: 8.0,\n                          ),\n                          child: SvgPicture.asset(\n                            \"assets/icons/back.svg\",\n                            height: Get.width * 0.035,\n                            width: Get.width * 0.035,\n                            color: Colors.white,\n                          ),\n                        ),\n                      )\n                    : InkWell(\n                        borderRadius: BorderRadius.circular(100),\n                        onTap: () {\n                          widget.globalKey!.currentState!.openDrawer();\n                        },\n                        child: SizedBox(\n                          height: Get.width * 0.05,\n                          width: Get.width * 0.05,\n                          child: SvgPicture.asset(\n                            \"assets/icons/menu.svg\",\n                            height: Get.width * 0.04,\n                            width: Get.width * 0.04,\n                            color: Theme.of(context).primaryColorLight,\n                          ),\n                        ),\n                      ),\n                TitleBar(\n                    text: widget.text,\n                    width: widget.audioBtn! ? Get.width * .66 : null,\n                    fontsize: Get.width * 0.05),\n                widget.audioBtn!\n                    ? Obx(\n                        () => InkWell(\n                          onTap: widget.audioBtnTap,\n                          child: Padding(\n                            padding: const EdgeInsets.only(\n                                top: 8, bottom: 8, right: 0),\n                            child: settings.audioExist.value &&\n                                    widget.playAudioBtn!\n                                ? SvgPicture.asset(\n                                    'assets/images/audio_on.svg',\n                                    height: Get.width * 0.06,\n                                    color: Colors.white,\n                                  )\n                                : settings.audioExist.value &&\n                                        !widget.playAudioBtn!\n                                    ? SvgPicture.asset(\n                                        'assets/images/audio_off.svg',\n                                        height: Get.width * 0.06,\n                                        color: Colors.white,\n                                      )\n                                    : SvgPicture.asset(\n                                        'assets/images/download_audio.svg',\n                                        height: Get.width * 0.07,\n                                        color: Colors.white,\n                                      ),\n                          ),\n                        ).paddingOnly(right: Get.width * .04),\n                      )\n                    : const SizedBox.shrink(),\n                widget.trailing!\n                    ? InkWell(\n                        onTap: widget.ontap,\n                        child: Padding(\n                          padding: const EdgeInsets.only(\n                              top: 8, bottom: 8, right: 0),\n                          child: SvgPicture.asset(\n                            Get.currentRoute == '/NooraniSlider' ||\n                                    Get.currentRoute == '/MadaniSlider'\n                                ? 'assets/images/grid.svg'\n                                : 'assets/images/slider1.svg',\n                            height: Get.width * 0.055,\n                            color: Colors.white,\n                          ),\n                        ),\n                      )\n                    : const SizedBox.shrink(),\n                widget.quickTools!\n                    ? InkWell(\n                        onTap: widget.ontap,\n                        child: Padding(\n                          padding: const EdgeInsets.only(\n                              top: 8, bottom: 8, right: 0),\n                          child: SvgPicture.asset(\n                            'assets/icons/settings.svg',\n                            height: Get.width * 0.05,\n                            color: Colors.white,\n                          ),\n                        ),\n                      )\n                    : const SizedBox.shrink()\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass TitleBar extends StatelessWidget {\n  const TitleBar(\n      {Key? key, @required this.text, @required this.fontsize, this.width})\n      : super(key: key);\n\n  final String? text;\n  final double? width;\n  final double? fontsize;\n\n  @override\n  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n        padding: EdgeInsets.only(left: width != null ? Get.width * .1 : 0),\n        // padding: EdgeInsets.only(right: Get.width * .08),\n        width: width ?? Get.width * .75,\n        // color: Colors.teal,\n        child: Center(\n          child: Text(\n            text!,\n            textAlign: TextAlign.start,\n            overflow: TextOverflow.ellipsis,\n            style: TextStyle(\n              // shadows: <Shadow>[\n              //   Shadow(\n              //     offset: Offset(0.0, 0.0),\n              //     blurRadius: 1,\n              //     color: Colors.white,\n              //   ),\n              // ],\n              fontWeight: FontWeight.w600,\n              // color: Colors.white,\n              color: Theme.of(context).primaryColorLight,\n              // color: Theme.of(context).textTheme\n              // .headline2!\n              // .color,\n              fontSize: fontsize,\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "TopBar", "file_path": "nuraniqaida/lib/TopBar/Topbar.dart", "file_name": "Topbar.dart", "line": 415, "line_from": 415, "line_to": 544, "snippet": "  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: Container(\n        padding: EdgeInsets.symmetric(horizontal: Get.width * .04),\n        color: settings.gradient.value\n            ? Colors.transparent\n            : Theme.of(context).primaryColor,\n        height: Get.height * .1,\n        width: Get.width,\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.end,\n          children: [\n            Row(\n              mainAxisAlignment: MainAxisAlignment.start,\n              children: [\n                InkWell(\n                  borderRadius: BorderRadius.circular(100),\n                  onTap: () {\n                    Get.back();\n                  },\n                  child: Padding(\n                    padding: const EdgeInsets.all(8.0),\n                    child: SvgPicture.asset(\n                      \"assets/icons/back.svg\",\n                      height: Get.width * 0.035,\n                      width: Get.width * 0.035,\n                      color: Colors.white,\n                    ),\n                  ),\n                ),\n                SizedBox(width: Get.width * 0.05),\n                SizedBox(\n                  width: Get.width * .7,\n                  child: Text(\n                    text!,\n                    style: TextStyle(\n                      shadows: const <Shadow>[\n                        Shadow(\n                          offset: Offset(0.0, 0.0),\n                          blurRadius: 1,\n                          color: Colors.white,\n                        ),\n                      ],\n                      overflow: TextOverflow.ellipsis,\n                      fontWeight: FontWeight.w600,\n                      color: Theme.of(context).primaryColorLight,\n                      fontSize: fontsize,\n                    ),\n                  ),\n                ),\n                trailing!\n                    ? InkWell(\n                        onTap: ontap,\n                        child: Padding(\n                          padding: const EdgeInsets.only(\n                              top: 8, bottom: 8, right: 0),\n                          child: trailingChild ??\n                              SvgPicture.asset(\n                                'assets/icons/books.svg',\n                                height: Get.width * 0.050,\n                                color: Colors.white,\n                              ),\n                        ),\n                      )\n                    : const SizedBox.shrink()\n              ],\n            ).paddingOnly(top: Get.width * .05),\n          ],\n        ).paddingOnly(bottom: settings.gradient.value ? 0 : Get.width * .01),\n      ),\n    );\n  }\n}\n\n// class DownloadBar extends StatelessWidget {\n//   DownloadBar({@required this.title, this.subtitle});\n\n//   final title;\n//   final subtitle;\n\n//   var settings = Get.put(SettingsController());\n//   @override\n//   Widget build(BuildContext context) {\n//     var theme = hive.get(Keys.currentTheme);\n\n//     return MediaQuery(\n//       data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n//       child: Obx(() => Container(\n//             height: settings.appBarRadius.value\n//                 ? Get.height * .13\n//                 : Get.height * .13,\n//             width: Get.width,\n//             child: Padding(\n//               padding: EdgeInsets.only(\n//                   top: settings.appBarRadius.value\n//                       ? Get.width * 0.12\n//                       : Get.width * 0.12,\n//                   left: Get.width * 0.04,\n//                   right: Get.width * 0.04,\n//                   bottom: settings.appBarRadius.value\n//                       ? Get.width * 0.02\n//                       : Get.width * 0.02),\n//               child: Column(\n//                 crossAxisAlignment: CrossAxisAlignment.start,\n//                 mainAxisAlignment: MainAxisAlignment.start,\n//                 children: [\n//                   Text(title,\n//                       style: TextStyle(\n//                         color: Theme.of(context).primaryColorLight,\n//                         fontSize: Get.width * 0.044,\n//                         fontWeight: FontWeight.w600,\n//                       )).paddingOnly(left: Get.width * 0.04),\n//                   if (subtitle != null)\n//                     Text(subtitle,\n//                             style: TextStyle(\n//                                 fontSize: Get.width * 0.032,\n//                                 fontWeight: FontWeight.w600,\n//                                 color: theme == 0\n//                                     ? Colors.grey\n//                                     : Colors.white.withOpacity(.6)))\n//                         .paddingOnly(\n//                             left: Get.width * 0.04, top: Get.width * 0.005),\n//                 ],\n//               ),\n//             ),\n//           )),\n//     );\n//   }\n// }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Notifications", "file_path": "nuraniqaida/lib/Notifications/Support_Us.dart", "file_name": "Support_Us.dart", "line": 26, "line_from": 26, "line_to": 149, "snippet": "  Widget build(BuildContext context) {\n    var theme = themeController.currentTheme.value;\n\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      body: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Container(\n          decoration: pageDecoration(context),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Obx(\n              () => Column(\n                children: [\n                  Topbar(ontap: () {}, text: 'Support Us'.tr, fontsize: Get.width * 0.05),\n                  Container(\n                    height: Get.height * .9,\n                    width: Get.width,\n                    padding: EdgeInsets.only(\n                        top: !settings.gradient.value && settings.cardView.value\n                            ? Get.width * .012\n                            : 0),\n                    decoration: pagesDecoration(context),\n                    child: ClipRRect(\n                      borderRadius: settings.appBarRadius.value\n                          ? BorderRadius.only(\n                              topLeft: Radius.circular(Get.width * .07),\n                              topRight: Radius.circular(Get.width * .07))\n                          : BorderRadius.zero,\n                      child: SingleChildScrollView(\n                        child: Column(\n                          mainAxisAlignment: MainAxisAlignment.start,\n                          children: [\n                            SizedBox(\n                                height:\n                                    settings.cardView.value ? Get.width * .01 : Get.width * .02),\n\n                            ///////////////////////////////////////////////////////////////////////////\n                            ////////////////////          Main Card               /////////////////////\n                            ///////////////////////////////////////////////////////////////////////////\n\n                            Container(\n                                    padding: EdgeInsets.symmetric(\n                                        vertical: Get.width * 0.04, horizontal: Get.width * .02),\n                                    decoration: cardRadius(context),\n                                    child: Column(\n                                      children: [\n                                        Html(\n                                            data: settings.langEn.value\n                                                ? homeC.drawerList[4].en!.replaceAll(\"\"\"\n\n\"\"\", '<br>')\n                                                : homeC.drawerList[4].bn!.replaceAll(\"\"\"\n\n\"\"\", '<br>'),\n                                            style: {\n                                              \"body\": Style(\n                                                lineHeight: LineHeight.number(1.2),\n                                                fontFamily: 'Kalpurush',\n                                                color: theme == 5\n                                                    ? const Color(0xFFC2D7EF)\n                                                    : Colors.black,\n                                                fontSize: FontSize(Get.width * 0.045),\n                                              ),\n                                            }),\n                                        InkWell(\n                                          onTap: () => Get.to(() => SupportButtons(),\n                                              transition: Transition.fade),\n                                          child: Container(\n                                                  width: Get.width,\n                                                  padding: EdgeInsets.all(Get.width * 0.03),\n                                                  decoration: BoxDecoration(\n                                                      color: Theme.of(context).secondaryHeaderColor,\n                                                      borderRadius:\n                                                          BorderRadius.circular(Get.width * .07)),\n                                                  child: Text(\n                                                    'I Want To Support'.tr,\n                                                    textAlign: TextAlign.center,\n                                                    style: TextStyle(\n                                                      fontSize: Get.width * .04,\n                                                      color: Colors.white,\n                                                      fontWeight: FontWeight.w600,\n                                                    ),\n                                                  ))\n                                              .paddingOnly(\n                                                  top: Get.width * .02,\n                                                  left:\n                                                      settings.cardView.value ? Get.width * .02 : 0,\n                                                  right: settings.cardView.value\n                                                      ? Get.width * .02\n                                                      : 0),\n                                        ),\n                                      ],\n                                    ))\n                                .paddingSymmetric(\n                                    vertical: settings.cardView.value ? Get.width * .02 : 0),\n\n                            SizedBox(height: Get.width * .015),\n                          ],\n                        ).paddingOnly(\n                          left: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.02,\n                          right: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.01,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nBoxDecoration cardRadius(BuildContext context) {\n  var theme = themeController.currentTheme.value;\n  return BoxDecoration(\n      color: theme == 5 && settings.simpleView.value\n          ? Theme.of(context).primaryColorDark\n          : Theme.of(context).appBarTheme.shadowColor!.withOpacity(.9),\n      borderRadius: const BorderRadius.all(Radius.circular(12)));\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Notifications", "file_path": "nuraniqaida/lib/Notifications/Support_Us.dart", "file_name": "Support_Us.dart", "line": 178, "line_from": 178, "line_to": 479, "snippet": "  Widget build(BuildContext context) {\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      body: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Directionality(\n          textDirection: TextDirection.ltr,\n          child: Container(\n            decoration: pageDecoration(context),\n            child: Column(\n              children: [\n                Topbar(\n                    ontap: () {},\n                    text: languageEn ? 'Support Us' : 'Support Us'.tr,\n                    fontsize: Get.width * 0.05),\n                Container(\n                  height: Get.height * .9,\n                  width: Get.width,\n                  padding: EdgeInsets.only(top: settings.cardView.value ? Get.width * .012 : 0),\n                  decoration: pagesDecoration(context),\n                  child: ClipRRect(\n                    borderRadius: settings.appBarRadius.value\n                        ? BorderRadius.only(\n                            topLeft: Radius.circular(Get.width * .07),\n                            topRight: Radius.circular(Get.width * .07))\n                        : BorderRadius.zero,\n                    child: Wrap(\n                      // mainAxisAlignment: MainAxisAlignment.start,\n                      children: [\n                        SizedBox(\n                            height: settings.cardView.value ? Get.width * .01 : Get.width * .02),\n\n                        ///////////////////////////////////////////////////////////////////////////\n                        ////////////////////          Main Card               /////////////////////\n                        ///////////////////////////////////////////////////////////////////////////\n\n                        Container(\n                                height: Get.height * .86,\n                                padding: EdgeInsets.symmetric(\n                                    vertical: Get.width * 0.2, horizontal: Get.width * .04),\n                                decoration: cardRadius(context),\n                                child: Column(\n                                  // mainAxisAlignment: MainAxisAlignment.center,\n                                  children: [\n                                    SizedBox(height: Get.width * .3),\n                                    Center(\n                                      child: Text(\n                                        'You can support us by Bkash/Nagad/Rocket/Bank. Please click the button below -'\n                                            .tr,\n                                        textAlign: TextAlign.center,\n                                        style: TextStyle(fontSize: Get.width * .04),\n                                      ).paddingOnly(\n                                        bottom: Get.width * .1,\n                                      ),\n                                    ),\n                                    Theme(\n                                      data: Theme.of(context)\n                                          .copyWith(dividerColor: Colors.transparent),\n                                      child: Container(\n                                        decoration: BoxDecoration(\n                                            // color: Theme.of(context).cardColor,\n                                            border: Border.all(\n                                                style: BorderStyle.solid,\n                                                color: Theme.of(context).secondaryHeaderColor,\n                                                width: Get.width * .0025),\n                                            borderRadius: BorderRadius.circular(Get.width * .07)),\n                                        child: ClipRRect(\n                                          borderRadius: BorderRadius.circular(Get.width * .07),\n                                          child: ExpansionWidget(\n                                              key: expansionKey,\n                                              initiallyExpanded: true,\n                                              titleBuilder: (double animationValue, _,\n                                                  bool isExpaned, toogleFunction) {\n                                                return CustomTitleBuilder2(\n                                                    toogleFunction: toogleFunction,\n                                                    title: 'Bkash/Nagad/Rocket/Bank'.tr,\n                                                    animationValue: animationValue);\n                                              },\n                                              content: Container(\n                                                padding: EdgeInsets.symmetric(\n                                                    horizontal: Get.width * .02),\n                                                child: Column(\n                                                  children: [\n                                                    InkWell(\n                                                      onTap: () {\n                                                        expansionKey.currentState\n                                                            ?.toggle(animated: true);\n                                                        Get.dialog(SupportDialog(\n                                                          title:\n                                                              'To support our projects, please send your hadiya to below numbers -'\n                                                                  .tr,\n                                                        ));\n                                                      },\n                                                      child: CustomBtn(title: 'One Time'.tr)\n                                                          .paddingSymmetric(\n                                                              vertical: Get.width * .04),\n                                                    ),\n                                                    InkWell(\n                                                      onTap: () {\n                                                        expansionKey.currentState\n                                                            ?.toggle(animated: true);\n                                                        Get.dialog(AlertDialog(\n                                                            insetPadding: EdgeInsets.symmetric(\n                                                                horizontal: Get.width * .06),\n                                                            content: SizedBox(\n                                                              width: Get.width,\n                                                              child: Form(\n                                                                child: Wrap(\n                                                                  children: [\n                                                                    CustomTitle(title: 'Name'.tr),\n                                                                    TextFormField(\n                                                                        textCapitalization:\n                                                                            TextCapitalization\n                                                                                .words,\n                                                                        controller: nameController,\n                                                                        decoration: inputDecoration(\n                                                                          context,\n                                                                          \"Enter Name\".tr,\n                                                                          size: .035,\n                                                                          color: Theme.of(context)\n                                                                              .iconTheme\n                                                                              .color!\n                                                                              .withOpacity(.8),\n                                                                        )),\n                                                                    CustomTitle(title: 'Phone'.tr),\n                                                                    TextFormField(\n                                                                        keyboardType:\n                                                                            TextInputType.phone,\n                                                                        controller: phoneController,\n                                                                        textCapitalization:\n                                                                            TextCapitalization\n                                                                                .words,\n                                                                        decoration: inputDecoration(\n                                                                          context,\n                                                                          \"Enter Phone\".tr,\n                                                                          size: .035,\n                                                                          color: Theme.of(context)\n                                                                              .iconTheme\n                                                                              .color!\n                                                                              .withOpacity(.8),\n                                                                        )),\n                                                                    CustomTitle(\n                                                                        title:\n                                                                            'Email (Optional)'.tr),\n                                                                    TextFormField(\n                                                                        keyboardType: TextInputType\n                                                                            .emailAddress,\n                                                                        controller: emailController,\n                                                                        textCapitalization:\n                                                                            TextCapitalization\n                                                                                .words,\n                                                                        decoration: inputDecoration(\n                                                                          context,\n                                                                          \"Enter Email\".tr,\n                                                                          size: .035,\n                                                                          color: Theme.of(context)\n                                                                              .iconTheme\n                                                                              .color!\n                                                                              .withOpacity(.8),\n                                                                        )),\n                                                                    CustomTitle(title: 'Amount'.tr),\n                                                                    TextFormField(\n                                                                        keyboardType:\n                                                                            TextInputType.number,\n                                                                        controller:\n                                                                            amountController,\n                                                                        textCapitalization:\n                                                                            TextCapitalization\n                                                                                .words,\n                                                                        decoration: inputDecoration(\n                                                                          context,\n                                                                          \"Enter Amount\".tr,\n                                                                          size: .035,\n                                                                          color: Theme.of(context)\n                                                                              .iconTheme\n                                                                              .color!\n                                                                              .withOpacity(.8),\n                                                                        )),\n                                                                    InkWell(\n                                                                      splashColor:\n                                                                          Colors.transparent,\n                                                                      highlightColor:\n                                                                          Colors.transparent,\n                                                                      onTap: () {\n                                                                        Map<String, dynamic> data =\n                                                                            {\n                                                                          'name':\n                                                                              nameController.text,\n                                                                          'phone':\n                                                                              phoneController.text,\n                                                                          'email':\n                                                                              emailController.text,\n                                                                          'amount':\n                                                                              amountController.text,\n                                                                        };\n                                                                        if (nameController\n                                                                                .text.isNotEmpty &&\n                                                                            phoneController\n                                                                                .text.isNotEmpty) {\n                                                                          FirebaseFirestore.instance\n                                                                              .collection(\n                                                                                  'userInfo')\n                                                                              .add(data)\n                                                                              .then((value) {\n                                                                            Navigator.pop(context);\n                                                                            nameController.clear();\n                                                                            phoneController.clear();\n                                                                            emailController.clear();\n                                                                            amountController\n                                                                                .clear();\n\n                                                                            Get.dialog(\n                                                                                SupportDialog(\n                                                                              title:\n                                                                                  'You registration is successful. Please save below numbers and support every month.'\n                                                                                      .tr,\n                                                                            ));\n                                                                          }).onError((error,\n                                                                                      stackTrace) =>\n                                                                                  CustomWidget.toast(\n                                                                                      'Error Occured. Please Check Your Internet Connection'));\n                                                                        } else {\n                                                                          CustomWidget.toast(\n                                                                              'Please Enter Your Name And Phone Number To Subscribe');\n                                                                        }\n                                                                      },\n                                                                      child: Container(\n                                                                        height: Get.width * 0.11,\n                                                                        width: Get.width,\n                                                                        decoration: BoxDecoration(\n                                                                            color: Theme.of(context)\n                                                                                .secondaryHeaderColor,\n                                                                            borderRadius:\n                                                                                BorderRadius\n                                                                                    .circular(30)),\n                                                                        child: Center(\n                                                                          child: Text(\n                                                                            \"Subscribe\".tr,\n                                                                            style: TextStyle(\n                                                                                fontSize:\n                                                                                    Get.width *\n                                                                                        0.04,\n                                                                                color: Colors.white,\n                                                                                fontWeight:\n                                                                                    FontWeight\n                                                                                        .w600),\n                                                                          ),\n                                                                        ),\n                                                                      ).paddingOnly(\n                                                                          top: Get.width * .06),\n                                                                    ),\n                                                                  ],\n                                                                ),\n                                                              ),\n                                                            )));\n                                                      },\n                                                      child: CustomBtn(title: 'Monthly'.tr),\n                                                    ),\n                                                  ],\n                                                ).paddingOnly(bottom: Get.width * .04),\n                                              )),\n                                        ),\n                                      ),\n                                    ).paddingSymmetric(vertical: Get.width * .04),\n                                  ],\n                                ))\n                            .paddingSymmetric(\n                                vertical: settings.cardView.value ? Get.width * .02 : 0),\n\n                        SizedBox(height: Get.width * .015),\n                      ],\n                    ).paddingOnly(\n                      left: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.02,\n                      right: settings.cardView.value ? Get.width * 0.03 : Get.width * 0.01,\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass CustomTitle extends StatelessWidget {\n  const CustomTitle({Key? key, @required this.title}) : super(key: key);\n\n  final String? title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      title!,\n      style: TextStyle(fontSize: Get.width * .035),\n    ).paddingOnly(\n      bottom: Get.width * .01,\n      top: Get.width * .04,\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "nuraniqaida/lib/widgets/title_builder.dart", "file_name": "title_builder.dart", "line": 25, "line_from": 25, "line_to": 142, "snippet": "  Widget build(BuildContext context) {\n    return InkWell(\n        onTap: () => toogleFunction!(animated: true),\n        child: MediaQuery(\n          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n          child: Directionality(\n            textDirection: TextDirection.ltr,\n            child: Obx(\n              () => Container(\n                padding: EdgeInsets.symmetric(\n                    vertical: settings.cardView.value ? Get.width * .035 : Get.width * .02,\n                    horizontal: Get.width * 0.04),\n                decoration: BoxDecoration(\n                    color: settings.simpleView.value && theme != 5\n                        ? Theme.of(context).secondaryHeaderColor.withOpacity(.15)\n                        : Theme.of(context).cardColor,\n                    borderRadius: BorderRadius.circular(12)),\n                child: Row(\n                  crossAxisAlignment: CrossAxisAlignment.center,\n                  children: [\n                    Expanded(\n                        child: Row(\n                      children: [\n                        Flexible(\n                          child: Text(\n                            title!,\n                            overflow: TextOverflow.clip,\n                            style: TextStyle(\n                                fontSize: Get.width * .04,\n                                fontWeight: FontWeight.w600,\n                                color: animationValue! < 0.5\n                                    ? Theme.of(context).textTheme.headline2!.color\n                                    : Theme.of(context).secondaryHeaderColor),\n                          ),\n                        ),\n                      ],\n                    )),\n                    Transform.rotate(\n                      angle: math.pi * animationValue! / 1,\n                      child: Icon(Icons.expand_more,\n                          color: animationValue! < 0.5\n                              ? Theme.of(context).iconTheme.color\n                              : Theme.of(context).secondaryHeaderColor,\n                          size: Get.width * .06),\n                      alignment: Alignment.center,\n                    )\n                  ],\n                ),\n              ).paddingSymmetric(horizontal: settings.cardView.value ? 0 : Get.width * .03),\n            ),\n          ),\n        ));\n  }\n}\n\nclass CustomTitleBuilder2 extends StatelessWidget {\n  CustomTitleBuilder2(\n      {Key? key,\n      @required this.toogleFunction,\n      @required this.title,\n      @required this.animationValue,\n      this.noteIndex = false})\n      : super(key: key);\n\n  final dynamic toogleFunction;\n  final String? title;\n  final bool? noteIndex;\n  final double? animationValue;\n\n  final settings = Get.put(SettingsController());\n  final theme = themeController.currentTheme.value;\n\n  @override\n  Widget build(BuildContext context) {\n    return InkWell(\n      onTap: () => toogleFunction(animated: true),\n      child: MediaQuery(\n        data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n        child: Directionality(\n          textDirection: TextDirection.ltr,\n          child: Container(\n            padding: EdgeInsets.symmetric(vertical: Get.width * .035, horizontal: Get.width * 0.04),\n            decoration: BoxDecoration(\n                color: Theme.of(context).secondaryHeaderColor,\n                borderRadius: BorderRadius.circular(Get.width * .07)),\n            child: Row(\n              crossAxisAlignment: CrossAxisAlignment.center,\n              children: [\n                Expanded(\n                    child: Row(\n                  children: [\n                    Flexible(\n                      child: Center(\n                        child: Text(\n                          title!,\n                          overflow: TextOverflow.clip,\n                          style: TextStyle(\n                              fontSize: Get.width * .04,\n                              fontWeight: FontWeight.w600,\n                              color: Colors.white),\n                        ),\n                      ),\n                    ),\n                  ],\n                )),\n                Transform.rotate(\n                  angle: math.pi * animationValue! / 1,\n                  child: Icon(Icons.expand_more, color: Colors.white, size: Get.width * .06),\n                  alignment: Alignment.center,\n                )\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Thumb", "docstring": "", "module": "awesome_slider", "file_path": "nuraniqaida/lib/package/awesome_slider/awesome_slider.dart", "file_name": "awesome_slider.dart", "line": 54, "line_from": 54, "line_to": 281, "snippet": "  /// Provide a child Widget to the Slider Thumb\n  final Widget? child;\n\n  /// Total Width of the Slider.\n  /// Default width will be the Canvas Width with a difference of 40px\n  final double? sliderWidth;\n  final double? sliderHeight;\n\n  /// Size of the thumb\n  /// Default value will be a 90px ratio of the original Canvas\n  final double? thumbHeight;\n  final double? thumbWidth;\n\n  ///Colour of the thumb\n  ///Default colour is grey Colour\n  final Color? thumbColor;\n\n  /// Give this radius to convert the Rectangle into a Rounded Rectangle\n  /// Increase in radius will make the  rectangle into a circle\n  final double? roundedRectangleThumbRadius;\n\n  ///The color for the inactive portion of the slider track.\n  ///Default colour is Blue Colour\n  final Color? inactiveLineColor;\n\n  ///The stroke value for the inactive portion of the slider track.\n  ///Default stroke value is 4.0\n  ///Value for inactiveLineStroke = activeLineStroke unless given different values for both\n  final double? inactiveLineStroke;\n\n  ///The color for the active portion of the slider track.\n  ///Default colour is Blue Colour\n  final Color? activeLineColor;\n\n  ///The stroke value for the active portion of the slider track.\n  ///Default stroke value is 4.0\n  ///Value for activeLineStroke = inactiveLineStroke unless given different values for both\n  final double? activeLineStroke;\n\n  ///Give true value if a Shadow required on Top - Left of the thumb\n  final bool? topLeftShadow;\n\n  ///Colour of shadow of Top - Left of the thumb\n  ///Default is Blue - Grey\n  final Color? topLeftShadowColor;\n\n  ///MaskFilter blur value for shadow of Top - Left of the thumb\n  ///MaskFilter.blur(BlurStyle.normal, 3.0)\n  final MaskFilter? topLeftShadowBlur;\n\n  ///Give true value if a Shadow required on Bottom - Right of the thumb\n  final bool? bottomRightShadow;\n\n  ///Colour of shadow of Bottom - Right of the thumb\n  ///Default is Blue - Grey\n  final Color? bottomRightShadowColor;\n\n  ///MaskFilter blur value for shadow of Top - Left of the thumb\n  ///MaskFilter.blur(BlurStyle.normal, 3.0)\n  final MaskFilter? bottomRightShadowBlur;\n\n  @override\n  _AwesomeSliderState createState() => _AwesomeSliderState();\n}\n\nclass _AwesomeSliderState extends State<AwesomeSlider> {\n  double sliderXCoordinatePositionNow = 0.0;\n\n  // double? _strokeOfInactiveLine() => (widget.inactiveLineStroke == null)\n  //     ? (widget.activeLineStroke == null)\n  //         ? 4.0\n  //         : widget.activeLineStroke\n  //     : widget.inactiveLineStroke;\n\n  // double? _strokeOfActiveLine() => (widget.activeLineStroke == null)\n  //     ? (widget.inactiveLineStroke == null)\n  //         ? 4.0\n  //         : widget.inactiveLineStroke\n  //     : widget.activeLineStroke;\n\n  // MaskFilter? _topLeftShadowBlur() => (widget.topLeftShadowBlur == null)\n  //     ? const MaskFilter.blur(BlurStyle.normal, 3.0)\n  //     : widget.topLeftShadowBlur;\n\n  // MaskFilter? _bottomRightShadowBlur() => (widget.bottomRightShadowBlur == null)\n  //     ? const MaskFilter.blur(BlurStyle.normal, 3.0)\n  //     : widget.bottomRightShadowBlur;\n\n  double? _incrementValueForThumb() =>\n      (widget.value == 0.0) ? widget.min : widget.value! - widget.min!;\n\n  double _lineLengthForPixel() => _sliderWidth() - _sliderHeight();\n  double _userValueForPixel() => widget.max! - widget.min!;\n  double _pixelDivision() => _lineLengthForPixel() / _userValueForPixel();\n\n  double _sliderChildPosition() =>\n      _incrementValueForThumb()! * _pixelDivision();\n\n  double _sliderWidth() {\n    double userInputWidth = widget.sliderWidth! * .92;\n    double screenWidth = window.physicalSize.width;\n    double pixelRatio = window.devicePixelRatio;\n    double sliderWidth = (userInputWidth == 0)\n        ? ((screenWidth / pixelRatio) - 40.0)\n        : userInputWidth;\n    return sliderWidth;\n  }\n\n  double _sliderHeight() {\n    double userInputHeight = widget.thumbHeight!;\n    double screenHeight = window.physicalSize.height;\n    double pixelRatio = window.devicePixelRatio;\n    double multiplicationFactor = (90 / 805.3333334);\n    double sliderHeight = (userInputHeight == 0)\n        ? ((screenHeight / pixelRatio) * multiplicationFactor)\n        : userInputHeight;\n    return sliderHeight.roundToDouble();\n  }\n\n  void _onDragUpdate(DragUpdateDetails dragUpdateDetails) {\n    Offset localDragUpdate = dragUpdateDetails.localPosition;\n    double xCoordinate;\n    (localDragUpdate.dx < 0)\n        ? xCoordinate = 0\n        : (localDragUpdate.dx > _sliderWidth())\n            ? xCoordinate = _sliderWidth()\n            : xCoordinate = localDragUpdate.dx;\n    setState(() {\n      sliderXCoordinatePositionNow = xCoordinate;\n    });\n  }\n\n  void _onDragStart(DragStartDetails dragStartDetails) {\n    Offset localDragStart = dragStartDetails.localPosition;\n    double xCoordinate;\n    (localDragStart.dx < 0)\n        ? xCoordinate = 0\n        : (localDragStart.dx > _sliderWidth())\n            ? xCoordinate = _sliderWidth()\n            : xCoordinate = localDragStart.dx;\n    setState(() {\n      sliderXCoordinatePositionNow = xCoordinate;\n    });\n  }\n\n  void _value() {\n    double incrementValue = sliderXCoordinatePositionNow / _pixelDivision();\n    double value = (incrementValue > _userValueForPixel())\n        ? _userValueForPixel()\n        : incrementValue;\n    double userValue = value + widget.min!;\n    if (widget.onChanged != null) {\n      widget.onChanged!(userValue);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      behavior: HitTestBehavior.translucent,\n      onHorizontalDragUpdate: (DragUpdateDetails updateDetails) {\n        _onDragUpdate(updateDetails);\n        _value();\n      },\n      onHorizontalDragStart: (DragStartDetails startDetails) {\n        _onDragStart(startDetails);\n        _value();\n      },\n      child: SizedBox(\n        height: widget.thumbHeight,\n        // padding: const EdgeInsets.all(20.0),\n        child: Stack(\n          children: [\n            Positioned(\n                top: Get.width * 0.015,\n                height: widget.sliderHeight,\n                width: widget.sliderWidth,\n                child: Container(\n                  decoration: BoxDecoration(\n                      color: widget.activeLineColor,\n                      borderRadius: BorderRadius.circular(\n                          widget.roundedRectangleThumbRadius!)),\n                )\n\n                // CustomPaint(\n                //   painter: AwesomeSliderPaint(\n                //     sliderLength: _sliderWidth(),\n                //     thumbHeight: widget.thumbHeight,\n                //     thumbWidth: widget.thumbWidth,\n                //     thumbColor: widget.thumbColor,\n                //     value: _incrementValueForThumb(),\n                //     min: widget.min,\n                //     max: widget.max,\n                //     inactiveLineColor: widget.inactiveLineColor,\n                //     inactiveLineStroke: _strokeOfInactiveLine(),\n                //     activeLineColor: widget.activeLineColor,\n                //     activeLineStroke: _strokeOfActiveLine(),\n                //     currentTouchPosition: sliderXCoordinatePositionNow,\n                //     roundedThumbRadius: widget.roundedRectangleThumbRadius,\n                //     topLeftShadowColor: widget.topLeftShadowColor,\n                //     bottomRightShadowColor: widget.bottomRightShadowColor,\n                //     topLeftShadowBlurFactor: _topLeftShadowBlur(),\n                //     bottomRightShadowBlurFactor: _bottomRightShadowBlur(),\n                //     bottomRightShadow: widget.bottomRightShadow,\n                //     topLeftShadow: widget.topLeftShadow,\n                //   ),\n                // ),\n                ),\n            Positioned(\n              height: widget.thumbHeight,\n              width: widget.thumbWidth,\n              left: _sliderChildPosition(),\n              child: Container(\n                decoration: BoxDecoration(\n                    color: widget.thumbColor,\n                    borderRadius: BorderRadius.circular(\n                        widget.roundedRectangleThumbRadius!)),\n                height: double.infinity,\n                width: double.infinity,\n                child: widget.child,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Dua", "file_path": "nuraniqaida/lib/Dua/dua_cat.dart", "file_name": "dua_cat.dart", "line": 31, "line_from": 31, "line_to": 312, "snippet": "  Widget build(BuildContext context) {\n    super.build(context);\n    return Scaffold(\n      backgroundColor: Theme.of(context).primaryColor,\n      key: scaffoldKey,\n      drawer: SafeArea(child: NooraniDrawer()),\n      body: Obx(\n        () => Container(\n          decoration: pageDecoration(context),\n          height: Get.height,\n          width: Get.width,\n          child: Column(\n            children: [\n              Topbar(\n                text: 'Dua & Zikr'.tr,\n                fontsize: Get.width * .05,\n                ontap: () {},\n              ),\n              Container(\n                decoration: pagesDecoration(context),\n                height: Get.height * .9,\n                width: Get.width,\n                child: ClipRRect(\n                  borderRadius: pageRadius(),\n                  child: SingleChildScrollView(\n                    child: Obx(\n                      () => ListView.builder(\n                        controller: scrollController,\n                        shrinkWrap: true,\n                        padding: EdgeInsets.only(\n                          bottom: Get.width * .015,\n                          top: settings.gradient.value\n                              ? Get.width * .02\n                              : settings.cardView.value\n                                  ? Get.width * .03\n                                  : 0,\n                        ),\n                        itemCount: duaC.duaCatList.length,\n                        itemBuilder: (context, index) {\n                          var duaName = duaC.duaNameList\n                              .where((e) => e.catID == duaC.duaCatList[index].catID)\n                              .toList();\n                          return Column(\n                            children: [\n                              InkWell(\n                                  onTap: () {},\n                                  // child: IndexCard(\n                                  //   index: index + 1,\n                                  //   title: duaC.duaCatList[index].catNameBn,\n                                  // ),\n\n                                  child: Theme(\n                                    data: Theme.of(context)\n                                        .copyWith(dividerColor: Colors.transparent),\n                                    child: Container(\n                                      decoration: BoxDecoration(\n                                        color: settings.gradient.value && settings.cardView.value\n                                            ? Theme.of(context).cardColor.withOpacity(.2)\n                                            : settings.gradient.value && settings.simpleView.value\n                                                ? Colors.transparent\n                                                : Theme.of(context).cardColor,\n                                        borderRadius: settings.cardView.value\n                                            ? const BorderRadius.all(Radius.circular(12))\n                                            : BorderRadius.zero,\n                                        boxShadow: [\n                                          BoxShadow(\n                                            // color: Colors.black.withOpacity(0.05),\n                                            color: !settings.gradient.value\n                                                ? Theme.of(context)\n                                                    .secondaryHeaderColor\n                                                    .withOpacity(0.15)\n                                                : Colors.transparent,\n                                            offset: !settings.gradient.value\n                                                ? const Offset(1, 1)\n                                                : Offset.zero,\n                                            blurRadius: !settings.gradient.value ? 1 : 0,\n                                            spreadRadius: !settings.gradient.value ? 1 : 0,\n                                          )\n                                        ],\n                                      ),\n                                      child: ClipRRect(\n                                          borderRadius: settings.cardView.value\n                                              ? const BorderRadius.all(Radius.circular(12))\n                                              : BorderRadius.zero,\n                                          child: duaName.length > 1\n                                              ? ExpansionTile(\n                                                  iconColor: Theme.of(context).dividerColor,\n                                                  collapsedIconColor:\n                                                      Theme.of(context).dividerColor,\n                                                  backgroundColor: Colors.transparent,\n                                                  tilePadding: EdgeInsets.symmetric(\n                                                      vertical: Get.width * .015,\n                                                      horizontal: Get.width * .04),\n                                                  leading: BoxAvatar(\n                                                          bgColor: settings.gradient.value\n                                                              ? Theme.of(context)\n                                                                  .cardColor\n                                                                  .withOpacity(.2)\n                                                              : Theme.of(context)\n                                                                  .secondaryHeaderColor\n                                                                  .withOpacity(.1),\n                                                          color: settings.gradient.value\n                                                              ? Theme.of(context)\n                                                                  .cardColor\n                                                                  .withOpacity(.2)\n                                                              : Theme.of(context)\n                                                                  .secondaryHeaderColor\n                                                                  .withOpacity(.2),\n                                                          textColor: settings.gradient.value\n                                                              ? Colors.white\n                                                              : Theme.of(context)\n                                                                  .textTheme\n                                                                  .headline2!\n                                                                  .color,\n                                                          index: index + 1)\n                                                      .paddingOnly(left: Get.width * .01),\n                                                  title: DuaName(index: index)\n                                                      .paddingOnly(left: Get.width * .01),\n                                                  children: [\n                                                    if (duaName.length > 1)\n                                                      ListView.builder(\n                                                        physics:\n                                                            const NeverScrollableScrollPhysics(),\n                                                        padding: EdgeInsets.all(Get.width * .02),\n                                                        shrinkWrap: true,\n                                                        itemCount: duaName.length,\n                                                        itemBuilder: (context, i) {\n                                                          return ListTile(\n                                                            onTap: () {\n                                                              Get.to(\n                                                                  () => DuaDetails(\n                                                                        id: i,\n                                                                        duaID: duaName[i].id,\n                                                                        duaNameBn:\n                                                                            duaName[i].duaNameBn!,\n                                                                        duaNameEn:\n                                                                            duaName[i].duaNameEn!,\n                                                                      ),\n                                                                  transition: Transition.fade);\n                                                            },\n                                                            // dense: true,\n                                                            leading: IndexAvatar(\n                                                              textColor: settings.gradient.value\n                                                                  ? Colors.white\n                                                                  : Theme.of(context)\n                                                                      .textTheme\n                                                                      .headline2!\n                                                                      .color,\n                                                              color: settings.gradient.value\n                                                                  ? Theme.of(context)\n                                                                      .cardColor\n                                                                      .withOpacity(.15)\n                                                                  : Theme.of(context)\n                                                                      .secondaryHeaderColor\n                                                                      .withOpacity(.2),\n                                                              index: i + 1,\n                                                              height: Get.width * .09,\n                                                            ),\n                                                            title: Text(\n                                                              settings.languageSelectIndex.value ==\n                                                                      0\n                                                                  ? duaName[i].duaNameBn!\n                                                                  // +' #${settings.banNum(i + 1)}'\n                                                                  : duaName[i].duaNameEn!\n                                                              // +' #${settings.banNum(i + 1)}'\n                                                              ,\n                                                              style: TextStyle(\n                                                                  color: settings.gradient.value\n                                                                      ? Colors.white\n                                                                      : Theme.of(context)\n                                                                          .textTheme\n                                                                          .headline2!\n                                                                          .color,\n                                                                  fontSize: Get.width * .032),\n                                                            ),\n                                                          );\n                                                        },\n                                                      ),\n                                                  ],\n                                                )\n                                              : InkWell(\n                                                  onTap: () {\n                                                    Get.to(\n                                                        () => DuaDetails(\n                                                            id: index,\n                                                            duaID: duaName.first.id,\n                                                            duaNameBn: duaName.first.duaNameBn,\n                                                            duaNameEn: duaName.first.duaNameEn),\n                                                        transition: Transition.fade);\n                                                  },\n                                                  child: Container(\n                                                    width: Get.width,\n                                                    color: Colors.transparent,\n                                                    padding: EdgeInsets.symmetric(\n                                                        vertical: Get.width * .03),\n                                                    child: Row(children: [\n                                                      BoxAvatar(\n                                                        bgColor: settings.gradient.value\n                                                            ? Theme.of(context)\n                                                                .cardColor\n                                                                .withOpacity(.2)\n                                                            : Theme.of(context)\n                                                                .secondaryHeaderColor\n                                                                .withOpacity(.1),\n                                                        color: settings.gradient.value\n                                                            ? Theme.of(context)\n                                                                .cardColor\n                                                                .withOpacity(.2)\n                                                            : Theme.of(context)\n                                                                .secondaryHeaderColor\n                                                                .withOpacity(.2),\n                                                        textColor: settings.gradient.value\n                                                            ? Colors.white\n                                                            : Theme.of(context)\n                                                                .textTheme\n                                                                .headline2!\n                                                                .color,\n                                                        index: index + 1,\n                                                      ).paddingOnly(\n                                                          left: Get.width * .05,\n                                                          right: Get.width * .03),\n                                                      DuaName(index: index)\n                                                          .paddingOnly(left: Get.width * 0.02)\n                                                    ]),\n                                                  ))),\n                                    ),\n                                  ).paddingOnly(\n                                      bottom: settings.cardView.value ? Get.width * .024 : 0,\n                                      left: settings.cardView.value ? Get.width * .03 : 0,\n                                      right: settings.cardView.value ? Get.width * .03 : 0)),\n                              settings.simpleView.value && index != duaC.duaCatList.length - 1\n                                  ? Divider(\n                                      color: settings.gradient.value && settings.simpleView.value\n                                          ? Theme.of(context).cardColor.withOpacity(.5)\n                                          : Theme.of(context).disabledColor.withOpacity(.5),\n                                      height: Get.width * .002,\n                                    )\n                                  : const SizedBox.shrink(),\n                            ],\n                          );\n                        },\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  bool get wantKeepAlive => true;\n}\n\nclass DuaName extends StatelessWidget {\n  DuaName({Key? key, required this.index}) : super(key: key);\n\n  final settings = Get.put(SettingsController());\n\n  final int index;\n  @override\n  Widget build(BuildContext context) {\n    return Obx(() => SizedBox(\n          width: Get.width * .68,\n          child: Text(\n              settings.languageSelectIndex.value == 0\n                  ? duaC.duaCatList[index].catNameBn!\n                  : duaC.duaCatList[index].catNameEn!,\n              overflow: TextOverflow.clip,\n              style: TextStyle(\n                  fontFamily: 'Main',\n                  fontSize: Get.width * 0.035,\n                  // fontWeight: FontWeight.w500,\n                  color: settings.gradient.value\n                      ? Colors.white\n                      : Theme.of(context).textTheme.headline2!.color)),\n        ));\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "Tajweed", "file_path": "nuraniqaida/lib/Tajweed/Richwidget.dart", "file_name": "Richwidget.dart", "line": 18, "line_from": 18, "line_to": 461, "snippet": "  Widget build(\n    BuildContext context,\n  ) {\n    var source = htmlContent;\n\n    return Obx(\n      () => Html(\n        data: searchC.arabicHighLight(source),\n        tagsList: (Html.tags\n          ..addAll([\"longer\", \"span\", \"g1\", \"g2\", \"ar1\", \"ar2\", \"ar3\", \"ar4\", \"p1\", \"singleAr\"])),\n        style: {\n          \"body\": Style(\n              direction: TextDirection.ltr,\n              lineHeight: const LineHeight(1.5),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: theme == 5 ? const Color(0xFFC2D7EF) : Colors.black),\n          \"ar1\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: theme == 5 ? const Color(0xFFC2D7EF) : Colors.black),\n          \"ar2\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: theme == 5 ? const Color(0xFFC2D7EF) : Colors.black),\n          \"ar3\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: theme == 5 ? const Color(0xFFC2D7EF) : Colors.black),\n          \"ar4\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: theme == 5 ? const Color(0xFFC2D7EF) : Colors.black),\n          \"g1\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: theme == 5 ? const Color(0xFFC2D7EF) : Colors.black),\n          \"g2\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: theme == 5 ? const Color(0xFFC2D7EF) : Colors.black),\n          \"span\": Style(\n              direction: TextDirection.rtl,\n              lineHeight: const LineHeight(1.5),\n              wordSpacing: 5,\n              color: theme == 5 ? const Color(0xFFC2D7EF) : Colors.black,\n              fontFamily: 'Scheherazade-Regular',\n              fontSize: FontSize(settings.arabicFont.value * 1.2)),\n          \"p1\": Style(\n              direction: TextDirection.rtl,\n              lineHeight: const LineHeight(2),\n              wordSpacing: 5,\n              color: theme == 5 ? const Color(0xFFC2D7EF) : Colors.black,\n              fontFamily: 'Scheherazade-Regular',\n              fontSize: FontSize(settings.arabicFont.value)),\n          \"longer\": Style(\n              direction: TextDirection.rtl,\n              lineHeight: const LineHeight(1.5),\n              wordSpacing: 5,\n              color: theme == 5 ? const Color(0xFFC2D7EF) : Colors.black,\n              fontFamily: 'Scheherazade-Regular',\n              fontSize: FontSize(settings.arabicFont.value * 1.2)),\n        },\n        customRender: {\n          \"longer\": (context, child) {\n            return Center(\n              child: SizedBox(width: Get.width, child: child),\n            );\n          },\n          \"body\": (context, child) {\n            return child;\n          },\n          \"ar1\": (context, child) {\n            return child;\n          },\n          \"ar2\": (context, child) {\n            return child;\n          },\n          \"ar3\": (context, child) {\n            return child;\n          },\n          \"ar4\": (context, child) {\n            return child;\n          },\n          \"s\": (context, child) {\n            return Center(\n              child: SizedBox(width: Get.width, child: child),\n            );\n          },\n          \"g1\": (context, child) {\n            var grid = homeC.gridDescList[0].grid;\n            List gridList = grid!.split(' ').toList();\n\n            return Center(\n              child: SizedBox(\n                // color: Colors.red,\n                width: Get.width,\n                child: Wrap(\n                  children: [\n                    SizedBox(width: Get.width, child: child),\n                    Directionality(\n                      textDirection: TextDirection.rtl,\n                      child: GridView.builder(\n                          physics: const NeverScrollableScrollPhysics(),\n                          shrinkWrap: true,\n                          padding: EdgeInsets.only(\n                            bottom: 0,\n                            top: Get.width * .1,\n                          ),\n                          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n                            crossAxisCount: 4,\n                            childAspectRatio: 1,\n                            // crossAxisSpacing: Get.width * .03,\n                            mainAxisSpacing: Get.width * .05,\n                          ),\n                          itemCount: gridList.length,\n                          itemBuilder: (context, index) {\n                            return InkWell(\n                              onTap: () {\n                                // Get.dialog(LetterDialog(\n                                //     gridList: gridList, index: index));\n                              },\n                              child: Container(\n                                alignment: Alignment.center,\n                                decoration: BoxDecoration(\n                                    // color: Theme.of(context).primaryColor,\n                                    gradient: LinearGradient(\n                                        begin: Alignment.centerLeft,\n                                        end: Alignment.centerRight,\n                                        colors: [\n                                          Theme.of(context).secondaryHeaderColor.withOpacity(.8),\n                                          Theme.of(context).secondaryHeaderColor.withOpacity(.7),\n                                          Theme.of(context).cardTheme.color!.withOpacity(.9),\n                                          // color1,\n                                          // Theme.of(context).primaryColor,\n                                          // color2\n                                        ]),\n                                    borderRadius: cardRadius()),\n                                child: Text(\n                                  gridList[index],\n                                  style: TextStyle(\n                                      color: Colors.white,\n                                      fontFamily: 'Scheherazade-Regular',\n                                      fontSize: settings.arabicFont.value * 2),\n                                ),\n                              ).paddingSymmetric(horizontal: Get.width * .015),\n                            );\n                          }),\n                    )\n                  ],\n                ),\n              ),\n            );\n          },\n          \"g2\": (context, child) {\n            var grid = homeC.gridDescList[1].grid;\n            List gridList = grid!.split(' ').toList();\n\n            return Center(\n              child: SizedBox(\n                // color: Colors.red,\n                width: Get.width,\n                child: Wrap(\n                  children: [\n                    SizedBox(width: Get.width, child: child),\n                    Directionality(\n                      textDirection: TextDirection.rtl,\n                      child: GridView.builder(\n                          physics: const NeverScrollableScrollPhysics(),\n                          shrinkWrap: true,\n                          padding: EdgeInsets.only(\n                            bottom: 0,\n                            top: Get.width * .1,\n                          ),\n                          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n                              crossAxisCount: 4,\n                              childAspectRatio: 1,\n                              mainAxisSpacing: Get.width * .05),\n                          itemCount: gridList.length,\n                          itemBuilder: (context, index) {\n                            return InkWell(\n                              onTap: () {\n                                // Get.dialog(LetterDialog(\n                                //     gridList: gridList, index: index));\n                              },\n                              child: Container(\n                                alignment: Alignment.center,\n                                decoration: BoxDecoration(\n                                    // color: Theme.of(context)\n                                    //     .secondaryHeaderColor,\n                                    gradient: LinearGradient(\n                                        begin: Alignment.centerLeft,\n                                        end: Alignment.centerRight,\n                                        colors: [\n                                          Theme.of(context).secondaryHeaderColor.withOpacity(.8),\n                                          Theme.of(context).secondaryHeaderColor.withOpacity(.7),\n                                          Theme.of(context).cardTheme.color!.withOpacity(.9),\n                                        ]),\n                                    borderRadius: cardRadius()),\n                                child: Text(\n                                  gridList[index],\n                                  style: TextStyle(\n                                      color: Colors.white,\n                                      fontFamily: 'Scheherazade-Regular',\n                                      fontSize: settings.arabicFont.value * 2),\n                                ),\n                              ).paddingSymmetric(horizontal: Get.width * .015),\n                            );\n                          }),\n                    )\n                  ],\n                ),\n              ),\n            );\n          },\n          \"p1\": (context, child) {\n            return child;\n          },\n        },\n      ),\n    );\n  }\n}\n\nclass RichWidget2 extends StatelessWidget {\n  RichWidget2(this.htmlContent, {Key? key}) : super(key: key);\n  final settings = Get.put(SettingsController());\n  final theme = themeController.currentTheme.value;\n  final String htmlContent;\n  @override\n  Widget build(\n    BuildContext context,\n  ) {\n    var source = htmlContent;\n\n    return Obx(\n      () => Html(\n        data: searchC.arabicHighLight(source),\n        tagsList: (Html.tags\n          ..addAll([\"longer\", \"span\", \"g1\", \"g2\", \"ar1\", \"ar2\", \"ar3\", \"ar4\", \"p1\", \"singleAr\"])),\n        style: {\n          \"body\": Style(\n              direction: TextDirection.ltr,\n              lineHeight: const LineHeight(1.3),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: Theme.of(context).textTheme.headline2!.color),\n          \"g1\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: Theme.of(context).textTheme.headline2!.color),\n          \"g2\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: Theme.of(context).textTheme.headline2!.color),\n          \"ar1\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: Theme.of(context).textTheme.headline2!.color),\n          \"ar2\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: Theme.of(context).textTheme.headline2!.color),\n          \"ar3\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: Theme.of(context).textTheme.headline2!.color),\n          \"ar4\": Style(\n              lineHeight: const LineHeight(1.6),\n              fontFamily: 'Kalpurush',\n              fontSize: FontSize(settings.translationFont.value),\n              color: Theme.of(context).textTheme.headline2!.color),\n          \"span\": Style(\n              direction: TextDirection.rtl,\n              lineHeight: const LineHeight(1.5),\n              wordSpacing: 5,\n              color: Theme.of(context).textTheme.headline2!.color,\n              fontFamily: 'Scheherazade-Regular',\n              fontSize: FontSize(settings.arabicFont.value * 1.2)),\n          \"p1\": Style(\n              direction: TextDirection.rtl,\n              lineHeight: const LineHeight(2),\n              wordSpacing: 5,\n              color: Theme.of(context).textTheme.headline2!.color,\n              fontFamily: 'Scheherazade-Regular',\n              fontSize: FontSize(settings.arabicFont.value)),\n          \"longer\": Style(\n              direction: TextDirection.rtl,\n              lineHeight: const LineHeight(1.5),\n              wordSpacing: 5,\n              color: Theme.of(context).textTheme.headline2!.color,\n              fontFamily: 'Scheherazade-Regular',\n              fontSize: FontSize(settings.arabicFont.value * 1.2)),\n        },\n        customRender: {\n          \"longer\": (context, child) {\n            return Center(\n              child: SizedBox(width: Get.width, child: child),\n            );\n          },\n          \"body\": (context, child) {\n            return child;\n          },\n          \"ar1\": (context, child) {\n            return child;\n          },\n          \"ar2\": (context, child) {\n            return child;\n          },\n          \"ar3\": (context, child) {\n            return child;\n          },\n          \"ar4\": (context, child) {\n            return child;\n          },\n          \"s\": (context, child) {\n            return Center(\n              child: SizedBox(width: Get.width, child: child),\n            );\n          },\n          \"g1\": (context, child) {\n            var grid = homeC.gridDescList[0].grid;\n            List gridList = grid!.split(' ').toList();\n\n            return Center(\n              child: SizedBox(\n                // color: Colors.red,\n                width: Get.width,\n                child: Wrap(\n                  children: [\n                    SizedBox(width: Get.width, child: child),\n                    Directionality(\n                      textDirection: TextDirection.rtl,\n                      child: GridView.builder(\n                          physics: const NeverScrollableScrollPhysics(),\n                          shrinkWrap: true,\n                          padding: EdgeInsets.only(\n                            bottom: 0,\n                            top: Get.width * .1,\n                          ),\n                          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n                            crossAxisCount: 4,\n                            childAspectRatio: 1,\n                            // crossAxisSpacing: Get.width * .03,\n                            mainAxisSpacing: Get.width * .05,\n                          ),\n                          itemCount: gridList.length,\n                          itemBuilder: (context, index) {\n                            return InkWell(\n                              onTap: () {\n                                // Get.dialog(LetterDialog(\n                                //     gridList: gridList, index: index));\n                              },\n                              child: Container(\n                                alignment: Alignment.center,\n                                decoration: BoxDecoration(\n                                    color: Theme.of(context).secondaryHeaderColor,\n                                    borderRadius: cardRadius()),\n                                child: Text(\n                                  gridList[index],\n                                  style: TextStyle(\n                                      color: Colors.white,\n                                      fontFamily: 'Scheherazade-Regular',\n                                      fontSize: settings.arabicFont.value * 2),\n                                ),\n                              ).paddingSymmetric(horizontal: Get.width * .015),\n                            );\n                          }),\n                    )\n                  ],\n                ),\n              ),\n            );\n          },\n          \"g2\": (context, child) {\n            var grid = homeC.gridDescList[1].grid;\n            List gridList = grid!.split(' ').toList();\n\n            return Center(\n              child: SizedBox(\n                // color: Colors.red,\n                width: Get.width,\n                child: Wrap(\n                  children: [\n                    SizedBox(width: Get.width, child: child),\n                    Directionality(\n                      textDirection: TextDirection.rtl,\n                      child: GridView.builder(\n                          physics: const NeverScrollableScrollPhysics(),\n                          shrinkWrap: true,\n                          padding: EdgeInsets.only(\n                            bottom: 0,\n                            top: Get.width * .1,\n                          ),\n                          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n                              crossAxisCount: 4,\n                              childAspectRatio: 1,\n                              mainAxisSpacing: Get.width * .05),\n                          itemCount: gridList.length,\n                          itemBuilder: (context, index) {\n                            return InkWell(\n                              onTap: () {\n                                Get.dialog(LetterDialog(gridList: gridList, index: index));\n                              },\n                              child: Container(\n                                alignment: Alignment.center,\n                                decoration: BoxDecoration(\n                                    color: Theme.of(context).secondaryHeaderColor,\n                                    borderRadius: cardRadius()),\n                                child: Text(\n                                  gridList[index],\n                                  style: TextStyle(\n                                      color: Colors.white,\n                                      fontFamily: 'Scheherazade-Regular',\n                                      fontSize: settings.arabicFont.value * 2),\n                                ),\n                              ).paddingSymmetric(horizontal: Get.width * .015),\n                            );\n                          }),\n                    )\n                  ],\n                ),\n              ),\n            );\n          },\n          \"p1\": (context, child) {\n            return child;\n          },\n        },\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "setUp", "docstring": "", "module": "config", "file_path": "Quran-Majeed/lib/core/config/quran_screen.dart", "file_name": "quran_screen.dart", "line": 45, "line_from": 45, "line_to": 283, "snippet": "  static void setUp(BuildContext context) {\n    final Size size = MediaQuery.sizeOf(context);\n    _height = size.height;\n    _width = size.width;\n    _resetIfInvalid();\n  }\n\n  static double? _width;\n  static double? _height;\n\n  static Size get _size => MediaQuery.sizeOf(QuranMajeed.globalContext);\n\n  static double get width {\n    _width ??= _size.width;\n    return _width!;\n  }\n\n  static double get height {\n    _height ??= _size.height;\n    return _height!;\n  }\n\n  static void _resetIfInvalid() {\n    if (_width! < 10 || _height! < 10) {\n      logErrorStatic(\n        'QuranScreen size not initialized. Please initialize QuranScreen and try again.',\n        \"quran_screen\",\n      );\n      _width = null;\n      _height = null;\n    }\n  }\n}\n\nextension QuranScreenWidth on Widget {\n  static double? _onePercentWidth;\n\n  double get onePercentWidth {\n    const double onePercent = 0.01;\n    _onePercentWidth ??= QuranScreen.width * onePercent;\n    return _onePercentWidth!;\n  }\n\n  static double? _twoPercentWidth;\n\n  double get twoPercentWidth {\n    const double twoPercent = 0.02;\n    _twoPercentWidth ??= QuranScreen.width * twoPercent;\n    return _twoPercentWidth!;\n  }\n\n  static double? _fiftyPercentHeight;\n\n  double get fiftyPercentHeight {\n    const double fiftyPercent = 0.50;\n    _fiftyPercentHeight ??= QuranScreen.height * fiftyPercent;\n    return _fiftyPercentHeight!;\n  }\n\n  static double? _threePercentWidth;\n\n  double get threePercentWidth {\n    const double threePercent = 0.03;\n    _threePercentWidth ??= QuranScreen.width * threePercent;\n    return _threePercentWidth!;\n  }\n\n  static double? _fourPercentWidth;\n\n  double get fourPercentWidth {\n    _fourPercentWidth ??= 4.percentWidth;\n    return _fourPercentWidth!;\n  }\n\n  static double? _fivePercentWidth;\n\n  double get fivePercentWidth {\n    _fivePercentWidth ??= 5.percentWidth;\n    return _fivePercentWidth!;\n  }\n\n  static double? _sixPercentWidth;\n\n  double get sixPercentWidth {\n    const double sixPercent = 0.06;\n    _sixPercentWidth ??= QuranScreen.width * sixPercent;\n    return _sixPercentWidth!;\n  }\n\n  static double? _sevenPercentWidth;\n\n  double get sevenPercentWidth {\n    const double sevenPercent = 0.07;\n    _sevenPercentWidth ??= QuranScreen.width * sevenPercent;\n    return _sevenPercentWidth!;\n  }\n\n  static double? _eightPercentWidth;\n\n  double get eightPercentWidth {\n    const double eightPercent = 0.08;\n    _eightPercentWidth ??= QuranScreen.width * eightPercent;\n    return _eightPercentWidth!;\n  }\n\n  static double? _tenPercentWidth;\n\n  double get tenPercentWidth {\n    const double tenPercentWidth = 0.10;\n    _tenPercentWidth ??= QuranScreen.width * tenPercentWidth;\n    return _tenPercentWidth!;\n  }\n\n  static double? _fortyPercentWidth;\n\n  double get fortyPercentWidth {\n    const double fortyPercent = 0.40;\n    _fortyPercentWidth ??= QuranScreen.width * fortyPercent;\n    return _fortyPercentWidth!;\n  }\n\n  static double? _thirtyPercentWidth;\n\n  double get thirtyPercentWidth {\n    const double thirtyPercentWidth = 0.32;\n    _thirtyPercentWidth ??= QuranScreen.width * thirtyPercentWidth;\n    return _thirtyPercentWidth!;\n  }\n\n  static double? _sixtySixPercentWidth;\n\n  double get sixtySixPercentWidth {\n    _sixtySixPercentWidth ??= 66.percentWidth;\n    return _sixtySixPercentWidth!;\n  }\n\n  static double? _fiftyFivePercentWidth;\n\n  double get fiftyFivePercentWidth {\n    _fiftyFivePercentWidth ??= 55.percentWidth;\n    return _fiftyFivePercentWidth!;\n  }\n\n  static double? _seventyPercentWidth;\n\n  double get seventyPercentWidth {\n    const double seventyPercent = 0.70;\n    _seventyPercentWidth ??= QuranScreen.width * seventyPercent;\n    return _seventyPercentWidth!;\n  }\n\n  static double? _tweentyEightPercentWidth;\n\n  double get tweentyEightPercentWidth {\n    const double tweentyEightPercentWidth = 0.28;\n    _tweentyEightPercentWidth ??= QuranScreen.width * tweentyEightPercentWidth;\n    return _tweentyEightPercentWidth!;\n  }\n\n  static double? _twentyPercentWidth;\n\n  double get twentyPercentWidth {\n    const double twentyPercentWidth = 0.20;\n    _twentyPercentWidth ??= QuranScreen.width * twentyPercentWidth;\n    return _twentyPercentWidth!;\n  }\n\n  static double? _twentyFivePercentWidth;\n\n  double get twentyFivePercentWidth {\n    const double twentyFivePercentWidth = 0.25;\n    _twentyFivePercentWidth ??= QuranScreen.width * twentyFivePercentWidth;\n    return _twentyFivePercentWidth!;\n  }\n\n  static double? _twentySixPercentWidth;\n\n  double get twentySixPercentWidth {\n    const double twentySixPercentWidth = 0.26;\n    _twentySixPercentWidth ??= QuranScreen.width * twentySixPercentWidth;\n    return _twentySixPercentWidth!;\n  }\n\n  static double? _twentyThreePercentWidth;\n\n  double get twentyThreePercentWidth {\n    const double twentyThreePercentWidth = 0.23;\n    _twentyThreePercentWidth ??= QuranScreen.width * twentyThreePercentWidth;\n    return _twentyThreePercentWidth!;\n  }\n\n  static double? _fourtyPercentWidth;\n\n  double get fourtyPercentWidth {\n    const double fourtyPercentWidth = 0.40;\n    _fourtyPercentWidth ??= QuranScreen.width * fourtyPercentWidth;\n    return _fourtyPercentWidth!;\n  }\n\n  static double? _twentyPercentHeight;\n\n  double get twentyPercentHeight {\n    const double twentyPercent = 0.20;\n    _twentyPercentHeight ??= QuranScreen.height * twentyPercent;\n    return _twentyPercentHeight!;\n  }\n\n  static double? _tenPercentHeight;\n\n  double get tenPercentHeight {\n    const double tenPercentHeight = 0.10;\n    _tenPercentHeight ??= QuranScreen.height * tenPercentHeight;\n    return _tenPercentHeight!;\n  }\n\n  static double? _twelvePercentHeight;\n\n  double get twelvePercentHeight {\n    const double twentyPercent = 0.12;\n    _twelvePercentHeight ??= QuranScreen.height * twentyPercent;\n    return _twelvePercentHeight!;\n  }\n\n  static double? _fourteenPercentHeight;\n\n  double get fourteenPercentHeight {\n    const double fourteenPercentHeight = 0.14;\n    _fourteenPercentHeight ??= QuranScreen.height * fourteenPercentHeight;\n    return _fourteenPercentHeight!;\n  }\n\n  static double? _tweentyPercentHeight;\n\n  double get tweentyPercentHeight {\n    const double tweentyPercentHeight = 0.20;\n    _tweentyPercentHeight ??= QuranScreen.height * tweentyPercentHeight;\n    return _tweentyPercentHeight!;\n  }\n}"}, {"structure_type": "class", "name": "to implement this in whatever way makes sense", "docstring": "The progress indicator's background color.\n", "module": "external_libs", "file_path": "Quran-Majeed/lib/core/external_libs/capped_progress_indicator.dart", "file_name": "capped_progress_indicator.dart", "line": 76, "line_from": 76, "line_to": 247, "snippet": "  /// It is up to the subclass to implement this in whatever way makes sense\n  /// for the given use case. See the subclass documentation for details.\n  final Color? backgroundColor;\n\n  /// The progress indicator's color.\n  ///\n  /// This is only used if [CappedProgressIndicator.valueColor] is null.\n  /// If [CappedProgressIndicator.color] is also null, then the ambient\n  /// [ProgressIndicatorThemeData.color] will be used. If that\n  /// is null then the current theme's [ColorScheme.primary] will\n  /// be used by default.\n  final Color? color;\n\n  /// The progress indicator's color as an animated value.\n  ///\n  /// If null, the progress indicator is rendered with [color]. If that is null,\n  /// then it will use the ambient [ProgressIndicatorThemeData.color]. If that\n  /// is also null then it defaults to the current theme's [ColorScheme.primary].\n  final Animation<Color?>? valueColor;\n\n  /// The [SemanticsProperties.label] for this progress indicator.\n  ///\n  /// This value indicates the purpose of the progress bar, and will be\n  /// read out by screen readers to indicate the purpose of this progress\n  /// indicator.\n  final String? semanticsLabel;\n\n  /// The [SemanticsProperties.value] for this progress indicator.\n  ///\n  /// This will be used in conjunction with the [semanticsLabel] by\n  /// screen reading software to identify the widget, and is primarily\n  /// intended for use with determinate progress indicators to announce\n  /// how far along they are.\n  ///\n  /// For determinate progress indicators, this will be defaulted to\n  /// [CappedProgressIndicator.value] expressed as a percentage, i.e. `0.1` will\n  /// become '10%'.\n  final String? semanticsValue;\n\n  Color _getValueColor(BuildContext context) {\n    return valueColor?.value ??\n        color ??\n        ProgressIndicatorTheme.of(context).color ??\n        Theme.of(context).colorScheme.primary;\n  }\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties.add(PercentProperty('value', value,\n        showName: false, ifNull: '<indeterminate>'));\n  }\n\n  Widget _buildSemanticsWrapper({\n    required BuildContext context,\n    required Widget child,\n  }) {\n    String? expandedSemanticsValue = semanticsValue;\n    if (value != null) {\n      expandedSemanticsValue ??= '${(value! * 100).round()}%';\n    }\n    return Semantics(\n      label: semanticsLabel,\n      value: expandedSemanticsValue,\n      child: child,\n    );\n  }\n}\n\nclass _LinearCappedProgressIndicatorPainter extends CustomPainter {\n  const _LinearCappedProgressIndicatorPainter({\n    required this.backgroundColor,\n    required this.valueColor,\n    this.value,\n    this.cornerRadius,\n    required this.animationValue,\n    required this.textDirection,\n  });\n\n  final Color backgroundColor;\n  final Color valueColor;\n  final double? value;\n  final double? cornerRadius;\n  final double animationValue;\n  final TextDirection textDirection;\n\n  // The indeterminate progress animation displays two lines whose leading (head)\n  // and trailing (tail) endpoints are defined by the following four curves.\n  static const Curve line1Head = Interval(\n    0.0,\n    750.0 / _kIndeterminateLinearDuration,\n    curve: Cubic(0.2, 0.0, 0.8, 1.0),\n  );\n  static const Curve line1Tail = Interval(\n    333.0 / _kIndeterminateLinearDuration,\n    (333.0 + 750.0) / _kIndeterminateLinearDuration,\n    curve: Cubic(0.4, 0.0, 1.0, 1.0),\n  );\n  static const Curve line2Head = Interval(\n    1000.0 / _kIndeterminateLinearDuration,\n    (1000.0 + 567.0) / _kIndeterminateLinearDuration,\n    curve: Cubic(0.0, 0.0, 0.65, 1.0),\n  );\n  static const Curve line2Tail = Interval(\n    1267.0 / _kIndeterminateLinearDuration,\n    (1267.0 + 533.0) / _kIndeterminateLinearDuration,\n    curve: Cubic(0.10, 0.0, 0.45, 1.0),\n  );\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Paint paint = Paint()\n      ..color = backgroundColor\n      ..style = PaintingStyle.fill;\n    canvas.drawRRect(\n      RRect.fromRectAndRadius(\n        Offset.zero & size,\n        Radius.circular(cornerRadius ?? size.height / 2),\n      ),\n      paint,\n    );\n\n    paint.color = valueColor;\n\n    void drawBar(double x, double width) {\n      if (width <= 0.0) {\n        return;\n      }\n\n      final double left;\n      switch (textDirection) {\n        case TextDirection.rtl:\n          left = size.width - width - x;\n          break;\n        case TextDirection.ltr:\n          left = x;\n          break;\n      }\n      canvas.drawRRect(\n        RRect.fromRectAndRadius(\n          Offset(left, 0.0) & Size(width, size.height),\n          Radius.circular(cornerRadius ?? size.height / 2),\n        ),\n        paint,\n      );\n    }\n\n    if (value != null) {\n      drawBar(0.0, clampDouble(value!, 0.0, 1.0) * size.width);\n    } else {\n      final double x1 = size.width * line1Tail.transform(animationValue);\n      final double width1 =\n          size.width * line1Head.transform(animationValue) - x1;\n\n      final double x2 = size.width * line2Tail.transform(animationValue);\n      final double width2 =\n          size.width * line2Head.transform(animationValue) - x2;\n\n      drawBar(x1, width1);\n      drawBar(x2, width2);\n    }\n  }\n\n  @override\n  bool shouldRepaint(_LinearCappedProgressIndicatorPainter oldPainter) {\n    return oldPainter.backgroundColor != backgroundColor ||\n        oldPainter.valueColor != valueColor ||\n        oldPainter.value != value ||\n        oldPainter.animationValue != animationValue ||\n        oldPainter.textDirection != textDirection;\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "external_libs", "file_path": "Quran-Majeed/lib/core/external_libs/fancy_scaffold.dart", "file_name": "fancy_scaffold.dart", "line": 9, "line_from": 9, "line_to": 63, "snippet": "  final void Function(double position)? onSlide;\n  final VoidCallback? onOpened;\n  final VoidCallback? onClosed;\n  final FloatingWidgetState defaultState;\n  final Color backdropColor;\n  final double backdropOpacity;\n  final double? maxHeight;\n  final double minHeight;\n  final bool isPanelVisible;\n  final EdgeInsetsGeometry margin;\n  final EdgeInsetsGeometry padding;\n\n  const FloatingWidgetConfig({\n    this.backdropEnabled = true,\n    this.onSlide,\n    this.onOpened,\n    this.onClosed,\n    this.defaultState = FloatingWidgetState.closed,\n    this.backdropColor = Colors.black,\n    this.backdropOpacity = 0.5,\n    this.maxHeight,\n    this.minHeight = kToolbarHeight * 1.6,\n    this.isPanelVisible = true,\n    this.margin = EdgeInsets.zero,\n    this.padding = const EdgeInsets.all(4),\n  });\n}\n\nclass FancyScaffold extends StatefulWidget {\n  final Widget body;\n  final Widget? appBar;\n  final Widget? bottomNavigationBar;\n  final bool? resizeToAvoidBottomInset;\n  final Color? backgroundColor;\n  final FloatingWidgetController? floatingWidgetController;\n  final FloatingWidgetConfig floatingWidgetConfig;\n  final double? bottomNavigationBarHeight;\n  final bool isAudioPlaying;\n\n  const FancyScaffold({\n    required this.body,\n    this.appBar,\n    this.bottomNavigationBar,\n    this.resizeToAvoidBottomInset,\n    this.backgroundColor,\n    this.floatingWidgetConfig = const FloatingWidgetConfig(),\n    this.floatingWidgetController,\n    this.bottomNavigationBarHeight,\n    this.isAudioPlaying = false,\n    super.key,\n  });\n\n  @override\n  FancyScaffoldState createState() => FancyScaffoldState();\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "external_libs", "file_path": "Quran-Majeed/lib/core/external_libs/fancy_scaffold.dart", "file_name": "fancy_scaffold.dart", "line": 90, "line_from": 90, "line_to": 373, "snippet": "  void initState() {\n    super.initState();\n    floatingWidgetAnimationController.addListener(_floatingWidgetListener);\n    _floatingWidgetScrollController.addListener(_scrollListener);\n  }\n\n  void hideAppBar() {\n    if (navigationBarAnimationController.value != 0) {\n      navigationBarAnimationController.animateTo(0);\n    }\n  }\n\n  void showAppBar() {\n    if (navigationBarAnimationController.value != 1) {\n      navigationBarAnimationController.animateTo(1);\n    }\n  }\n\n  void _floatingWidgetListener() {\n    if (widget.floatingWidgetConfig.onSlide != null) {\n      widget.floatingWidgetConfig\n          .onSlide!(floatingWidgetAnimationController.value);\n    }\n\n    if (widget.floatingWidgetConfig.onOpened != null &&\n        floatingWidgetAnimationController.value == 1.0) {\n      widget.floatingWidgetConfig.onOpened!();\n    }\n\n    if (widget.floatingWidgetConfig.onClosed != null &&\n        floatingWidgetAnimationController.value == 0.0) {\n      widget.floatingWidgetConfig.onClosed!();\n    }\n\n    if (!navigationBarScrolledDown) {\n      navigationBarAnimationController.value =\n          1 - floatingWidgetAnimationController.value;\n    }\n  }\n\n  void _scrollListener() {\n    if (!_scrollingEnabled) {\n      _floatingWidgetScrollController.jumpTo(0);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    widget.floatingWidgetController?._addState(this);\n    final double systemTopPadding = MediaQuery.of(context).padding.top;\n    final double systemBottomPadding = MediaQuery.of(context).padding.bottom;\n    final double appBarHeight = widget.appBar != null ? kToolbarHeight : 0;\n\n    return CustomStatusBarColor(\n      statusBarColor: context.color.gradientTop,\n      statusBarIconColor:\n          isDarkMode(context) ? Brightness.light : Brightness.dark,\n      navigationBarColor: Theme.of(context).cardColor,\n      navigationBarIconColor:\n          isDarkMode(context) ? Brightness.light : Brightness.dark,\n      child: AnimatedBuilder(\n        animation: floatingWidgetAnimationController,\n        builder: (context, mainChild) {\n          return AnimatedBuilder(\n            animation: navigationBarAnimationController,\n            builder: (context, child) {\n              return Stack(\n                children: [\n                  Positioned.fill(\n                    child: Column(\n                      children: [\n                        Container(\n                            color: context.color.gradientTop,\n                            height: systemTopPadding +\n                                appBarHeight *\n                                    navigationBarAnimationController.value +\n                                2),\n                        Expanded(\n                          child: child!,\n                        ),\n                      ],\n                    ),\n                  ),\n                  if (widget.appBar != null)\n                    Positioned(\n                      top: -kToolbarHeight *\n                              (1 - navigationBarAnimationController.value) +\n                          systemTopPadding +\n                          2,\n                      left: 0,\n                      right: 0,\n                      child: widget.appBar!,\n                    ),\n                  if (widget.bottomNavigationBar != null)\n                    Positioned(\n                      bottom: -(widget.bottomNavigationBarHeight ?? 80) *\n                          (1 - navigationBarAnimationController.value),\n                      left: 0,\n                      right: 0,\n                      child: Container(\n                        width: double.infinity,\n                        color: Colors.transparent,\n                        height: (widget.bottomNavigationBarHeight ?? 73) +\n                            systemBottomPadding,\n                        child: Column(\n                          children: [\n                            Expanded(\n                              child: SingleChildScrollView(\n                                physics: const NeverScrollableScrollPhysics(),\n                                child: widget.bottomNavigationBar,\n                              ),\n                            ),\n                            Container(\n                              color: Theme.of(context).cardColor,\n                            ),\n                          ],\n                        ),\n                      ),\n                    ),\n                ],\n              );\n            },\n            child: Listener(\n              onPointerUp: _handlePointerUp,\n              child: NotificationListener<ScrollUpdateNotification>(\n                onNotification: _handleScrollNotification,\n                child: mainChild!,\n              ),\n            ),\n          );\n        },\n        child: widget.body,\n      ),\n    );\n  }\n\n  void _handlePointerUp(_) {\n    pixelsScrolled = 0;\n    if (navigationBarAnimationController.value > 0.5) {\n      navigationBarAnimationController.animateTo(1);\n      navigationBarScrolledDown = false;\n    } else {\n      navigationBarAnimationController.animateTo(0);\n      navigationBarScrolledDown = false;\n    }\n  }\n\n  bool _handleScrollNotification(ScrollUpdateNotification details) {\n    if (widget.floatingWidgetController?.lockNotificationListener ?? false) {\n      return false;\n    }\n    if (details.metrics.axis == Axis.horizontal) {\n      return false;\n    }\n\n    // Check if audio is playing\n    if (widget.isAudioPlaying) {\n      return false;\n    }\n\n    pixelsScrolled =\n        (pixelsScrolled + (details.scrollDelta ?? 0).abs()).clamp(0, 100) / 100;\n    if ((details.scrollDelta ?? 0) > 0.0 &&\n        details.metrics.axis == Axis.vertical) {\n      navigationBarAnimationController.value -= pixelsScrolled;\n    } else {\n      navigationBarAnimationController.value += pixelsScrolled;\n    }\n    return false;\n  }\n\n  Future<void> _close() {\n    return floatingWidgetAnimationController.fling(velocity: -1.0);\n  }\n\n  Future<void> _open() {\n    return floatingWidgetAnimationController.fling(velocity: 1.0);\n  }\n\n  Future<void> _animatePanelToPosition(\n    double value, {\n    Duration duration = const Duration(milliseconds: 200),\n    Curve curve = Curves.linear,\n  }) {\n    assert(0.0 <= value && value <= 1.0);\n    return floatingWidgetAnimationController.animateTo(value,\n        duration: duration, curve: curve);\n  }\n\n  set _panelPosition(double value) {\n    assert(0.0 <= value && value <= 1.0);\n    floatingWidgetAnimationController.value = value;\n  }\n\n  double get _panelPosition => floatingWidgetAnimationController.value;\n\n  bool get _isPanelAnimating => floatingWidgetAnimationController.isAnimating;\n\n  bool get _isPanelOpen => floatingWidgetAnimationController.value == 1.0;\n\n  bool get _isPanelClosed => floatingWidgetAnimationController.value == 0.0;\n}\n\nclass FloatingWidgetController {\n  FancyScaffoldState? _scaffoldState;\n\n  void _addState(FancyScaffoldState panelState) {\n    _scaffoldState = panelState;\n  }\n\n  GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();\n\n  bool lockNotificationListener = false;\n\n  bool get isAttached => _scaffoldState != null;\n\n  AnimationController get animationController =>\n      _scaffoldState!.floatingWidgetAnimationController;\n  AnimationController get navbarAnimationController =>\n      _scaffoldState!.navigationBarAnimationController;\n  bool get navbarScrolledDown => _scaffoldState!.navigationBarScrolledDown;\n  set navbarScrolledDown(bool value) {\n    _scaffoldState!.navigationBarScrolledDown = value;\n  }\n\n  void hideAppBar() {\n    assert(isAttached,\n        \"FloatingWidgetController must be attached to a FancyScaffold\");\n    _scaffoldState!.hideAppBar();\n  }\n\n  void showAppBar() {\n    assert(isAttached,\n        \"FloatingWidgetController must be attached to a FancyScaffold\");\n    _scaffoldState!.showAppBar();\n  }\n\n  Future<void> close() {\n    assert(isAttached, \"PanelController must be attached to a SlidingUpPanel\");\n    return _scaffoldState!._close();\n  }\n\n  Future<void> open() {\n    assert(isAttached, \"PanelController must be attached to a SlidingUpPanel\");\n    return _scaffoldState!._open();\n  }\n\n  Future<void> animatePanelToPosition(\n    double value, {\n    Duration duration = const Duration(milliseconds: 200),\n    Curve curve = Curves.linear,\n  }) {\n    assert(isAttached, \"PanelController must be attached to a SlidingUpPanel\");\n    assert(0.0 <= value && value <= 1.0);\n    return _scaffoldState!\n        ._animatePanelToPosition(value, duration: duration, curve: curve);\n  }\n\n  set panelPosition(double value) {\n    assert(isAttached, \"PanelController must be attached to a SlidingUpPanel\");\n    assert(0.0 <= value && value <= 1.0);\n    _scaffoldState!._panelPosition = value;\n  }\n\n  double get panelPosition {\n    assert(isAttached, \"PanelController must be attached to a SlidingUpPanel\");\n    return _scaffoldState!._panelPosition;\n  }\n\n  bool get isPanelAnimating {\n    assert(isAttached, \"PanelController must be attached to a SlidingUpPanel\");\n    return _scaffoldState!._isPanelAnimating;\n  }\n\n  bool get isPanelOpen {\n    assert(isAttached, \"PanelController must be attached to a SlidingUpPanel\");\n    return _scaffoldState!._isPanelOpen;\n  }\n\n  bool get isPanelClosed {\n    assert(isAttached, \"PanelController must be attached to a SlidingUpPanel\");\n    return _scaffoldState!._isPanelClosed;\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "external_libs", "file_path": "Quran-Majeed/lib/core/external_libs/positioned_scroll_bar.dart", "file_name": "positioned_scroll_bar.dart", "line": 18, "line_from": 18, "line_to": 35, "snippet": "  final void Function({required bool dragging})? onDragging;\n\n  @override\n  Widget build(BuildContext context) {\n    if (!showScrollBar) return listView;\n\n    return DraggableScrollbarPositionedList.arrows(\n      key: const Key('PositionedScrollBar'),\n      backgroundColor: isDarkMode(context)\n          ? context.color.bottomSheetHeader\n          : Theme.of(context).primaryColor,\n      padding: const EdgeInsets.only(right: 2),\n      onDragging: onDragging,\n      controller: controller,\n      child: listView,\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "external_libs", "file_path": "Quran-Majeed/lib/core/external_libs/presentable_widget_builder.dart", "file_name": "presentable_widget_builder.dart", "line": 19, "line_from": 19, "line_to": 60, "snippet": "  final Widget Function() builder;\n\n  @override\n  State<PresentableWidgetBuilder<T>> createState() => _PresentableWidgetBuilderState<T>();\n}\n\nclass _PresentableWidgetBuilderState<T extends DisposableInterface> extends State<PresentableWidgetBuilder<T>> {\n  T? _previousState;\n\n  @override\n  void initState() {\n    super.initState();\n    if (widget.onInit != null) {\n      widget.onInit!();\n    }\n    if (widget.presenter != null) {\n      Get.put(widget.presenter!);\n    }\n  }\n\n  @override\n  void dispose() {\n    if (widget.dispose != null) {\n      widget.dispose!();\n    }\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Obx(() {\n      final currentState = widget.presenter;\n      if (widget.shouldRebuild != null) {\n        if (!widget.shouldRebuild!(_previousState, currentState)) {\n          return widget.builder();\n        }\n      }\n      _previousState = currentState;\n      return widget.builder();\n    });\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "The builder of title.\n\nTypically a [Button] widget that call [toggleFunction] when pressed.", "module": "external_libs", "file_path": "Quran-Majeed/lib/core/external_libs/expansion_widget.dart", "file_name": "expansion_widget.dart", "line": 26, "line_from": 26, "line_to": 83, "snippet": "  final Widget Function(double animationValue, double easeInValue,\n      bool isExpanded, Function({bool animated}) toggleFunction) titleBuilder;\n\n  /// Function to save expansion state\n  /// Called when expansion state changed\n  final void Function(bool isExpanded)? onSaveState;\n\n  /// function to restore expansion state.\n  /// Return null if there is no state to store;\n  /// in this case, [initiallyExpanded] will be used\n  final bool? Function()? onRestoreState;\n\n  /// The length of time of animation\n  final Duration duration;\n\n  /// Called when the widget expands or collapses.\n  ///\n  /// When the widget starts expanding, this function is called with the value\n  /// true. When the tile starts collapsing, this function is called with\n  /// the value false.\n  final void Function(bool)? onExpansionChanged;\n\n  /// Called when the widget will change expanded state.\n  ///\n  /// When the widget is going to start expanding/collapsing, this function is\n  /// called with the value true/false.\n  ///\n  /// Return false to prevent expanded state to change.\n  /// Return true(default) to allow expanded state changing.\n  final bool Function(bool)? onExpansionWillChange;\n\n  /// The widget that are displayed when the expansionWidget expands.\n  final Widget content;\n\n  /// Specifies if the expansionWidget is initially expanded (true) or collapsed (false, the default).\n  final bool initiallyExpanded;\n\n  /// Specifies whether the state of the content is maintained when the expansionWidget expands and collapses.\n  ///\n  /// When true, the content are kept in the tree while the expansionWidget is collapsed.\n  /// When false (default), the content are removed from the tree when the expansionWidget is\n  /// collapsed and recreated upon expansion.\n  final bool maintainState;\n\n  /// Specifies the alignment of [content], which are arranged in a column when\n  /// the expansionWidget is expanded.\n  ///\n  /// The internals of the expanded expansionWidget make use of a [Column] widget for\n  /// [content], and [Align] widget to align the column. The `expandedAlignment`\n  /// parameter is passed directly into the [Align].\n  ///\n  /// Modifying this property controls the alignment of the column within the\n  /// expanded expansionWidget.\n  final Alignment expandedAlignment;\n\n  @override\n  ExpansionWidgetState createState() => ExpansionWidgetState();\n}"}, {"structure_type": "function", "name": "cancel", "docstring": "", "module": "external_libs", "file_path": "Quran-Majeed/lib/core/external_libs/throttle_service.dart", "file_name": "throttle_service.dart", "line": 51, "line_from": 51, "line_to": 73, "snippet": "  static void cancel(String tag) {\n    _operations[tag]?.timer.cancel();\n    _operations.remove(tag);\n  }\n\n  static void cancelAll() {\n    for (final _ThrottleOperation operation in _operations.values) {\n      operation.timer.cancel();\n    }\n    _operations.clear();\n  }\n\n  static int count() => _operations.length;\n}\n\ntypedef EasyDebounceCallback = void Function();\n\nclass _EasyDebounceOperation {\n  _EasyDebounceOperation(this.callback, this.timer);\n\n  EasyDebounceCallback callback;\n  Timer timer;\n}"}, {"structure_type": "function", "name": "onReady;", "docstring": "", "module": "carousel_slider", "file_path": "Quran-Majeed/lib/core/external_libs/carousel_slider/carousel_controller.dart", "file_name": "carousel_controller.dart", "line": 13, "line_from": 13, "line_to": 26, "snippet": "  Future<void> get onReady;\n\n  Future<void> nextPage({Duration? duration, Curve? curve});\n\n  Future<void> previousPage({Duration? duration, Curve? curve});\n\n  void jumpToPage(int page);\n\n  Future<void> animateToPage(int page, {Duration? duration, Curve? curve});\n\n  void startAutoPlay();\n\n  void stopAutoPlay();\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "carousel_slider", "file_path": "Quran-Majeed/lib/core/external_libs/carousel_slider/carousel_slider.dart", "file_name": "carousel_slider.dart", "line": 12, "line_from": 12, "line_to": 409, "snippet": "typedef ExtendedIndexedWidgetBuilder = Widget Function(\n  BuildContext context,\n  int index,\n  int realIndex,\n);\n\nclass CarouselSlider extends StatefulWidget {\n  CarouselSlider({\n    required this.items,\n    required this.options,\n    this.disableGesture,\n    CarouselControllerHelper? carouselController,\n    super.key,\n  })  : itemBuilder = null,\n        itemCount = items != null ? items.length : 0,\n        _carouselController = carouselController != null\n            ? carouselController as CarouselControllerImpl\n            : CarouselControllerHelper() as CarouselControllerImpl;\n\n  CarouselSlider.builder({\n    required this.itemCount,\n    required this.itemBuilder,\n    required this.options,\n    this.disableGesture,\n    CarouselControllerHelper? carouselController,\n    super.key,\n  })  : items = null,\n        _carouselController = carouselController != null\n            ? carouselController as CarouselControllerImpl\n            : CarouselControllerHelper() as CarouselControllerImpl;\n\n  final CarouselOptions options;\n\n  final bool? disableGesture;\n\n  final List<Widget>? items;\n\n  final ExtendedIndexedWidgetBuilder? itemBuilder;\n\n  final CarouselControllerImpl _carouselController;\n\n  final int? itemCount;\n\n  @override\n  // ignore: no_logic_in_create_state\n  CarouselSliderState createState() => CarouselSliderState(_carouselController);\n}\n\nclass CarouselSliderState extends State<CarouselSlider>\n    with TickerProviderStateMixin {\n  CarouselSliderState(this.carouselController);\n\n  final CarouselControllerImpl carouselController;\n  Timer? timer;\n\n  CarouselOptions get options => widget.options;\n\n  CarouselState? carouselState;\n\n  PageController? pageController;\n\n  CarouselPageChangedReason _mode = CarouselPageChangedReason.controller;\n\n  set mode(CarouselPageChangedReason mode) => _mode = mode;\n\n  @override\n  void didUpdateWidget(CarouselSlider oldWidget) {\n    carouselState!.options = options;\n    carouselState!.itemCount = widget.itemCount;\n\n    // pageController needs to be re-initialized to respond to state changes\n    pageController = PageController(\n      viewportFraction: options.viewportFraction,\n      initialPage: carouselState!.realPage,\n    );\n    carouselState!.pageController = pageController;\n\n    // handle autoplay when state changes\n    handleAutoPlay();\n\n    super.didUpdateWidget(oldWidget);\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    carouselState =\n        CarouselState(options, clearTimer, resumeTimer, (m) => mode = m);\n\n    carouselState!.itemCount = widget.itemCount;\n    carouselController.state = carouselState;\n    carouselState!.initialPage = widget.options.initialPage;\n    carouselState!.realPage = options.enableInfiniteScroll\n        ? carouselState!.realPage + carouselState!.initialPage\n        : carouselState!.initialPage;\n    handleAutoPlay();\n\n    pageController = PageController(\n      viewportFraction: options.viewportFraction,\n      initialPage: carouselState!.realPage,\n    );\n\n    carouselState!.pageController = pageController;\n  }\n\n  Timer? getTimer() {\n    return catchAndReturn(() {\n      if (!widget.options.autoPlay) throw Exception(\"Autoplay is not enabled\");\n\n      return Timer.periodic(widget.options.autoPlayInterval, (_) {\n        if (!mounted) {\n          clearTimer();\n          return;\n        }\n\n        final ModalRoute<Object?>? route = ModalRoute.of(context);\n        if (route?.isCurrent == false) return;\n\n        final CarouselPageChangedReason previousReason = _mode;\n        mode = CarouselPageChangedReason.timed;\n\n        final int currentPage =\n            carouselState?.pageController?.page?.round() ?? 0;\n        int nextPage = currentPage + 1;\n        final int itemCount = widget.itemCount ?? widget.items?.length ?? 1;\n\n        if (nextPage >= itemCount &&\n            widget.options.enableInfiniteScroll == false) {\n          if (widget.options.pauseAutoPlayInFiniteScroll) {\n            clearTimer();\n            return;\n          }\n          nextPage = 0;\n        }\n\n        carouselState?.pageController\n            ?.animateToPage(\n              nextPage,\n              duration: widget.options.autoPlayAnimationDuration,\n              curve: widget.options.autoPlayCurve,\n            )\n            .then((_) => mode = previousReason);\n      });\n    });\n  }\n\n  void clearTimer() {\n    if (timer != null) {\n      timer?.cancel();\n      timer = null;\n    }\n  }\n\n  void resumeTimer() {\n    timer ??= getTimer();\n  }\n\n  void handleAutoPlay() {\n    final bool autoPlayEnabled = widget.options.autoPlay;\n\n    if (autoPlayEnabled && timer != null) return;\n\n    clearTimer();\n    if (autoPlayEnabled) {\n      resumeTimer();\n    }\n  }\n\n  Widget getGestureWrapper(Widget child) {\n    Widget wrapper;\n    if (widget.options.height != null) {\n      wrapper = SizedBox(height: widget.options.height, child: child);\n    } else {\n      wrapper =\n          AspectRatio(aspectRatio: widget.options.aspectRatio, child: child);\n    }\n\n    if (true == widget.disableGesture) {\n      return NotificationListener(\n        onNotification: (Notification notification) {\n          if (widget.options.onScrolled != null &&\n              notification is ScrollUpdateNotification) {\n            widget.options.onScrolled!(carouselState!.pageController!.page);\n          }\n          return false;\n        },\n        child: wrapper,\n      );\n    }\n\n    return RawGestureDetector(\n      behavior: HitTestBehavior.opaque,\n      gestures: {\n        _MultipleGestureRecognizer:\n            GestureRecognizerFactoryWithHandlers<_MultipleGestureRecognizer>(\n                _MultipleGestureRecognizer.new,\n                (_MultipleGestureRecognizer instance) {\n          instance\n            ..onStart = (_) {\n              onStart();\n            }\n            ..onDown = (_) {\n              onPanDown();\n            }\n            ..onEnd = (_) {\n              onPanUp();\n            }\n            ..onCancel = onPanUp;\n        }),\n      },\n      child: NotificationListener(\n        onNotification: (Notification notification) {\n          if (widget.options.onScrolled != null &&\n              notification is ScrollUpdateNotification) {\n            widget.options.onScrolled!(carouselState!.pageController!.page);\n          }\n          return false;\n        },\n        child: wrapper,\n      ),\n    );\n  }\n\n  Widget getCenterWrapper(Widget child) {\n    if (widget.options.disableCenter) {\n      return Container(\n        child: child,\n      );\n    }\n    return Center(child: child);\n  }\n\n  Widget getEnlargeWrapper(\n    Widget? child, {\n    double? width,\n    double? height,\n    double? scale,\n    required double itemOffset,\n  }) {\n    if (widget.options.enlargeStrategy == CenterPageEnlargeStrategy.height) {\n      return SizedBox(width: width, height: height, child: child);\n    }\n    if (widget.options.enlargeStrategy == CenterPageEnlargeStrategy.zoom) {\n      late Alignment alignment;\n      final bool horizontal = options.scrollDirection == Axis.horizontal;\n      if (itemOffset > 0) {\n        alignment = horizontal ? Alignment.centerRight : Alignment.bottomCenter;\n      } else {\n        alignment = horizontal ? Alignment.centerLeft : Alignment.topCenter;\n      }\n      return Transform.scale(scale: scale, alignment: alignment, child: child);\n    }\n    return Transform.scale(\n      scale: scale,\n      child: SizedBox(width: width, height: height, child: child),\n    );\n  }\n\n  void onStart() {\n    mode = CarouselPageChangedReason.manual;\n  }\n\n  void onPanDown() {\n    if (widget.options.pauseAutoPlayOnTouch) {\n      clearTimer();\n    }\n\n    mode = CarouselPageChangedReason.manual;\n  }\n\n  void onPanUp() {\n    if (widget.options.pauseAutoPlayOnTouch) {\n      resumeTimer();\n    }\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n    clearTimer();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return getGestureWrapper(\n      PageView.builder(\n        padEnds: widget.options.padEnds,\n        scrollBehavior: ScrollConfiguration.of(context).copyWith(\n          scrollbars: false,\n          overscroll: false,\n          dragDevices: {\n            PointerDeviceKind.touch,\n            PointerDeviceKind.mouse,\n          },\n        ),\n        clipBehavior: widget.options.clipBehavior,\n        physics: widget.options.scrollPhysics,\n        scrollDirection: widget.options.scrollDirection,\n        pageSnapping: widget.options.pageSnapping,\n        controller: carouselState!.pageController,\n        reverse: widget.options.reverse,\n        itemCount:\n            widget.options.enableInfiniteScroll ? null : widget.itemCount,\n        onPageChanged: (int index) {\n          final int currentPage = getRealIndex(\n            index + carouselState!.initialPage,\n            carouselState!.realPage,\n            widget.itemCount,\n          );\n          widget.options.onPageChanged?.call(currentPage, _mode);\n        },\n        itemBuilder: (BuildContext context, int idx) {\n          final int index = getRealIndex(\n            idx + carouselState!.initialPage,\n            carouselState!.realPage,\n            widget.itemCount,\n          );\n\n          return AnimatedBuilder(\n            animation: carouselState!.pageController!,\n            child: (widget.items != null)\n                ? (widget.items!.isNotEmpty\n                    ? widget.items![index]\n                    : Container())\n                : widget.itemBuilder!(context, index, idx),\n            builder: (BuildContext context, child) {\n              double distortionValue = 1;\n              // if `enlargeCenterPage` is true, we must calculate the carousel item's height\n              // to display the visual effect\n              double itemOffset = 0;\n              if (widget.options.enlargeCenterPage != null &&\n                  (widget.options.enlargeCenterPage ?? false)) {\n                // pageController.page can only be accessed after the first build,\n                // so in the first build we calculate the itemoffset manually\n                final position = carouselState?.pageController?.position;\n                if (position != null &&\n                    position.hasPixels &&\n                    position.hasContentDimensions) {\n                  final page = carouselState?.pageController?.page;\n                  if (page != null) {\n                    itemOffset = page - idx;\n                  }\n                } else {\n                  final BuildContext storageContext = carouselState!\n                      .pageController!.position.context.storageContext;\n                  final double? previousSavedPosition =\n                      PageStorage.of(storageContext).readState(storageContext)\n                          as double?;\n                  if (previousSavedPosition != null) {\n                    itemOffset = previousSavedPosition - idx.toDouble();\n                  } else {\n                    itemOffset =\n                        carouselState!.realPage.toDouble() - idx.toDouble();\n                  }\n                }\n\n                final double enlargeFactor =\n                    options.enlargeFactor.clamp(0.0, 1.0);\n                final num distortionRatio =\n                    (1 - (itemOffset.abs() * enlargeFactor)).clamp(0.0, 1.0);\n                distortionValue =\n                    Curves.easeOut.transform(distortionRatio as double);\n              }\n\n              final double height = widget.options.height ??\n                  MediaQuery.of(context).size.width *\n                      (1 / widget.options.aspectRatio);\n\n              if (widget.options.scrollDirection == Axis.horizontal) {\n                return getCenterWrapper(\n                  getEnlargeWrapper(\n                    child,\n                    height: distortionValue * height,\n                    scale: distortionValue,\n                    itemOffset: itemOffset,\n                  ),\n                );\n              } else {\n                return getCenterWrapper(\n                  getEnlargeWrapper(\n                    child,\n                    width: distortionValue * MediaQuery.of(context).size.width,\n                    scale: distortionValue,\n                    itemOffset: itemOffset,\n                  ),\n                );\n              }\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n\nclass _MultipleGestureRecognizer extends PanGestureRecognizer {}\n"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "draggable_scrollbar_positioned_list", "file_path": "Quran-Majeed/lib/core/external_libs/draggable_scrollbar_positioned_list/draggable_scrollbar_positioned_list.dart", "file_name": "draggable_scrollbar_positioned_list.dart", "line": 63, "line_from": 63, "line_to": 152, "snippet": "  final void Function({required bool dragging})? onDragging;\n\n  @override\n  DraggableScrollbarPositionedListState createState() =>\n      DraggableScrollbarPositionedListState();\n\n  static Widget buildScrollThumb({\n    required Widget scrollThumb,\n    required Color backgroundColor,\n    required Animation<double> thumbAnimation,\n    required bool alwaysVisibleScrollThumb,\n  }) {\n    if (alwaysVisibleScrollThumb) return scrollThumb;\n\n    return SlideFadeTransition(\n      key: const ValueKey('SlideFadeTransition2938492'),\n      animation: thumbAnimation,\n      child: scrollThumb,\n    );\n  }\n\n  static ScrollThumbBuilder _thumbArrowBuilder(\n    Key? scrollThumbKey,\n    bool alwaysVisibleScrollThumb,\n  ) {\n    return (\n      Color backgroundColor,\n      Animation<double> thumbAnimation,\n      double height,\n    ) {\n      // creates a ClipPath widget named scrollThumb that represents a scroll\n      // thumb used in a scrollbar. The scroll thumb is a rectangular container\n      // with rounded corners, and it uses an ArrowClipper as its clipper to\n      // give it an arrow-shaped appearance.\n      final ClipPath scrollThumb = ClipPath(\n        key: const Key(\"ScrollThumbBuilderClipPath\"),\n        child: Container(\n          key: scrollThumbKey,\n          alignment: Alignment.center,\n          height: 40,\n          width: 16,\n          decoration: BoxDecoration(\n            color: backgroundColor,\n            borderRadius: BorderRadius.circular(4),\n          ),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            crossAxisAlignment: CrossAxisAlignment.center,\n            children: [\n              SvgPicture.asset(\n                'assets/images/svg/chevrons_left.svg',\n              ),\n              SvgPicture.asset(\n                'assets/images/svg/chevrons_right.svg',\n              ),\n            ],\n          ),\n        ),\n      );\n      // final ClipPath scrollThumb = ClipPath(\n      //   key: const Key(\"ScrollThumbBuilderClipPath\"),\n      //   // clipper: ArrowClipper(),\n      //   child: Container(\n      //     key: scrollThumbKey,\n      //     height: 50,\n      //     width: 50,\n      //     decoration: BoxDecoration(\n      //       color: backgroundColor,\n      //       borderRadius: const BorderRadius.only(\n      //         topLeft: Radius.circular(50),\n      //         bottomLeft: Radius.circular(50),\n      //         topRight: Radius.circular(50),\n      //       ),\n      //     ),\n      //     child: Icon(\n      //       Icons.unfold_more,\n      //       color: Colors.grey.shade100,\n      //     ),\n      //   ),\n      // );\n\n      return buildScrollThumb(\n        scrollThumb: scrollThumb,\n        backgroundColor: backgroundColor,\n        thumbAnimation: thumbAnimation,\n        alwaysVisibleScrollThumb: alwaysVisibleScrollThumb,\n      );\n    };\n  }\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "circular_seek_bar-master", "file_path": "Quran-Majeed/lib/core/external_libs/circular_seek_bar-master/circular_seek_bar.dart", "file_name": "circular_seek_bar.dart", "line": 142, "line_from": 142, "line_to": 628, "snippet": "  void initState() {\n    super.initState();\n    _progress = widget.progress;\n  }\n\n  /// Reset CircularSeekBar's progress.\n  @override\n  void didUpdateWidget(CircularSeekBar oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (oldWidget.progress != widget.progress) {\n      _progress = widget.progress;\n    }\n  }\n\n  /// Get size of CircularSeekBar with RenderBox.\n  // Size _getSize(GlobalKey key) {\n  //   final RenderBox renderBox =\n  //       key.currentContext!.findRenderObject() as RenderBox;\n  //   Size size = renderBox.size;\n  //   return size;\n  // }\n\n  /// Converts the x and y coordinate values received by the onTapDown callback to progress.\n  // void _handleGesture(details) {\n  //   double dx = details.localPosition.dx;\n  //   double dy = details.localPosition.dy;\n  //   Size size = _getSize(_key);\n  //   double centerX = size.width / 2.0;\n  //   double centerY = size.height / 2.0;\n  //   double angle = _getTouchedDegrees(centerX, dx, centerY, dy);\n  //   double progress = (widget.dashWidth > 0 && widget.dashGap > 0)\n  //       ? _angleToDashedProgress(\n  //           angle > 0 ? angle : angle + 360,\n  //           widget.startAngle,\n  //           widget.sweepAngle,\n  //           widget.dashWidth,\n  //           widget.dashGap)\n  //       : _angleToProgress(angle > 0 ? angle : angle + 360, widget.startAngle,\n  //           widget.sweepAngle);\n  //   if (progress >= widget.minProgress && progress <= widget.maxProgress) {\n  //     setState(() {\n  //       _progress = progress;\n  //     });\n  //   }\n  // }\n\n  // /// Method to get relative angle of CircularSeekBar.\n  // double _getRelativeAngle(double angle, double startAngle) {\n  //   return (angle - startAngle) >= 0\n  //       ? (angle - startAngle)\n  //       : (360 - startAngle + angle);\n  // }\n\n  /// Convert (x, y) coordinates to an angle.\n  // double _getTouchedDegrees(\n  //     double centerX, double dx, double centerY, double dy) {\n  //   return _radiansToDegrees(atan2(centerX - dx, dy - centerY));\n  // }\n\n  /// Convert angle to progress.\n  // double _angleToProgress(double angle, double startAngle, double sweepAngle) {\n  //   double relativeAngle = _getRelativeAngle(angle, startAngle);\n  //   return (relativeAngle / sweepAngle) * 100;\n  // }\n\n  // /// Convert the angle of dashed seekbar to progress\n  // double _angleToDashedProgress(double angle, double startAngle,\n  //     double sweepAngle, double dashWidth, double dashGap) {\n  //   double relativeAngle = (angle - startAngle) >= 0\n  //       ? (angle - startAngle)\n  //       : (360 - startAngle + angle);\n  //   double dashSum = dashWidth + dashGap;\n\n  //   int trackDashCounts =\n  //       sweepAngle >= (sweepAngle ~/ dashSum) * dashSum + dashWidth\n  //           ? (sweepAngle ~/ dashSum) + 1\n  //           : (sweepAngle ~/ dashSum);\n  //   double totalTrackDashWidth = dashWidth * trackDashCounts;\n\n  //   for (int i = 0; i <= trackDashCounts; i++) {\n  //     double relativeDashStartAngle = dashSum * i;\n  //     double relativeDashEndAngle = (relativeDashStartAngle + dashWidth) % 360;\n\n  //     if (relativeAngle >= relativeDashStartAngle &&\n  //         relativeAngle <= relativeDashEndAngle) {\n  //       double totalFilledDashRatio =\n  //           (dashWidth * i) / totalTrackDashWidth.toDouble();\n  //       double totalHalfWidthDashRatio =\n  //           ((relativeAngle - dashSum * i) / dashWidth.toDouble()) /\n  //               trackDashCounts;\n\n  //       return _lerp(widget.minProgress, widget.maxProgress,\n  //           totalFilledDashRatio + totalHalfWidthDashRatio);\n  //     }\n  //   }\n  //   return -1;\n  // }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animation) {\n      return GestureDetector(\n        key: _key,\n        onTapDown: (details) {\n          if (widget.interactive) {\n           // _handleGesture(details);\n          }\n        },\n        onPanUpdate: (details) {\n          if (widget.interactive) {\n          //  _handleGesture(details);\n          }\n        },\n        child: TweenAnimationBuilder(\n            duration: Duration(milliseconds: widget.animDurationMillis),\n            tween: Tween(begin: widget.minProgress, end: _progress!),\n            curve: widget.curves,\n            onEnd: widget.onEnd,\n            builder: (BuildContext context, double progress, __) {\n              widget.valueNotifier?.value = progress;\n              return CustomPaint(\n                size: Size(widget.width, widget.height),\n                painter: _SeekBarPainter(\n                  progress: progress,\n                  minProgress: widget.minProgress,\n                  maxProgress: widget.maxProgress,\n                  startAngle: widget.startAngle,\n                  sweepAngle: widget.sweepAngle,\n                  barWidth: widget.barWidth,\n                  trackColor: widget.trackColor,\n                  trackGradientColors: widget.trackGradientColors,\n                  progressColor: widget.progressColor,\n                  progressGradientColors: widget.progressGradientColors,\n                  strokeCap: widget.strokeCap,\n                  innerThumbRadius: widget.innerThumbRadius,\n                  innerThumbStrokeWidth: widget.innerThumbStrokeWidth,\n                  innerThumbColor: widget.innerThumbColor,\n                  outerThumbRadius: widget.outerThumbRadius,\n                  outerThumbStrokeWidth: widget.outerThumbStrokeWidth,\n                  outerThumbColor: widget.outerThumbColor,\n                  dashWidth: widget.dashWidth,\n                  dashGap: widget.dashGap,\n                ),\n                child: SizedBox(\n                  width: widget.width,\n                  height: widget.height,\n                  child: widget.child,\n                ),\n              );\n            }),\n      );\n    } else {\n      widget.valueNotifier?.value = _progress!;\n      return GestureDetector(\n        key: _key,\n        onTapDown: (details) {\n          if (widget.interactive) {\n           // _handleGesture(details);\n          }\n        },\n        onPanUpdate: (details) {\n          if (widget.interactive) {\n           // _handleGesture(details);\n          }\n        },\n        child: CustomPaint(\n          size: Size(widget.width, widget.height),\n          painter: _SeekBarPainter(\n            progress: _progress!,\n            minProgress: widget.minProgress,\n            maxProgress: widget.maxProgress,\n            startAngle: widget.startAngle,\n            sweepAngle: widget.sweepAngle,\n            barWidth: widget.barWidth,\n            trackColor: widget.trackColor,\n            trackGradientColors: widget.trackGradientColors,\n            progressColor: widget.progressColor,\n            progressGradientColors: widget.progressGradientColors,\n            strokeCap: widget.strokeCap,\n            innerThumbRadius: widget.innerThumbRadius,\n            innerThumbStrokeWidth: widget.innerThumbStrokeWidth,\n            innerThumbColor: widget.innerThumbColor,\n            outerThumbRadius: widget.outerThumbRadius,\n            outerThumbStrokeWidth: widget.outerThumbStrokeWidth,\n            outerThumbColor: widget.outerThumbColor,\n            dashWidth: widget.dashWidth,\n            dashGap: widget.dashGap,\n          ),\n          child: SizedBox(\n            width: widget.width,\n            height: widget.height,\n            child: widget.child,\n          ),\n        ),\n      );\n    }\n  }\n}\n\nclass _SeekBarPainter extends CustomPainter {\n  /// Current value of seek bar.\n  final double progress;\n\n  /// Minimum value of seek bar.\n  final double minProgress;\n\n  /// Maximum value of seek bar.\n  final double maxProgress;\n\n  /// The Angle to start drawing this seek bar from\n  final double startAngle;\n\n  /// The Angle through which to draw the seek bar\n  final double sweepAngle;\n\n  /// The thickness of the seek bar.\n  final double barWidth;\n\n  /// Background track color of seek bar.\n  final Color trackColor;\n\n  /// Background track gradient colors of seek bar.\n  final List<Color> trackGradientColors;\n\n  /// Foreground progress color of seek bar.\n  final Color progressColor;\n\n  /// Foreground trackGradientColors of seek bar.\n  final List<Color> progressGradientColors;\n\n  /// Styles to use for arcs endings.\n  final StrokeCap strokeCap;\n\n  /// The radius of the seekbar inner thumb.\n  final double innerThumbRadius;\n\n  /// The stroke width of the seekbar inner thumb.\n  final double innerThumbStrokeWidth;\n\n  /// Color of the seekbar inner thumb.\n  final Color innerThumbColor;\n\n  /// The radius of the seekbar outer thumb.\n  final double outerThumbRadius;\n\n  /// The stroke width of the seekbar outer thumb.\n  final double outerThumbStrokeWidth;\n\n  /// Color of the seekbar outer thumb.\n  final Color outerThumbColor;\n\n  /// Dash width of seek bar\n  final double dashWidth;\n\n  /// Dash gap of seek bar.\n  final double dashGap;\n\n  /// The initial rotational offset 90\n  static const double angleOffset = 90;\n\n  _SeekBarPainter(\n      {required this.progress,\n      required this.minProgress,\n      required this.maxProgress,\n      required this.startAngle,\n      required this.sweepAngle,\n      required this.barWidth,\n      required this.trackColor,\n      required this.trackGradientColors,\n      required this.progressColor,\n      required this.progressGradientColors,\n      required this.strokeCap,\n      required this.innerThumbRadius,\n      required this.innerThumbStrokeWidth,\n      required this.innerThumbColor,\n      required this.outerThumbRadius,\n      required this.outerThumbStrokeWidth,\n      required this.outerThumbColor,\n      required this.dashWidth,\n      required this.dashGap});\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    if (sweepAngle > 0.0) {\n      Paint trackPaint = Paint()\n        ..style = PaintingStyle.stroke\n        ..color = trackColor\n        ..strokeCap = strokeCap\n        ..strokeWidth = barWidth;\n\n      Paint progressPaint = Paint()\n        ..style = PaintingStyle.stroke\n        ..color = progressColor\n        ..strokeCap = strokeCap\n        ..strokeWidth = barWidth;\n\n      final Offset center = Offset(size.width / 2, size.height / 2);\n      final double largerThumbWidth =\n          (outerThumbRadius / 2 + outerThumbStrokeWidth / 2) >=\n                  (innerThumbRadius / 2 + innerThumbStrokeWidth / 2)\n              ? (outerThumbRadius / 2 + outerThumbStrokeWidth / 2)\n              : (innerThumbRadius / 2 + innerThumbStrokeWidth / 2);\n      final double seekBarMargin =\n          largerThumbWidth >= (barWidth / 2) ? largerThumbWidth : barWidth / 2;\n      final double radius = min(center.dx, center.dy) - seekBarMargin;\n      double realStartAngle = startAngle + angleOffset;\n\n      double startAngleWithOffsetRadian = _degreesToRadians(realStartAngle);\n      Rect rect = Rect.fromCenter(\n          center: center, width: 2 * radius, height: 2 * radius);\n\n      double sweepAngleRadian = _degreesToRadians(sweepAngle);\n\n      // Set gradients\n      if (trackGradientColors.isNotEmpty) {\n        Gradient trackGradient = SweepGradient(\n          center: Alignment.center,\n          startAngle: 0,\n          endAngle: sweepAngleRadian,\n          tileMode: TileMode.mirror,\n          colors: trackGradientColors,\n          transform: GradientRotation(\n              startAngleWithOffsetRadian - asin((barWidth / 2) / radius)),\n        );\n        trackPaint.shader = trackGradient.createShader(rect);\n      }\n\n      if (progressGradientColors.isNotEmpty) {\n        Gradient progressGradient = SweepGradient(\n          center: Alignment.center,\n          startAngle: 0,\n          endAngle: sweepAngleRadian,\n          tileMode: TileMode.mirror,\n          colors: progressGradientColors,\n          transform: GradientRotation(\n              startAngleWithOffsetRadian - asin((barWidth / 2) / radius)),\n        );\n\n        progressPaint.shader = progressGradient.createShader(rect);\n      }\n\n      if (dashWidth > 0 && dashGap > 0) {\n        double dashSum = dashWidth + dashGap;\n        double dashWidthRadian = _degreesToRadians(dashWidth);\n        double dashSumRadian = _degreesToRadians(dashSum);\n\n        int trackDashCounts =\n            sweepAngle >= (sweepAngle ~/ dashSum) * dashSum + dashWidth\n                ? (sweepAngle ~/ dashSum) + 1\n                : (sweepAngle ~/ dashSum);\n        int progressDashCounts =\n            (trackDashCounts * _lerpRatio(minProgress, maxProgress, progress))\n                .floor();\n        double fullProgressRatio =\n            (progressDashCounts / trackDashCounts.toDouble());\n\n        // Draw track dashes.\n        for (int i = 0; i < trackDashCounts; i++) {\n          canvas.drawArc(\n            rect,\n            startAngleWithOffsetRadian + dashSumRadian * i,\n            dashWidthRadian,\n            false,\n            trackPaint,\n          );\n        }\n\n        // Draw progress dashes.\n        for (int i = 0; i < progressDashCounts; i++) {\n          canvas.drawArc(\n            rect,\n            startAngleWithOffsetRadian + dashSumRadian * i,\n            dashWidthRadian,\n            false,\n            progressPaint,\n          );\n        }\n\n        canvas.drawArc(\n          rect,\n          startAngleWithOffsetRadian + dashSumRadian * (progressDashCounts),\n          dashWidthRadian *\n              (_lerpRatio(minProgress, maxProgress, progress) -\n                  fullProgressRatio) *\n              trackDashCounts,\n          false,\n          progressPaint,\n        );\n\n        double totalTrackDashWidth = dashWidth * trackDashCounts;\n        double totalRatio = _lerpRatio(minProgress, maxProgress, progress);\n        double totalFilledAngleRatio =\n            (dashWidth * progressDashCounts) / totalTrackDashWidth.toDouble();\n        double totalHalfWidthAngleRatio = totalRatio - totalFilledAngleRatio;\n        double halfWidthAngleRatio = totalHalfWidthAngleRatio * trackDashCounts;\n\n        double halfWidthProgressAngle =\n            _lerp(0, dashWidth, halfWidthAngleRatio);\n        double filledProgressAngle = trackDashCounts >= progressDashCounts + 1\n            ? dashSum * progressDashCounts\n            : dashSum * (progressDashCounts - 1) + dashWidth;\n        double progressAngle = filledProgressAngle + halfWidthProgressAngle;\n\n        double thumbX = center.dx -\n            sin(_degreesToRadians(startAngle + progressAngle)) * radius;\n        double thumbY = center.dy +\n            cos(_degreesToRadians(startAngle + progressAngle)) * radius;\n        Offset thumbCenter = Offset(thumbX, thumbY);\n\n        canvas.drawCircle(\n            thumbCenter,\n            outerThumbRadius,\n            Paint()\n              ..color = outerThumbColor\n              ..style = PaintingStyle.stroke\n              ..strokeCap = StrokeCap.round\n              ..strokeWidth = outerThumbStrokeWidth);\n\n        canvas.drawCircle(\n            thumbCenter,\n            innerThumbRadius,\n            Paint()\n              ..color = innerThumbColor\n              ..style = PaintingStyle.fill\n              ..strokeCap = StrokeCap.round\n              ..strokeWidth = innerThumbStrokeWidth);\n      } else {\n        double progressAngle = _lerp(\n            0, sweepAngle, _lerpRatio(minProgress, maxProgress, progress));\n        double progressAngleRadian = _degreesToRadians(progressAngle);\n\n        canvas.drawArc(rect, startAngleWithOffsetRadian, sweepAngleRadian,\n            false, trackPaint);\n        canvas.drawArc(rect, startAngleWithOffsetRadian, progressAngleRadian,\n            false, progressPaint);\n\n        double thumbX = center.dx -\n            sin(_degreesToRadians(startAngle + progressAngle)) * radius;\n        double thumbY = center.dy +\n            cos(_degreesToRadians(startAngle + progressAngle)) * radius;\n\n        Offset thumbCenter = Offset(thumbX, thumbY);\n\n        canvas.drawCircle(\n            thumbCenter,\n            outerThumbRadius,\n            Paint()\n              ..color = outerThumbColor\n              ..style = PaintingStyle.stroke\n              ..strokeCap = StrokeCap.round\n              ..strokeWidth = outerThumbStrokeWidth);\n\n        canvas.drawCircle(\n            thumbCenter,\n            innerThumbRadius,\n            Paint()\n              ..color = innerThumbColor\n              ..style = PaintingStyle.fill\n              ..strokeCap = StrokeCap.round\n              ..strokeWidth = innerThumbStrokeWidth);\n      }\n    }\n  }\n\n  @override\n  bool shouldRepaint(covariant _SeekBarPainter oldDelegate) {\n    return oldDelegate.progress != progress ||\n        oldDelegate.minProgress != minProgress ||\n        oldDelegate.maxProgress != maxProgress ||\n        oldDelegate.startAngle != startAngle ||\n        oldDelegate.sweepAngle != sweepAngle ||\n        oldDelegate.barWidth != barWidth ||\n        oldDelegate.trackColor != trackColor ||\n        oldDelegate.trackGradientColors != trackGradientColors ||\n        oldDelegate.progressColor != progressColor ||\n        oldDelegate.progressGradientColors != progressGradientColors ||\n        oldDelegate.strokeCap != strokeCap ||\n        oldDelegate.innerThumbRadius != innerThumbRadius ||\n        oldDelegate.innerThumbStrokeWidth != innerThumbStrokeWidth ||\n        oldDelegate.innerThumbColor != innerThumbColor ||\n        oldDelegate.outerThumbRadius != outerThumbRadius ||\n        oldDelegate.outerThumbStrokeWidth != outerThumbStrokeWidth ||\n        oldDelegate.outerThumbColor != outerThumbColor ||\n        oldDelegate.dashWidth != dashWidth ||\n        oldDelegate.dashGap != dashGap;\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "expandable_bottom_sheet", "file_path": "Quran-Majeed/lib/core/external_libs/expandable_bottom_sheet/expandable_bottom_sheet.dart", "file_name": "expandable_bottom_sheet.dart", "line": 42, "line_from": 42, "line_to": 382, "snippet": "  final void Function()? onIsExtendedCallback;\n\n  final void Function()? onIsContractedCallback;\n\n  final bool enableToggle;\n\n  final bool isDraggable;\n  bool isExpanded;\n\n  ExpandableBottomSheetState? expandableBottomSheetState;\n\n  // // ignore: no_logic_in_create_state\n  // ExpandableBottomSheetState createState() {\n  //   expandableBottomSheetState = ExpandableBottomSheetState();\n  //   return expandableBottomSheetState;\n  // }\n  @override\n  ExpandableBottomSheetState createState() => ExpandableBottomSheetState();\n}\n\nclass ExpandableBottomSheetState extends State<ExpandableBottomSheet>\n    with TickerProviderStateMixin {\n  final GlobalKey _contentKey = GlobalKey(debugLabel: 'contentKey');\n  final GlobalKey _headerKey = GlobalKey(debugLabel: 'headerKey');\n  final GlobalKey _footerKey = GlobalKey(debugLabel: 'footerKey');\n\n  late AnimationController _controller;\n\n  double _draggableHeight = 0;\n  double? _positionOffset;\n  double _startOffsetAtDragDown = 0;\n  double? _startPositionAtDragDown = 0;\n\n  double _minOffset = 0;\n  double _maxOffset = 0;\n  double _animationMinOffset = 0;\n\n  AnimationStatus _oldStatus = AnimationStatus.dismissed;\n\n  bool _useDrag = true;\n  bool _callCallbacks = false;\n\n  void expand() {\n    _afterUpdateWidgetBuild(false);\n    _callCallbacks = true;\n    widget.isExpanded = true;\n    _animateToTop();\n  }\n\n  void contract() {\n    _afterUpdateWidgetBuild(false);\n    _callCallbacks = true;\n    _animateToBottom();\n  }\n\n  ExpansionStatus get expansionStatus {\n    if (_positionOffset == null) return ExpansionStatus.contracted;\n    if (_positionOffset == _maxOffset) return ExpansionStatus.contracted;\n    if (_positionOffset == _minOffset) return ExpansionStatus.expanded;\n    return ExpansionStatus.middle;\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(vsync: this);\n    _controller.addStatusListener(_handleAnimationStatusUpdate);\n    WidgetsBinding.instance\n        .addPostFrameCallback((_) => _afterUpdateWidgetBuild(true));\n   \n  }\n  \n\n  @override\n  Widget build(BuildContext context) {\n    WidgetsBinding.instance\n        .addPostFrameCallback((_) => _afterUpdateWidgetBuild(false));\n    return Column(\n      children: <Widget>[\n        Expanded(\n          child: Stack(\n            children: <Widget>[\n              Align(\n                alignment: Alignment.topLeft,\n                child: InkWell(\n                  onTap: () => context.navigatorPop<void>(),\n                  child: widget.background,\n                ),\n              ),\n              AnimatedBuilder(\n                animation: _controller,\n                builder: (_, Widget? child) {\n                  if (_controller.isAnimating) {\n                    _positionOffset = _animationMinOffset +\n                        _controller.value * _draggableHeight;\n                  }\n                  return Positioned(\n                    top: _positionOffset,\n                    right: 0,\n                    left: 0,\n                    child: child!,\n                  );\n                },\n                child: GestureDetector(\n                  onTap: _toggle,\n                  onVerticalDragDown: widget.isDraggable ? _dragDown : (_) {},\n                  onVerticalDragUpdate:\n                      widget.isDraggable ? _dragUpdate : (_) {},\n                  onVerticalDragEnd: widget.isDraggable ? _dragEnd : (_) {},\n                  child: Padding(\n                    padding: const EdgeInsets.only(top: 40),\n                    child: Column(\n                      mainAxisSize: MainAxisSize.min,\n                      children: <Widget>[\n                        Container(\n                          key: _headerKey,\n                          child: widget.persistentHeader ?? Container(),\n                        ),\n                        Container(\n                          key: _contentKey,\n                          child: widget.expandableContent,\n                        ),\n                      ],\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n        Container(\n          key: _footerKey,\n          child: widget.persistentFooter ?? Container(),\n        ),\n      ],\n    );\n  }\n\n  void _handleAnimationStatusUpdate(AnimationStatus status) {\n    if (status == AnimationStatus.completed) {\n      if (_oldStatus == AnimationStatus.forward) {\n        setState(() {\n          _draggableHeight = _maxOffset - _minOffset;\n          _positionOffset = _minOffset;\n        });\n        if (widget.onIsExtendedCallback != null && _callCallbacks) {\n          widget.onIsExtendedCallback!();\n        }\n      }\n      if (_oldStatus == AnimationStatus.reverse) {\n        setState(() {\n          _draggableHeight = _maxOffset - _minOffset;\n          _positionOffset = _maxOffset;\n        });\n        if (widget.onIsContractedCallback != null && _callCallbacks) {\n          widget.onIsContractedCallback!();\n        }\n      }\n    }\n  }\n\n  void _afterUpdateWidgetBuild(bool isFirstBuild) {\n    final double headerHeight = _headerKey.currentContext!.size!.height;\n    final double footerHeight = _footerKey.currentContext!.size!.height;\n    final double contentHeight = _contentKey.currentContext!.size!.height;\n\n    final double checkedPersistentContentHeight =\n        (widget.persistentContentHeight < contentHeight)\n            ? widget.persistentContentHeight\n            : contentHeight;\n\n    _minOffset =\n        context.size!.height - headerHeight - contentHeight - footerHeight;\n    _maxOffset = context.size!.height -\n        headerHeight -\n        footerHeight -\n        checkedPersistentContentHeight;\n\n    if (!isFirstBuild) {\n      _positionOutOfBounds();\n    } else {\n      setState(() {\n        _positionOffset = _maxOffset;\n        _draggableHeight = _maxOffset - _minOffset;\n      });\n    }\n  }\n\n  void _positionOutOfBounds() {\n    if (_positionOffset! < _minOffset) {\n      //the extend is larger than contentHeight\n      _callCallbacks = false;\n      _animateToMin();\n    } else {\n      if (_positionOffset! > _maxOffset) {\n        //the extend is smaller than persistentContentHeight\n        _callCallbacks = false;\n        _animateToMax();\n      } else {\n        _draggableHeight = _maxOffset - _minOffset;\n      }\n    }\n  }\n\n  void _animateOnIsAnimating() {\n    if (_controller.isAnimating) {\n      _controller.stop();\n    }\n  }\n\n  void _toggle() {\n    if (widget.enableToggle) {\n      if (expansionStatus == ExpansionStatus.expanded) {\n        _callCallbacks = true;\n        _animateToBottom();\n      }\n      if (expansionStatus == ExpansionStatus.contracted) {\n        _callCallbacks = true;\n        _animateToTop();\n      }\n    }\n  }\n\n  void _dragDown(DragDownDetails details) {\n    if (_controller.isAnimating) {\n      _useDrag = false;\n    } else {\n      _useDrag = true;\n      _startOffsetAtDragDown = details.localPosition.dy;\n      _startPositionAtDragDown = _positionOffset;\n    }\n  }\n\n  void _dragUpdate(DragUpdateDetails details) {\n    if (!_useDrag) return;\n    final double offset = details.localPosition.dy;\n    final double newOffset =\n        _startPositionAtDragDown! + offset - _startOffsetAtDragDown;\n    if (_minOffset <= newOffset && _maxOffset >= newOffset) {\n      setState(() {\n        _positionOffset = newOffset;\n      });\n    } else {\n      if (_minOffset > newOffset) {\n        setState(() {\n          _positionOffset = _minOffset;\n        });\n      }\n      if (_maxOffset < newOffset) {\n        setState(() {\n          _positionOffset = _maxOffset;\n        });\n      }\n    }\n  }\n\n  void _dragEnd(DragEndDetails details) {\n    if (_startPositionAtDragDown == _positionOffset || !_useDrag) return;\n    if (details.primaryVelocity! < -250) {\n      //drag up ended with high speed\n      _callCallbacks = true;\n      _animateToTop();\n    } else {\n      if (details.primaryVelocity! > 250) {\n        //drag down ended with high speed\n        _callCallbacks = true;\n        _animateToBottom();\n      } else {\n        if (_positionOffset == _maxOffset &&\n            widget.onIsContractedCallback != null) {\n          widget.onIsContractedCallback!();\n        }\n        if (_positionOffset == _minOffset &&\n            widget.onIsExtendedCallback != null) {\n          widget.onIsExtendedCallback!();\n        }\n      }\n    }\n  }\n\n  void _animateToTop() {\n    // booksC.isBottomSheetExpanded.value = true;\n    _animateOnIsAnimating();\n    _controller.value = (_positionOffset! - _minOffset) / _draggableHeight;\n    _animationMinOffset = _minOffset;\n    _oldStatus = AnimationStatus.forward;\n    _controller.animateTo(\n      .001,\n      duration: widget.animationDurationExtend,\n      curve: widget.animationCurveExpand,\n    );\n  }\n\n  void _animateToBottom() {\n    // booksC.isBottomSheetExpanded.value = false;\n    _animateOnIsAnimating();\n\n    _controller.value = (_positionOffset! - _minOffset) / _draggableHeight;\n    _animationMinOffset = _minOffset;\n    _oldStatus = AnimationStatus.reverse;\n    _controller.animateTo(\n      0.999,\n      duration: widget.animationDurationContract,\n      curve: widget.animationCurveContract,\n    );\n  }\n\n  void _animateToMax() {\n    _animateOnIsAnimating();\n\n    _controller.value = 1.0;\n    _draggableHeight = _positionOffset! - _maxOffset;\n    _animationMinOffset = _maxOffset;\n    _oldStatus = AnimationStatus.reverse;\n    _controller.animateTo(\n      0.001,\n      duration: widget.animationDurationExtend,\n      curve: widget.animationCurveExpand,\n    );\n  }\n\n  void _animateToMin() {\n    _animateOnIsAnimating();\n\n    _controller.value = 1.0;\n    _draggableHeight = _positionOffset! - _minOffset;\n    _animationMinOffset = _minOffset;\n    _oldStatus = AnimationStatus.forward;\n    _controller.animateTo(\n      0.0001,\n      duration: widget.animationDurationContract,\n      curve: widget.animationCurveContract,\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "animate_do", "file_path": "Quran-Majeed/lib/core/external_libs/animate_do/zooms.dart", "file_name": "zooms.dart", "line": 21, "line_from": 21, "line_to": 94, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final void Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  @override\n  ZoomInState createState() => ZoomInState();\n}\n\nclass ZoomInState extends State<ZoomIn> with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n  bool disposed = false;\n  late Animation<double> fade;\n  late Animation<double> opacity;\n\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n    fade = Tween(begin: 0.001, end: widget.from)\n        .animate(CurvedAnimation(curve: Curves.easeOut, parent: controller!));\n\n    opacity = Tween<double>(begin: 0, end: 1).animate(\n      CurvedAnimation(parent: controller!, curve: const Interval(0, 0.65)),\n    );\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    if (!widget.animate) {\n      controller?.animateBack(0);\n    }\n\n    return AnimatedBuilder(\n      animation: fade,\n      builder: (BuildContext context, Widget? child) {\n        return Transform.scale(\n          scale: fade.value,\n          child: Opacity(\n            opacity: opacity.value,\n            child: widget.child,\n          ),\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "animate_do", "file_path": "Quran-Majeed/lib/core/external_libs/animate_do/fades.dart", "file_name": "fades.dart", "line": 20, "line_from": 20, "line_to": 85, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final void Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n\n  @override\n  FadeInState createState() => FadeInState();\n}\n\nclass FadeInState extends State<FadeIn> with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n\n  bool disposed = false;\n\n  late Animation<double> animation;\n\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n    animation = CurvedAnimation(curve: Curves.easeOut, parent: controller!);\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    if (!widget.animate) {\n      controller?.animateBack(0);\n    }\n\n    return AnimatedBuilder(\n      animation: animation,\n      builder: (BuildContext context, Widget? child) {\n        return Opacity(\n          opacity: animation.value,\n          child: widget.child,\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "animate_do", "file_path": "Quran-Majeed/lib/core/external_libs/animate_do/bounces.dart", "file_name": "bounces.dart", "line": 21, "line_from": 21, "line_to": 93, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final void Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  @override\n  BounceInDownState createState() => BounceInDownState();\n}\n\nclass BounceInDownState extends State<BounceInDown>\n    with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n  bool disposed = false;\n  late Animation<double> animation;\n  late Animation<double> opacity;\n\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n\n    opacity = Tween<double>(begin: 0, end: 1).animate(\n      CurvedAnimation(parent: controller!, curve: const Interval(0, 0.65)),\n    );\n\n    animation = Tween<double>(begin: widget.from * -1, end: 0)\n        .animate(CurvedAnimation(parent: controller!, curve: Curves.bounceOut));\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    if (!widget.animate) {\n      controller?.animateBack(0);\n    }\n\n    return AnimatedBuilder(\n      animation: controller!,\n      builder: (BuildContext context, Widget? child) {\n        return Transform.translate(\n          offset: Offset(0, animation.value),\n          child: Opacity(opacity: opacity.value, child: widget.child),\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "animate_do", "file_path": "Quran-Majeed/lib/core/external_libs/animate_do/slides.dart", "file_name": "slides.dart", "line": 21, "line_from": 21, "line_to": 88, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final void Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  @override\n  SlideInUpState createState() => SlideInUpState();\n}\n\nclass SlideInUpState extends State<SlideInUp>\n    with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n  bool disposed = false;\n  late Animation<double> animation;\n\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n\n    animation = Tween<double>(begin: widget.from, end: 0)\n        .animate(CurvedAnimation(parent: controller!, curve: Curves.easeOut));\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    if (!widget.animate) {\n      controller?.animateBack(0);\n    }\n\n    return AnimatedBuilder(\n      animation: controller!,\n      builder: (BuildContext context, Widget? child) {\n        return Transform.translate(\n          offset: Offset(0, animation.value),\n          child: widget.child,\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/flutter_animated_dialog/src/custom_dialog_transitions.dart", "file_name": "custom_dialog_transitions.dart", "line": 20, "line_from": 20, "line_to": 57, "snippet": "  Widget build(BuildContext context) {\n    final double turnsValue = turns.value;\n    final Matrix4 transform = Matrix4.identity()\n      ..setEntry(3, 2, 0.0006)\n      ..rotateY(turnsValue);\n    return Transform(\n      transform: transform,\n      alignment: FractionalOffset.center,\n      child: child,\n    );\n  }\n}\n\nclass CustomRotationTransition extends AnimatedWidget {\n  const CustomRotationTransition({\n    super.key,\n    required Animation<double> turns,\n    this.alignment = Alignment.center,\n    this.child,\n  }) : super(listenable: turns);\n\n  Animation<double> get turns => listenable as Animation<double>;\n\n  final Alignment? alignment;\n\n  final Widget? child;\n\n  @override\n  Widget build(BuildContext context) {\n    final double turnsValue = turns.value;\n    final Matrix4 transform = Matrix4.rotationZ(turnsValue * math.pi);\n    return Transform(\n      transform: transform,\n      alignment: alignment,\n      child: child,\n    );\n  }\n}"}, {"structure_type": "function", "name": "Builder", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/flutter_animated_dialog/src/animated_dialog.dart", "file_name": "animated_dialog.dart", "line": 53, "line_from": 53, "line_to": 289, "snippet": "      final Widget pageChild = Builder(builder: builder);\n      return SafeArea(\n        top: false,\n        child: Builder(\n          builder: (BuildContext context) {\n            return Theme(data: theme, child: pageChild);\n          },\n        ),\n      );\n    },\n    barrierDismissible: barrierDismissible,\n    barrierLabel: \"Close dialog\",\n    barrierColor: barrierColor ?? Colors.black54,\n    transitionDuration: duration ?? const Duration(milliseconds: 400),\n    transitionBuilder: (\n      BuildContext context,\n      Animation<double> animation,\n      Animation<double> secondaryAnimation,\n      Widget child,\n    ) {\n      switch (animationType) {\n        case DialogTransitionType.fade:\n          return FadeTransition(opacity: animation, child: child);\n        case DialogTransitionType.slideFromRight:\n          return SlideTransition(\n            transformHitTests: false,\n            position: Tween<Offset>(\n              begin: const Offset(1, 0),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: child,\n          );\n        case DialogTransitionType.slideFromLeft:\n          return SlideTransition(\n            transformHitTests: false,\n            position: Tween<Offset>(\n              begin: const Offset(-1, 0),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: child,\n          );\n        case DialogTransitionType.slideFromRightFade:\n          return SlideTransition(\n            position: Tween<Offset>(\n              begin: const Offset(1, 0),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: FadeTransition(\n              opacity: animation,\n              child: child,\n            ),\n          );\n        case DialogTransitionType.slideFromLeftFade:\n          return SlideTransition(\n            position: Tween<Offset>(\n              begin: const Offset(-1, 0),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: FadeTransition(\n              opacity: animation,\n              child: child,\n            ),\n          );\n        case DialogTransitionType.slideFromTop:\n          return SlideTransition(\n            transformHitTests: false,\n            position: Tween<Offset>(\n              begin: const Offset(0, -1),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: child,\n          );\n        case DialogTransitionType.slideFromTopFade:\n          return SlideTransition(\n            position: Tween<Offset>(\n              begin: const Offset(0, -1),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: FadeTransition(\n              opacity: animation,\n              child: child,\n            ),\n          );\n        case DialogTransitionType.slideFromBottom:\n          return SlideTransition(\n            transformHitTests: false,\n            position: Tween<Offset>(\n              begin: const Offset(0, 1),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: child,\n          );\n        case DialogTransitionType.slideFromBottomFade:\n          return SlideTransition(\n            position: Tween<Offset>(\n              begin: const Offset(0, 1),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: FadeTransition(\n              opacity: animation,\n              child: child,\n            ),\n          );\n        case DialogTransitionType.scale:\n          return ScaleTransition(\n            alignment: alignment,\n            scale: CurvedAnimation(\n              parent: animation,\n              curve: Interval(\n                0,\n                0.50,\n                curve: curve,\n              ),\n            ),\n            child: child,\n          );\n        case DialogTransitionType.fadeScale:\n          return ScaleTransition(\n            alignment: alignment,\n            scale: CurvedAnimation(\n              parent: animation,\n              curve: Interval(\n                0,\n                0.50,\n                curve: curve,\n              ),\n            ),\n            child: FadeTransition(\n              opacity: CurvedAnimation(\n                parent: animation,\n                curve: curve,\n              ),\n              child: child,\n            ),\n          );\n        case DialogTransitionType.scaleRotate:\n          return ScaleTransition(\n            alignment: alignment,\n            scale: CurvedAnimation(\n              parent: animation,\n              curve: Interval(\n                0,\n                0.50,\n                curve: curve,\n              ),\n            ),\n            child: CustomRotationTransition(\n              alignment: alignment,\n              turns: Tween<double>(begin: 1, end: 2).animate(\n                CurvedAnimation(\n                  parent: animation,\n                  curve: Interval(0, 1, curve: curve),\n                ),\n              ),\n              child: child,\n            ),\n          );\n        case DialogTransitionType.rotate:\n          return CustomRotationTransition(\n            alignment: alignment,\n            turns: Tween<double>(begin: 1, end: 2).animate(\n              CurvedAnimation(\n                parent: animation,\n                curve: Interval(0, 1, curve: curve),\n              ),\n            ),\n            child: child,\n          );\n        case DialogTransitionType.fadeRotate:\n          return CustomRotationTransition(\n            alignment: alignment,\n            turns: Tween<double>(begin: 1, end: 2).animate(\n              CurvedAnimation(\n                parent: animation,\n                curve: Interval(0, 1, curve: curve),\n              ),\n            ),\n            child: FadeTransition(\n              opacity: CurvedAnimation(\n                parent: animation,\n                curve: curve,\n              ),\n              child: child,\n            ),\n          );\n        case DialogTransitionType.rotate3D:\n          return Rotation3DTransition(\n            alignment: alignment,\n            turns: Tween<double>(begin: math.pi, end: 2.0 * math.pi).animate(\n              CurvedAnimation(\n                parent: animation,\n                curve: Interval(0, 1, curve: curve),\n              ),\n            ),\n            child: FadeTransition(\n              opacity: Tween<double>(begin: 0, end: 1).animate(\n                CurvedAnimation(\n                  parent: animation,\n                  curve: const Interval(0.5, 1, curve: Curves.elasticOut),\n                ),\n              ),\n              child: child,\n            ),\n          );\n        case DialogTransitionType.size:\n          return Align(\n            alignment: alignment,\n            child: SizeTransition(\n              sizeFactor: CurvedAnimation(\n                parent: animation,\n                curve: curve,\n              ),\n              axis: axis ?? Axis.vertical,\n              child: child,\n            ),\n          );\n        case DialogTransitionType.sizeFade:\n          return Align(\n            alignment: alignment,\n            child: SizeTransition(\n              sizeFactor: CurvedAnimation(\n                parent: animation,\n                curve: curve,\n              ),\n              child: FadeTransition(\n                opacity: CurvedAnimation(\n                  parent: animation,\n                  curve: curve,\n                ),\n                child: child,\n              ),\n            ),\n          );\n        case DialogTransitionType.none:\n          return child;\n      }\n    },"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/flutter_animated_dialog/src/animated_dialog.dart", "file_name": "animated_dialog.dart", "line": 338, "line_from": 338, "line_to": 497, "snippet": "  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    final DialogThemeData dialogTheme = DialogTheme.of(context);\n    final List<Widget> children = <Widget>[];\n    String? label = semanticLabel;\n\n    if (title != null) {\n      children.add(\n        Padding(\n          padding: titlePadding ?? EdgeInsets.fromLTRB(24, 24, 24, content == null ? 20.0 : 0.0),\n          child: DefaultTextStyle(\n            style: (titleTextStyle ?? dialogTheme.titleTextStyle ?? theme.textTheme.titleLarge)!,\n            child: Semantics(\n              namesRoute: true,\n              container: true,\n              child: title,\n            ),\n          ),\n        ),\n      );\n    } else {\n      switch (defaultTargetPlatform) {\n        case TargetPlatform.iOS:\n          label = semanticLabel;\n        case TargetPlatform.android:\n        case TargetPlatform.fuchsia:\n          label = semanticLabel ?? MaterialLocalizations.of(context).alertDialogLabel;\n        case TargetPlatform.linux:\n          label = semanticLabel ?? MaterialLocalizations.of(context).alertDialogLabel;\n        case TargetPlatform.macOS:\n          label = semanticLabel;\n        case TargetPlatform.windows:\n          label = semanticLabel ?? MaterialLocalizations.of(context).alertDialogLabel;\n      }\n    }\n\n    if (content != null) {\n      children.add(\n        Flexible(\n          child: Padding(\n            padding: contentPadding!,\n            child: DefaultTextStyle(\n              style: (contentTextStyle ?? dialogTheme.contentTextStyle ?? theme.textTheme.titleMedium)!,\n              child: content!,\n            ),\n          ),\n        ),\n      );\n    }\n\n    if (bottomWidget != null) {\n      children.add(bottomWidget!);\n    } else if (actions != null) {\n      children.add(\n        ButtonBarTheme(\n          data: ButtonBarTheme.of(context),\n          // ignore: deprecated_member_use\n          child: ButtonBar(\n            children: actions!,\n          ),\n        ),\n      );\n    }\n\n    Widget dialogChild = IntrinsicWidth(\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: children,\n      ),\n    );\n\n    if (label != null) {\n      dialogChild = Semantics(\n        namesRoute: true,\n        label: label,\n        child: dialogChild,\n      );\n    }\n\n    dialogChild = CustomDialog(\n      backgroundColor: backgroundColor,\n      elevation: elevation,\n      minWidth: minWidth,\n      shape: shape,\n      child: dialogChild,\n    );\n\n    return AnnotatedRegion<SystemUiOverlayStyle>(\n      value: SystemUiOverlayStyle.light.copyWith(\n        statusBarIconBrightness: Brightness.light,\n        statusBarColor: Colors.transparent,\n        systemNavigationBarColor: Colors.white,\n        systemNavigationBarIconBrightness: Brightness.dark,\n      ),\n      child: dialogChild,\n    );\n  }\n}\n\nclass CustomDialog extends StatelessWidget {\n  const CustomDialog({\n    super.key,\n    this.backgroundColor,\n    this.elevation,\n    this.insetAnimationDuration = const Duration(milliseconds: 100),\n    this.insetAnimationCurve = Curves.decelerate,\n    this.minWidth = 280.0,\n    this.shape,\n    this.child,\n  });\n\n  final Color? backgroundColor;\n\n  final double? elevation;\n\n  final Duration? insetAnimationDuration;\n\n  final Curve? insetAnimationCurve;\n\n  final double? minWidth;\n\n  final ShapeBorder? shape;\n\n  final Widget? child;\n\n  static const RoundedRectangleBorder _defaultDialogShape = RoundedRectangleBorder(\n    borderRadius: BorderRadius.all(Radius.circular(2)),\n  );\n  static const double _defaultElevation = 24;\n\n  @override\n  Widget build(BuildContext context) {\n    final DialogThemeData dialogTheme = DialogTheme.of(context);\n    return AnimatedPadding(\n      padding: MediaQuery.of(context).viewInsets + const EdgeInsets.symmetric(horizontal: 40, vertical: 24),\n      duration: insetAnimationDuration!,\n      curve: insetAnimationCurve!,\n      child: MediaQuery.removeViewInsets(\n        removeLeft: true,\n        removeTop: true,\n        removeRight: true,\n        removeBottom: true,\n        context: context,\n        child: Center(\n          child: ConstrainedBox(\n            constraints: BoxConstraints(minWidth: minWidth ?? 280.0),\n            child: Material(\n              color: backgroundColor ?? dialogTheme.backgroundColor,\n              elevation: elevation ?? dialogTheme.elevation ?? _defaultElevation,\n              shape: shape ?? dialogTheme.shape ?? _defaultDialogShape,\n              type: MaterialType.card,\n              child: child,\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/scrollable_positioned_list/src/element_registry.dart", "file_name": "element_registry.dart", "line": 10, "line_from": 10, "line_to": 23, "snippet": "  final Widget child;\n\n  final ValueNotifier<Set<Element>?>? elementNotifier;\n\n  @override\n  State<StatefulWidget> createState() => _RegistryWidgetState();\n}\n\nclass RegisteredElementWidget extends ProxyWidget {\n  const RegisteredElementWidget({super.key, required super.child});\n\n  @override\n  Element createElement() => _RegisteredElement(this);\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/scrollable_positioned_list/src/element_registry.dart", "file_name": "element_registry.dart", "line": 29, "line_from": 29, "line_to": 45, "snippet": "  Widget build(BuildContext context) => _InheritedRegistryWidget(\n        state: this,\n        child: widget.child,\n      );\n}\n\nclass _InheritedRegistryWidget extends InheritedWidget {\n  const _InheritedRegistryWidget({\n    required this.state,\n    required super.child,\n  });\n\n  final _RegistryWidgetState state;\n\n  @override\n  bool updateShouldNotify(InheritedWidget oldWidget) => true;\n}"}, {"structure_type": "function", "name": "notifyClients", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/scrollable_positioned_list/src/element_registry.dart", "file_name": "element_registry.dart", "line": 51, "line_from": 51, "line_to": 84, "snippet": "  void notifyClients(ProxyWidget oldWidget) {}\n\n  late _RegistryWidgetState _registryWidgetState;\n\n  @override\n  void mount(Element? parent, Object? newSlot) {\n    super.mount(parent, newSlot);\n    final inheritedRegistryWidget =\n        dependOnInheritedWidgetOfExactType<_InheritedRegistryWidget>()!;\n    _registryWidgetState = inheritedRegistryWidget.state;\n    _registryWidgetState.registeredElements.add(this);\n    _registryWidgetState.widget.elementNotifier?.value =\n        _registryWidgetState.registeredElements;\n  }\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    final inheritedRegistryWidget =\n        dependOnInheritedWidgetOfExactType<_InheritedRegistryWidget>()!;\n    _registryWidgetState = inheritedRegistryWidget.state;\n    _registryWidgetState.registeredElements.add(this);\n    _registryWidgetState.widget.elementNotifier?.value =\n        _registryWidgetState.registeredElements;\n  }\n\n  @override\n  void unmount() {\n    _registryWidgetState.registeredElements.remove(this);\n    _registryWidgetState.widget.elementNotifier?.value =\n        _registryWidgetState.registeredElements;\n    super.unmount();\n  }\n}"}, {"structure_type": "function", "name": "jumpTo", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/scrollable_positioned_list/src/scrollable_positioned_list.dart", "file_name": "scrollable_positioned_list.dart", "line": 119, "line_from": 119, "line_to": 178, "snippet": "  void jumpTo({required int index, double alignment = 0}) {\n    _scrollableListState?._jumpTo(index: index, alignment: alignment);\n  }\n\n  Future<void> scrollTo({\n    required int index,\n    double alignment = 0,\n    required Duration duration,\n    Curve curve = Curves.linear,\n    List<double> opacityAnimationWeights = const [40, 20, 40],\n  }) {\n    assert(_scrollableListState != null);\n    assert(opacityAnimationWeights.length == 3);\n    assert(duration > Duration.zero);\n    return _scrollableListState!._scrollTo(\n      index: index,\n      alignment: alignment,\n      duration: duration,\n      curve: curve,\n      opacityAnimationWeights: opacityAnimationWeights,\n    );\n  }\n\n  void _attach(_ScrollablePositionedListState scrollableListState) {\n    assert(_scrollableListState == null);\n    _scrollableListState = scrollableListState;\n  }\n\n  void _detach() {\n    _scrollableListState = null;\n  }\n}\n\nclass ScrollOffsetController {\n  Future<void> animateScroll({\n    required double offset,\n    required Duration duration,\n    Curve curve = Curves.linear,\n  }) async {\n    final currentPosition =\n        _scrollableListState!.primary.scrollController.offset;\n    final newPosition = currentPosition + offset;\n    await _scrollableListState!.primary.scrollController.animateTo(\n      newPosition,\n      duration: duration,\n      curve: curve,\n    );\n  }\n\n  _ScrollablePositionedListState? _scrollableListState;\n\n  void _attach(_ScrollablePositionedListState scrollableListState) {\n    assert(_scrollableListState == null);\n    _scrollableListState = scrollableListState;\n  }\n\n  void _detach() {\n    _scrollableListState = null;\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/scrollable_positioned_list/src/scrollable_positioned_list.dart", "file_name": "scrollable_positioned_list.dart", "line": 188, "line_from": 188, "line_to": 544, "snippet": "  void Function() startAnimationCallback = () {};\n\n  bool _isTransitioning = false;\n\n  late AnimationController _animationController =\n      AnimationController(vsync: this);\n\n  double previousOffset = 0;\n\n  @override\n  void initState() {\n    super.initState();\n    final ItemPosition? initialPosition =\n        PageStorage.of(context).readState(context) as ItemPosition?;\n    primary = _ListDisplayDetails(\n      const ValueKey('Ping'),\n      widget.itemScrollController?.scrollController ??\n          ScrollController(keepScrollOffset: false),\n    );\n    secondary = _ListDisplayDetails(\n      const ValueKey('Pong'),\n      ScrollController(keepScrollOffset: false),\n    );\n    primary\n      ..target = initialPosition?.index ?? widget.initialScrollIndex\n      ..alignment = initialPosition?.itemLeadingEdge ?? widget.initialAlignment;\n    if (widget.itemCount > 0 && primary.target > widget.itemCount - 1) {\n      primary.target = widget.itemCount - 1;\n    }\n    widget.itemScrollController?._attach(this);\n    widget.scrollOffsetController?._attach(this);\n    primary.itemPositionsNotifier.itemPositions.addListener(_updatePositions);\n    secondary.itemPositionsNotifier.itemPositions.addListener(_updatePositions);\n    primary.scrollController.addListener(() {\n      final currentOffset = primary.scrollController.offset;\n      final offsetChange = currentOffset - previousOffset;\n      previousOffset = currentOffset;\n      if (!_isTransitioning |\n          (widget.scrollOffsetNotifier?.recordProgrammaticScrolls ?? false)) {\n        widget.scrollOffsetNotifier?.changeController.add(offsetChange);\n      }\n    });\n  }\n\n  @override\n  void activate() {\n    super.activate();\n    widget.itemScrollController?._attach(this);\n    widget.scrollOffsetController?._attach(this);\n  }\n\n  @override\n  void deactivate() {\n    widget.itemScrollController?._detach();\n    widget.scrollOffsetController?._detach();\n    super.deactivate();\n  }\n\n  @override\n  void dispose() {\n    primary.itemPositionsNotifier.itemPositions\n        .removeListener(_updatePositions);\n    secondary.itemPositionsNotifier.itemPositions\n        .removeListener(_updatePositions);\n    // _animationController.dispose();\n    super.dispose();\n  }\n\n  @override\n  void didUpdateWidget(ScrollablePositionedList oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (oldWidget.itemScrollController?._scrollableListState == this) {\n      oldWidget.itemScrollController?._detach();\n    }\n    if (widget.itemScrollController?._scrollableListState != this) {\n      widget.itemScrollController?._detach();\n      widget.itemScrollController?._attach(this);\n    }\n\n    if (widget.itemCount == 0) {\n      setState(() {\n        primary.target = 0;\n        secondary.target = 0;\n      });\n    } else {\n      if (primary.target > widget.itemCount - 1) {\n        setState(() {\n          primary.target = widget.itemCount - 1;\n        });\n      }\n      if (secondary.target > widget.itemCount - 1) {\n        setState(() {\n          secondary.target = widget.itemCount - 1;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n      builder: (context, constraints) {\n        final cacheExtent = _cacheExtent(constraints);\n        return Listener(\n          onPointerDown: (_) => _stopScroll(canceled: true),\n          child: Stack(\n            children: <Widget>[\n              PostMountCallback(\n                key: primary.key,\n                callback: startAnimationCallback,\n                child: FadeTransition(\n                  opacity: ReverseAnimation(opacity),\n                  child: NotificationListener<ScrollNotification>(\n                    onNotification: (_) => _isTransitioning,\n                    child: PositionedList(\n                      itemBuilder: widget.itemBuilder,\n                      separatorBuilder: widget.separatorBuilder,\n                      itemCount: widget.itemCount,\n                      positionedIndex: primary.target,\n                      controller: primary.scrollController,\n                      itemPositionsNotifier: primary.itemPositionsNotifier,\n                      scrollDirection: widget.scrollDirection,\n                      reverse: widget.reverse,\n                      cacheExtent: cacheExtent,\n                      alignment: primary.alignment,\n                      physics: widget.physics,\n                      shrinkWrap: widget.shrinkWrap,\n                      addSemanticIndexes: widget.addSemanticIndexes,\n                      semanticChildCount: widget.semanticChildCount,\n                      padding: widget.padding,\n                      addAutomaticKeepAlives: widget.addAutomaticKeepAlives,\n                      addRepaintBoundaries: widget.addRepaintBoundaries,\n                    ),\n                  ),\n                ),\n              ),\n              if (_isTransitioning)\n                PostMountCallback(\n                  key: secondary.key,\n                  callback: startAnimationCallback,\n                  child: FadeTransition(\n                    opacity: opacity,\n                    child: NotificationListener<ScrollNotification>(\n                      onNotification: (_) => false,\n                      child: PositionedList(\n                        itemBuilder: widget.itemBuilder,\n                        separatorBuilder: widget.separatorBuilder,\n                        itemCount: widget.itemCount,\n                        itemPositionsNotifier: secondary.itemPositionsNotifier,\n                        positionedIndex: secondary.target,\n                        controller: secondary.scrollController,\n                        scrollDirection: widget.scrollDirection,\n                        reverse: widget.reverse,\n                        cacheExtent: cacheExtent,\n                        alignment: secondary.alignment,\n                        physics: widget.physics,\n                        shrinkWrap: widget.shrinkWrap,\n                        addSemanticIndexes: widget.addSemanticIndexes,\n                        semanticChildCount: widget.semanticChildCount,\n                        padding: widget.padding,\n                        addAutomaticKeepAlives: widget.addAutomaticKeepAlives,\n                        addRepaintBoundaries: widget.addRepaintBoundaries,\n                      ),\n                    ),\n                  ),\n                ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n\n  double _cacheExtent(BoxConstraints constraints) => max(\n        (widget.scrollDirection == Axis.vertical\n                ? constraints.maxHeight\n                : constraints.maxWidth) *\n            _screenScrollCount,\n        widget.minCacheExtent ?? 0,\n      );\n\n  void _jumpTo({required int index, required double alignment}) {\n    _stopScroll(canceled: true);\n    if (index > widget.itemCount - 1) {\n      index = widget.itemCount - 1;\n    }\n    setState(() {\n      primary.scrollController.jumpTo(0);\n      primary\n        ..target = index\n        ..alignment = alignment;\n    });\n  }\n\n  Future<void> _scrollTo({\n    required int index,\n    required double alignment,\n    required Duration duration,\n    Curve curve = Curves.linear,\n    required List<double> opacityAnimationWeights,\n  }) async {\n    if (index > widget.itemCount - 1) {\n      index = widget.itemCount - 1;\n    }\n    if (_isTransitioning) {\n      final scrollCompleter = Completer<void>();\n      _stopScroll(canceled: true);\n      SchedulerBinding.instance.addPostFrameCallback((_) async {\n        await _startScroll(\n          index: index,\n          alignment: alignment,\n          duration: duration,\n          curve: curve,\n          opacityAnimationWeights: opacityAnimationWeights,\n        );\n        scrollCompleter.complete();\n      });\n      await scrollCompleter.future;\n    } else {\n      await _startScroll(\n        index: index,\n        alignment: alignment,\n        duration: duration,\n        curve: curve,\n        opacityAnimationWeights: opacityAnimationWeights,\n      );\n    }\n  }\n\n  Future<void> _startScroll({\n    required int index,\n    required double alignment,\n    required Duration duration,\n    Curve curve = Curves.linear,\n    required List<double> opacityAnimationWeights,\n  }) async {\n    final direction = index > primary.target ? 1 : -1;\n    final itemPosition = primary.itemPositionsNotifier.itemPositions.value\n        .firstWhereOrNull((itemPosition) => itemPosition.index == index);\n    if (itemPosition != null) {\n      final localScrollAmount = itemPosition.itemLeadingEdge *\n          primary.scrollController.position.viewportDimension;\n      await primary.scrollController.animateTo(\n        primary.scrollController.offset +\n            localScrollAmount -\n            alignment * primary.scrollController.position.viewportDimension,\n        duration: duration,\n        curve: curve,\n      );\n    } else {\n      final scrollAmount = _screenScrollCount *\n          primary.scrollController.position.viewportDimension;\n      final startCompleter = Completer<void>();\n      final endCompleter = Completer<void>();\n      startAnimationCallback = () {\n        SchedulerBinding.instance.addPostFrameCallback((_) {\n          startAnimationCallback = () {};\n          _animationController.dispose();\n          _animationController =\n              AnimationController(vsync: this, duration: duration)..forward();\n          opacity.parent = _opacityAnimation(opacityAnimationWeights)\n              .animate(_animationController);\n          secondary.scrollController.jumpTo(\n            -direction *\n                (_screenScrollCount *\n                        primary.scrollController.position.viewportDimension -\n                    alignment *\n                        secondary.scrollController.position.viewportDimension),\n          );\n\n          startCompleter.complete(\n            primary.scrollController.animateTo(\n              primary.scrollController.offset + direction * scrollAmount,\n              duration: duration,\n              curve: curve,\n            ),\n          );\n          endCompleter.complete(\n            secondary.scrollController\n                .animateTo(0, duration: duration, curve: curve),\n          );\n        });\n      };\n      setState(() {\n        secondary\n          ..target = index\n          ..alignment = alignment;\n        _isTransitioning = true;\n      });\n      await Future.wait<void>([startCompleter.future, endCompleter.future]);\n      _stopScroll();\n    }\n  }\n\n  void _stopScroll({bool canceled = false}) {\n    if (!_isTransitioning) {\n      return;\n    }\n\n    if (canceled) {\n      if (primary.scrollController.hasClients) {\n        primary.scrollController.jumpTo(primary.scrollController.offset);\n      }\n      if (secondary.scrollController.hasClients) {\n        secondary.scrollController.jumpTo(secondary.scrollController.offset);\n      }\n    }\n    if (mounted) {\n      setState(() {\n        if (opacity.value >= 0.5) {\n          final temp = primary;\n          primary = secondary;\n          secondary = temp;\n        }\n        _isTransitioning = false;\n        opacity.parent = const AlwaysStoppedAnimation<double>(0);\n      });\n    }\n  }\n\n  Animatable<double> _opacityAnimation(List<double> opacityAnimationWeights) {\n    const startOpacity = 0.0;\n    const endOpacity = 1.0;\n    return TweenSequence<double>(<TweenSequenceItem<double>>[\n      TweenSequenceItem<double>(\n        tween: ConstantTween<double>(startOpacity),\n        weight: opacityAnimationWeights[0],\n      ),\n      TweenSequenceItem<double>(\n        tween: Tween<double>(begin: startOpacity, end: endOpacity),\n        weight: opacityAnimationWeights[1],\n      ),\n      TweenSequenceItem<double>(\n        tween: ConstantTween<double>(endOpacity),\n        weight: opacityAnimationWeights[2],\n      ),\n    ]);\n  }\n\n  void _updatePositions() {\n    final itemPositions =\n        primary.itemPositionsNotifier.itemPositions.value.where(\n      (position) =>\n          position.itemLeadingEdge < 1 && position.itemTrailingEdge > 0,\n    );\n    if (itemPositions.isNotEmpty) {\n      PageStorage.of(context).writeState(\n        context,\n        itemPositions.reduce(\n          (value, element) =>\n              value.itemLeadingEdge < element.itemLeadingEdge ? value : element,\n        ),\n      );\n    }\n    widget.itemPositionsNotifier?.itemPositions.value = itemPositions;\n  }\n}"}, {"structure_type": "function", "name": "updateRenderObject", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/scrollable_positioned_list/src/wrapping.dart", "file_name": "wrapping.dart", "line": 70, "line_from": 70, "line_to": 348, "snippet": "  void updateRenderObject(\n    BuildContext context,\n    CustomRenderShrinkWrappingViewport renderObject,\n  ) {\n    renderObject\n      ..axisDirection = axisDirection\n      ..crossAxisDirection = crossAxisDirection ??\n          Viewport.getDefaultCrossAxisDirection(context, axisDirection)\n      ..anchor = anchor\n      ..offset = offset\n      ..cacheExtent = cacheExtent\n      ..cacheExtentStyle = cacheExtentStyle\n      ..clipBehavior = clipBehavior;\n  }\n}\n\n/// A render object that is bigger on the inside and shrink wraps its children\n/// in the main axis.\n///\n/// [RenderShrinkWrappingViewport] displays a subset of its children according\n/// to its own dimensions and the given [offset]. As the offset varies, different\n/// children are visible through the viewport.\n///\n/// [RenderShrinkWrappingViewport] differs from [RenderViewport] in that\n/// [RenderViewport] expands to fill the main axis whereas\n/// [RenderShrinkWrappingViewport] sizes itself to match its children in the\n/// main axis. This shrink wrapping behavior is expensive because the children,\n/// and hence the viewport, could potentially change size whenever the [offset]\n/// changes (e.g., because of a collapsing header).\n///\n/// [RenderShrinkWrappingViewport] cannot contain [RenderBox] children directly.\n/// Instead, use a [RenderSliverList], [RenderSliverFixedExtentList],\n/// [RenderSliverGrid], or a [RenderSliverToBoxAdapter], for example.\n///\n/// See also:\n///\n///  * [RenderViewport], a viewport that does not shrink-wrap its contents.\n///  * [RenderSliver], which explains more about the Sliver protocol.\n///  * [RenderBox], which explains more about the Box protocol.\n///  * [RenderSliverToBoxAdapter], which allows a [RenderBox] object to be\n///    placed inside a [RenderSliver] (the opposite of this class).\nclass CustomRenderShrinkWrappingViewport extends CustomRenderViewport {\n  /// Creates a viewport (for [RenderSliver] objects) that shrink-wraps its\n  /// contents.\n  ///\n  /// The [offset] must be specified. For testing purposes, consider passing a\n  /// [ViewportOffset.zero] or [ViewportOffset.fixed].\n  CustomRenderShrinkWrappingViewport({\n    super.axisDirection,\n    required super.crossAxisDirection,\n    required super.offset,\n    double anchor = 0.0,\n    super.children,\n    super.center,\n    super.cacheExtent,\n  }) : _anchor = anchor;\n\n  double _anchor;\n\n  @override\n  double get anchor => _anchor;\n\n  @override\n  bool get sizedByParent => false;\n\n  double lastMainAxisExtent = -1;\n\n  @override\n  set anchor(double value) {\n    if (value == _anchor) return;\n    _anchor = value;\n    markNeedsLayout();\n  }\n\n  late double _shrinkWrapExtent;\n\n  /// This value is set during layout based on the [CacheExtentStyle].\n  ///\n  /// When the style is [CacheExtentStyle.viewport], it is the main axis extent\n  /// of the viewport multiplied by the requested cache extent, which is still\n  /// expressed in pixels.\n  double? _calculatedCacheExtent;\n\n  /// While List in a wrapping container, eg. ListView\uff0cthe mainAxisExtent will\n  /// be infinite. This time need to change mainAxisExtent to this value.\n  final double _maxMainAxisExtent = double.maxFinite;\n\n  @override\n  void performLayout() {\n    if (center == null) {\n      assert(firstChild == null);\n      _minScrollExtent = 0.0;\n      _maxScrollExtent = 0.0;\n      _hasVisualOverflow = false;\n      offset.applyContentDimensions(0, 0);\n      return;\n    }\n\n    assert(center!.parent == this);\n\n    final BoxConstraints constraints = this.constraints;\n    if (firstChild == null) {\n      switch (axis) {\n        case Axis.vertical:\n          assert(constraints.hasBoundedWidth);\n          size = Size(constraints.maxWidth, constraints.minHeight);\n        case Axis.horizontal:\n          assert(constraints.hasBoundedHeight);\n          size = Size(constraints.minWidth, constraints.maxHeight);\n      }\n      offset.applyViewportDimension(0);\n      _maxScrollExtent = 0.0;\n      _shrinkWrapExtent = 0.0;\n      _hasVisualOverflow = false;\n      offset.applyContentDimensions(0, 0);\n      return;\n    }\n\n    double mainAxisExtent;\n    final double crossAxisExtent;\n    switch (axis) {\n      case Axis.vertical:\n        assert(constraints.hasBoundedWidth);\n        mainAxisExtent = constraints.maxHeight;\n        crossAxisExtent = constraints.maxWidth;\n      case Axis.horizontal:\n        assert(constraints.hasBoundedHeight);\n        mainAxisExtent = constraints.maxWidth;\n        crossAxisExtent = constraints.maxHeight;\n    }\n\n    if (mainAxisExtent.isInfinite) {\n      mainAxisExtent = _maxMainAxisExtent;\n    }\n\n    final centerOffsetAdjustment = center!.centerOffsetAdjustment;\n\n    double correction = 0;\n    double effectiveExtent = 0;\n    do {\n      correction = _attemptLayout(\n        mainAxisExtent,\n        crossAxisExtent,\n        offset.pixels + centerOffsetAdjustment,\n      );\n      if (correction != 0.0) {\n        offset.correctBy(correction);\n      } else {\n        switch (axis) {\n          case Axis.vertical:\n            effectiveExtent = constraints.constrainHeight(_shrinkWrapExtent);\n          case Axis.horizontal:\n            effectiveExtent = constraints.constrainWidth(_shrinkWrapExtent);\n        }\n        // *** Difference from [RenderViewport].\n        final top = _minScrollExtent + mainAxisExtent * anchor;\n        final bottom = _maxScrollExtent - mainAxisExtent * (1.0 - anchor);\n\n        final double maxScrollOffset = math.max(math.min(0, top), bottom);\n        final double minScrollOffset = math.min(top, maxScrollOffset);\n\n        final bool didAcceptViewportDimension =\n            offset.applyViewportDimension(effectiveExtent);\n        final bool didAcceptContentDimension =\n            offset.applyContentDimensions(minScrollOffset, maxScrollOffset);\n        if (didAcceptViewportDimension && didAcceptContentDimension) {\n          break;\n        }\n      }\n    } while (int.tryParse(\"1\") == 1);\n    switch (axis) {\n      case Axis.vertical:\n        size =\n            constraints.constrainDimensions(crossAxisExtent, effectiveExtent);\n      case Axis.horizontal:\n        size =\n            constraints.constrainDimensions(effectiveExtent, crossAxisExtent);\n    }\n  }\n\n  double _attemptLayout(\n    double mainAxisExtent,\n    double crossAxisExtent,\n    double correctedOffset,\n  ) {\n    assert(!mainAxisExtent.isNaN);\n    assert(mainAxisExtent >= 0.0);\n    assert(crossAxisExtent.isFinite);\n    assert(crossAxisExtent >= 0.0);\n    assert(correctedOffset.isFinite);\n    _minScrollExtent = 0.0;\n    _maxScrollExtent = 0.0;\n    _hasVisualOverflow = false;\n    _shrinkWrapExtent = 0.0;\n\n    // centerOffset is the offset from the leading edge of the RenderViewport\n    // to the zero scroll offset (the line between the forward slivers and the\n    // reverse slivers).\n    final centerOffset = mainAxisExtent * anchor - correctedOffset;\n    final reverseDirectionRemainingPaintExtent =\n        centerOffset.clamp(0.0, mainAxisExtent);\n    final forwardDirectionRemainingPaintExtent =\n        (mainAxisExtent - centerOffset).clamp(0.0, mainAxisExtent);\n\n    switch (cacheExtentStyle) {\n      case CacheExtentStyle.pixel:\n        _calculatedCacheExtent = cacheExtent;\n      case CacheExtentStyle.viewport:\n        _calculatedCacheExtent = mainAxisExtent * cacheExtent!;\n    }\n\n    final fullCacheExtent = mainAxisExtent + 2 * _calculatedCacheExtent!;\n    final centerCacheOffset = centerOffset + _calculatedCacheExtent!;\n    final reverseDirectionRemainingCacheExtent =\n        centerCacheOffset.clamp(0.0, fullCacheExtent);\n    final forwardDirectionRemainingCacheExtent =\n        (fullCacheExtent - centerCacheOffset).clamp(0.0, fullCacheExtent);\n\n    final leadingNegativeChild = childBefore(center!);\n\n    if (leadingNegativeChild != null) {\n      // negative scroll offsets\n      final result = layoutChildSequence(\n        child: leadingNegativeChild,\n        scrollOffset: math.max(mainAxisExtent, centerOffset) - mainAxisExtent,\n        overlap: 0,\n        layoutOffset: forwardDirectionRemainingPaintExtent,\n        remainingPaintExtent: reverseDirectionRemainingPaintExtent,\n        mainAxisExtent: mainAxisExtent,\n        crossAxisExtent: crossAxisExtent,\n        growthDirection: GrowthDirection.reverse,\n        advance: childBefore,\n        remainingCacheExtent: reverseDirectionRemainingCacheExtent,\n        cacheOrigin: (mainAxisExtent - centerOffset)\n            .clamp(-_calculatedCacheExtent!, 0.0),\n      );\n      if (result != 0.0) return -result;\n    }\n\n    // positive scroll offsets\n    return layoutChildSequence(\n      child: center,\n      scrollOffset: math.max(0, -centerOffset),\n      overlap: leadingNegativeChild == null ? math.min(0, -centerOffset) : 0.0,\n      layoutOffset: centerOffset >= mainAxisExtent\n          ? centerOffset\n          : reverseDirectionRemainingPaintExtent,\n      remainingPaintExtent: forwardDirectionRemainingPaintExtent,\n      mainAxisExtent: mainAxisExtent,\n      crossAxisExtent: crossAxisExtent,\n      growthDirection: GrowthDirection.forward,\n      advance: childAfter,\n      remainingCacheExtent: forwardDirectionRemainingCacheExtent,\n      cacheOrigin: centerOffset.clamp(-_calculatedCacheExtent!, 0.0),\n    );\n  }\n\n  @override\n  bool get hasVisualOverflow => _hasVisualOverflow;\n\n  @override\n  void updateOutOfBandData(\n    GrowthDirection growthDirection,\n    SliverGeometry childLayoutGeometry,\n  ) {\n    switch (growthDirection) {\n      case GrowthDirection.forward:\n        _maxScrollExtent += childLayoutGeometry.scrollExtent;\n      case GrowthDirection.reverse:\n        _minScrollExtent -= childLayoutGeometry.scrollExtent;\n    }\n    if (childLayoutGeometry.hasVisualOverflow) _hasVisualOverflow = true;\n    _shrinkWrapExtent += childLayoutGeometry.maxPaintExtent;\n    growSize = _shrinkWrapExtent;\n  }\n\n  @override\n  String labelForChild(int index) => 'child $index';\n}"}, {"structure_type": "function", "name": "slivers.where", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/scrollable_positioned_list/src/wrapping.dart", "file_name": "wrapping.dart", "line": 404, "line_from": 404, "line_to": 551, "snippet": "              slivers.where((Widget child) => child.key == center).length == 1,\n        ),\n        assert(\n          cacheExtentStyle != CacheExtentStyle.viewport || cacheExtent != null,\n        ),\n        super(children: slivers);\n\n  /// The direction in which the [offset]'s [ViewportOffset.pixels] increases.\n  ///\n  /// For example, if the [axisDirection] is [AxisDirection.down], a scroll\n  /// offset of zero is at the top of the viewport and increases towards the\n  /// bottom of the viewport.\n  final AxisDirection axisDirection;\n\n  /// The direction in which child should be laid out in the cross axis.\n  ///\n  /// If the [axisDirection] is [AxisDirection.down] or [AxisDirection.up], this\n  /// property defaults to [AxisDirection.left] if the ambient [Directionality]\n  /// is [TextDirection.rtl] and [AxisDirection.right] if the ambient\n  /// [Directionality] is [TextDirection.ltr].\n  ///\n  /// If the [axisDirection] is [AxisDirection.left] or [AxisDirection.right],\n  /// this property defaults to [AxisDirection.down].\n  final AxisDirection? crossAxisDirection;\n\n  /// The relative position of the zero scroll offset.\n  ///\n  /// For example, if [anchor] is 0.5 and the [axisDirection] is\n  /// [AxisDirection.down] or [AxisDirection.up], then the zero scroll offset is\n  /// vertically centered within the viewport. If the [anchor] is 1.0, and the\n  /// [axisDirection] is [AxisDirection.right], then the zero scroll offset is\n  /// on the left edge of the viewport.\n  final double anchor;\n\n  /// Which part of the content inside the viewport should be visible.\n  ///\n  /// The [ViewportOffset.pixels] value determines the scroll offset that the\n  /// viewport uses to select which part of its content to display. As the user\n  /// scrolls the viewport, this value changes, which changes the content that\n  /// is displayed.\n  ///\n  /// Typically a [ScrollPosition].\n  final ViewportOffset offset;\n\n  /// The first child in the [GrowthDirection.forward] growth direction.\n  ///\n  /// Children after [center] will be placed in the [axisDirection] relative to\n  /// the [center]. Children before [center] will be placed in the opposite of\n  /// the [axisDirection] relative to the [center].\n  ///\n  /// The [center] must be the key of a child of the viewport.\n  final Key? center;\n\n  /// {@macro flutter.rendering.RenderViewportBase.cacheExtent}\n  ///\n  /// See also:\n  ///\n  ///  * [cacheExtentStyle], which controls the units of the [cacheExtent].\n  final double? cacheExtent;\n\n  /// {@macro flutter.rendering.RenderViewportBase.cacheExtentStyle}\n  final CacheExtentStyle cacheExtentStyle;\n\n  /// {@macro flutter.material.Material.clipBehavior}\n  ///\n  /// Defaults to [Clip.hardEdge].\n  final Clip clipBehavior;\n\n  /// Given a [BuildContext] and an [AxisDirection], determine the correct cross\n  /// axis direction.\n  ///\n  /// This depends on the [Directionality] if the `axisDirection` is vertical;\n  /// otherwise, the default cross axis direction is downwards.\n  static AxisDirection getDefaultCrossAxisDirection(\n    BuildContext context,\n    AxisDirection axisDirection,\n  ) {\n    switch (axisDirection) {\n      case AxisDirection.up:\n        assert(\n          debugCheckHasDirectionality(\n            context,\n            why:\n                \"to determine the cross-axis direction when the viewport has an 'up' axisDirection\",\n            alternative:\n                \"Alternatively, consider specifying the 'crossAxisDirection' argument on the Viewport.\",\n          ),\n        );\n        return textDirectionToAxisDirection(Directionality.of(context));\n      case AxisDirection.right:\n        return AxisDirection.down;\n      case AxisDirection.down:\n        assert(\n          debugCheckHasDirectionality(\n            context,\n            why:\n                \"to determine the cross-axis direction when the viewport has a 'down' axisDirection\",\n            alternative:\n                \"Alternatively, consider specifying the 'crossAxisDirection' argument on the Viewport.\",\n          ),\n        );\n        return textDirectionToAxisDirection(Directionality.of(context));\n      case AxisDirection.left:\n        return AxisDirection.down;\n    }\n  }\n\n  @override\n  CustomRenderViewport createRenderObject(BuildContext context);\n\n  @override\n  ViewportElement createElement() => ViewportElement(this);\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties\n      ..add(EnumProperty<AxisDirection>('axisDirection', axisDirection))\n      ..add(\n        EnumProperty<AxisDirection>(\n          'crossAxisDirection',\n          crossAxisDirection,\n          defaultValue: null,\n        ),\n      )\n      ..add(DoubleProperty('anchor', anchor))\n      ..add(DiagnosticsProperty<ViewportOffset>('offset', offset));\n    if (center != null) {\n      properties.add(DiagnosticsProperty<Key>('center', center));\n    } else if (children.isNotEmpty && children.first.key != null) {\n      properties.add(\n        DiagnosticsProperty<Key>(\n          'center',\n          children.first.key,\n          tooltip: 'implicit',\n        ),\n      );\n    }\n    properties\n      ..add(DiagnosticsProperty<double>('cacheExtent', cacheExtent))\n      ..add(\n        DiagnosticsProperty<CacheExtentStyle>(\n          'cacheExtentStyle',\n          cacheExtentStyle,\n        ),\n      );\n  }\n}"}, {"structure_type": "function", "name": "mount", "docstring": "", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/scrollable_positioned_list/src/wrapping.dart", "file_name": "wrapping.dart", "line": 565, "line_from": 565, "line_to": 612, "snippet": "  void mount(Element? parent, Object? newSlot) {\n    super.mount(parent, newSlot);\n    _updateCenter();\n  }\n\n  @override\n  void update(MultiChildRenderObjectWidget newWidget) {\n    super.update(newWidget);\n    _updateCenter();\n  }\n\n  void _updateCenter() {\n    if (widget.center != null) {\n      renderObject.center = children\n          .singleWhere((Element element) => element.widget.key == widget.center)\n          .renderObject as RenderSliver?;\n    } else if (children.isNotEmpty) {\n      renderObject.center = children.first.renderObject as RenderSliver?;\n    } else {\n      renderObject.center = null;\n    }\n  }\n\n  @override\n  void debugVisitOnstageChildren(ElementVisitor visitor) {\n    children.where((Element e) {\n      final RenderSliver renderSliver = e.renderObject! as RenderSliver;\n      return renderSliver.geometry!.visible;\n    }).forEach(visitor);\n  }\n}\n\nclass CustomSliverPhysicalContainerParentData\n    extends SliverPhysicalContainerParentData {\n  /// The position of the child relative to the zero scroll offset.\n  ///\n  /// The number of pixels from from the zero scroll offset of the parent sliver\n  /// (the line at which its [SliverConstraints.scrollOffset] is zero) to the\n  /// side of the child closest to that offset. A [layoutOffset] can be null\n  /// when it cannot be determined. The value will be set after layout.\n  ///\n  /// In a typical list, this does not change as the parent is scrolled.\n  ///\n  /// Defaults to null.\n  double? layoutOffset;\n\n  GrowthDirection? growthDirection;\n}"}, {"structure_type": "function", "name": "child;", "docstring": "The widget below this widget in the tree.", "module": "src", "file_path": "Quran-Majeed/lib/core/external_libs/scrollable_positioned_list/src/post_mount_callback.dart", "file_name": "post_mount_callback.dart", "line": 13, "line_from": 13, "line_to": 34, "snippet": "  final Widget child;\n\n  /// Callback to call when the element for this widget is mounted.\n  final void Function()? callback;\n\n  @override\n  StatelessElement createElement() => _PostMountCallbackElement(this);\n\n  @override\n  Widget build(BuildContext context) => child;\n}\n\nclass _PostMountCallbackElement extends StatelessElement {\n  _PostMountCallbackElement(PostMountCallback super.widget);\n\n  @override\n  void mount(Element? parent, Object? newSlot) {\n    super.mount(parent, newSlot);\n    final PostMountCallback postMountCallback = widget as PostMountCallback;\n    postMountCallback.callback?.call();\n  }\n}"}, {"structure_type": "function", "name": "dismiss", "docstring": "", "module": "services", "file_path": "Quran-Majeed/lib/core/external_libs/services/keyboard_service.dart", "file_name": "keyboard_service.dart", "line": 24, "line_from": 24, "line_to": 43, "snippet": "  static void dismiss({BuildContext? context, FocusNode? focusNode}) =>\n      catchVoid(() {\n        final BuildContext anyContext = (context != null && context.mounted)\n            ? context\n            : QuranMajeed.globalContext;\n\n        if (!isVisible(anyContext)) return;\n\n        SystemChannels.textInput.invokeMethod<void>('TextInput.hide');\n\n        // Focus handling\n        if (focusNode != null) {\n          if (focusNode.hasFocus || focusNode.hasPrimaryFocus) {\n            focusNode.unfocus();\n          }\n        } else {\n          FocusScope.of(anyContext).unfocus();\n        }\n      });\n}"}, {"structure_type": "function", "name": "toggleLoading", "docstring": "", "module": "base", "file_path": "Quran-Majeed/lib/core/base/base_presenter.dart", "file_name": "base_presenter.dart", "line": 19, "line_from": 19, "line_to": 96, "snippet": "  Future<void> toggleLoading({required bool loading});\n\n  // Function to add user message\n  Future<void> addUserMessage(String message);\n\n  // Function to handle stream events\n  @protected\n  Future<void> handleStreamEvents<T>({\n    required Stream<Either<String, T>> stream,\n    required void Function(T) onData,\n    required StreamSubscription<Either<String, T>>? subscription,\n  }) async {\n    await subscription?.cancel();\n    subscription = stream.listen(\n      (result) => result.fold(addUserMessage, onData),\n      onError: (Object e) => logDebugStatic('Error in handleStreamEvents:', e.toString()),\n      onDone: () async => subscription?.cancel(),\n    );\n  }\n\n  // Function to execute a task with loading state\n  @protected\n  Future<void> executeTaskWithLoading(FutureOr<void> Function() task) async {\n    await toggleLoading(loading: true);\n    await task();\n    await toggleLoading(loading: false);\n  }\n\n  // Function to execute a use case that only shows a message\n  @protected\n  Future<void> executeMessageOnlyUseCase(\n    FutureOr<Either<String, String>> Function() task, {\n    bool showMessage = true,\n    VoidCallback? onSuccess,\n  }) async {\n    await toggleLoading(loading: true);\n    final Either<String, String> result = await task();\n    await result.fold(addUserMessage, (message) async {\n      if (showMessage) await addUserMessage(message);\n      onSuccess?.call();\n    });\n    await toggleLoading(loading: false);\n  }\n\n  // Function to parse data from Either with user message\n  @protected\n  Future<void> parseDataFromEitherWithUserMessage<T>({\n    required FutureOr<Either<String, T>> Function() task,\n    required void Function(T) onDataLoaded,\n    bool showLoading = false,\n    T? valueOnError,\n  }) async {\n    if (showLoading) await toggleLoading(loading: true);\n    final Either<String, T> result = await task();\n    result.fold(\n      (message) {\n        addUserMessage(message);\n        if (valueOnError != null) onDataLoaded(valueOnError);\n      },\n      onDataLoaded,\n    );\n    if (showLoading) await toggleLoading(loading: false);\n  }\n\n  // Function to map data from Either with user message\n  @protected\n  Future<T?> mapDataFromEitherWithUserMessage<T>({\n    required FutureOr<Either<String, T>> Function() task,\n    bool showLoading = false,\n  }) async {\n    T? data;\n    if (showLoading) await toggleLoading(loading: true);\n    final Either<String, T> result = await task();\n    if (showLoading) await toggleLoading(loading: false);\n    result.fold(addUserMessage, (d) => data = d);\n    return data;\n  }\n}"}, {"structure_type": "function", "name": "fontExists", "docstring": "", "module": "utility", "file_path": "Quran-Majeed/lib/core/utility/font_manager.dart", "file_name": "font_manager.dart", "line": 21, "line_from": 21, "line_to": 151, "snippet": "  Future<bool> fontExists(int pageNumber, String fontDir) async {\n    final File fontFile = File('$fontDir/${FontConstants.getFontFileName(pageNumber)}');\n    return fontFile.exists();\n  }\n\n  // Get font file path\n  String getFontPath(int pageNumber, String fontDir) {\n    return '$fontDir/${FontConstants.getFontFileName(pageNumber)}';\n  }\n\n  // Load and register a font\n  Future<String> loadAndRegisterFont(int pageNumber, String fontDir) async {\n    // Check if font is already loaded\n    if (_loadedFonts.containsKey(pageNumber)) {\n      // Update LRU queue (move to front)\n      _fontUsageQueue.remove(pageNumber);\n      _fontUsageQueue.insert(0, pageNumber);\n      return _loadedFonts[pageNumber]!;\n    }\n\n    final String fontFamily = FontConstants.getFontFamilyForPage(pageNumber);\n    final String fontPath = getFontPath(pageNumber, fontDir);\n\n    try {\n      // Check if font file exists\n      final File fontFile = File(fontPath);\n      if (!await fontFile.exists()) {\n        logErrorStatic('Font file does not exist: $fontPath', _tag);\n        return FontConstants.defaultFontFamily;\n      }\n\n      // Read font file bytes\n      final Uint8List fontBytes = await fontFile.readAsBytes();\n      if (fontBytes.isEmpty) {\n        logErrorStatic('Font file is empty: $fontPath', _tag);\n        return FontConstants.defaultFontFamily;\n      }\n\n      // Load font using the Flutter font loader\n      final font = FontLoader(fontFamily);\n      font.addFont(Future.value(ByteData.view(fontBytes.buffer)));\n      await font.load();\n\n      // Manage cache size\n      if (_loadedFonts.length >= FontConstants.maxFontCacheSize && _fontUsageQueue.isNotEmpty) {\n        final int oldestPage = _fontUsageQueue.removeLast();\n        _loadedFonts.remove(oldestPage);\n      }\n\n      // Add to cache\n      _loadedFonts[pageNumber] = fontFamily;\n      _fontUsageQueue.insert(0, pageNumber);\n\n      logInfoStatic('Successfully loaded font for page $pageNumber', _tag);\n      return fontFamily;\n    } catch (e, s) {\n      logErrorStatic('Error loading font for page $pageNumber: $e\\n$s', _tag);\n      return FontConstants.defaultFontFamily;\n    }\n  }\n\n  // Preload fonts for upcoming pages\n  Future<void> preloadFonts(int currentPage, int totalPages, String fontDir) async {\n    // Preload next N fonts\n    for (int i = 1; i <= FontConstants.fontsToPreload; i++) {\n      final int pageToLoad = currentPage + i;\n      if (pageToLoad <= totalPages && !_loadedFonts.containsKey(pageToLoad)) {\n        final bool exists = await fontExists(pageToLoad, fontDir);\n        if (exists) {\n          // Load in background with lower priority\n          unawaited(_loadFontInBackground(pageToLoad, fontDir));\n        }\n      }\n    }\n\n    // Optionally preload previous pages as well\n    for (int i = 1; i <= FontConstants.fontsToPreload; i++) {\n      final int pageToLoad = currentPage - i;\n      if (pageToLoad > 0 && !_loadedFonts.containsKey(pageToLoad)) {\n        final bool exists = await fontExists(pageToLoad, fontDir);\n        if (exists) {\n          // Load in background with lower priority\n          unawaited(_loadFontInBackground(pageToLoad, fontDir));\n        }\n      }\n    }\n  }\n\n  // Helper to load a font in the background\n  Future<void> _loadFontInBackground(int pageNumber, String fontDir) async {\n    try {\n      final String fontFamily = FontConstants.getFontFamilyForPage(pageNumber);\n      final String fontPath = getFontPath(pageNumber, fontDir);\n\n      // Read font file bytes\n      final File fontFile = File(fontPath);\n      final Uint8List fontBytes = await fontFile.readAsBytes();\n\n      // Load font\n      final font = FontLoader(fontFamily);\n      font.addFont(Future.value(ByteData.view(fontBytes.buffer)));\n      await font.load();\n\n      // Manage cache size\n      if (_loadedFonts.length >= FontConstants.maxFontCacheSize && _fontUsageQueue.isNotEmpty) {\n        final int oldestPage = _fontUsageQueue.removeLast();\n        _loadedFonts.remove(oldestPage);\n      }\n\n      // Add to cache\n      _loadedFonts[pageNumber] = fontFamily;\n      _fontUsageQueue.add(pageNumber); // Add to end since it's preloaded\n    } catch (e) {\n      logErrorStatic('Error preloading font for page $pageNumber: $e', _tag);\n    }\n  }\n\n  // Clear all loaded fonts from cache\n  void clearFontCache() {\n    _loadedFonts.clear();\n    _fontUsageQueue.clear();\n  }\n}\n\n// Helper extension to mark futures as unawaited\nvoid unawaited(Future<void> future) {\n  // Explicitly handle errors so they don't get lost\n  future.catchError((error, stackTrace) {\n    logErrorStatic('Unawaited future error: $error\\n$stackTrace', 'unawaited');\n  });\n}"}, {"structure_type": "function", "name": "BaseUiState>", "docstring": "", "module": "utility", "file_path": "Quran-Majeed/lib/core/utility/ui_helper.dart", "file_name": "ui_helper.dart", "line": 18, "line_from": 18, "line_to": 142, "snippet": "  static Future<void> onMessage<T extends BaseUiState>(\n    Obs<T> uiStateStream,\n  ) async {\n    StreamSubscription<T>? subscription;\n    await doOnPageLoaded(() {\n      try {\n        subscription = uiStateStream.listen(\n          (uiState) => showMessage(message: uiState.userMessage),\n          onDone: () => subscription?.cancel(),\n          onError: (e) => subscription?.cancel(),\n          cancelOnError: true,\n        );\n      } catch (e) {\n        logErrorStatic(e, _fileName);\n        subscription?.cancel();\n        subscription = null;\n      }\n    });\n  }\n\n  static bool onScrollNotification({\n    required ScrollNotification scrollNotification,\n    required void Function({required bool toTop}) onScrolled,\n  }) {\n    if (scrollNotification is! ScrollUpdateNotification) return false;\n    final bool reachedAtTop = scrollNotification.metrics.pixels == 0;\n    onScrolled(toTop: reachedAtTop);\n    return false;\n  }\n\n  static Future<void> doOnPageLoaded(void Function() onLoaded) async {\n    // Takes a callback function onLoaded as a parameter. When called, this\n    // method schedules the onLoaded callback to be executed after the current\n    // frame has finished rendering, by adding it to the end of the post-frame\n    // callbacks list using WidgetsBinding.instance.addPostFrameCallback.\n    //\n    // To add a slight delay to the execution of the onLoaded callback, the\n    // method also uses Future.delayed to wait for 64 milliseconds before\n    // invoking the callback. The entire method is wrapped in a\n    // catchFutureOrVoid function which catches any exceptions thrown during the\n    // execution of the callback and handles them appropriately.\n    await catchFutureOrVoid(() async {\n      WidgetsBinding.instance.addPostFrameCallback((timeStamp) async {\n        onLoaded();\n      });\n    });\n  }\n\n  static void doOnPageDestroy(VoidCallback onDestroy) {\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      onDestroy();\n    });\n  }\n\n  static Future<void> toggleFullScreen({required bool makeFullScreen}) async {\n    await catchFutureOrVoid(() async {\n      await SystemChrome.setEnabledSystemUIMode(\n        SystemUiMode.manual,\n        overlays: makeFullScreen ? [] : SystemUiOverlay.values,\n      );\n    });\n  }\n\n  /// Listens to the scroll events and triggers the provided callback function when scrolled.\n  ///\n  /// The [scrollController] is an instance of [ItemScrollController] that controls the scrolling behavior.\n  /// The [onScrolled] is a callback function that takes a boolean parameter [toTop] indicating whether the scroll is towards the top or not.\n  ///\n  /// Example usage:\n  /// ```dart\n  /// await UiHelper.listenToScroll(\n  ///   scrollController: myScrollController,\n  ///   onScrolled: ({required bool toTop}) {\n  ///     // Handle scroll event\n  ///   },\n  /// );\n  /// ```\n  static Future<void> listenToScroll({\n    required ItemScrollController scrollController,\n    required void Function({required bool toTop}) onScrolled,\n  }) async {\n    await UiHelper.doOnPageLoaded(() async {\n      onScrolled(toTop: false);\n\n      if (!scrollController.isAttached) return;\n      final ScrollController? rootScrollController =\n          scrollController.scrollController;\n      if (rootScrollController == null) return;\n      if (!rootScrollController.hasClients) return;\n\n      rootScrollController.addListener(() {\n        Throttle.throttle(\n          _onListScrollingToTopThrottleTag,\n          480.inMilliseconds,\n          () {\n            final bool scrollingFromBottomToTop =\n                rootScrollController.position.userScrollDirection.name ==\n                    'reverse';\n            onScrolled(toTop: scrollingFromBottomToTop);\n          },\n        );\n      });\n    });\n  }\n\n  static const String _onListScrollingToTopThrottleTag =\n      'onListScrollingToTopThrottleTag';\n}\n\nclass UpgradeAppDialogContainer extends StatelessWidget {\n  const UpgradeAppDialogContainer({\n    super.key,\n    required this.child,\n  });\n\n  final Widget child;\n\n  @override\n  Widget build(BuildContext context) {\n    return UpgradeAlert(\n      upgrader: Upgrader(),\n      child: child,\n    );\n  }\n}"}, {"structure_type": "function", "name": "logError", "docstring": "Logs an error message with the provided [exception].\n\nIf [showLog] is false, nothing will be logged.\n\nExample usage:\n\n```dart\n\nfinal error = Exception('Something went wrong');\nthis.logError();\n\n[MyClass] [ERROR] - 2023-04-08 11:30:00\nException: Something went wrong\n#0 main (file:///path/to/main.dart:10:11)\n\n```\n", "module": "utility", "file_path": "Quran-Majeed/lib/core/utility/logger_utility.dart", "file_name": "logger_utility.dart", "line": 122, "line_from": 122, "line_to": 171, "snippet": "  void logError(Object? exception) {\n    // to avoid runtimeType.toString() in release mode\n    // as this can hamper performance, we use showLog\n    // to check if we are in debug mode or not\n    if (!showLog) return;\n    // we are logging only in debug mode, so the performance hit can be ignored\n    // ignore: no_runtimeType_toString\n    logErrorStatic(exception, runtimeType.toString());\n  }\n\n  /// Logs a debug message with the provided [object].\n  ///\n  /// If [showLog] is false, nothing will be logged.\n  ///\n  /// Example usage:\n  ///\n  /// ```dart\n  ///\n  /// this.logDebug('This is a debug message');\n  ///\n  /// [MyClass] [DEBUG] - 2023-04-08 11:30:00\n  /// This is a debug message\n  ///\n  /// ```\n  ///\n  void logDebug(Object object) {\n    // to avoid runtimeType.toString() in release mode\n    // as this can hamper performance, we use showLog\n    // to check if we are in debug mode or not\n    if (!showLog) return;\n    // we are logging only in debug mode, so the performance hit can be ignored\n    // ignore: no_runtimeType_toString\n    logDebugStatic(object, runtimeType.toString());\n  }\n}\n\n/// A utility class for logging messages\nclass Logger {\n  static void info(String message, [String tag = '']) {\n    logInfoStatic(message, tag);\n  }\n\n  static void error(String message, [String tag = '']) {\n    logErrorStatic(message, tag);\n  }\n\n  static void debug(String message, [String tag = '']) {\n    logDebugStatic(message, tag);\n  }\n}"}, {"structure_type": "function", "name": "navigatorPush<T>", "docstring": "", "module": "utility", "file_path": "Quran-Majeed/lib/core/utility/utility.dart", "file_name": "utility.dart", "line": 43, "line_from": 43, "line_to": 155, "snippet": "  Future<T?> navigatorPush<T>(Widget page) async {\n    try {\n      if (!mounted) return null;\n      final CupertinoPageRoute<T> route = CupertinoPageRoute<T>(builder: (context) => page);\n      return Navigator.push<T>(this, route);\n    } catch (e) {\n      logError(\"Failed to navigate to ${e.runtimeType} -> $e\");\n      return null;\n    }\n  }\n\n  // Generic navigation method with custom transition\n  void customNavigatorPush(BuildContext context, Widget nextPage) {\n    Navigator.push(\n      context,\n      PageRouteBuilder(\n        transitionDuration: const Duration(milliseconds: 500),\n        pageBuilder: (context, animation, secondaryAnimation) => nextPage,\n        transitionsBuilder: (context, animation, secondaryAnimation, child) {\n          Offset begin = const Offset(0.0, 1.0);\n          Offset end = Offset.zero;\n          Tween<Offset> tween = Tween(begin: begin, end: end);\n          Animation<Offset> offsetAnimation = animation.drive(tween);\n\n          return SlideTransition(\n            position: offsetAnimation,\n            child: child,\n          );\n        },\n      ),\n    );\n  }\n\n  Future<T?> navigatorPushReplacement<T>(Widget page) async {\n    try {\n      if (!mounted) return null;\n      final CupertinoPageRoute<T> route = CupertinoPageRoute<T>(builder: (context) => page);\n      return Navigator.pushReplacement(this, route);\n    } catch (e) {\n      logError(\"Failed to navigate to ${e.runtimeType} -> $e\");\n      return null;\n    }\n  }\n\n  Future<T?> showBottomSheetLegacy<T>(Widget bottomSheet) async {\n    return Get.bottomSheet<T>(\n      bottomSheet,\n      isScrollControlled: true,\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(twentyPx),\n          topRight: Radius.circular(twentyPx),\n        ),\n      ),\n    );\n  }\n\n  Future<T?> showBottomSheet<T>(\n    Widget bottomSheet,\n    BuildContext context,\n  ) async {\n    if (!mounted) return null;\n    final T? result = await showModalBottomSheet<T>(\n      context: context,\n      builder: (_) => bottomSheet,\n      backgroundColor: Colors.transparent,\n      isScrollControlled: true,\n      enableDrag: true,\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(twentyPx),\n          topRight: Radius.circular(twentyPx),\n        ),\n      ),\n    );\n    return result;\n  }\n\n  void navigatorPop<T>({T? result}) {\n    if (!mounted) return;\n    Navigator.pop(this, result);\n  }\n}\n\nFuture<T?> showSlideDownDialog<T>({\n  required Widget content,\n  required BuildContext context,\n  bool barrierDismissible = true,\n  Duration transitionDuration = const Duration(milliseconds: 300),\n  Color? barrierColor,\n}) async {\n  if (!context.mounted) return null;\n\n  final T? result = await showGeneralDialog<T>(\n    context: context,\n    barrierDismissible: barrierDismissible,\n    barrierColor: barrierColor ?? Colors.black.withOpacityInt(0.4),\n    barrierLabel: '',\n    transitionDuration: transitionDuration,\n    transitionBuilder: (context, animation, __, Widget child) {\n      return SlideTransition(\n        position: Tween<Offset>(\n          begin: const Offset(0, -1), // Top to bottom\n          end: Offset.zero,\n        ).animate(animation),\n        child: child,\n      );\n    },\n    pageBuilder: (context, animation, __) => content,\n  );\n\n  return result;\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "utility", "file_path": "Quran-Majeed/lib/core/utility/utility.dart", "file_name": "utility.dart", "line": 1238, "line_from": 1238, "line_to": 1266, "snippet": "  required void Function(String) onError,\n}) async {\n  try {\n    if (!await file.exists()) {\n      onError(\"Downloaded file is incomplete. Please try again.\");\n      return false;\n    }\n\n    // Try to read the first few bytes to verify file integrity\n    try {\n      await file.openRead(0, 1024).first;\n      return true;\n    } catch (e) {\n      logErrorStatic(\"Error validating file integrity: $e\", \"FileValidation\");\n      await file.delete();\n      if (context?.mounted ?? false) {\n        onError(\"Downloaded file is corrupted. Please try again.\");\n      }\n      return false;\n    }\n  } catch (e) {\n    logErrorStatic(\"Error validating downloaded file: $e\", \"FileValidation\");\n    await file.delete();\n    if (context?.mounted ?? false) {\n      onError(\"Failed to validate downloaded file. Please try again.\");\n    }\n    return false;\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "nuzul", "file_path": "Quran-Majeed/lib/data/repository/nuzul/nuzul_repository_impl.dart", "file_name": "nuzul_repository_impl.dart", "line": 78, "line_from": 78, "line_to": 95, "snippet": "    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    try {\n      await _remoteDataSource.downloadResourceDatabase(\n        fileName: _nuzulDbFileName,\n        onProgress: onProgress,\n        cancelToken: cancelToken,\n      );\n    } catch (e) {\n      if (e is DioException && e.type == DioExceptionType.cancel) {\n        logDebugStatic('Nuzul database download was cancelled', 'NuzulRepositoryImpl');\n        rethrow;\n      }\n      logErrorStatic('Error downloading nuzul database: $e', 'NuzulRepositoryImpl');\n      rethrow;\n    }\n  }"}, {"structure_type": "function", "name": "getAllPages", "docstring": "", "module": "page", "file_path": "Quran-Majeed/lib/data/repository/page/page_repository_impl.dart", "file_name": "page_repository_impl.dart", "line": 14, "line_from": 14, "line_to": 37, "snippet": "  Future<Either<String, List<PageEntity>>> getAllPages() async {\n    try {\n      final pages = await _localDataSource.getAllPages();\n      final mappedPages = await compute(_mapToEntities, pages);\n      return Right(mappedPages);\n    } catch (e) {\n      return Left(e.toString());\n    }\n  }\n}\n\n// Compute function for mapping PageTableData to PageEntity\nList<PageEntity> _mapToEntities(List<PageTableData> tableData) {\n  return tableData\n      .map((page) => PageEntity(\n            id: page.id,\n            startSurahNo: page.startSurahNo,\n            endSurahNo: page.endSurahNo,\n            startAyatNo: page.startAyatNo,\n            endAyatNo: page.endAyatNo,\n            arabicInitial: page.arabicInitial,\n          ))\n      .toList();\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "grammar", "file_path": "Quran-Majeed/lib/data/repository/grammar/grammar_repository_impl.dart", "file_name": "grammar_repository_impl.dart", "line": 45, "line_from": 45, "line_to": 62, "snippet": "    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    try {\n      await _remoteDataSource.downloadResourceDatabase(\n        fileName: _grammarDbFileName,\n        onProgress: onProgress,\n        cancelToken: cancelToken,\n      );\n    } catch (e) {\n      if (e is DioException && e.type == DioExceptionType.cancel) {\n        logDebugStatic('Grammar database download was cancelled', _tag);\n        rethrow;\n      }\n      logErrorStatic('Error downloading grammar database: $e', _tag);\n      rethrow;\n    }\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "translation", "file_path": "Quran-Majeed/lib/data/repository/translation/translation_repository_impl.dart", "file_name": "translation_repository_impl.dart", "line": 24, "line_from": 24, "line_to": 38, "snippet": "    required void Function(int percentage) onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    try {\n      await remoteDataSource.downloadDatabase(\n        fileName: fileName,\n        url: downloadLink,\n        onProgress: onProgress,\n        cancelToken: cancelToken,\n      );\n    } catch (e) {\n      if (e is DioException && e.type == DioExceptionType.cancel) return;\n      logErrorStatic(\"Error downloading file: $e\", \"TranslationRepositoryImpl\");\n    }\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "translation", "file_path": "Quran-Majeed/lib/data/repository/translation/translation_repository_impl.dart", "file_name": "translation_repository_impl.dart", "line": 43, "line_from": 43, "line_to": 58, "snippet": "    void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    final dbFile = File(await getDatabaseFilePath(file.fileName));\n\n    if (!await dbFile.exists()) {\n      await _downloadDatabaseFile(\n        fileName: file.fileName,\n        downloadLink: file.link,\n        onProgress: onProgress!,\n        cancelToken: cancelToken,\n      );\n    } else {\n      await selectTranslation(file: file);\n    }\n  }"}, {"structure_type": "function", "name": "searchAcrossTranslations", "docstring": "", "module": "search", "file_path": "Quran-Majeed/lib/data/repository/search/search_repository_impl.dart", "file_name": "search_repository_impl.dart", "line": 27, "line_from": 27, "line_to": 380, "snippet": "  Future<List<SearchResultEntity>> searchAcrossTranslations({\n    required String query,\n    required List<String> databaseFiles,\n    required SearchTypeEntity searchType,\n  }) async {\n    final Map<String, List<Verse>> results = {};\n\n    for (String dbFile in databaseFiles) {\n      if (['bn_bayaan', 'en_sahih'].contains(dbFile)) {\n        try {\n          final List<Verse> verses = await _searchLocalDataSource.searchTranslation(\n            query: query,\n            language: dbFile == 'bn_bayaan' ? 'bn' : 'en',\n            searchType: searchType,\n          );\n          results[dbFile] = verses;\n        } catch (e) {\n          logDebugStatic('Error searching in $dbFile: $e', 'SearchRepositoryImpl');\n          continue;\n        }\n      } else {\n        final database = TranslationDatabase(File(await getDatabaseFilePath(dbFile)));\n        try {\n          final List<Verse> verses = await database.searchVerses(\n            query: query,\n            searchType: searchType,\n          );\n          results[dbFile] = verses;\n        } finally {\n          await database.close();\n        }\n      }\n    }\n\n    return _processResults(results);\n  }\n\n  List<SearchResultEntity> _processResults(Map<String, List<Verse>> results) {\n    final Map<String, Map<String, String>> groupedResults = {};\n\n    results.forEach((String dbFile, List<Verse> verses) {\n      for (Verse verse in verses) {\n        final String key = '${verse.suraId}-${verse.ayahId}';\n        groupedResults.putIfAbsent(key, () => {});\n        if (verse.verseText != null) {\n          groupedResults[key]![dbFile] = verse.verseText!;\n        }\n      }\n    });\n\n    return groupedResults.entries.map((MapEntry<String, Map<String, String>> entry) {\n      final List<String> parts = entry.key.split('-');\n      return SearchResultEntity(\n        surahId: int.parse(parts[0]),\n        ayahId: int.parse(parts[1]),\n        resultText: entry.value,\n      );\n    }).toList();\n  }\n\n  @override\n  Future<List<SearchResultEntity>> searchAcrossTafseers({\n    required String query,\n    required List<String> databaseFiles,\n    required SearchTypeEntity searchType,\n  }) async {\n    final Map<String, List<Map<String, dynamic>>> results = {};\n\n    await Future.wait(databaseFiles.map((dbFile) async {\n      final mainFile = File(await getDatabaseFilePath(dbFile));\n      if (!await mainFile.exists()) {\n        const String assetPath = \"assets/database\";\n        final String dbPath = \"$assetPath/$dbFile.db\";\n        await moveDatabaseFromAssetToInternal(file: mainFile, assetPath: dbPath);\n      }\n      final database = TafseerDatabase(mainFile);\n      try {\n        final TafseerType tafseerType = determineTafseerType(dbFile);\n        switch (tafseerType) {\n          case TafseerType.common:\n            final List<CommonTafseerTableData> tafseer = await database.searchTafsirTextFromCommonTafseerTable(\n              query: query,\n              searchType: searchType,\n            );\n            if (tafseer.isNotEmpty) {\n              results[dbFile] = tafseer.map((t) => t.toJson()).toList();\n            }\n            break;\n          case TafseerType.unique:\n            final List<UniqueTafseerTableData> tafseer = await database.searchTafsirTextFromUniqueTafseerTable(\n              query: query,\n              searchType: searchType,\n            );\n            if (tafseer.isNotEmpty) {\n              results[dbFile] = tafseer.map((t) => t.toJson()).toList();\n            }\n            break;\n        }\n      } finally {\n        await database.close();\n      }\n    }));\n\n    return _processTafseerResults(results, query, searchType);\n  }\n\n  List<SearchResultEntity> _processTafseerResults(\n      Map<String, List<Map<String, dynamic>>> results, String query, SearchTypeEntity searchType) {\n    final Map<String, Map<String, String>> mergedAyahTexts = {};\n\n    for (final MapEntry<String, List<Map<String, dynamic>>> entry in results.entries) {\n      final String dbFile = entry.key;\n      final List<Map<String, dynamic>> tafseer = entry.value;\n\n      for (final Map<String, dynamic> tafsir in tafseer) {\n        final String tafsirText = tafsir['tafsirText'] as String? ?? '';\n        bool shouldInclude = false;\n\n        if (searchType == SearchTypeEntity.exact) {\n          shouldInclude = tafsirText.toLowerCase().contains(query.toLowerCase());\n        } else if (searchType == SearchTypeEntity.normal) {\n          final words = query.split(' ');\n          final validWords = words.where((word) => word.trim().isNotEmpty).toList();\n          if (validWords.isNotEmpty) {\n            shouldInclude = validWords.every(\n              (word) => tafsirText.toLowerCase().contains(word.toLowerCase()),\n            );\n          } else {\n            shouldInclude = tafsirText.isNotEmpty;\n          }\n        } else if (searchType == SearchTypeEntity.partial) {\n          final words = query.split(' ');\n          final validWords = words.where((word) => word.trim().isNotEmpty).toList();\n          if (validWords.isNotEmpty) {\n            shouldInclude = validWords.any(\n              (word) => tafsirText.toLowerCase().contains(word.toLowerCase()),\n            );\n          } else {\n            shouldInclude = tafsirText.isNotEmpty;\n          }\n        }\n\n        if (shouldInclude) {\n          if (tafsir.containsKey('suraId') && tafsir.containsKey('ayahId')) {\n            _processCommonTafseerJson(tafsir, dbFile, mergedAyahTexts, query);\n          } else {\n            _processUniqueTafseerJson(tafsir, dbFile, mergedAyahTexts, query);\n          }\n        }\n      }\n    }\n\n    return mergedAyahTexts.entries.map((MapEntry<String, Map<String, String>> entry) {\n      final List<String> parts = entry.key.split('_');\n      return SearchResultEntity(\n        surahId: int.parse(parts[0]),\n        ayahId: int.parse(parts[1]),\n        resultText: entry.value,\n      );\n    }).toList();\n  }\n\n  List<SearchResultEntity> mergeResults(Map<String, List<Verse>> results) {\n    final Map<String, SearchResultEntity> mergedResults = {};\n\n    for (final MapEntry<String, List<Verse>> entry in results.entries) {\n      final String dbFile = entry.key;\n      final List<Verse> verses = entry.value;\n\n      for (final Verse verse in verses) {\n        final String key = '${verse.suraId}_${verse.ayahId}';\n\n        if (mergedResults.containsKey(key)) {\n          mergedResults[key]!.resultText[dbFile] = verse.verseText ?? '';\n        } else {\n          mergedResults[key] = SearchResultEntity(\n            surahId: verse.suraId!,\n            ayahId: verse.ayahId!,\n            resultText: {dbFile: verse.verseText ?? ''},\n          );\n        }\n      }\n    }\n\n    return mergedResults.values.toList();\n  }\n\n  List<SearchResultEntity> mergeTafseerResults(Map<String, dynamic> params) {\n    final Map<String, List<Map<String, dynamic>>> results =\n        params['results'] as Map<String, List<Map<String, dynamic>>>;\n    final String query = params['query'] as String;\n\n    final Map<String, Map<String, String>> mergedAyahTexts = {};\n\n    for (final MapEntry<String, List<Map<String, dynamic>>> entry in results.entries) {\n      final String dbFile = entry.key;\n      final List<Map<String, dynamic>> tafseer = entry.value;\n\n      for (final Map<String, dynamic> tafsir in tafseer) {\n        if (tafsir.containsKey('suraId') && tafsir.containsKey('ayahId')) {\n          _processCommonTafseerJson(tafsir, dbFile, mergedAyahTexts, query);\n        } else {\n          _processUniqueTafseerJson(tafsir, dbFile, mergedAyahTexts, query);\n        }\n      }\n    }\n\n    return mergedAyahTexts.entries.map((MapEntry<String, Map<String, String>> entry) {\n      final List<String> parts = entry.key.split('_');\n      return SearchResultEntity(\n        surahId: int.parse(parts[0]),\n        ayahId: int.parse(parts[1]),\n        resultText: entry.value,\n      );\n    }).toList();\n  }\n\n  void _processCommonTafseerJson(\n    Map<String, dynamic> tafsir,\n    String dbFile,\n    Map<String, Map<String, String>> mergedAyahTexts,\n    String query,\n  ) {\n    final String key = '${tafsir['suraId']}_${tafsir['ayahId']}';\n    mergedAyahTexts.putIfAbsent(key, () => {});\n\n    final String truncatedText = _getTruncatedTafseerText(\n      text: tafsir['tafsirText'] ?? '',\n      query: query,\n    );\n\n    final String tafseerName = _getTafseerName(dbFile);\n    mergedAyahTexts[key]![tafseerName] = truncatedText;\n  }\n\n  void _processUniqueTafseerJson(\n    Map<String, dynamic> tafsir,\n    String dbFile,\n    Map<String, Map<String, String>> mergedAyahTexts,\n    String query,\n  ) {\n    final int startAyah = tafsir['start'] ?? 1;\n    final int endAyah = tafsir['end'] ?? startAyah;\n    final int suraId = tafsir['suraId'] ?? 1;\n\n    for (int ayahId = startAyah; ayahId <= endAyah; ayahId++) {\n      final String key = '${suraId}_$ayahId';\n      mergedAyahTexts.putIfAbsent(key, () => {});\n\n      final String truncatedText = _getTruncatedTafseerText(\n        text: tafsir['tafsirText'] ?? '',\n        query: query,\n      );\n\n      mergedAyahTexts[key]![dbFile] = truncatedText;\n    }\n  }\n\n  String _getTruncatedTafseerText({\n    required String text,\n    required String query,\n  }) {\n    final int matchIndex = text.toLowerCase().indexOf(query.toLowerCase());\n    if (matchIndex == -1) return text;\n\n    int startIndex = (matchIndex - 100).clamp(0, text.length);\n    int endIndex = (matchIndex + query.length + 100).clamp(0, text.length);\n\n    // Adjust start index to include complete word\n    while (startIndex > 0 && text[startIndex] != ' ') {\n      startIndex--;\n    }\n\n    // Adjust end index to include complete word\n    while (endIndex < text.length && text[endIndex] != ' ') {\n      endIndex++;\n    }\n\n    final String prefix = startIndex > 0 ? '...' : '';\n    final String suffix = endIndex < text.length ? '...' : '';\n\n    return prefix + text.substring(startIndex, endIndex).trim() + suffix;\n  }\n\n  @override\n  Future<List<SearchResultEntity>> searchArabic({\n    required String query,\n    required SearchTypeEntity searchType,\n  }) async {\n    final String normalizedQuery = ArabicTextHighlighter.normalizeArabicString(query);\n    final List<AyahDatabaseTableData> results = await _quranDatabase.searchArabicText(\n      query: normalizedQuery,\n      searchType: searchType,\n    );\n\n    // Process results and get Arabic text for each result\n    final List<SearchResultEntity> searchResults = [];\n    for (final result in results) {\n      final arabicText = await _getArabicTextForSearch(result.surahId as int, result.ayahId as int);\n      searchResults.add(SearchResultEntity(\n        surahId: result.surahId as int,\n        ayahId: result.ayahId as int,\n        resultText: {'arabic': arabicText},\n      ));\n    }\n\n    return searchResults;\n  }\n\n  // Helper method to get Arabic text for search result\n  Future<String> _getArabicTextForSearch(int surahId, int ayahId) async {\n    final wordDbData = await _quranDatabase.getWordsByWordForSpecificAyah(surahId, ayahId);\n\n    // Convert to WordByWordEntity\n    final List<WordByWordEntity> words = wordDbData\n        .map((dbData) => WordByWordEntity(\n              surah: dbData.surah,\n              ayah: dbData.ayah,\n              word: dbData.word,\n              uthmani: dbData.uthmani,\n              indopak: dbData.indopak,\n              en: dbData.en,\n              bn: dbData.bn,\n              clean: dbData.clean,\n              juz: dbData.juz,\n              page: dbData.page,\n              hijb: dbData.hijb,\n              summary: dbData.summary,\n            ))\n        .toList();\n\n    if (words.isEmpty) return '';\n\n    // Get the script from settings (default to uthmani if not available)\n    const isUthmani = true; // Default to uthmani for search\n    return AyahEntity.getArabicTextFromWords(words, isUthmani);\n  }\n\n  // Cache for tafseer name mappings\n  static final Map<String, String> _tafseerNameCache = {};\n\n  String _getTafseerName(String fileName) {\n    // Return cached name if available\n    if (_tafseerNameCache.containsKey(fileName)) {\n      return _tafseerNameCache[fileName]!;\n    }\n\n    // Look up name and cache it\n    final String? name = locate<TafseerPresenter>().getNameOfTafseerFromFileName(fileName: fileName);\n\n    _tafseerNameCache[fileName] = name!;\n    return name;\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "info", "file_path": "Quran-Majeed/lib/data/repository/info/info_repository_impl.dart", "file_name": "info_repository_impl.dart", "line": 34, "line_from": 34, "line_to": 51, "snippet": "    required void Function(PromotionalMessageEntity?) onMessage,\n  }) async {\n    await _infoRemoteDataSource.getPromotionalMessage(\n      onMessage: (promotionalMessage) async {\n        final bool shouldPublish = await _infoLocalDataSource.shouldPublishPromotionalMessage(\n          notification: promotionalMessage,\n        );\n\n        if (!shouldPublish) {\n          onMessage(null);\n          return;\n        }\n\n        _notification = promotionalMessage;\n        onMessage(promotionalMessage);\n      },\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "info", "file_path": "Quran-Majeed/lib/data/repository/info/info_repository_impl.dart", "file_name": "info_repository_impl.dart", "line": 143, "line_from": 143, "line_to": 160, "snippet": "    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    try {\n      await _resourceRemoteDataSource.downloadResourceDatabase(\n        fileName: _infoDbFileName,\n        onProgress: onProgress,\n        cancelToken: cancelToken,\n      );\n    } catch (e) {\n      if (e is DioException && e.type == DioExceptionType.cancel) {\n        logDebugStatic('Info database download was cancelled', 'InfoRepositoryImpl');\n        rethrow;\n      }\n      logErrorStatic('Error downloading info database: $e', 'InfoRepositoryImpl');\n      rethrow;\n    }\n  }"}, {"structure_type": "function", "name": "downloadAudioFiles", "docstring": "", "module": "audio", "file_path": "Quran-Majeed/lib/data/repository/audio/audio_repository_impl.dart", "file_name": "audio_repository_impl.dart", "line": 26, "line_from": 26, "line_to": 234, "snippet": "  Future<void> downloadAudioFiles({\n    required int surahID,\n    required Reciter reciter,\n    void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    if (cancelToken.isCancelled) return;\n\n    try {\n      final String audioFile = CacheData.audioFiles[surahID]!.audioLink;\n      await _downloadSurahAudio(audioFile, surahID, reciter, onProgress, cancelToken);\n    } catch (e) {\n      if (e is DioException && e.type == DioExceptionType.cancel) {\n        await _audioLocalDataSource.removeAudioFileFromCache(surahID, ReciterMapper.toDatabase(reciter));\n      }\n      rethrow;\n    }\n  }\n\n  @override\n  Future<void> persistSurahAudioPath({\n    required List<int> surahs,\n    required Reciter reciter,\n  }) async {\n    String directoryPath = await getApplicationDirectoryPath();\n\n    for (int surah in surahs) {\n      final String generatedPath = await generateAudioFilePath(surah: surah, reciter: reciter);\n      final String savePath = p.join(directoryPath, generatedPath);\n      await _audioLocalDataSource.persistSurahAudioPath(surah, ReciterMapper.toDatabase(reciter), savePath);\n    }\n  }\n\n  @override\n  Future<AudioFile> getAudioFilesBySurahAndReciter({\n    required int surahNumber,\n    required Reciter reciter,\n  }) async {\n    return await _audioLocalDataSource.getAudioFilesBySurahAndReciter(surahNumber, ReciterMapper.toDatabase(reciter));\n  }\n\n  Future<void> _downloadSurahAudio(\n    String url,\n    int surah,\n    Reciter reciter,\n    void Function(int percentage)? onProgress,\n    CancelToken? cancelToken,\n  ) async {\n    if (cancelToken?.isCancelled ?? false) return;\n\n    try {\n      String filePath = await generateAudioFilePath(surah: surah, reciter: reciter);\n      await _audioRemoteDataSource.fetchAndDownloadAudio(\n        url: url,\n        filePath: filePath,\n        onProgress: onProgress!,\n        cancelToken: cancelToken,\n      );\n      if (!(cancelToken?.isCancelled ?? false)) {\n        await _audioLocalDataSource.persistSurahAudioPath(surah, ReciterMapper.toDatabase(reciter), filePath);\n      }\n    } catch (e) {\n      if (e is DioException && e.type == DioExceptionType.cancel) {\n        await _audioLocalDataSource.removeAudioFileFromCache(surah, ReciterMapper.toDatabase(reciter));\n      }\n      rethrow;\n    }\n  }\n\n  @override\n  Future<void> deleteAudioFilesBySurahAndReciter({\n    required int surahNumber,\n    required Reciter reciter,\n  }) async {\n    final String audioPath = await generateAudioFilePath(surah: surahNumber, reciter: reciter);\n    await _audioLocalDataSource.deleteAudioFilesBySurahAndReciter(\n        surahNumber, ReciterMapper.toDatabase(reciter), audioPath);\n  }\n\n  @override\n  Future<String> generateAudioFilePath({required int surah, required Reciter reciter}) async {\n    String directoryPath = p.join('audio', reciter.name);\n    return p.join(directoryPath, '$surah.mp3');\n  }\n\n  @override\n  Future<String> getAudioPath({required int surah, required Reciter reciter, bool isOnlineStream = false}) async {\n    if (isOnlineStream) {\n      final AudioFile audioFile = CacheData.audioFiles[surah]!;\n      return audioFile.audioLink;\n    }\n    return await _audioLocalDataSource.fetchLocalAudioPath(surah, ReciterMapper.toDatabase(reciter));\n  }\n\n  @override\n  Future<bool> isSurahAudioAvailable({required int surahNumber, required Reciter reciter}) =>\n      _audioLocalDataSource.checkIfSurahAudioDownloaded(surahNumber, ReciterMapper.toDatabase(reciter));\n\n  @override\n  Future<List<VerseTiming>> getVerseTimings({\n    required int surahID,\n    required int reciterID,\n  }) async {\n    try {\n      List<VerseTiming> verseTimings = await _audioLocalDataSource.getVerseTimingsBySurahId(reciterID, surahID);\n      return verseTimings;\n    } catch (e) {\n      logErrorStatic('Error in getVerseTimings: $e', 'AudioRepositoryImpl');\n      rethrow;\n    }\n  }\n\n  @override\n  Future<void> playVerseWithDelay(VerseTiming verseTiming, Duration delay) async {\n    try {\n      await AudioPlayerService.playVerseAfterDelay(verseTiming, delay);\n    } catch (e) {\n      logErrorStatic('Error in playVerseWithDelay: $e', 'AudioRepositoryImpl');\n      rethrow;\n    }\n  }\n\n  @override\n  Future<void> playSurahPlaylist() async {\n    await AudioPlayerService.startPlaylistPlayback();\n  }\n\n  @override\n  Future<void> seekAudio(Duration position) async {\n    await AudioPlayerService.seekAudioPosition(position);\n  }\n\n  @override\n  Future<void> addToPlayl1ist({\n    required String audioPath,\n    required String title,\n    bool isOnlineStream = false,\n  }) async {\n    await AudioPlayerService.enqueueAudioToPlaylist(\n      audioPath: audioPath,\n      title: title,\n      isOnlineStream: isOnlineStream,\n    );\n  }\n\n  @override\n  Future<void> clearPlaylist() async {\n    await AudioPlayerService.clearPlaylist();\n  }\n\n  @override\n  Future<void> stopAudio() async {\n    await AudioPlayerService.stopPlayback();\n  }\n\n  @override\n  Future<void> pausePlayback() async {\n    await AudioPlayerService.pausePlayback();\n  }\n\n  @override\n  Future<void> resumePlayback() async {\n    await AudioPlayerService.resumePlayback();\n  }\n\n  @override\n  Future<void> playWordAudio({required WordByWordEntity word}) async {\n    try {\n      if (word.surah == null || word.ayah == null || word.word == null) return;\n\n      final String surahFormatted = word.surah.toString().padLeft(3, '0');\n      final String ayahFormatted = word.ayah.toString().padLeft(3, '0');\n      final String wordFormatted = word.word.toString().padLeft(3, '0');\n\n      final String audioUrl = 'https://verses.quran.com/wbw/${surahFormatted}_${ayahFormatted}_$wordFormatted.mp3';\n\n      await AudioPlayerService.stopPlayback();\n\n      final player = AudioPlayer();\n      try {\n        await player.setAudioSource(\n          AudioSource.uri(\n            Uri.parse(audioUrl),\n            tag: MediaItem(\n              id: audioUrl,\n              title: 'Word Audio',\n              album: 'Quran Majeed',\n            ),\n          ),\n        );\n\n        await player.play();\n\n        player.playerStateStream.listen((state) {\n          if (state.processingState == ProcessingState.completed) {\n            player.dispose();\n          }\n        });\n      } catch (e) {\n        await player.dispose();\n        logErrorStatic('Error playing word audio: $e', 'AudioRepositoryImpl');\n        rethrow;\n      }\n    } catch (e) {\n      logErrorStatic('Error in audio playback: $e', 'AudioRepositoryImpl');\n      rethrow;\n    }\n  }\n}"}, {"structure_type": "function", "name": "getSelectedTafseers", "docstring": "", "module": "tafseer", "file_path": "Quran-Majeed/lib/data/repository/tafseer/tafseer_repository_impl.dart", "file_name": "tafseer_repository_impl.dart", "line": 30, "line_from": 30, "line_to": 241, "snippet": "  Future<Set<String>> getSelectedTafseers() async {\n    final selectedTafseersSerialised = localCacheService.getData(key: CacheKeys.selectedTafseer);\n    if (selectedTafseersSerialised == null) return {};\n    final Set<String> selectedTafseers = Set<String>.from(jsonDecode(selectedTafseersSerialised));\n\n    // Check if the default tafseer should be included\n    final bool includeDefault = localCacheService.getData(key: CacheKeys.includeDefaultTafseer) ?? true;\n    if (includeDefault && !selectedTafseers.contains('en_kathir')) {\n      selectedTafseers.add('en_kathir');\n    }\n\n    return selectedTafseers;\n  }\n\n  @override\n  Future<void> saveSelectedTafseers(Set<String> selectedTafseers) async {\n    final serialisedString = jsonEncode(selectedTafseers.toList());\n    await localCacheService.saveData(key: CacheKeys.selectedTafseer, value: serialisedString);\n\n    // Update the flag for including the default tafseer\n    final bool includeDefault = selectedTafseers.contains('en_kathir');\n    await localCacheService.saveData(key: CacheKeys.includeDefaultTafseer, value: includeDefault);\n  }\n\n  @override\n  Future<void> selectTafseer({\n    required TTDbFileModel file,\n    required int surahID,\n    required TafseerType tafseerType,\n  }) async {\n    final String dbPath = await getDatabaseFilePath(file.fileName);\n    final TafseerDatabase database = TafseerDatabase(File(dbPath));\n    try {\n      switch (tafseerType) {\n        case TafseerType.common:\n          final List<CommonTafseerTableData> tafseer =\n              await tafseerLocalDataSource.getCommonTafseerData(surahID: surahID, database: database);\n          CacheData.tafseerCache[file.fileName] = await _convertCommonTafseerToMap(tafseer);\n     \n          break;\n        case TafseerType.unique:\n          final List<UniqueTafseerTableData> tafseer =\n              await tafseerLocalDataSource.getUniqueTafseerData(surahID: surahID, database: database);\n          CacheData.tafseerCache[file.fileName] = await _convertUniqueTafseerToMap(tafseer, surahID);\n        \n          break;\n      }\n    } catch (e) {\n      logErrorStatic(\"Error in selectTafseer: $e\", \"TafseerRepositoryImpl\");\n      rethrow;\n    }\n  }\n\n  Future<Map<int, Map<int, String>>> _convertCommonTafseerToMap(List<CommonTafseerTableData> tafseer) async {\n    List<Map<String, dynamic>> tafseerData = tafseer\n        .map((item) => {\n              'suraId': item.suraId,\n              'ayahId': item.ayahId,\n              'tafsirText': item.tafsirText,\n            })\n        .toList();\n    return compute(convertCommonTafseerToMapIsolate, tafseerData);\n  }\n\n  Future<Map<int, Map<int, String>>> _convertUniqueTafseerToMap(\n      List<UniqueTafseerTableData> tafseer, int surahId) async {\n    List<Map<String, dynamic>> tafseerData = tafseer\n        .map((item) => {\n              'start': item.start,\n              'end': item.end,\n              'tafsirText': item.tafsirText,\n            })\n        .toList();\n    return compute(\n      convertUniqueTafseerToMapIsolate,\n      {'tafseerData': tafseerData, 'surahId': surahId},\n    );\n  }\n\n  @override\n  List<String> getAvailableTafseers() {\n    final availableTafseersSerialised = localCacheService.getData(key: CacheKeys.availableTafseer);\n    Set<String> availableTafseers;\n\n    if (availableTafseersSerialised == null) {\n      // Initialize with empty set since there are no default tafseers\n      availableTafseers = {};\n      final String serializedString = jsonEncode([]);\n      localCacheService.saveData(key: CacheKeys.availableTafseer, value: serializedString);\n    } else {\n      availableTafseers = Set.from(_convertSerialisedStringToAvailableeTafseers(availableTafseersSerialised));\n      // No need to include default tafseers since they don't exist anymore\n    }\n\n    return availableTafseers.toList();\n  }\n\n  @override\n  Future<void> saveAvailableTafseers({required Set<String> availableTafseers, required String newItem}) async {\n    availableTafseers.add(newItem);\n    final String serialisedString = jsonEncode(availableTafseers.toList());\n    await localCacheService.saveData(key: CacheKeys.availableTafseer, value: serialisedString);\n  }\n\n  @override\n  Future<void> deleteAvailableTafseer({required TTDbFileModel file}) async {\n    final availableeTafseersSerialised = localCacheService.getData(key: CacheKeys.availableTafseer);\n    if (availableeTafseersSerialised == null) return;\n    final List<String> availableeTafseers = _convertSerialisedStringToAvailableeTafseers(availableeTafseersSerialised);\n    availableeTafseers.remove(file.fileName);\n    final String serialisedString = jsonEncode(availableeTafseers);\n    await localCacheService.saveData(key: CacheKeys.availableTafseer, value: serialisedString);\n  }\n\n  @override\n  Future<void> deleteTafseerDatabase({required String fileName}) async {\n    final dbFile = File(await getDatabaseFilePath(fileName));\n    if (await dbFile.exists()) {\n      try {\n        await dbFile.delete();\n      } catch (e) {\n        logErrorStatic(\"Error deleting database: $e\", \"TranslationRepositoryImpl\");\n        rethrow;\n      }\n    }\n  }\n\n  @override\n  Future<void> saveAvailableItemsCount(int count) async {\n    await localCacheService.saveData(key: 'available_items_count_tafseer', value: count.toString());\n  }\n\n  @override\n  Future<int> fetchAvailableItemsCount() async {\n    final countString = localCacheService.getData(key: 'available_items_count_tafseer');\n    return countString != null ? int.parse(countString) : 20; // default to 20 if not found\n  }\n\n\n  List<String> _convertSerialisedStringToAvailableeTafseers(String serialisedString) =>\n      jsonDecode(serialisedString).cast<String>();\n\n  @override\n  Future<void> getTafseer({\n    required TTDbFileModel file,\n    void Function(int percentage)? onProgress,\n    required int surahID,\n    required TafseerType tafseerType,\n    required CancelToken cancelToken,\n  }) async {\n    final File dbFile = File(await getDatabaseFilePath(file.fileName));\n    final bool exists = await dbFile.exists();\n\n    // All tafseers need to be downloaded - no more default ones\n    if (!exists && !cancelToken.isCancelled) {\n      await _downloadDatabaseFile(\n        fileName: file.fileName,\n        downloadLink: file.link,\n        onProgress: onProgress,\n        cancelToken: cancelToken,\n      );\n    }\n\n    if (exists || !cancelToken.isCancelled) {\n      await selectTafseer(file: file, surahID: surahID, tafseerType: tafseerType);\n    }\n  }\n\n  Future<void> _downloadDatabaseFile({\n    required String fileName,\n    required String downloadLink,\n    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    try {\n      await remoteDataSource.downloadDatabase(\n        fileName: fileName,\n        url: downloadLink,\n        onProgress: onProgress,\n        cancelToken: cancelToken,\n      );\n    } catch (e) {\n      if (e is DioException && e.type == DioExceptionType.cancel) return;\n      logErrorStatic(\"Error downloading database file: $e\", \"TafseerRepositoryImpl\");\n    }\n  }\n\n  @override\n  Future<void> saveSelectedTabIndex(int index) async {\n    await localCacheService.saveData(key: CacheKeys.selectedTafseerTabIndex, value: index.toString());\n  }\n\n  @override\n  Future<int> getSelectedTabIndex() async {\n    final selectedTabIndex = localCacheService.getData(key: CacheKeys.selectedTafseerTabIndex);\n    return selectedTabIndex == null ? 0 : int.parse(selectedTabIndex);\n  }\n}\n\n// For common tafseer\nMap<int, Map<int, String>> convertCommonTafseerToMapIsolate(List<Map<String, dynamic>> tafseerData) {\n  Map<int, Map<int, String>> result = {};\n  for (var item in tafseerData) {\n    int? suraId = item['suraId'];\n    int? ayahId = item['ayahId'];\n    String? tafsirText = item['tafsirText'];\n    if (suraId != null && ayahId != null) {\n      result.putIfAbsent(suraId, () => {}).putIfAbsent(ayahId, () => tafsirText ?? \"No tafseer is found for this ayah\");\n    }\n  }\n  return result;\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "text_mushaf", "file_path": "Quran-Majeed/lib/data/repository/text_mushaf/text_mushaf_repository_impl.dart", "file_name": "text_mushaf_repository_impl.dart", "line": 33, "line_from": 33, "line_to": 56, "snippet": "    void Function(int received, int total)? onProgress,\n    CancelToken? cancelToken,\n  }) async {\n    final bool dbExists = await isDatabaseAvailable();\n\n    if (!dbExists) {\n      final File dbFile = await _localDataSource.getTextMushafDatabaseFile();\n      final Directory parentDir = dbFile.parent;\n      if (!await parentDir.exists()) {\n        await parentDir.create(recursive: true);\n      }\n\n      final token = cancelToken ?? CancelToken();\n\n      await _remoteDataSource.downloadTextMushafDatabase(\n        url: _dbDownloadUrl,\n        dbFile: dbFile,\n        onProgress: onProgress,\n        cancelToken: token,\n      );\n    } else {\n      onProgress?.call(100, 100);\n    }\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "text_mushaf", "file_path": "Quran-Majeed/lib/data/repository/text_mushaf/text_mushaf_repository_impl.dart", "file_name": "text_mushaf_repository_impl.dart", "line": 130, "line_from": 130, "line_to": 148, "snippet": "    void Function(int received, int total)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    final String fontDir = await getFontDirectoryPath();\n    final String fontPath = '$fontDir/${FontConstants.getFontFileName(pageNumber)}';\n\n    final File fontFile = File(fontPath);\n    if (await fontFile.exists()) {\n      onProgress?.call(100, 100);\n      return;\n    }\n\n    await _remoteDataSource.downloadFontFile(\n      pageNumber: pageNumber,\n      savePath: fontPath,\n      onProgress: onProgress,\n      cancelToken: cancelToken,\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "text_mushaf", "file_path": "Quran-Majeed/lib/data/repository/text_mushaf/text_mushaf_repository_impl.dart", "file_name": "text_mushaf_repository_impl.dart", "line": 153, "line_from": 153, "line_to": 170, "snippet": "    void Function(int completed, int total)? onBatchProgress,\n    void Function(int pageNumber, double progress)? onFontProgress,\n    required CancelToken cancelToken,\n  }) async {\n    if (pageNumbers.isEmpty) {\n      return;\n    }\n\n    final String fontDir = await getFontDirectoryPath();\n\n    await _remoteDataSource.downloadFontBatch(\n      pageNumbers: pageNumbers,\n      saveDir: fontDir,\n      onBatchProgress: onBatchProgress,\n      onFontProgress: onFontProgress,\n      cancelToken: cancelToken,\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "dua", "file_path": "Quran-Majeed/lib/data/repository/dua/dua_repository_impl.dart", "file_name": "dua_repository_impl.dart", "line": 54, "line_from": 54, "line_to": 71, "snippet": "    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    try {\n      await _remoteDataSource.downloadResourceDatabase(\n        fileName: _duaDbFileName,\n        onProgress: onProgress,\n        cancelToken: cancelToken,\n      );\n    } catch (e) {\n      if (e is DioException && e.type == DioExceptionType.cancel) {\n        logDebugStatic('Dua database download was cancelled', 'DuaRepositoryImpl');\n        rethrow;\n      }\n      logErrorStatic('Error downloading dua database: $e', 'DuaRepositoryImpl');\n      rethrow;\n    }\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "sealed_classes", "file_path": "Quran-Majeed/lib/data/sealed_classes/surah_ayah_presenter.dart", "file_name": "surah_ayah_presenter.dart", "line": 9, "line_from": 9, "line_to": 36, "snippet": "  void Function(String)? get onSurahSearchChanged;\n  TextEditingController get surahNameSearchController;\n\n  void Function(String)? get onAyahSearchChanged;\n  TextEditingController get ayahNumberSearchController;\n\n  factory SurahAyahPresenter.ayah(AyahPresenter presenter) = AyahSurahAyahPresenter;\n  factory SurahAyahPresenter.audio(AudioPresenter presenter) = AudioSurahAyahPresenter;\n  factory SurahAyahPresenter.memorization(MemorizationPresenter presenter) = MemorizationSurahAyahPresenter;\n}\n\nclass AyahSurahAyahPresenter extends SurahAyahPresenter {\n  final AyahPresenter presenter;\n\n  const AyahSurahAyahPresenter(this.presenter);\n\n  @override\n  void Function(String)? get onSurahSearchChanged => presenter.onSurahSearchChanged;\n\n  @override\n  TextEditingController get surahNameSearchController => presenter.surahNameSearchController;\n\n  @override\n  void Function(String)? get onAyahSearchChanged => presenter.onAyahSearchChanged;\n\n  @override\n  TextEditingController get ayahNumberSearchController => presenter.ayahNumberSearchController;\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "sealed_classes", "file_path": "Quran-Majeed/lib/data/sealed_classes/surah_ayah_presenter.dart", "file_name": "surah_ayah_presenter.dart", "line": 43, "line_from": 43, "line_to": 70, "snippet": "  void Function(String)? get onSurahSearchChanged => presenter.onSurahSearchChanged;\n\n  @override\n  TextEditingController get surahNameSearchController => presenter.surahNameSearchController;\n\n  @override\n  void Function(String)? get onAyahSearchChanged => presenter.onAyahSearchChanged;\n\n  @override\n  TextEditingController get ayahNumberSearchController => presenter.ayahNumberSearchController;\n}\n\nclass MemorizationSurahAyahPresenter extends SurahAyahPresenter {\n  final MemorizationPresenter presenter;\n  const MemorizationSurahAyahPresenter(this.presenter);\n\n  @override\n  void Function(String)? get onSurahSearchChanged => presenter.onSurahSearchChanged;\n\n  @override\n  TextEditingController get surahNameSearchController => presenter.surahNameSearchController;\n\n  @override\n  void Function(String)? get onAyahSearchChanged => presenter.onAyahSearchChanged;\n\n  @override\n  TextEditingController get ayahNumberSearchController => presenter.ayahNumberSearchController;\n}"}, {"structure_type": "function", "name": "getNuzulBySurahId", "docstring": "", "module": "nuzul", "file_path": "Quran-Majeed/lib/data/data_sources/local_data_source/nuzul/nuzul_local_data_source.dart", "file_name": "nuzul_local_data_source.dart", "line": 7, "line_from": 7, "line_to": 106, "snippet": "  Future<List<NuzulDatabaseTableData>> getNuzulBySurahId(int surahId);\n  Future<List<NuzulDatabaseTableData>> getAllNuzul();\n  Future<List<int>> getUniqueNuzulSurahIds();\n}\n\nclass NuzulLocalDataSourceImpl implements NuzulLocalDataSource {\n  static const String _tag = 'NuzulLocalDataSourceImpl';\n  final QuranDatabase _database;\n  final String _externalDbName = 'nuzul.db'; // Using the same DB file as QuranInfo\n  ExternalDbService? _externalDbService;\n  bool _useExternalDb = true;\n\n  NuzulLocalDataSourceImpl({QuranDatabase? database}) : _database = database ?? locate<QuranDatabase>();\n\n  Future<void> _initializeExternalDb() async {\n    if (_externalDbService == null) {\n      try {\n        // First check if the external database exists\n        final exists = await ExternalDbFactory.doesExternalDbExist(_externalDbName);\n        if (!exists) {\n         \n          _useExternalDb = false;\n          return;\n        }\n\n        // If it exists, try to get the service\n        _externalDbService = await ExternalDbFactory.getService(_externalDbName);\n      } catch (e) {\n        Logger.error('Error initializing external database: $e', _tag);\n        _useExternalDb = false; // Fall back to drift tables if external DB not available\n      }\n    }\n  }\n\n  @override\n  Future<List<NuzulDatabaseTableData>> getNuzulBySurahId(int surahId) async {\n    // Try to load from external DB first\n    if (_useExternalDb) {\n      try {\n        await _initializeExternalDb();\n        if (_externalDbService != null) {\n          final dataList = await _externalDbService!.getNuzulBySurahId(surahId);\n          if (dataList.isNotEmpty) {\n            return dataList.map((data) => _externalDbService!.mapToNuzulDatabaseTableData(data)).toList();\n          }\n        }\n      } catch (e) {\n        Logger.error('Error getting Nuzul from external DB: $e', _tag);\n        _useExternalDb = false; // Fall back to drift tables if there's an error\n      }\n    }\n\n    // Fall back to using drift tables\n    return await _database.getNuzulBySurahId(surahId);\n  }\n\n  @override\n  Future<List<NuzulDatabaseTableData>> getAllNuzul() async {\n    // Try to load from external DB first\n    if (_useExternalDb) {\n      try {\n        await _initializeExternalDb();\n        if (_externalDbService != null) {\n          final dataList = await _externalDbService!.getAllNuzul();\n          if (dataList.isNotEmpty) {\n            return dataList.map((data) => _externalDbService!.mapToNuzulDatabaseTableData(data)).toList();\n          }\n        }\n      } catch (e) {\n        Logger.error('Error getting all Nuzul from external DB: $e', _tag);\n        _useExternalDb = false; // Fall back to drift tables if there's an error\n      }\n    }\n\n    // Fall back to using drift tables\n    return await _database.getAllNuzul();\n  }\n\n  @override\n  Future<List<int>> getUniqueNuzulSurahIds() async {\n    // Try to load from external DB first\n    if (_useExternalDb) {\n      try {\n        await _initializeExternalDb();\n        if (_externalDbService != null) {\n          final surahIds = await _externalDbService!.getUniqueNuzulSurahIds();\n          if (surahIds.isNotEmpty) {\n            return surahIds;\n          }\n        }\n      } catch (e) {\n        Logger.error('Error getting unique Nuzul surah IDs from external DB: $e', _tag);\n        _useExternalDb = false; // Fall back to drift tables if there's an error\n      }\n    }\n\n    // Fall back to using drift tables\n    return await _database.getUniqueNuzulSurahIds();\n  }\n}"}, {"structure_type": "function", "name": "getGrammarSummaryData", "docstring": "Get grammar summary data for a specific ayah and word", "module": "grammar", "file_path": "Quran-Majeed/lib/data/data_sources/local_data_source/grammar/grammar_local_data_source.dart", "file_name": "grammar_local_data_source.dart", "line": 7, "line_from": 7, "line_to": 75, "snippet": "  Future<GrammarSummaryData?> getGrammarSummaryData({\n    required int surahId,\n    required int ayahId,\n    required int wordIndex,\n  });\n}\n\nclass GrammarLocalDataSourceImpl implements GrammarLocalDataSource {\n  static const String _tag = 'GrammarLocalDataSourceImpl';\n  final String _externalDbName = 'same_exact_summary.db';\n  ExternalDbService? _externalDbService;\n  bool _useExternalDb = true;\n\n  Future<void> _initializeExternalDb() async {\n    if (_externalDbService == null) {\n      try {\n        // First check if the external database exists\n        final exists = await ExternalDbFactory.doesExternalDbExist(_externalDbName);\n        if (!exists) {\n          _useExternalDb = false;\n          return;\n        }\n\n        // If it exists, try to get the service\n        _externalDbService = await ExternalDbFactory.getService(_externalDbName);\n      } catch (e) {\n        Logger.error('Error initializing external database: $e', _tag);\n        _useExternalDb = false; // Fall back to drift tables if external DB not available\n      }\n    }\n  }\n\n  @override\n  Future<GrammarSummaryData?> getGrammarSummaryData({\n    required int surahId,\n    required int ayahId,\n    required int wordIndex,\n  }) async {\n    // Try to load from external DB first\n    if (_useExternalDb) {\n      try {\n        await _initializeExternalDb();\n        if (_externalDbService != null) {\n          final data = await _externalDbService!.getGrammarSummaryData(\n            surahId: surahId,\n            ayahId: ayahId,\n            wordIndex: wordIndex,\n          );\n          if (data != null) {\n            return _externalDbService!.mapToGrammarSummaryTableData(data);\n          }\n        }\n      } catch (e) {\n        Logger.error('Error getting grammar summary from external DB: $e', _tag);\n        _useExternalDb = false; // Fall back to drift tables if there's an error\n      }\n    }\n\n    // Fall back to using drift tables\n    try {\n      // Since we haven't implemented drift tables for this functionality yet,\n      // we'll just return null\n      return null;\n    } catch (e) {\n      Logger.error('Error getting grammar summary from drift tables: $e', _tag);\n      return null;\n    }\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "user", "file_path": "Quran-Majeed/lib/data/data_sources/local_data_source/user/user_data_local_data_source.dart", "file_name": "user_data_local_data_source.dart", "line": 168, "line_from": 168, "line_to": 172, "snippet": "    required void Function() onBookmarkFolderDeleted,\n  }) async {\n    await _userDataStorage.deleteBookmarkFolderByName(folderName: folderName);\n    onBookmarkFolderDeleted();\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "user", "file_path": "Quran-Majeed/lib/data/data_sources/local_data_source/user/user_data_local_data_source.dart", "file_name": "user_data_local_data_source.dart", "line": 272, "line_from": 272, "line_to": 332, "snippet": "    required void Function(List<BookmarkEntity>) onBookmarksSaved,\n  }) async {\n    // Get current bookmarks for this ayah\n    final List<BookmarkData> bookmarkDataList = await _userDataStorage.getBookmarkFolderBySurahAndAyah(\n      surahID: surahID,\n      ayahID: ayahID,\n    );\n\n    // Convert BookmarkData to BookmarkEntity\n    final List<BookmarkEntity> currentBookmarks = await bookmarkDataList.toBookmarkEntities();\n\n    // Create sets of folder names for comparison\n    final Set<String> currentFolderNames = currentBookmarks.map((b) => b.folderName).toSet();\n    final Set<String> newFolderNames = bookmarks.map((b) => b.folderName).toSet();\n\n    // Find folders to remove (in current but not in new)\n    final Set<String> foldersToRemove = currentFolderNames.difference(newFolderNames);\n\n    // For each folder that would be removed, check if it would become empty\n    for (final folderName in foldersToRemove) {\n      // Remove the specific bookmark from this folder\n      await _userDataStorage.deleteAyahFromBookmarkFolder(\n        surahID: surahID,\n        ayahID: ayahID,\n        folderName: folderName,\n      );\n\n      // Check if this folder would become empty\n      final List<BookmarkData> folderBookmarks = await _userDataStorage.getBookmarksByFolderName(\n        folderName: folderName,\n      ) as List<BookmarkData>;\n\n      // If folder would become empty, create a placeholder bookmark to preserve the folder\n      if (folderBookmarks.isEmpty) {\n        // Get the folder color from the original bookmark\n        final String folderColor =\n            getHexFromColor(currentBookmarks.firstWhere((b) => b.folderName == folderName).color);\n\n        // Create a placeholder bookmark with special IDs to mark it as a placeholder\n        // Using surahID=0, ayahID=0 to indicate this is a placeholder\n        await _userDataStorage.addAyahToBookmarkFolder(\n          surahID: 0,\n          ayahID: 0,\n          folderName: folderName,\n          color: folderColor,\n        );\n      }\n    }\n\n    // Add new bookmarks\n    final List<BookmarkEntity> savedBookmarks = List.empty(growable: true);\n    await Future.forEach(\n      bookmarks,\n      (bookmark) async => catchFutureOrVoid(\n        () => addAyahToBookmarkFolder(\n          bookmark: bookmark,\n        ),\n      ),\n    );\n    onBookmarksSaved(savedBookmarks);\n  }"}, {"structure_type": "function", "name": "getQuranInfoBySurahId", "docstring": "", "module": "info", "file_path": "Quran-Majeed/lib/data/data_sources/local_data_source/info/quran_info_local_data_source.dart", "file_name": "quran_info_local_data_source.dart", "line": 8, "line_from": 8, "line_to": 64, "snippet": "  Future<QuranInfoTableData?> getQuranInfoBySurahId(int surahId);\n\n}\n\nclass QuranInfoLocalDataSourceImpl implements QuranInfoLocalDataSource {\n  static const String _tag = 'QuranInfoLocalDataSourceImpl';\n  final QuranDatabase _database;\n  final String _externalDbName = 'info.db';\n  ExternalDbService? _externalDbService;\n  bool _useExternalDb = true; // Flag to control which data source to use\n\n\n  QuranInfoLocalDataSourceImpl({QuranDatabase? database}) : _database = database ?? locate<QuranDatabase>();\n\n \n\n  Future<void> _initializeExternalDb() async {\n    if (_externalDbService == null) {\n      try {\n\n        // If it exists and is valid, try to get the service\n        _externalDbService = await ExternalDbFactory.getService(_externalDbName);\n       \n      } catch (e) {\n        Logger.error('Error initializing external database: $e', _tag);\n        _useExternalDb = false; // Fall back to drift tables if external DB not available\n      }\n    }\n  }\n\n  @override\n  Future<QuranInfoTableData?> getQuranInfoBySurahId(int surahId) async {\n    // Try to load from external DB first\n    if (_useExternalDb) {\n      try {\n        await _initializeExternalDb();\n        if (_externalDbService != null) {\n          final data = await _externalDbService!.getQuranInfoBySurahId(surahId);\n          if (data != null) {\n            return _externalDbService!.mapToQuranInfoTableData(data);\n          }\n        }\n      } catch (e) {\n        Logger.error('Error getting QuranInfo from external DB: $e', _tag);\n        _useExternalDb = false; // Fall back to drift tables if there's an error\n      }\n    }\n\n    // Fall back to using drift tables if external DB is not available or has an error\n    try {\n      return await _database.getQuranInfoBySurahId(surahId);\n    } catch (e) {\n      Logger.error('Error getting QuranInfo from drift tables: $e', _tag);\n      return null;\n    }\n  }\n}"}, {"structure_type": "function", "name": "getDuasByCategoryId", "docstring": "Get duas by category ID", "module": "dua", "file_path": "Quran-Majeed/lib/data/data_sources/local_data_source/dua/dua_local_data_source.dart", "file_name": "dua_local_data_source.dart", "line": 9, "line_from": 9, "line_to": 65, "snippet": "  Future<List<DuaEntity>> getDuasByCategoryId(int categoryId);\n}\n\nclass DuaLocalDataSourceImpl implements DuaLocalDataSource {\n  static const String _tag = 'DuaLocalDataSourceImpl';\n  final QuranDatabase _database;\n  final String _externalDbName = 'dua.db';\n  ExternalDbService? _externalDbService;\n  bool _useExternalDb = true;\n\n  DuaLocalDataSourceImpl({QuranDatabase? database}) : _database = database ?? locate<QuranDatabase>();\n\n  Future<void> _initializeExternalDb() async {\n    if (_externalDbService == null) {\n      try {\n        // First check if the external database exists\n        final exists = await ExternalDbFactory.doesExternalDbExist(_externalDbName);\n        if (!exists) {\n          _useExternalDb = false;\n          return;\n        }\n\n        // If it exists, try to get the service\n        _externalDbService = await ExternalDbFactory.getService(_externalDbName);\n      } catch (e) {\n        Logger.error('Error initializing external database: $e', _tag);\n        _useExternalDb = false; // Fall back to drift tables if external DB not available\n      }\n    }\n  }\n\n  @override\n  Future<List<DuaEntity>> getDuasByCategoryId(int categoryId) async {\n    // Try to load from external DB first\n    if (_useExternalDb) {\n      try {\n        await _initializeExternalDb();\n        if (_externalDbService != null) {\n          final dataList = await _externalDbService!.getDuasByCategoryId(categoryId);\n          if (dataList.isNotEmpty) {\n            return dataList.map((data) {\n              final duaData = _externalDbService!.mapToDuaDatabaseTableData(data);\n              return DuaEntity.fromDatabaseModel(duaData);\n            }).toList();\n          }\n        }\n      } catch (e) {\n        Logger.error('Error getting Duas from external DB: $e', _tag);\n        _useExternalDb = false; // Fall back to drift tables if there's an error\n      }\n    }\n\n    // Fall back to using drift tables\n    final databaseDuas = await _database.getDuasByCategoryId(categoryId);\n    return databaseDuas.map((dua) => DuaEntity.fromDatabaseModel(dua)).toList();\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "network", "file_path": "Quran-Majeed/lib/data/data_sources/remote_data_source/network/file_downloader.dart", "file_name": "file_downloader.dart", "line": 13, "line_from": 13, "line_to": 28, "snippet": "    required void Function(int) onProgress,\n    CancelToken? cancelToken,\n  }) async {\n    // Check if savePath is an absolute path\n    if (savePath.startsWith('/')) {\n      // It's already an absolute path, use it directly\n      return await _downloadWithProgress(\n          url: url, filePath: savePath, onProgress: onProgress, cancelToken: cancelToken);\n    } else {\n      // It's a relative path, prepend the application directory path\n      String directoryPath = await getApplicationDirectoryPath();\n      String filePath = \"$directoryPath/$savePath\";\n      return await _downloadWithProgress(\n          url: url, filePath: filePath, onProgress: onProgress, cancelToken: cancelToken);\n    }\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "network", "file_path": "Quran-Majeed/lib/data/data_sources/remote_data_source/network/file_downloader.dart", "file_name": "file_downloader.dart", "line": 33, "line_from": 33, "line_to": 61, "snippet": "    required void Function(int) onProgress,\n    CancelToken? cancelToken,\n  }) async {\n    try {\n      // Ensure the directory exists\n      final directory = Directory(File(filePath).parent.path);\n      if (!await directory.exists()) {\n        await directory.create(recursive: true);\n      }\n\n      await DioClient.downloadFile(\n        url,\n        filePath,\n        onReceiveProgress: (received, total) {\n          if (total != -1) {\n            int percentage = ((received / total) * 100).floor();\n            onProgress(percentage);\n          }\n        },\n        cancelToken: cancelToken,\n      );\n\n      return filePath;\n    } catch (e) {\n      if (e is DioException && e.type == DioExceptionType.cancel) rethrow;\n      Logger.error(\"Error downloading file: $e\", _tag);\n      rethrow;\n    }\n  }"}, {"structure_type": "function", "name": "[];", "docstring": "", "module": "network", "file_path": "Quran-Majeed/lib/data/data_sources/remote_data_source/network/dio_client.dart", "file_name": "dio_client.dart", "line": 76, "line_from": 76, "line_to": 87, "snippet": "      final List<Future<Response>> downloadFutures = [];\n      for (int i = 0; i < urls.length; i++) {\n        downloadFutures.add(_dio.download(urls[i], savePaths[i],\n            cancelToken: cancelToken, onReceiveProgress: onReceiveProgress));\n      }\n      final List<Response> responses = await Future.wait(downloadFutures);\n      return responses;\n    } on DioException catch (e) {\n      // Handle DioException\n      logErrorStatic('Error in downloading multiple files: $e', 'DioClient');\n      rethrow;\n    }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "info", "file_path": "Quran-Majeed/lib/data/data_sources/remote_data_source/info/info_remote_data_source.dart", "file_name": "info_remote_data_source.dart", "line": 14, "line_from": 14, "line_to": 26, "snippet": "    required void Function(PromotionalMessageEntity) onMessage,\n  }) async {\n    await _backendAsAService.getRemoteNotice(\n      onNotification: (map) async {\n        await catchFutureOrVoid(() async {\n          final Map<String, Object?> remoteNoticeMap = map.map(MapEntry.new);\n          final PromotionalMessageEntity promotionalMessage =\n              await convertJsonMapToPromotionalMessage(map: remoteNoticeMap);\n          onMessage(promotionalMessage);\n        });\n      },\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "audio", "file_path": "Quran-Majeed/lib/data/data_sources/remote_data_source/audio/audio_remote_data_source.dart", "file_name": "audio_remote_data_source.dart", "line": 10, "line_from": 10, "line_to": 19, "snippet": "    required void Function(int percentage) onProgress,\n    CancelToken? cancelToken,\n  }) async {\n    return await _fileDownloader.downloadFile(\n      url: url,\n      savePath: filePath,\n      onProgress: (int progress) => onProgress(progress),\n      cancelToken: cancelToken,\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "translation_and_tafseer", "file_path": "Quran-Majeed/lib/data/data_sources/remote_data_source/translation_and_tafseer/translation_tafseer_remote_data_source.dart", "file_name": "translation_tafseer_remote_data_source.dart", "line": 10, "line_from": 10, "line_to": 20, "snippet": "    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    // Call the downloadFile method from the FileDownloader class\n    await _fileDownloader.downloadFile(\n      url: url,\n      savePath: fileName,\n      onProgress: (int percentage) => onProgress?.call(percentage),\n      cancelToken: cancelToken,\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "word_by_word", "file_path": "Quran-Majeed/lib/data/data_sources/remote_data_source/word_by_word/word_by_word_remote_data_source.dart", "file_name": "word_by_word_remote_data_source.dart", "line": 10, "line_from": 10, "line_to": 19, "snippet": "    required void Function(int percentage) onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    await _fileDownloader.downloadFile(\n      url: url,\n      savePath: fileName,\n      onProgress: onProgress,\n      cancelToken: cancelToken,\n    );\n  }"}, {"structure_type": "function", "name": "downloadMushaf", "docstring": "", "module": "mushaf", "file_path": "Quran-Majeed/lib/data/data_sources/remote_data_source/mushaf/mushaf_remote_data_source.dart", "file_name": "mushaf_remote_data_source.dart", "line": 8, "line_from": 8, "line_to": 49, "snippet": "  Future<void> downloadMushaf({\n    required String mushafName,\n    ProgressCallback? onProgress,\n    CancelToken? cancelToken,\n  });\n}\n\nclass MushafRemoteDataSource implements IMushafRemoteDataSource {\n  static const String baseUrl = 'https://download.quranmazid.com/mushaf/';\n\n  @override\n  Future<void> downloadMushaf({\n    required String mushafName,\n    ProgressCallback? onProgress,\n    CancelToken? cancelToken,\n  }) async {\n    final String fileName = '$mushafName.zip';\n    final String downloadUrl = '$baseUrl$fileName';\n\n    final Directory appDir = await getApplicationDocumentsDirectory();\n    final Directory mushafDir = Directory('${appDir.path}/mushaf');\n    final File zipFile = File('${mushafDir.path}/$fileName');\n\n    if (!await mushafDir.exists()) {\n      await mushafDir.create(recursive: true);\n    }\n\n    final response = await DioClient.downloadFile(\n      downloadUrl,\n      zipFile.path,\n      onReceiveProgress: onProgress,\n      cancelToken: cancelToken,\n    );\n\n    if (response.statusCode == 200) {\n      // Download successful\n    } else {\n      final String error = 'Failed to download mushaf: ${response.statusCode}';\n      throw Exception(error);\n    }\n  }\n}"}, {"structure_type": "function", "name": "downloadTextMushafDatabase", "docstring": "Downloads the Text Mushaf database file.", "module": "mushaf", "file_path": "Quran-Majeed/lib/data/data_sources/remote_data_source/mushaf/text_mushaf_remote_data_source.dart", "file_name": "text_mushaf_remote_data_source.dart", "line": 9, "line_from": 9, "line_to": 193, "snippet": "  Future<void> downloadTextMushafDatabase({\n    required File dbFile,\n    required String url, // URL should be configurable or constant\n    void Function(int received, int total)? onProgress,\n    required CancelToken cancelToken,\n  });\n\n  /// Downloads a single Quran page font file.\n  Future<void> downloadFontFile({\n    required int pageNumber,\n    required String savePath,\n    void Function(int received, int total)? onProgress,\n    required CancelToken cancelToken,\n  });\n\n  /// Downloads multiple Quran page font files in batch.\n  Future<void> downloadFontBatch({\n    required List<int> pageNumbers,\n    required String saveDir,\n    void Function(int completed, int total)? onBatchProgress,\n    void Function(int pageNumber, double progress)? onFontProgress,\n    required CancelToken cancelToken,\n  });\n}\n\n/// Implementation of [ITextMushafRemoteDataSource] using Dio for network requests.\nclass TextMushafRemoteDataSource implements ITextMushafRemoteDataSource {\n  final Dio _dio;\n  static const String _tag = 'TextMushafRemoteDataSource';\n\n  // Inject Dio instance.\n  TextMushafRemoteDataSource({required Dio dio}) : _dio = dio;\n\n  @override\n  Future<void> downloadTextMushafDatabase({\n    required File dbFile,\n    required String url,\n    void Function(int received, int total)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    final options = Options(\n      receiveTimeout: const Duration(minutes: 2),\n      sendTimeout: const Duration(minutes: 2),\n      headers: {\n        'Connection': 'keep-alive',\n      },\n    );\n\n    final result = await InternetAddress.lookup('google.com');\n    if (result.isEmpty || result[0].rawAddress.isEmpty) {\n      throw const SocketException('Network connectivity check failed');\n    }\n\n    await _dio.download(\n      url,\n      dbFile.path,\n      onReceiveProgress: onProgress,\n      cancelToken: cancelToken,\n      deleteOnError: true,\n      options: options,\n    );\n\n    if (!cancelToken.isCancelled) {\n      logInfoStatic('Text Mushaf DB downloaded successfully to ${dbFile.path}', _tag);\n\n      if (!await dbFile.exists() || await dbFile.length() == 0) {\n        throw Exception('Download completed but file is missing or empty');\n      }\n    } else {\n      logInfoStatic('Text Mushaf DB download cancelled for ${dbFile.path}', _tag);\n      if (await dbFile.exists()) {\n        await dbFile.delete();\n        logInfoStatic('Deleted cancelled download file', _tag);\n      }\n      throw Exception('Download cancelled by user');\n    }\n  }\n\n  @override\n  Future<void> downloadFontFile({\n    required int pageNumber,\n    required String savePath,\n    void Function(int received, int total)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    final String url = FontConstants.getFontDownloadUrl(pageNumber);\n    final File fontFile = File(savePath);\n\n    logInfoStatic('Starting download for font file page $pageNumber from $url to $savePath', _tag);\n\n    final options = Options(\n      receiveTimeout: const Duration(minutes: 1),\n      sendTimeout: const Duration(minutes: 1),\n      headers: {\n        'Connection': 'keep-alive',\n      },\n    );\n\n    if (!await fontFile.parent.exists()) {\n      await fontFile.parent.create(recursive: true);\n    }\n\n    await _dio.download(\n      url,\n      savePath,\n      onReceiveProgress: onProgress,\n      cancelToken: cancelToken,\n      deleteOnError: true,\n      options: options,\n    );\n\n    if (!cancelToken.isCancelled) {\n      logInfoStatic('Font file for page $pageNumber downloaded successfully to $savePath', _tag);\n\n      if (!await fontFile.exists() || await fontFile.length() == 0) {\n        throw Exception('Font download completed but file is missing or empty');\n      }\n    } else {\n      logInfoStatic('Font download cancelled for page $pageNumber', _tag);\n      if (await fontFile.exists()) {\n        await fontFile.delete();\n      }\n      throw Exception('Download cancelled by user');\n    }\n  }\n\n  @override\n  Future<void> downloadFontBatch({\n    required List<int> pageNumbers,\n    required String saveDir,\n    void Function(int completed, int total)? onBatchProgress,\n    void Function(int pageNumber, double progress)? onFontProgress,\n    required CancelToken cancelToken,\n  }) async {\n    if (pageNumbers.isEmpty) {\n      return;\n    }\n\n    logInfoStatic('Starting batch download of ${pageNumbers.length} font files to $saveDir', _tag);\n\n    final Directory dir = Directory(saveDir);\n    if (!await dir.exists()) {\n      await dir.create(recursive: true);\n    }\n\n    int completedDownloads = 0;\n    final int totalDownloads = pageNumbers.length;\n    final List<Exception> errors = [];\n\n    for (final int pageNumber in pageNumbers) {\n      if (cancelToken.isCancelled) {\n        logInfoStatic('Font batch download cancelled after $completedDownloads/$totalDownloads files', _tag);\n        throw Exception('Font batch download cancelled by user');\n      }\n\n      final String fontPath = '$saveDir/${FontConstants.getFontFileName(pageNumber)}';\n      final File fontFile = File(fontPath);\n\n      if (await fontFile.exists() && await fontFile.length() > 0) {\n        completedDownloads++;\n        onBatchProgress?.call(completedDownloads, totalDownloads);\n        continue;\n      }\n\n      await downloadFontFile(\n        pageNumber: pageNumber,\n        savePath: fontPath,\n        onProgress: (received, total) {\n          final double progress = total > 0 ? received / total : 0;\n          onFontProgress?.call(pageNumber, progress);\n        },\n        cancelToken: cancelToken,\n      );\n\n      completedDownloads++;\n      onBatchProgress?.call(completedDownloads, totalDownloads);\n    }\n\n    if (errors.isNotEmpty) {\n      throw Exception('Completed with ${errors.length} errors out of $totalDownloads font files.');\n    }\n\n    logInfoStatic('Batch download completed successfully: $completedDownloads fonts', _tag);\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "resource", "file_path": "Quran-Majeed/lib/data/data_sources/remote_data_source/resource/resource_remote_data_source.dart", "file_name": "resource_remote_data_source.dart", "line": 20, "line_from": 20, "line_to": 53, "snippet": "    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    final String url = '$_baseUrl$fileName';\n\n    try {\n      // Get the correct path for external databases\n      final String dbPath = await ExternalDbFactory.getExternalDbPath(fileName);\n      final File dbFile = File(dbPath);\n\n      // Create directory if it doesn't exist\n      if (!await dbFile.parent.exists()) {\n        await dbFile.parent.create(recursive: true);\n      }\n\n      // Delete existing file if it exists\n      if (await dbFile.exists()) {\n        await dbFile.delete();\n      }\n\n\n      // Call the downloadFile method from the FileDownloader class with the correct path\n      await _fileDownloader.downloadFile(\n        url: url,\n        savePath: dbPath,\n        onProgress: (int percentage) => onProgress?.call(percentage),\n        cancelToken: cancelToken,\n      );\n\n    } catch (e) {\n      Logger.error('Error downloading database $fileName: $e', _tag);\n      rethrow;\n    }\n  }"}, {"structure_type": "function", "name": "toNoteEntities", "docstring": "", "module": "note", "file_path": "Quran-Majeed/lib/data/mappers/note/note_mapper.dart", "file_name": "note_mapper.dart", "line": 31, "line_from": 31, "line_to": 48, "snippet": "  Future<List<NoteEntity>> toNoteEntities() async {\n    return map((note) => NoteEntity(\n          surahId: note.surahId,\n          ayahNumber: note.ayahNumber,\n          title: note.title,\n          content: note.content,\n          color: note.color,\n          createdAt: note.createdAt,\n          updatedAt: note.updatedAt,\n        )).toList();\n  }\n}\n\nextension NoteEntitiesToBeSavedMapper on Pair<List<NoteEntity>, List<NoteEntity>> {\n  Future<List<NoteEntity>> findOutNotesToBeSaved() async {\n    return await compute(_findOutNotesToBeSavedStatic, this);\n  }\n}"}, {"structure_type": "function", "name": "toSerialisedString", "docstring": "", "module": "settings", "file_path": "Quran-Majeed/lib/data/mappers/settings/setting_entity_mapper.dart", "file_name": "setting_entity_mapper.dart", "line": 16, "line_from": 16, "line_to": 23, "snippet": "  Future<String> toSerialisedString() async =>\n      compute(_convertSettingsEntityToSerialisedString, this);\n}\n\nextension SerialisedStringToSettingStateEntity on String {\n  Future<SettingsStateEntity> toSettingStateEntity() async =>\n      compute(_convertSerialisedStringToSettingStateEntity, this);\n}"}, {"structure_type": "function", "name": "toPinEntities", "docstring": "", "module": "pin", "file_path": "Quran-Majeed/lib/data/mappers/pin/pin_mapper.dart", "file_name": "pin_mapper.dart", "line": 23, "line_from": 23, "line_to": 46, "snippet": "  Future<List<PinEntity>> toPinEntities() async {\n    return map((pin) => PinEntity(\n          surahId: pin.surahId,\n          ayahNumber: pin.ayahNumber,\n          name: pin.name,\n          color: pin.color,\n          createdAt: pin.createdAt,\n          updatedAt: pin.updatedAt,\n        )).toList();\n  }\n}\n\nextension PinEntityToDtoMapper on PinData {\n  PinEntity toPinEntity() {\n    return PinEntity(\n      surahId: surahId,\n      ayahNumber: ayahNumber,\n      name: name,\n      color: color,\n      createdAt: createdAt,\n      updatedAt: updatedAt,\n    );\n  }\n}"}, {"structure_type": "function", "name": "findOutPinsToBeSaved", "docstring": "", "module": "pin", "file_path": "Quran-Majeed/lib/data/mappers/pin/pin_mapper.dart", "file_name": "pin_mapper.dart", "line": 49, "line_from": 49, "line_to": 84, "snippet": "  Future<List<PinEntity>> findOutPinsToBeSaved() async {\n    return await compute(_findOutPinsToBeSavedStatic, this);\n  }\n}\n\nList<PinEntity> _findOutPinsToBeSavedStatic(\n  Pair<List<PinEntity>, List<PinEntity>> params,\n) {\n  // Here we define a local variable to hold the pins that need to be saved.\n  final List<PinEntity>? pinsToBeSaved = catchAndReturn(() {\n    // First we create a set of the IDs of the existing pins, so we can easily\n    // check if a new pin already exists or not.\n    final List<PinEntity> existingPins = params.first;\n    final Set<String> existingPinUniqueIdentifiers =\n        existingPins.map((pin) => \"${pin.surahId}-${pin.ayahNumber}-${pin.name}\").toSet();\n\n    // Then we filter out the new pins that already exist by checking if their\n    // ID is present in the set we just created.\n    // Using a Set helps to improve performance by removing duplicates and\n    // enabling faster membership testing.\n    final List<PinEntity> savingPins = params.second;\n    final Set<PinEntity> pinsToBeSaved = savingPins\n        .where(\n          (pin) => !existingPinUniqueIdentifiers.contains(\"${pin.surahId}-${pin.ayahNumber}-${pin.name}\"),\n        )\n        .toSet();\n\n    // Finally, we return the filtered set of new pins.\n    final List<PinEntity> pinsToBeSavedList = pinsToBeSaved.toList(growable: true);\n    return pinsToBeSavedList;\n  });\n\n  // If there was an error during the pin filtering process, return an\n  // empty list instead.\n  return pinsToBeSaved ?? [];\n}"}, {"structure_type": "function", "name": "toBookmarkEntities", "docstring": "", "module": "bookmark", "file_path": "Quran-Majeed/lib/data/mappers/bookmark/bookmark_mapper.dart", "file_name": "bookmark_mapper.dart", "line": 22, "line_from": 22, "line_to": 32, "snippet": "  Future<List<BookmarkEntity>> toBookmarkEntities() async {\n    final List<BookmarkEntity> bookmarkEntities = await compute(_convertBookmarkDtoToBookmarkEntities, this);\n    return bookmarkEntities;\n  }\n}\n\nextension BookmarkEntitiesToBookmarkFolderEntitiesMapper on Pair<List<BookmarkEntity>, List<BookmarkEntity>> {\n  Future<List<BookmarkEntity>> findOutBookmarksToBeSaved() async {\n    return await compute(_findOutBookmarksToBeSavedStatic, this);\n  }\n}"}, {"structure_type": "function", "name": "groupBookmarksInFolders", "docstring": "", "module": "bookmark", "file_path": "Quran-Majeed/lib/data/mappers/bookmark/bookmark_mapper.dart", "file_name": "bookmark_mapper.dart", "line": 68, "line_from": 68, "line_to": 125, "snippet": "  Future<List<BookmarkFolderEntity>> groupBookmarksInFolders() async {\n    return await compute(_groupBookmarksInFoldersStatic, this);\n  }\n}\n\nList<BookmarkFolderEntity> _groupBookmarksInFoldersStatic(\n  List<BookmarkData?> params,\n) {\n  final List<BookmarkFolderEntity>? folders = catchAndReturn(() {\n    final List<BookmarkData?> bookmarkDataList = params;\n\n    // Group bookmarks by name\n    final Map<String, List<BookmarkData?>> bookmarkDataMapGroupedByName =\n        bookmarkDataList.groupListsBy((bk) => bk!.foldername);\n\n    final List<BookmarkFolderEntity> allFolders = List.empty(growable: true);\n    int folderId = 1;\n\n    // Iterate over each group (folder)\n    for (final String folderName in bookmarkDataMapGroupedByName.keys) {\n      final List<BookmarkData?>? bookmarks = bookmarkDataMapGroupedByName[folderName];\n\n      if (bookmarks == null) continue;\n\n      // We allow empty folders to exist - removed the check for bookmarks.isEmpty\n      // Get folder color (use a default if no bookmarks)\n      final Color folderColor = bookmarks.isNotEmpty\n          ? getColorFromHex(bookmarks.first!.color)\n          : const Color(0xff66BB6A); // Default color for empty folders\n\n      // count total number of bookmarks in the folder\n      final int totalBookmarks =\n          bookmarks.isNotEmpty ? bookmarks.where((b) => b != null && b.suraId > 0 && b.ayahId > 0).length : 0;\n\n      // Get folder created and updated time\n      final (folderCreatedAt, folderUpdatedAt) = getBookmarkFolderCreatedAndUpdatedTime(bookmarks);\n\n      // Create a new bookmark folder entity\n      allFolders.add(\n        BookmarkFolderEntity(\n          id: folderId++,\n          name: folderName,\n          color: folderColor,\n          count: totalBookmarks,\n          updatedAt: folderUpdatedAt,\n          createdAt: folderCreatedAt,\n        ),\n      );\n    }\n\n    // Sort folders by name\n    allFolders.sort((a, b) => a.name.compareTo(b.name));\n\n    return allFolders;\n  });\n\n  return folders ?? [];\n}"}, {"structure_type": "function", "name": "param.map", "docstring": "", "module": "bookmark", "file_path": "Quran-Majeed/lib/data/mappers/bookmark/bookmark_mapper.dart", "file_name": "bookmark_mapper.dart", "line": 147, "line_from": 147, "line_to": 163, "snippet": "  final List<Future<BookmarkEntity>> futures = param.map((dto) async => _convertDtoToBookmarkEntity(dto!)).toList();\n  return Future.wait(futures);\n}\n\nBookmarkEntity _convertDtoToBookmarkEntity(BookmarkData dto) => BookmarkEntity(\n      id: dto.id,\n      folderName: dto.foldername,\n      color: getColorFromHex(dto.color),\n      surahID: dto.suraId,\n      ayahID: dto.ayahId,\n      createdAt: dto.createdAt,\n      updatedAt: dto.updatedAt,\n    );\n\nextension BookmarkToDtoMap on BookmarkEntity {\n  Future<Map<String, Object?>> toMap() async => compute(_convertBookmarkToDtoMap, this);\n}"}, {"structure_type": "function", "name": "toMapList", "docstring": "", "module": "bookmark", "file_path": "Quran-Majeed/lib/data/mappers/bookmark/bookmark_mapper.dart", "file_name": "bookmark_mapper.dart", "line": 180, "line_from": 180, "line_to": 191, "snippet": "  Future<List<Map<String, Object?>>> toMapList() async => compute(convertBookmarkListToDtoMap, this);\n}\n\nFuture<List<Map<String, Object?>>> convertBookmarkListToDtoMap(\n  List<BookmarkEntity> bookmarks,\n) async {\n  final List<Future<Map<String, Object?>>> futures = bookmarks.map((bookmark) async {\n    return _convertBookmarkToDtoMap(bookmark);\n  }).toList();\n  final List<Map<String, Object?>> result = await Future.wait(futures);\n  return result;\n}"}, {"structure_type": "function", "name": "toBookmarks", "docstring": "", "module": "bookmark", "file_path": "Quran-Majeed/lib/data/mappers/bookmark/bookmark_mapper.dart", "file_name": "bookmark_mapper.dart", "line": 208, "line_from": 208, "line_to": 224, "snippet": "  Future<List<BookmarkEntity>> toBookmarks() async {\n    return compute(_convertMapsToBookmarkList, this);\n  }\n}\n\nFuture<List<BookmarkEntity>> _convertMapsToBookmarkList(\n  List<Map<String, Object?>> bookmarkMaps,\n) async {\n  final List<Future<BookmarkEntity>> futures = bookmarkMaps\n      .map(\n        (bookmarkMap) => Future<BookmarkEntity>.value(\n          _convertMapToBookmarkEntity(bookmarkMap),\n        ),\n      )\n      .toList();\n  return Future.wait(futures);\n}"}, {"structure_type": "function", "name": "toNotificationPayload", "docstring": "", "module": "notification", "file_path": "Quran-Majeed/lib/data/mappers/notification/notification_entity_mapper.dart", "file_name": "notification_entity_mapper.dart", "line": 56, "line_from": 56, "line_to": 62, "snippet": "  Future<NotificationPayLoadEntity> toNotificationPayload() async =>\n      compute(_convertJsonMapToNotificationPayLoadStatic, this);\n}\n\nextension NotificationPayLoadToJsonMap on NotificationPayLoadEntity {\n  Future<Map<String, String>> toJsonMap() async => compute(_convertNotificationPayLoadToJsonMapStatic, this);\n}"}, {"structure_type": "class", "name": "TTJsonModel", "docstring": "", "module": "content", "file_path": "Quran-Majeed/lib/data/mappers/content/tt_json_mapper.dart", "file_name": "tt_json_mapper.dart", "line": 6, "line_from": 6, "line_to": 105, "snippet": "class TTJsonModel {\n  Map<String, List<TTDbFileModel>> trans;\n  Map<String, List<TTDbFileModel>> tafsir;\n\n  TTJsonModel({\n    required this.trans,\n    required this.tafsir,\n  });\n\n  factory TTJsonModel.empty() {\n    return TTJsonModel(tafsir: {}, trans: {});\n  }\n\n  factory TTJsonModel.fromJson(Map<String, dynamic> json) => TTJsonModel(\n        trans: Map.from(json[\"trans\"]).map((k, v) => MapEntry<String, List<TTDbFileModel>>(\n            k, List<TTDbFileModel>.from(v.map((x) => TTDbFileModel.fromJson(x))))),\n        tafsir: Map.from(json[\"tafsir\"]).map((k, v) => MapEntry<String, List<TTDbFileModel>>(\n            k, List<TTDbFileModel>.from(v.map((x) => TTDbFileModel.fromJson(x))))),\n      );\n\n  Map<String, dynamic> toJson() => {\n        \"trans\":\n            Map.from(trans).map((k, v) => MapEntry<String, dynamic>(k, List<dynamic>.from(v.map((x) => x.toJson())))),\n        \"tafsir\":\n            Map.from(tafsir).map((k, v) => MapEntry<String, dynamic>(k, List<dynamic>.from(v.map((x) => x.toJson())))),\n      };\n}\n\nclass TTDbFileModel {\n  String name;\n  String fileName;\n  String size;\n  String language;\n  String languageCode;\n  Type type;\n  String link;\n\n  TTDbFileModel({\n    required this.name,\n    required this.fileName,\n    required this.size,\n    required this.language, // Changed to String\n    required this.type,\n    required this.link,\n    required this.languageCode,\n  });\n\n  factory TTDbFileModel.fromJson(Map<String, dynamic> json) => TTDbFileModel(\n        name: json[\"name\"],\n        fileName: json[\"file_name\"],\n        size: json[\"size\"],\n        language: json[\"language\"], // Changed from \"lang\"\n        type: typeValues.map[json[\"type\"]]!,\n        link: json[\"link\"],\n        languageCode: json[\"language_code\"],\n      );\n\n  Map<String, dynamic> toJson() => {\n        \"name\": name,\n        \"file_name\": fileName,\n        \"size\": size,\n        \"language\": language, // Changed to \"language\"\n        \"type\": typeValues.reverse[type],\n        \"link\": link,\n        \"language_code\": languageCode,\n      };\n\n  Map<String, Object> toMap() {\n    return {\n      'name': name,\n      'file_name': fileName,\n      'size': size,\n      'language': language, // Directly use the language string\n      'type': typeValues.reverse[type]!,\n      'link': link,\n      'language_code': languageCode,\n    };\n  }\n}\n\n// Adjusted Type and Lang enums are not needed anymore if Lang is directly a string.\n// Consider removing or adjusting Lang enum if it's used elsewhere in your code.\n\nenum Type { tafseer, translation }\n\nfinal typeValues = EnumValues({\"tafseer\": Type.tafseer, \"translation\": Type.translation});\n\nclass EnumValues<T> {\n  Map<String, T> map;\n  late Map<T, String> reverseMap;\n\n  EnumValues(this.map);\n\n  Map<T, String> get reverse {\n    reverseMap = map.map((k, v) => MapEntry(v, k));\n    return reverseMap;\n  }\n}\n"}, {"structure_type": "function", "name": "toAyahEntity", "docstring": "", "module": "quran", "file_path": "Quran-Majeed/lib/data/mappers/quran/ayah_mapper.dart", "file_name": "ayah_mapper.dart", "line": 8, "line_from": 8, "line_to": 28, "snippet": "  Future<List<AyahEntity>> toAyahEntity() async {\n    final List<AyahDatabaseTableData> dtoList = this;\n    final List<AyahEntity> ayahEntityList = await compute(_convertAyahFtsToAyahEntity, dtoList);\n    return ayahEntityList;\n  }\n}\n\nList<AyahEntity> _convertAyahFtsToAyahEntity(List<AyahDatabaseTableData> dtoList) =>\n    dtoList.map(_convertDtoToAyahEntity).toList();\n\nAyahEntity _convertDtoToAyahEntity(AyahDatabaseTableData ayahDto) {\n  return AyahEntity(\n    id: ayahDto.id,\n    surahID: ayahDto.surahId!,\n    ayahID: ayahDto.ayahId!,\n    juz: ayahDto.juz,\n    hijb: ayahDto.hijb,\n    page: ayahDto.page,\n    clean: ayahDto.clean,\n  );\n}"}, {"structure_type": "function", "name": "toPageListEntity", "docstring": "", "module": "surah", "file_path": "Quran-Majeed/lib/data/mappers/surah/surah_mapper.dart", "file_name": "surah_mapper.dart", "line": 28, "line_from": 28, "line_to": 48, "snippet": "  Future<List<SurahEntity>> toPageListEntity() async {\n    final List<SurahDatabaseTableData> dtoList = this;\n    final List<SurahEntity> surahList = await compute(_convertSurahDtoToSurahEntity, dtoList);\n    return surahList;\n  }\n}\n\nList<SurahEntity> _convertSurahDtoToSurahEntity(List<SurahDatabaseTableData> dtoList) =>\n    dtoList.map(_convertDtoToSurahEntity).toList();\n\nSurahEntity _convertDtoToSurahEntity(SurahDatabaseTableData surahDto) {\n  return SurahEntity(\n      serial: surahDto.serial!,\n      name: surahDto.name!,\n      nameBn: surahDto.nameBn!,\n      meaning: surahDto.meaning!,\n      totalAyah: surahDto.totalAyah!,\n      nameEn: surahDto.nameEn!,\n      meaningBn: surahDto.meaningBn!,\n      type: surahDto.type!);\n}"}, {"structure_type": "function", "name": "toWordByWordListEntity", "docstring": "", "module": "word_by_word", "file_path": "Quran-Majeed/lib/data/mappers/word_by_word/word_by_word_mapper.dart", "file_name": "word_by_word_mapper.dart", "line": 6, "line_from": 6, "line_to": 18, "snippet": "  Future<List<WordByWordEntity>> toWordByWordListEntity() async {\n    final List<WordByWordDatabaseTableData> dtoList = this;\n    final List<WordByWordEntity> wordByWordList = await compute(_convertWordByWordDtoToWordByWordEntity, dtoList);\n    return wordByWordList;\n  }\n}\n\nextension DtoToWordByWordMapper on WordByWordDatabaseTableData {\n  WordByWordEntity toWordByWordEntity() {\n    final WordByWordDatabaseTableData wordByWordDto = this;\n    return _convertDtoToWordByWordEntity(wordByWordDto);\n  }\n}"}, {"structure_type": "function", "name": "setUp", "docstring": "", "module": "service", "file_path": "Quran-Majeed/lib/data/service/local_cache_service.dart", "file_name": "local_cache_service.dart", "line": 13, "line_from": 13, "line_to": 133, "snippet": "  static Future<void> setUp() async {\n    final Directory document = await getApplicationDocumentsDirectory();\n    final String documentPath = document.path;\n    Hive.init(documentPath);\n    await Hive.openBox<Object>(_storageFileName);\n  }\n\n  static String get _storageFileName => \"${_secretVaultName}_239090\";\n\n  /// Saves the provided `value` to the persistent storage using the specified `key`.\n  ///\n  /// The type parameter `T` represents the type of the `value` being saved,\n  /// and it must be a subtype of `Object`.\n  ///\n  ///\n  /// Example usage:\n  ///\n  /// ```dart\n  /// await saveData(key: CacheKeys.userId, value: 'sufi_bhai_28283');\n  /// ```\n  Future<void> saveData<T extends Object>({\n    required String key,\n    required T value,\n  }) async {\n    await catchFutureOrVoid(() async {\n      if (key.isEmpty) return;\n      await _hiveBox.put(key, value);\n    });\n  }\n\n  // Future<String?> getOldBookmarkJsonFile() async {\n  //   bool hasPermission = await PermissionService.checkPermission();\n\n  //   if (hasPermission) {\n  //     const String bookmarkFilePath = '/storage/emulated/0/quranAppBookmark/bookmark.json';\n  //     final File bookmarkFile = File(bookmarkFilePath);\n  //     if (await bookmarkFile.exists()) {\n  //       return await bookmarkFile.readAsString();\n  //     }\n  //   }\n  //   return null;\n  // }\n\n  Future<String?> getOldBookmarkJsonFile() async {\n    const MethodChannel platformMethodChannel = MethodChannel(\"com.ihadis.quran/legacy\");\n\n    if (!Platform.isAndroid) {\n      logError(\"Platform is not android, skipping legacy data retrieval\");\n      return null;\n    }\n\n    final bool alreadyRetrieved = getData(key: CacheKeys.retrievedPreviousBookmarks) ?? false;\n\n    if (alreadyRetrieved) {\n      logError(\"Already retrieved legacy data, skipping\");\n      return null;\n    }\n\n    try {\n      final String? legacyBookmarkJson = await platformMethodChannel.invokeMethod<String>(\"fetch_bookmarks\");\n\n      if (legacyBookmarkJson == null || legacyBookmarkJson.isEmpty) {\n        logError(\"Legacy bookmark json is null or empty\");\n        return null;\n      }\n\n      await saveData(key: CacheKeys.retrievedPreviousBookmarks, value: true);\n      return legacyBookmarkJson;\n    } catch (e) {\n      logError(\"Error fetching legacy bookmarks: $e\");\n      return null;\n    }\n  }\n\n  /// Retrieves data from persistent storage using the specified `key`.\n  ///\n  /// The type parameter `T` represents the type of the data being retrieved,\n  /// and it allows writing type-safe and reusable code that can operate on\n  /// different data types.\n  ///\n  ///\n  /// If an error occurs during the retrieval process, an error message is logged,\n  /// and `null` is returned.\n  ///\n  /// Example usage:\n  ///\n  /// ```dart\n  /// String? userId = getData<String>(key: CacheKeys.userId);\n  /// bool? isFirstTime = getData<bool>(key: CacheKeys.firstTime);\n  /// ```\n  ///\n  /// Note: This function assumes that the `_hiveBox` instance is properly initialized\n  /// and accessible within the scope of this function.\n  T? getData<T>({required String key}) {\n    try {\n      final T? result = _hiveBox.get(key) as T?;\n      return result;\n    } catch (e) {\n      logError(\"getData: key: $key\\nerror: $e\");\n      return null;\n    }\n  }\n\n  /// Deletes data from persistent storage for the specified `key`.\n  ///\n  /// If the `key` does not exist, the operation completes without any effect.\n  ///\n  /// Example usage:\n  ///\n  /// ```dart\n  /// await deleteData(key: CacheKeys.userId);\n  /// ```\n  Future<void> deleteData({required String key}) async {\n    await catchFutureOrVoid(() async {\n      if (key.isEmpty) return;\n      await _hiveBox.delete(key);\n    });\n  }\n\n  late final Box<Object> _hiveBox = Hive.box(_storageFileName);\n}"}, {"structure_type": "function", "name": "initialize", "docstring": "Initialize the database connection", "module": "database", "file_path": "Quran-Majeed/lib/data/service/database/external_db_service.dart", "file_name": "external_db_service.dart", "line": 25, "line_from": 25, "line_to": 355, "snippet": "  Future<void> initialize() async {\n    if (_database != null) return;\n\n    try {\n      final dbFile = File(_dbFilePath);\n\n      if (!await dbFile.exists()) {\n        throw Exception('External database file not found at: $_dbFilePath');\n      }\n\n      _database = await openDatabase(\n        _dbFilePath,\n        readOnly: true,\n      );\n    } catch (e) {\n      Logger.error('Error initializing external database: $e', _tag);\n      throw Exception('Failed to initialize external database: $e');\n    }\n  }\n\n  /// Close the database connection\n  Future<void> close() async {\n    if (_database != null) {\n      await _database!.close();\n      _database = null;\n    }\n  }\n\n  /// Helper method to ensure database is initialized\n  Future<Database> get database async {\n    if (_database == null) {\n      await initialize();\n    }\n    return _database!;\n  }\n\n  /// Get QuranInfo data by surah ID\n  Future<Map<String, dynamic>?> getQuranInfoBySurahId(int surahId) async {\n    try {\n      final db = await database;\n      final List<Map<String, dynamic>> result = await db.query(\n        'info',\n        where: 'surah_id = ?',\n        whereArgs: [surahId],\n      );\n\n      return result.isNotEmpty ? result.first : null;\n    } catch (e) {\n      Logger.error('Error getting QuranInfo by surahId: $e', _tag);\n      return null;\n    }\n  }\n\n  /// Get Nuzul data by surah ID\n  Future<List<Map<String, dynamic>>> getNuzulBySurahId(int surahId) async {\n    try {\n      final db = await database;\n      return await db.query(\n        'nuzul',\n        where: 'surah_id = ?',\n        whereArgs: [surahId],\n        orderBy: 'from_ayah ASC',\n      );\n    } catch (e) {\n      Logger.error('Error getting Nuzul by surahId: $e', _tag);\n      return [];\n    }\n  }\n\n  /// Get all Nuzul data\n  Future<List<Map<String, dynamic>>> getAllNuzul() async {\n    try {\n      final db = await database;\n      return await db.query(\n        'nuzul',\n        orderBy: 'surah_id ASC, from_ayah ASC',\n      );\n    } catch (e) {\n      Logger.error('Error getting all Nuzul data: $e', _tag);\n      return [];\n    }\n  }\n\n  /// Get unique Nuzul surah IDs\n  Future<List<int>> getUniqueNuzulSurahIds() async {\n    try {\n      final db = await database;\n      final List<Map<String, dynamic>> result = await db.rawQuery(\n        'SELECT DISTINCT surah_id FROM nuzul ORDER BY surah_id ASC',\n      );\n\n      return result.map((row) => row['surah_id'] as int).toList();\n    } catch (e) {\n      Logger.error('Error getting unique Nuzul surah IDs: $e', _tag);\n      return [];\n    }\n  }\n\n  /// Get Duas by category ID\n  Future<List<Map<String, dynamic>>> getDuasByCategoryId(int categoryId) async {\n    try {\n      final db = await database;\n      return await db.query(\n        'dua',\n        where: 'category_id = ?',\n        whereArgs: [categoryId],\n        orderBy: 'id ASC',\n      );\n    } catch (e) {\n      Logger.error('Error getting Duas by category ID: $e', _tag);\n      return [];\n    }\n  }\n\n  /// Helper method to convert result to QuranInfoTableData\n  QuranInfoTableData? mapToQuranInfoTableData(Map<String, dynamic>? data) {\n    if (data == null) return null;\n\n    return QuranInfoTableData(\n      surahId: data['surah_id'] as int,\n      en: data['en'] as String,\n      bn: data['bn'] as String,\n    );\n  }\n\n  /// Helper method to convert result to NuzulDatabaseTableData\n  NuzulDatabaseTableData mapToNuzulDatabaseTableData(Map<String, dynamic> data) {\n    return NuzulDatabaseTableData(\n      surahId: data['surah_id'] as int,\n      fromAyah: data['from_ayah'] as int,\n      toAyah: data['to_ayah'] as int,\n      bn: data['bn'] as String,\n      en: data['en'] as String,\n    );\n  }\n\n  /// Helper method to convert result to DuaDatabaseTableData\n  DuaDatabaseTableData mapToDuaDatabaseTableData(Map<String, dynamic> data) {\n    return DuaDatabaseTableData(\n      id: data['id'] as int,\n      categoryId: data['category_id'] as int,\n      surahId: data['surah_id'] as int?,\n      ayahId: data['ayah_id'] as String?,\n      lang: data['lang'] as String?,\n      name: data['name'] as String?,\n      uthmani: data['uthmani'] as String?,\n      indopak: data['indopak'] as String?,\n      translation: data['translation'] as String?,\n      note: data['note'] as String?,\n      reference: data['reference'] as String?,\n      audio: data['audio'] as int?,\n    );\n  }\n\n  /// Get grammar summary data\n  Future<Map<String, dynamic>?> getGrammarSummaryData({\n    required int surahId,\n    required int ayahId,\n    required int wordIndex,\n  }) async {\n    try {\n      final db = await database;\n      final List<Map<String, dynamic>> result = await db.query(\n        'same_exact_summary_data_table',\n        where: 'surah = ? AND ayah = ? AND word = ?',\n        whereArgs: [surahId, ayahId, wordIndex],\n      );\n\n      return result.isNotEmpty ? result.first : null;\n    } catch (e) {\n      Logger.error('Error getting grammar summary data: $e', _tag);\n      return null;\n    }\n  }\n\n  /// Helper method to convert result to GrammarSummaryTableData\n  GrammarSummaryData mapToGrammarSummaryTableData(Map<String, dynamic> data) {\n    return GrammarSummaryData(\n      surah: data['surah'] as int,\n      ayah: data['ayah'] as int,\n      word: data['word'] as int,\n      sameRoot: data['same_root'] as String?,\n      exactMatch: data['exact_match'] as String?,\n      summary: data['summary'] as String?,\n    );\n  }\n}\n\n/// A factory to create and manage external database services\nclass ExternalDbFactory {\n  static final Map<String, ExternalDbService> _instances = {};\n  static const String _tag = 'ExternalDbFactory';\n\n  /// Get external database path\n  static Future<String> getExternalDbPath(String dbName) async {\n    try {\n      // Use getApplicationDocumentsDirectory for iOS compatibility\n      // For Android, this will map to the app's internal storage\n      final appDir = await getApplicationDocumentsDirectory();\n      final path = p.join(appDir.path, 'external_dbs', dbName);\n\n      return path;\n    } catch (e) {\n      Logger.error('Error getting external DB path: $e', _tag);\n      rethrow;\n    }\n  }\n\n  /// Get an ExternalDbService instance for a specific database\n  static Future<ExternalDbService> getService(String dbName) async {\n    if (_instances.containsKey(dbName)) {\n      return _instances[dbName]!;\n    }\n\n    final dbPath = await getExternalDbPath(dbName);\n    final service = ExternalDbService(dbPath);\n\n    try {\n      await service.initialize();\n      _instances[dbName] = service;\n      return service;\n    } catch (e) {\n      Logger.error('Failed to get external db service for $dbName: $e', _tag);\n      throw Exception('Failed to get external db service for $dbName: $e');\n    }\n  }\n\n  /// Download an external database file from the server\n  static Future<bool> downloadExternalDb({\n    required String dbName,\n    required String url,\n    void Function(int percentage)? onProgress,\n    required bool Function() isCancelled,\n  }) async {\n    try {\n      final dbPath = await getExternalDbPath(dbName);\n      final dbFile = File(dbPath);\n\n      // Create directory if it doesn't exist\n      if (!await dbFile.parent.exists()) {\n        await dbFile.parent.create(recursive: true);\n      }\n\n      // Delete existing file if it exists\n      if (await dbFile.exists()) {\n        await dbFile.delete();\n      }\n\n      // Download the file\n      final dio = Dio();\n      await dio.download(\n        url,\n        dbPath,\n        onReceiveProgress: (received, total) {\n          if (total != -1) {\n            final percentage = (received / total * 100).round();\n            onProgress?.call(percentage);\n          }\n\n          // Check if the download should be cancelled\n          if (isCancelled()) {\n            throw Exception('Download cancelled by user');\n          }\n        },\n      );\n\n      // Validate the downloaded database\n      try {\n        final db = await openDatabase(dbPath, readOnly: true);\n\n        // Check if required tables exist\n        final tables =\n            await db.query('sqlite_master', where: \"type = 'table' AND name IN ('quran_info', 'nuzul', 'dua')\");\n\n        await db.close();\n\n        if (tables.isEmpty) {\n          Logger.error('Downloaded database $dbName is missing required tables', _tag);\n          await dbFile.delete();\n          return false;\n        }\n\n        return true;\n      } catch (e) {\n        Logger.error('Error validating downloaded database $dbName: $e', _tag);\n        await dbFile.delete();\n        return false;\n      }\n    } catch (e) {\n      Logger.error('Error downloading external database $dbName: $e', _tag);\n      return false;\n    }\n  }\n\n  /// Close all database connections\n  static Future<void> closeAll() async {\n    for (final service in _instances.values) {\n      await service.close();\n    }\n    _instances.clear();\n  }\n\n  /// Check if an external database exists\n  static Future<bool> doesExternalDbExist(String dbName) async {\n    try {\n      final dbPath = await getExternalDbPath(dbName);\n      final dbFile = File(dbPath);\n      final exists = await dbFile.exists();\n      return exists;\n    } catch (e) {\n      Logger.error('Error checking if external DB exists: $e', _tag);\n      return false;\n    }\n  }\n\n  /// Ensure the external database directory exists\n  static Future<void> ensureExternalDbDirectoryExists() async {\n    try {\n      final appDir = await getApplicationDocumentsDirectory();\n      final dirPath = p.join(appDir.path, 'external_dbs');\n      final dir = Directory(dirPath);\n\n      if (!await dir.exists()) {\n        await dir.create(recursive: true);\n      }\n    } catch (e) {\n      Logger.error('Error ensuring external DB directory exists: $e', _tag);\n      rethrow;\n    }\n  }\n}"}, {"structure_type": "function", "name": "getLayoutForPage", "docstring": "", "module": "text_mushaf", "file_path": "Quran-Majeed/lib/data/service/database/text_mushaf/text_mushaf_database.dart", "file_name": "text_mushaf_database.dart", "line": 36, "line_from": 36, "line_to": 101, "snippet": "  Future<List<dynamic>> getLayoutForPage({\n    required int pageNumber,\n    required String layoutTableName,\n  }) async {\n\n    List<dynamic> result;\n    switch (layoutTableName) {\n      case 'indopak13_lines_layout':\n        final query = select(indopak13LinesLayout)..where((tbl) => tbl.page.equals(pageNumber));\n        result = await query.get();\n        break;\n      case 'indopak15_lines_layout':\n        final query = select(indopak15LinesLayout)..where((tbl) => tbl.page.equals(pageNumber));\n        result = await query.get();\n        break;\n      case 'qpc_v1_layout':\n        final query = select(qpcV1Layout)..where((tbl) => tbl.page.equals(pageNumber));\n        result = await query.get();\n        break;\n      case 'qpc_v2_layout':\n        final query = select(qpcV2Layout)..where((tbl) => tbl.page.equals(pageNumber));\n        result = await query.get();\n            break;\n      default:\n        result = [];\n    }\n\n\n    return result;\n  }\n\n  Future<List<TextWordEntry>> getWordsForRange({\n    required int rangeStart,\n    required int rangeEnd,\n  }) async {\n    final query = select(words)\n      ..where((tbl) =>\n          tbl.wordNumberAll.isNotNull() & tbl.wordNumberAll.isBetween(Constant(rangeStart), Constant(rangeEnd)))\n      ..orderBy([(t) => OrderingTerm(expression: t.wordNumberAll)]);\n    return await query.get();\n  }\n\n  Future<List<TextWordEntry>> getWordsForAyah({\n    required int surahNumber,\n    required int ayahNumber,\n  }) async {\n    final query = select(words)\n      ..where((tbl) => tbl.surahNumber.equals(surahNumber) & tbl.ayahNumber.equals(ayahNumber))\n      ..orderBy([(t) => OrderingTerm(expression: t.wordNumber)]);\n    return await query.get();\n  }\n}\n\nLazyDatabase _openConnection() {\n  return LazyDatabase(() async {\n    final Directory dbFolder = await getApplicationDocumentsDirectory();\n    final File file = File(p.join(dbFolder.path, 'databases', TextMushafDatabase.dbFileName));\n\n    final Directory parentDir = file.parent;\n    if (!await parentDir.exists()) {\n      await parentDir.create(recursive: true);\n    }\n\n    return NativeDatabase.createInBackground(file);\n  });\n}"}, {"structure_type": "function", "name": "initSettings", "docstring": "", "module": "settings", "file_path": "Quran-Majeed/lib/domain/repositories/settings/setting_repository.dart", "file_name": "setting_repository.dart", "line": 5, "line_from": 5, "line_to": 21, "snippet": "  Future<void> initSettings();\n\n  Stream<SettingsStateEntity> get settingsStream;\n\n  Future<void> updateSettings({required SettingsStateEntity settingsState});\n\n    Future<void> scheduleNotification({\n    required TimeOfDay time,\n    required bool turnOn,\n  });\n\n  Future<SettingsStateEntity> getSettingsState();\n\n  Future<void> dispose();\n\n\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "grammar", "file_path": "Quran-Majeed/lib/domain/repositories/grammar/grammar_repository.dart", "file_name": "grammar_repository.dart", "line": 10, "line_from": 10, "line_to": 19, "snippet": "    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  });\n\n  /// Get grammar summary data for a specific ayah and word\n  Future<GrammarSummaryData?> getGrammarSummaryData({\n    required int surahId,\n    required int ayahId,\n    required int wordIndex,\n  });"}, {"structure_type": "function", "name": "getAllMemorizationPlans", "docstring": "", "module": "memorization", "file_path": "Quran-Majeed/lib/domain/repositories/memorization/memorization_plan_repository.dart", "file_name": "memorization_plan_repository.dart", "line": 5, "line_from": 5, "line_to": 54, "snippet": "  Future<List<MemorizationPlanEntity>> getAllMemorizationPlans();\n\n  Future<MemorizationPlanEntity?> getMemorizationPlanByName(String planName);\n\n  Future<void> addMemorizationPlan({\n    required MemorizationPlanEntity plan,\n    bool saveToRemote = true,\n  });\n\n  Future<void> updateMemorizationPlan({\n    required String planName,\n    String? newPlanName,\n    int? startSurahId,\n    int? startAyahId,\n    int? endSurahId,\n    int? endAyahId,\n    int? estimatedDays,\n    bool? hasNotification,\n    DateTime? notificationTime,\n  });\n\n  Future<void> deleteMemorizationPlan({required String planName});\n\n  Future<List<MemorizationPlanEntity>> syncMemorizationPlansWithRemote();\n\n  Future<void> memorizeAyah({\n    required String planName,\n    required int surahId,\n    required int ayahId,\n  });\n\n  Future<void> unmemorizeAyah({\n    required String planName,\n    required int surahId,\n    required int ayahId,\n  });\n\n  Future<bool> isAyahMemorized({\n    required String planName,\n    required int surahId,\n    required int ayahId,\n  });\n\n  Future<int> getMemorizedAyahsCount({\n    required String planName,\n    required int surahId,\n  });\n\n  Future<MemorizedAyahEntity?> getLastMemorizedAyah(String planName);\n}"}, {"structure_type": "function", "name": "getNonDefaultTranslation", "docstring": "", "module": "translation", "file_path": "Quran-Majeed/lib/domain/repositories/translation/translation_repository.dart", "file_name": "translation_repository.dart", "line": 5, "line_from": 5, "line_to": 16, "snippet": "  Future<void> getNonDefaultTranslation({required TTDbFileModel file,  void Function(int percentage)? onProgress, required CancelToken cancelToken,});\n  Future<void> getDefaultTranslation(TTDbFileModel file);\n  Future<void> deleteTranslationDatabase({required String fileName});\n  Future<List<String>> getAvailableTranslations();\n  Future<void> saveAvailableTranslations({required Set<String> availableTranslations, required String newItem});\n  Future<void> selectTranslation({required TTDbFileModel file});\n  Future<void> deleteAvailableTranslation({required TTDbFileModel file});\n  Future<Set<String>> getSelectedTranslations();\n  Future<void> saveSelectedTranslations(Set<String> selectedTranslations);\n   Future<void> saveAvailableItemsCount(int count);\n   Future<int> fetchAvailableItemsCount(); \n}"}, {"structure_type": "function", "name": "getAllSurahs", "docstring": "", "module": "quran_structure", "file_path": "Quran-Majeed/lib/domain/repositories/quran_structure/surah_repository.dart", "file_name": "surah_repository.dart", "line": 5, "line_from": 5, "line_to": 12, "snippet": "  Future<List<SurahEntity>> getAllSurahs();\n  Future<List<AyahEntity>> getIDsBySurahID({required int surahId});\n\n  Future<List<AyahEntity>> getAyahsBySurahAndAyahList({\n    required int surahId,\n    required String ayahList,\n  });\n}"}, {"structure_type": "function", "name": "recordUsage", "docstring": "Records the duration the app was used for a specific date.", "module": "usage_tracking", "file_path": "Quran-Majeed/lib/domain/repositories/usage_tracking/usage_tracking_repository.dart", "file_name": "usage_tracking_repository.dart", "line": 11, "line_from": 11, "line_to": 46, "snippet": "  Future<Either<Failure, void>> recordUsage({\n    required Duration duration,\n    required DateTime date,\n    String usageType = 'reading',\n  });\n\n  /// Retrieves the aggregated usage data (minutes per day) for the last N days\n  Future<Either<Failure, List<(DateTime, double)>>> getUsageForLastNDays(int days);\n  \n  /// Retrieves the aggregated usage data (minutes per day) for a specific month\n  Future<Either<Failure, List<(DateTime, double)>>> getUsageForMonth({\n    required int year,\n    required int month,\n  });\n  \n  /// Retrieves the aggregated usage data (minutes per day) for a specific year\n  Future<Either<Failure, List<(int, int, double)>>> getUsageForYear({\n    required int year,\n  });\n  \n  /// Retrieves stats for time range (total time, average per day, etc.)\n  Future<Either<Failure, UsageStats>> getUsageStats({\n    required TimeRange timeRange,\n  });\n}\n\n/// Used to represent different time ranges for queries\nenum TimeRange {\n  last7Days,\n  last30Days,\n  currentMonth,\n  previousMonth,\n  currentYear,\n  previousYear,\n  custom,\n}"}, {"structure_type": "function", "name": "getPromotionalMessage", "docstring": "", "module": "info", "file_path": "Quran-Majeed/lib/domain/repositories/info/info_repository.dart", "file_name": "info_repository.dart", "line": 6, "line_from": 6, "line_to": 30, "snippet": "  Future<void> getPromotionalMessage({\n    required void Function(PromotionalMessageEntity?) onMessage,\n  });\n\n  Future<void> closePromotionalMessage({required bool userSeen});\n\n  Future<String> getSadaqahJariah();\n  Future<String> getPrivacyPolicy();\n  Future<String> getAboutUs();\n  Future<String> getThanksAndCredit();\n  Future<String> getContactUs();\n  Future<String> getAboutTafsir();\n  Future<String> getHelpUs();\n  Future<String> getAboutApp();\n  Future<List<OurProjectEntity>> getOurProjects();\n\n  /// Check if the info database is available\n  Future<bool> isInfoDatabaseAvailable();\n\n  /// Download the info database from the server\n  Future<void> downloadInfoDatabase({\n    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  });\n}"}, {"structure_type": "function", "name": "downloadAudioFiles", "docstring": "", "module": "audio", "file_path": "Quran-Majeed/lib/domain/repositories/audio/audio_repository.dart", "file_name": "audio_repository.dart", "line": 8, "line_from": 8, "line_to": 61, "snippet": "  Future<void> downloadAudioFiles({\n    required int surahID,\n    required Reciter reciter,\n    void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  });\n\n  Future<String> generateAudioFilePath({required int surah, required Reciter reciter});\n\n  Future<void> deleteAudioFilesBySurahAndReciter({\n    required int surahNumber,\n    required Reciter reciter,\n  });\n\n  Future<void> persistSurahAudioPath({\n    required List<int> surahs,\n    required Reciter reciter,\n  });\n  Future<bool> isSurahAudioAvailable({\n    required int surahNumber,\n    required Reciter reciter,\n  });\n  Future<List<VerseTiming>> getVerseTimings({\n    required int surahID,\n    required int reciterID,\n  });\n  Future<void> playSurahPlaylist();\n\n  Future<void> playVerseWithDelay(\n    VerseTiming verseTiming,\n    Duration delay,\n  );\n  Future<String> getAudioPath({\n    required int surah,\n    required Reciter reciter,\n    bool isOnlineStream = false,\n  });\n  Future<void> addToPlayl1ist({\n    required String audioPath,\n    required String title,\n    bool isOnlineStream = false,\n  });\n\n  Future<AudioFile> getAudioFilesBySurahAndReciter({\n    required int surahNumber,\n    required Reciter reciter,\n  });\n  Future<void> seekAudio(Duration position);\n  Future<void> clearPlaylist();\n  Future<void> stopAudio();\n  Future<void> pausePlayback();\n  Future<void> resumePlayback();\n  Future<void> playWordAudio({required WordByWordEntity word});\n}"}, {"structure_type": "function", "name": "getAllDailyAyahList", "docstring": "", "module": "dailyAyah", "file_path": "Quran-Majeed/lib/domain/repositories/dailyAyah/daily_ayah_repository.dart", "file_name": "daily_ayah_repository.dart", "line": 4, "line_from": 4, "line_to": 5, "snippet": "  Future<List<AyahDatabaseTableData>> getAllDailyAyahList({required String languageCode});\n}"}, {"structure_type": "function", "name": "getTafseer", "docstring": "", "module": "tafseer", "file_path": "Quran-Majeed/lib/domain/repositories/tafseer/tafseer_repository.dart", "file_name": "tafseer_repository.dart", "line": 6, "line_from": 6, "line_to": 24, "snippet": "  Future<void> getTafseer({\n    required TTDbFileModel file,\n    void Function(int percentage)? onProgress,\n    required int surahID,\n    required TafseerType tafseerType,\n    required CancelToken cancelToken,\n  });\n  Future<void> deleteTafseerDatabase({required String fileName});\n  List<String> getAvailableTafseers();\n  Future<void> saveAvailableTafseers({required Set<String> availableTafseers, required String newItem});\n  Future<void> selectTafseer({required TTDbFileModel file, required int surahID, required TafseerType tafseerType});\n  Future<void> deleteAvailableTafseer({required TTDbFileModel file});\n  Future<Set<String>> getSelectedTafseers();\n  Future<void> saveSelectedTafseers(Set<String> selectedTafseers);\n  Future<void> saveSelectedTabIndex(int index);\n  Future<int> getSelectedTabIndex();\n  Future<void> saveAvailableItemsCount(int count);\n  Future<int> fetchAvailableItemsCount();\n}"}, {"structure_type": "function", "name": "getSubjects", "docstring": "", "module": "subjects", "file_path": "Quran-Majeed/lib/domain/repositories/subjects/subject_repository.dart", "file_name": "subject_repository.dart", "line": 4, "line_from": 4, "line_to": 6, "snippet": "  Future<List<SubjectEntity>> getSubjects({required String language});\n  Future<SubjectEntity?> getSubjectById({required int id, required String language});\n}"}, {"structure_type": "function", "name": "doneFirstTime", "docstring": "", "module": "user_data", "file_path": "Quran-Majeed/lib/domain/repositories/user_data/user_data_repository.dart", "file_name": "user_data_repository.dart", "line": 13, "line_from": 13, "line_to": 129, "snippet": "  Future<void> doneFirstTime();\n\n  Future<bool> determineFirstRun();\n\n  Future<bool> needsMigration();\n\n  Future<List<BookmarkEntity>> getAllBookmarks();\n\n  Future<UpdateInfoEntity> fetchUpdateInfo();\n\n  Future<List<BookmarkFolderEntity>> syncBookmarksWithRemote(); \n  Future<List<PinEntity>> syncPinsWithRemote();\n  Future<List<NoteEntity>> syncNotesWithRemote();\n\n  Future<void> logAnalyticsEvent({\n    required String name,\n    required Map<String, Object>? parameters,\n  });\n\n  Future<void> migrateOldBookmarks();\n\n  Future<void> saveSortOption({required SortOptionEntity option});\n\n  Future<SortOptionEntity?> getSavedSortOption();\n\n  Future<void> addAyahToBookmarkFolder({\n    required BookmarkEntity bookmark,\n    bool saveToRemote = true,\n  });\n\n  Future<void> saveCollections({\n    required List<BookmarkEntity> bookmarks,\n    List<MemorizationPlanEntity>? memorizationPlans,\n    List<PinEntity>? pins,\n    List<NoteEntity>? notes,\n  });\n\n  Future<bool> askForReviewIfAllowed({\n    required VoidCallback askForReview,\n  });\n\n  Future<void> saveNeedsMigration();\n\n  Future<void> updateBookmark({\n    required String folderName,\n    required String newFolderName,\n    required Color color,\n  });\n\n  Future<void> deleteAyahFromBookmarks({\n    required int surahID,\n    required int ayahID,\n    required String folderName,\n  });\n\n  Future<void> deleteBookmarkFolder({\n    required BookmarkFolderEntity folder,\n  });\n\n  Future<List<BookmarkFolderEntity>> getAllBookmarkFolders();\n\n  Future<List<BookmarkEntity>> getAyahListByBookmarkFolder({required String folderName});\n\n  Future<BookmarkFolderEntity?> getBookmarkFolder({\n    required String folderName,\n  });\n\n  Future<List<BookmarkFolderEntity>> getBookmarkFolderBySurahAndAyah({\n    required int surahID,\n    required int ayahID,\n  });\n\n  Future<void> syncCollectionsWithRemote();\n\n  Future<void> saveBookmarksToAyah({\n    required int surahID,\n    required int ayahID,\n    required List<BookmarkEntity> bookmarks,\n  });\n\n  Future<void> deleteAyahFromBookmarkFolder({\n    required int surahID,\n    required int ayahID,\n    required BookmarkFolderEntity folder,\n  });\n\n  Future<void> saveLastRead({required LastReadEntity lastRead});\n\n  Future<List<LastReadEntity>> getLastReads();\n\n  Future<List<LastReadEntity>> deleteLastReads({\n    required List<int> deletedItem,\n  });\n\n  Future<void> savePinSortOption({required SortOptionEntity option});\n\n  Future<SortOptionEntity?> getPinSortOption();\n\n  Future<void> saveNoteSortOption({required SortOptionEntity option});\n\n  Future<SortOptionEntity?> getNoteSortOption();\n\n  Future<List<MemorizationPlanEntity>> getAllMemorizationPlans();\n\n  Future<List<PinEntity>> getAllPins();\n  Future<List<NoteEntity>> getAllNotes();\n\n  Future<void> addPin({\n    required PinEntity pin,\n    bool saveToRemote = true,\n  });\n\n  Future<void> addNote({\n    required NoteEntity note,\n    bool saveToRemote = true,\n  });\n}"}, {"structure_type": "function", "name": "getReciters", "docstring": "", "module": "reciter", "file_path": "Quran-Majeed/lib/domain/repositories/reciter/reciter_repository.dart", "file_name": "reciter_repository.dart", "line": 4, "line_from": 4, "line_to": 11, "snippet": "  Future<List<Reciter>> getReciters();\n  Future<List<Reciter>> loadRecitersList();\n  Future<void> saveSelectedReciter(Reciter reciter);\n  Future<Reciter> getSelectedReciter();\n  Future<void> saveReciterWithSurahId(int surahId, Reciter reciter, {bool isDelete = false});\n  Future<List<int>> getSurahIdsForReciter(Reciter reciter);\n  Future<void> saveDownloadCount(int reciterId, int count);\n}"}, {"structure_type": "function", "name": "isExternalDbAvailable", "docstring": "Check if a specific external database is available", "module": "external_db", "file_path": "Quran-Majeed/lib/domain/repositories/external_db/external_db_repository.dart", "file_name": "external_db_repository.dart", "line": 9, "line_from": 9, "line_to": 64, "snippet": "  Future<bool> isExternalDbAvailable(String dbName);\n\n  /// Download an external database\n  Future<Either<String, bool>> downloadExternalDb({\n    required String dbName,\n    required String url,\n    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  });\n}\n\n/// Implementation of ExternalDbRepository\nclass ExternalDbRepositoryImpl implements ExternalDbRepository {\n  static const String _tag = 'ExternalDbRepositoryImpl';\n  final Map<String, CancelToken> _cancelTokens = {};\n\n  @override\n  Future<bool> isExternalDbAvailable(String dbName) async {\n    try {\n      return await ExternalDbFactory.doesExternalDbExist(dbName);\n    } catch (e) {\n      Logger.error('Error checking if external DB is available: $e', _tag);\n      return false;\n    }\n  }\n\n  @override\n  Future<Either<String, bool>> downloadExternalDb({\n    required String dbName,\n    required String url,\n    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    try {\n      _cancelTokens[dbName] = cancelToken;\n\n      final result = await ExternalDbFactory.downloadExternalDb(\n        dbName: dbName,\n        url: url,\n        onProgress: onProgress,\n        isCancelled: () => cancelToken.isCancelled,\n      );\n\n      if (result) {\n        return right(true);\n      } else {\n        return left('Failed to download or validate the database');\n      }\n    } catch (e) {\n      Logger.error('Error downloading external DB: $e', _tag);\n      return left('Error downloading database: $e');\n    } finally {\n      _cancelTokens.remove(dbName);\n    }\n  }\n}"}, {"structure_type": "function", "name": "getTextMushafDatabaseFile", "docstring": "Retrieves the File object representing the database file location.", "module": "mushaf", "file_path": "Quran-Majeed/lib/domain/repositories/mushaf/i_text_mushaf_local_data_source.dart", "file_name": "i_text_mushaf_local_data_source.dart", "line": 8, "line_from": 8, "line_to": 24, "snippet": "  Future<File> getTextMushafDatabaseFile();\n\n  /// Checks if the Text Mushaf database file exists on the device.\n  Future<bool> isTextMushafDatabaseAvailable();\n\n  /// Gets layout information for a specific page from a specified layout table.\n  Future<List<dynamic>> getLayoutForPage({required int pageNumber, required String layoutTableName});\n\n  /// Gets words within a specific range (based on word_number_all).\n  Future<List<TextWordEntry>> getWordsForRange({required int rangeStart, required int rangeEnd});\n\n  /// Gets words for a specific Ayah.\n  Future<List<TextWordEntry>> getWordsForAyah({required int surahNumber, required int ayahNumber});\n\n  /// Debug method to query a layout table for a specific page\n  Future<List<dynamic>> debugQueryLayoutTable({required String tableName, required int pageNumber});\n}"}, {"structure_type": "function", "name": "downloadMushaf", "docstring": "", "module": "mushaf", "file_path": "Quran-Majeed/lib/domain/repositories/mushaf/mushaf_repository.dart", "file_name": "mushaf_repository.dart", "line": 5, "line_from": 5, "line_to": 11, "snippet": "  Future<void> downloadMushaf(String mushafName, {ProgressCallback? onProgress, CancelToken? cancelToken});\n  Future<String> extractMushaf(String mushafName);\n  Future<bool> isMushafDownloaded(String mushafName);\n  Future<String> getMushafDirectory(String mushafName);\n  Future<void> saveLastReadPage(String mushafName, int pageNumber);\n  Future<int?> getLastReadPage(String mushafName);\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "mushaf", "file_path": "Quran-Majeed/lib/domain/repositories/mushaf/text_mushaf_repository.dart", "file_name": "text_mushaf_repository.dart", "line": 9, "line_from": 9, "line_to": 16, "snippet": "    void Function(int received, int total)? onProgress,\n    CancelToken? cancelToken,\n  });\n\n  Future<List<TextLayoutEntity>> getTextLayoutForPage({\n    required int pageNumber,\n    required String layoutType, // e.g., 'indopak_13', 'qpc_v2'\n  });"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "mushaf", "file_path": "Quran-Majeed/lib/domain/repositories/mushaf/text_mushaf_repository.dart", "file_name": "text_mushaf_repository.dart", "line": 37, "line_from": 37, "line_to": 47, "snippet": "    void Function(int received, int total)? onProgress,\n    required CancelToken cancelToken,\n  });\n\n  /// Download a batch of fonts for multiple pages\n  Future<void> downloadPageFontBatch({\n    required List<int> pageNumbers,\n    void Function(int completed, int total)? onBatchProgress,\n    void Function(int pageNumber, double progress)? onFontProgress,\n    required CancelToken cancelToken,\n  });"}, {"structure_type": "function", "name": "getAllPins", "docstring": "", "module": "collections", "file_path": "Quran-Majeed/lib/domain/repositories/collections/pin_repository.dart", "file_name": "pin_repository.dart", "line": 4, "line_from": 4, "line_to": 27, "snippet": "  Future<List<PinEntity>> getAllPins();\n\n  Future<PinEntity?> getPinBySurah({required int surahId});\n\n  Future<PinEntity?> getPinByName({required String name});\n\n  Future<void> addPin({\n    required PinEntity pin,\n    bool saveToRemote = true,\n  });\n\n  Future<void> deletePin({\n    required String name,\n  });\n\n  Future<void> updatePin({\n    required int surahId,\n    required int ayahNumber,\n    required String name,\n    required String color,\n  });\n\n  Future<List<PinEntity>> syncPinsWithRemote();\n}"}, {"structure_type": "function", "name": "getAllNotes", "docstring": "", "module": "collections", "file_path": "Quran-Majeed/lib/domain/repositories/collections/note_repository.dart", "file_name": "note_repository.dart", "line": 4, "line_from": 4, "line_to": 29, "snippet": "  Future<List<NoteEntity>> getAllNotes();\n\n  Future<List<NoteEntity>> getNotesBySurah({required int surahId});\n\n  Future<NoteEntity?> getNoteByAyah({required int surahId, required int ayahNumber});\n\n  Future<NoteEntity?> getNoteBySurah({required int surahId});\n\n  Future<void> addNote({\n    required NoteEntity note,\n    bool saveToRemote = true,\n  });\n\n  Future<void> deleteNote({required int surahId, required int ayahNumber});\n\n  Future<void> updateNote({\n    required String title,\n    required int surahId,\n    required int ayahNumber,\n    required String content,\n    required String color,\n  });\n\n  Future<void> syncNotesWithRemote();\n\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "grammar", "file_path": "Quran-Majeed/lib/domain/use_cases/grammar/download_grammar_database_use_case.dart", "file_name": "download_grammar_database_use_case.dart", "line": 18, "line_from": 18, "line_to": 25, "snippet": "    required void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    return mapResultToEither(() => _repository.downloadGrammarDatabase(\n          onProgress: onProgress,\n          cancelToken: cancelToken,\n        ));\n  }"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "collection", "file_path": "Quran-Majeed/lib/domain/use_cases/collection/import_collections.dart", "file_name": "import_collections.dart", "line": 24, "line_from": 24, "line_to": 110, "snippet": "  Future<Either<String, String>> execute(String collectionJsonString) async {\n    return mapResultToEither(() async {\n      try {\n        _validateFile(collectionJsonString);\n\n        final Map<String, dynamic> jsonData = jsonDecode(collectionJsonString);\n        if (!jsonData.containsKey('data')) {\n          throw Exception('Invalid file format: Missing \"data\" field');\n        }\n\n        final (bookmarks, plans, pins, notes) = await compute(_parseCollections, collectionJsonString);\n\n        await _userDataRepository.saveCollections(\n          bookmarks: bookmarks,\n          memorizationPlans: plans,\n          pins: pins,\n          notes: notes,\n        );\n\n        return \"Your collections have been imported successfully.\";\n      } catch (e) {\n        showMessage(message: \"Import failed: ${e.toString()}\\nPlease make sure you're using a valid backup file.\");\n        throw Exception(\"Import failed: ${e.toString()}\");\n      }\n    });\n  }\n\n  void _validateFile(String collectionJsonString) {\n    if (collectionJsonString.isEmpty) throw Exception(\"The file is empty.\");\n\n    try {\n      final decoded = jsonDecode(collectionJsonString);\n      if (decoded is! Map<String, dynamic>) {\n        throw Exception(\"Invalid JSON format: Root must be an object\");\n      }\n    } catch (e) {\n      throw Exception(\"Invalid JSON format: ${e.toString()}\");\n    }\n  }\n}\n\nFuture<(List<BookmarkEntity>, List<MemorizationPlanEntity>, List<PinEntity>, List<NoteEntity>)> _parseCollections(\n    String collectionJsonString) async {\n  final Map<String, dynamic> collectionMap = jsonDecode(collectionJsonString) as Map<String, dynamic>;\n\n  if (!collectionMap.containsKey(\"data\")) {\n    throw Exception(\"Invalid file format: Missing 'data' field\");\n  }\n\n  final Map<String, dynamic> data = collectionMap['data'] as Map<String, dynamic>;\n\n  // Create separate JSON strings for bookmarks, plans and pins\n  final String bookmarksJson = jsonEncode({\n    'version': collectionMap['version'] ?? 1,\n    'last_updated': collectionMap['last_updated'] ?? DateTime.now().toIso8601String(),\n    'bookmarks': data['bookmarks'] ?? [],\n  });\n\n  final String plansJson = jsonEncode({\n    'version': collectionMap['version'] ?? 1,\n    'last_updated': collectionMap['last_updated'] ?? DateTime.now().toIso8601String(),\n    'memorization_plans': data['memorization_plans'] ?? [],\n  });\n\n  final String pinsJson = jsonEncode({\n    'version': collectionMap['version'] ?? 1,\n    'last_updated': collectionMap['last_updated'] ?? DateTime.now().toIso8601String(),\n    'pins': data['pins'] ?? [],\n  });\n\n  final String notesJson = jsonEncode({\n    'version': collectionMap['version'] ?? 1,\n    'last_updated': collectionMap['last_updated'] ?? DateTime.now().toIso8601String(),\n    'notes': data['notes'] ?? [],\n  });\n\n  try {\n    final List<BookmarkEntity> bookmarks = await convertJsonToBookmarks(bookmarksJson);\n    final List<MemorizationPlanEntity> plans = await convertJsonToMemorizationPlans(plansJson);\n    final List<PinEntity> pins = await convertJsonToPins(pinsJson);\n    final List<NoteEntity> notes = await convertJsonToNotes(notesJson);\n\n    return (bookmarks, plans, pins, notes);\n  } catch (e) {\n    throw Exception(\"Error parsing collections: $e\");\n  }\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "collection", "file_path": "Quran-Majeed/lib/domain/use_cases/collection/export_collections.dart", "file_name": "export_collections.dart", "line": 20, "line_from": 20, "line_to": 59, "snippet": "  Future<Either<String, String>> execute() async {\n    return mapResultToEither(() async {\n      try {\n        final List<BookmarkEntity> bookmarks = await _userDataRepository.getAllBookmarks();\n        final List<MemorizationPlanEntity> plans = await _userDataRepository.getAllMemorizationPlans();\n        final List<PinEntity> pins = await _userDataRepository.getAllPins();\n        final List<NoteEntity> notes = await _userDataRepository.getAllNotes();\n\n        final String exportData = await compute(\n          _generateExportData,\n          (bookmarks, plans, pins, notes),\n        );\n\n        return exportData;\n      } catch (e) {\n     showMessage(message: e.toString());\n        throw Exception(\"Failed to export collections.\");\n      }\n    });\n  }\n}\n\nFuture<String> _generateExportData(\n  (List<BookmarkEntity>, List<MemorizationPlanEntity>, List<PinEntity>, List<NoteEntity>) collections,\n) async {\n  final (bookmarks, plans, pins, notes) = collections;\n\n  final Map<String, dynamic> exportData = {\n    'version': 1,\n    'last_updated': DateTime.now().toIso8601String(),\n    'data': {\n      'bookmarks': bookmarks.map((b) => b.toJson()).toList(),\n      'memorization_plans': plans.map((p) => p.toJson()).toList(),\n      'pins': pins.map((p) => p.toJson()).toList(),\n      'notes': notes.map((n) => n.toJson()).toList(),\n    },\n  };\n\n  return jsonEncode(exportData);\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "pins", "file_path": "Quran-Majeed/lib/domain/use_cases/collection/pins/sort_pin_use_case.dart", "file_name": "sort_pin_use_case.dart", "line": 19, "line_from": 19, "line_to": 42, "snippet": "  Future<Either<String, List<PinEntity>>> execute({\n    required SortOptionEntity option,\n    required List<PinEntity> pins,\n  }) async {\n    return mapResultToEither(() async {\n      final List<PinEntity> sortedPins = await compute(_sortPins, SortParams(option, pins));\n      return sortedPins;\n    });\n  }\n}\n\nList<PinEntity> _sortPins(SortParams params) {\n  final option = params.option;\n  final pins = params.pins;\n\n  switch (option.type) {\n    case SortOptionType.name:\n      return _sortByName(pins);\n    case SortOptionType.createdDate:\n      return _sortByCreatedAt(pins);\n    case SortOptionType.updatedDate:\n      return _sortByUpdatedAt(pins);\n  }\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "notes", "file_path": "Quran-Majeed/lib/domain/use_cases/collection/notes/sort_note_use_case.dart", "file_name": "sort_note_use_case.dart", "line": 19, "line_from": 19, "line_to": 42, "snippet": "  Future<Either<String, List<NoteEntity>>> execute({\n    required SortOptionEntity option,\n    required List<NoteEntity> notes,\n  }) async {\n    return mapResultToEither(() async {\n      final List<NoteEntity> sortedNotes = await compute(_sortNotes, SortParams(option, notes));\n      return sortedNotes;\n    });\n  }\n}\n\nList<NoteEntity> _sortNotes(SortParams params) {\n  final option = params.option;\n  final notes = params.notes;\n\n  switch (option.type) {\n    case SortOptionType.name:\n      return _sortByName(notes);\n    case SortOptionType.createdDate:\n      return _sortByCreatedAt(notes);\n    case SortOptionType.updatedDate:\n      return _sortByUpdatedAt(notes);\n  }\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "bookmarks", "file_path": "Quran-Majeed/lib/domain/use_cases/collection/bookmarks/search_bookmark.dart", "file_name": "search_bookmark.dart", "line": 12, "line_from": 12, "line_to": 36, "snippet": "  Future<Either<String, List<BookmarkFolderEntity>>> execute({\n    required String query,\n    required List<BookmarkFolderEntity> allFolders,\n  }) async {\n    return mapResultToEither(() async {\n      return _searchLock.synchronized(() async {\n        if (query.isEmpty) return allFolders;\n        final List<BookmarkFolderEntity> filteredFolders =\n            await compute(_filterFolderByQuery, (allFolders, query));\n        return filteredFolders;\n      });\n    });\n  }\n}\n\nFuture<List<BookmarkFolderEntity>> _filterFolderByQuery(\n  (List<BookmarkFolderEntity>, String) param,\n) async {\n  final (allFolders, query) = param;\n  final String normalizedQuery = query.trim().toLowerCase();\n\n  return allFolders.where((folder) => \n    folder.name.toLowerCase().contains(normalizedQuery)\n  ).toList();\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "bookmarks", "file_path": "Quran-Majeed/lib/domain/use_cases/collection/bookmarks/sort_bookmark.dart", "file_name": "sort_bookmark.dart", "line": 19, "line_from": 19, "line_to": 45, "snippet": "  Future<Either<String, List<BookmarkFolderEntity>>> execute({\n    required SortOptionEntity option,\n    required List<BookmarkFolderEntity> folders,\n  }) async {\n    return mapResultToEither(() async {\n      // Use compute with SortParams\n      final List<BookmarkFolderEntity> sortedBookmarks =\n          await compute(_sortBookmarks, SortParams(option, folders));\n      return sortedBookmarks;\n    });\n  }\n}\n\n// Update the sorting function to accept SortParams\nList<BookmarkFolderEntity> _sortBookmarks(SortParams params) {\n  final option = params.option;\n  final folders = params.folders;\n\n  switch (option.type) {\n    case SortOptionType.name:\n      return _sortByName(folders);\n    case SortOptionType.createdDate:\n      return _sortByCreatedAt(folders);\n    case SortOptionType.updatedDate:\n      return _sortByUpdatedAt(folders);\n  }\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "bookmarks", "file_path": "Quran-Majeed/lib/domain/use_cases/collection/bookmarks/save_bookmarks_to_ayah.dart", "file_name": "save_bookmarks_to_ayah.dart", "line": 16, "line_from": 16, "line_to": 56, "snippet": "  Future<Either<String, String>> execute({\n    required int surahID,\n    required int ayahID,\n    required List<BookmarkFolderEntity> savingFolders,\n  }) async {\n    return mapResultToEither(() async {\n      final List<BookmarkEntity> generatedBookmarks =\n          await _mapBookmarkFoldersIntoBookmarks(savingFolders, surahID, ayahID);\n      await _userDataRepository.saveBookmarksToAyah(\n        surahID: surahID,\n        ayahID: ayahID,\n        bookmarks: generatedBookmarks,\n      );\n      return savingFolders.isNotEmpty ? \"Collection saved\" : \"\";\n    });\n  }\n\n  Future<List<BookmarkEntity>> _mapBookmarkFoldersIntoBookmarks(\n    List<BookmarkFolderEntity> folders,\n    int surahID,\n    int ayahID,\n  ) async {\n    final List<BookmarkEntity> bookmarks = await compute(\n      _mapBookmarkFoldersIntoBookmarksPure,\n      (folders, surahID, ayahID),\n    );\n    return bookmarks;\n  }\n}\n\nList<BookmarkEntity> _mapBookmarkFoldersIntoBookmarksPure(\n  (List<BookmarkFolderEntity>, int, int) param,\n) {\n  final (folders, surahID, ayahID) = param;\n  final List<BookmarkEntity> generatedBookmarks = folders\n      .map(\n        (folder) => _mapBookmarkFolderToBookmark(folder: folder, surahID: surahID, ayahID: ayahID),\n      )\n      .toList();\n  return generatedBookmarks;\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "translation", "file_path": "Quran-Majeed/lib/domain/use_cases/translation/get_non_default_use_case.dart", "file_name": "get_non_default_use_case.dart", "line": 15, "line_from": 15, "line_to": 23, "snippet": "    void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) {\n    return mapResultToEither(() => _translationRepository.getNonDefaultTranslation(\n          file: file,\n          onProgress: onProgress,\n          cancelToken: cancelToken,\n        ));\n  }"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "corpus", "file_path": "Quran-Majeed/lib/domain/use_cases/corpus/get_corpus_data_use_case.dart", "file_name": "get_corpus_data_use_case.dart", "line": 16, "line_from": 16, "line_to": 34, "snippet": "  Future<List<CorpusTableData>> execute(GetCorpusDataParams params) async {\n    return getRight(\n      () => repository.getCorpusData(\n        suraId: params.suraId,\n        ayahId: params.ayahId,\n      ),\n    );\n  }\n}\n\nclass GetCorpusDataParams {\n  final int suraId;\n  final int ayahId;\n\n  GetCorpusDataParams({\n    required this.suraId,\n    required this.ayahId,\n  });\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "subjectwise", "file_path": "Quran-Majeed/lib/domain/use_cases/subjectwise/get_subject_by_id_usecase.dart", "file_name": "get_subject_by_id_usecase.dart", "line": 16, "line_from": 16, "line_to": 32, "snippet": "  Future<Either<String, SubjectEntity?>> execute({required GetSubjectByIdParams params}) async {\n    return mapResultToEither(() => _repository.getSubjectById(\n          id: params.id,\n          language: params.language,\n        ));\n  }\n}\n\nclass GetSubjectByIdParams {\n  final int id;\n  final String language;\n\n  const GetSubjectByIdParams({\n    required this.id,\n    required this.language,\n  });\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "info", "file_path": "Quran-Majeed/lib/domain/use_cases/info/get_drawer_information.dart", "file_name": "get_drawer_information.dart", "line": 14, "line_from": 14, "line_to": 50, "snippet": "  Future<Either<String, String>> execute({\n    required DrawerInfo info,\n  }) async =>\n      mapResultToEither(() async => _getText(info));\n\n  Future<String> _getText(DrawerInfo info) async {\n    switch (info) {\n      case DrawerInfo.sadaqahJariah:\n        return _infoRepository.getSadaqahJariah();\n      case DrawerInfo.privacyPolicy:\n        return _infoRepository.getPrivacyPolicy();\n      case DrawerInfo.aboutUs:\n        return _infoRepository.getAboutUs();\n      case DrawerInfo.thanksAndCredit:\n        return _infoRepository.getThanksAndCredit();        \n      case DrawerInfo.contactUs:\n        return _infoRepository.getContactUs();      \n      case DrawerInfo.aboutTafsir:\n        return _infoRepository.getAboutTafsir();      \n      case DrawerInfo.helpUs:\n        return _infoRepository.getHelpUs();\n      case DrawerInfo.aboutApp:\n        return _infoRepository.getAboutApp();   \n    }\n  }\n}\n\nenum DrawerInfo {\n  sadaqahJariah,\n  privacyPolicy,\n  aboutUs,\n  thanksAndCredit,\n  contactUs,\n  aboutTafsir,\n  helpUs,\n  aboutApp,\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "audio", "file_path": "Quran-Majeed/lib/domain/use_cases/audio/download_and_save_audio_location_use_case.dart", "file_name": "download_and_save_audio_location_use_case.dart", "line": 15, "line_from": 15, "line_to": 26, "snippet": "    void Function(int percentage)? onProgress,\n    required CancelToken cancelToken,\n  }) {\n    return mapResultToEither(() async {\n      await _audioRepository.downloadAudioFiles(\n        surahID: surahID,\n        reciter: reciter,\n        onProgress: onProgress,\n        cancelToken: cancelToken,\n      );\n    });\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "tafseer", "file_path": "Quran-Majeed/lib/domain/use_cases/tafseer/get_tafseer_use_case.dart", "file_name": "get_tafseer_use_case.dart", "line": 19, "line_from": 19, "line_to": 33, "snippet": "    void Function(int percentage)? onProgress,\n    required int surahID,\n    required TafseerType tafseerType,\n    required CancelToken cancelToken,\n  }) async {\n    return mapResultToEither(\n      () async => _tafseerRepository.getTafseer(\n        file: file,\n        onProgress: onProgress,\n        surahID: surahID,\n        tafseerType: tafseerType,\n        cancelToken: cancelToken,\n      ),\n    );\n  }"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "word_by_word", "file_path": "Quran-Majeed/lib/domain/use_cases/word_by_word/get_words_for_multiple_ayahs_use_case.dart", "file_name": "get_words_for_multiple_ayahs_use_case.dart", "line": 15, "line_from": 15, "line_to": 36, "snippet": "  Future<Either<String, List<WordByWordEntity>>> execute({\n    required List<int> surahNumbers,\n    required List<int> ayahNumbers,\n  }) async {\n    return mapResultToEither(() async {\n      return await _repository.getWordsForMultipleAyahs(\n        surahNumbers: surahNumbers,\n        ayahNumbers: ayahNumbers,\n      );\n    });\n  }\n}\n\nclass GetWordsForMultipleAyahsParams {\n  final List<int> surahNumbers;\n  final List<int> ayahNumbers;\n\n  GetWordsForMultipleAyahsParams({\n    required this.surahNumbers,\n    required this.ayahNumbers,\n  });\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "word_by_word", "file_path": "Quran-Majeed/lib/domain/use_cases/word_by_word/download_wbw_language_use_case.dart", "file_name": "download_wbw_language_use_case.dart", "line": 15, "line_from": 15, "line_to": 23, "snippet": "    required void Function(int) onProgress,\n    required CancelToken cancelToken,\n  }) async {\n    return mapResultToEither(() => _repository.downloadWbwLanguage(\n          wbwFile,\n          onProgress,\n          cancelToken,\n        ));\n  }"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "text_mushaf", "file_path": "Quran-Majeed/lib/domain/use_cases/text_mushaf/get_words_for_range_text_mushaf_use_case.dart", "file_name": "get_words_for_range_text_mushaf_use_case.dart", "line": 14, "line_from": 14, "line_to": 33, "snippet": "  Future<Either<String, List<TextWordEntity>>> execute({required GetWordsForRangeParams params}) async {\n\n      final List<TextWordEntity> words = await _repository.getWordsForRange(\n        rangeStart: params.rangeStart,\n        rangeEnd: params.rangeEnd,\n      );\n      return Right(words);\n    \n  }\n}\n\nclass GetWordsForRangeParams {\n  final int rangeStart;\n  final int rangeEnd;\n\n  const GetWordsForRangeParams({\n    required this.rangeStart,\n    required this.rangeEnd,\n  });\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "text_mushaf", "file_path": "Quran-Majeed/lib/domain/use_cases/text_mushaf/initialize_text_mushaf_database_use_case.dart", "file_name": "initialize_text_mushaf_database_use_case.dart", "line": 17, "line_from": 17, "line_to": 24, "snippet": "    void Function(int received, int total)? onProgress,\n    CancelToken? cancelToken,\n  }) async {\n    return mapResultToEither(() => _repository.initializeDatabase(\n          onProgress: onProgress,\n          cancelToken: cancelToken,\n        ));\n  }"}, {"structure_type": "class", "name": "CopyEntity", "docstring": "", "module": "ui", "file_path": "Quran-Majeed/lib/domain/entities/ui/copy_entity.dart", "file_name": "copy_entity.dart", "line": 1, "line_from": 1, "line_to": 32, "snippet": "class CopyEntity {\n  final String arabicText;\n  final String translationText;\n  final CopyType copyType;\n  final int startAyah;\n  final int endAyah;\n  final String surahName;\n\n  const CopyEntity({\n    required this.arabicText,\n    required this.translationText,\n    required this.copyType,\n    required this.startAyah,\n    required this.endAyah,\n    required this.surahName,\n  });\n\n  String get formattedText {\n    switch (copyType) {\n      case CopyType.normalCopy:\n        return arabicText;\n      case CopyType.translationCopy:\n        return translationText;\n      case CopyType.arabicCopy:\n        return arabicText;\n    }\n  }\n}\n\nenum CopyType { normalCopy, translationCopy, arabicCopy }\n"}, {"structure_type": "class", "name": "SettingsStateEntity extends Equatable", "docstring": "", "module": "settings", "file_path": "Quran-Majeed/lib/domain/entities/settings/setting_state_entity.dart", "file_name": "setting_state_entity.dart", "line": 5, "line_from": 5, "line_to": 168, "snippet": "class SettingsStateEntity extends Equatable {\n  const SettingsStateEntity({\n    required this.showArabic,\n    required this.showTranslation,\n    required this.arabicFontSize,\n    required this.localFontSize,\n    required this.arabicFontScript,\n    required this.arabicFont,\n    required this.keepScreenOn,\n    required this.showWordByWord,\n    required this.tafseerFontSize,\n    required this.showDailyNotification,\n    required this.dailyNotificationTime,\n    required this.currentThemeName,\n    required this.currentLanguage,\n    required this.fontFamily,\n    required this.fontSize,\n    required this.showTajweed,\n  });\n\n  factory SettingsStateEntity.empty() {\n    return const SettingsStateEntity(\n      showArabic: true,\n      showTranslation: true,\n      arabicFontSize: 27,\n      localFontSize: 15,\n      arabicFontScript: ArabicFontScript.uthmani,\n      arabicFont: ArabicFonts.kfgq,\n      keepScreenOn: false,\n      showWordByWord: false,\n      tafseerFontSize: 15,\n      showDailyNotification: true,\n      dailyNotificationTime: TimeOfDay(hour: 9, minute: 0),\n      currentThemeName: 'Light',\n      currentLanguage: 'English',\n      fontFamily: FontFamily.inter,\n      fontSize: 14,\n      showTajweed: false,\n    );\n  }\n\n  final bool showArabic;\n  final bool showTranslation;\n  final double arabicFontSize;\n  final double localFontSize;\n  final ArabicFontScript arabicFontScript;\n  final ArabicFonts arabicFont;\n  final bool keepScreenOn;\n  final bool showWordByWord;\n  final double tafseerFontSize;\n  final bool showDailyNotification;\n  final TimeOfDay dailyNotificationTime;\n  final String currentThemeName;\n  final String currentLanguage;\n  final String fontFamily;\n  final double fontSize;\n  final bool showTajweed;\n\n  @override\n  List<Object?> get props => [\n        showArabic,\n        showTranslation,\n        arabicFontSize,\n        localFontSize,\n        arabicFontScript,\n        arabicFont,\n        keepScreenOn,\n        showWordByWord,\n        tafseerFontSize,\n        showDailyNotification,\n        dailyNotificationTime,\n        currentThemeName,\n        currentLanguage,\n        fontFamily,\n        fontSize,\n        showTajweed,\n      ];\n\n  SettingsStateEntity copyWith({\n    bool? showArabic,\n    bool? showTranslation,\n    double? arabicFontSize,\n    double? localFontSize,\n    ArabicFontScript? arabicFontScript,\n    ArabicFonts? arabicFont,\n    bool? keepScreenOn,\n    bool? showWordByWord,\n    double? tafseerFontSize,\n    bool? showDailyNotification,\n    TimeOfDay? dailyNotificationTime,\n    String? currentThemeName,\n    String? currentLanguage,\n    String? fontFamily,\n    double? fontSize,\n    bool? showTajweed,\n  }) {\n    return SettingsStateEntity(\n      showArabic: showArabic ?? this.showArabic,\n      showTranslation: showTranslation ?? this.showTranslation,\n      arabicFontSize: arabicFontSize ?? this.arabicFontSize,\n      localFontSize: localFontSize ?? this.localFontSize,\n      arabicFontScript: arabicFontScript ?? this.arabicFontScript,\n      arabicFont: arabicFont ?? this.arabicFont,\n      keepScreenOn: keepScreenOn ?? this.keepScreenOn,\n      showWordByWord: showWordByWord ?? this.showWordByWord,\n      tafseerFontSize: tafseerFontSize ?? this.tafseerFontSize,\n      showDailyNotification:\n          showDailyNotification ?? this.showDailyNotification,\n      dailyNotificationTime:\n          dailyNotificationTime ?? this.dailyNotificationTime,\n      currentThemeName: currentThemeName ?? this.currentThemeName,\n      currentLanguage: currentLanguage ?? this.currentLanguage,\n      fontFamily: fontFamily ?? this.fontFamily,\n      fontSize: fontSize ?? this.fontSize,\n      showTajweed: showTajweed ?? this.showTajweed,\n    );\n  }\n}\n\nenum ArabicFontScript { uthmani, indoPak }\n\nenum ArabicFonts {\n  kfgq,\n  meQuran,\n  kitab,\n  alQalamQuranMajeed,\n  amiriQuran,\n  lateef,\n  nooreHira,\n  nooreHuda,\n  indoPakNastaleeq,\n  uthmani,\n  husrevHatti,\n}\n\nMap<ArabicFonts, String> arabicFontToFontFamilyMap = {\n  ArabicFonts.kfgq: FontFamily.kfgq,\n  ArabicFonts.meQuran: FontFamily.meQuran,\n  ArabicFonts.kitab: FontFamily.kitab,\n  ArabicFonts.alQalamQuranMajeed: FontFamily.alQalamQuranMajeed,\n  ArabicFonts.amiriQuran: FontFamily.amiriQuran,\n  ArabicFonts.lateef: FontFamily.lateef,\n  ArabicFonts.nooreHira: FontFamily.nooreHira,\n  ArabicFonts.nooreHuda: FontFamily.nooreHuda,\n  ArabicFonts.indoPakNastaleeq: FontFamily.indoPakNastaleeq,\n  ArabicFonts.uthmani: FontFamily.uthmani,\n  ArabicFonts.husrevHatti: FontFamily.husrevHatti,\n};\n\nMap<ArabicFonts, String> arabicFontToNameMap = {\n  ArabicFonts.kfgq: \"KFGQ\",\n  ArabicFonts.meQuran: \"MeQuran\",\n  ArabicFonts.kitab: \"Kitab\",\n  ArabicFonts.alQalamQuranMajeed: \"Al Qalam Quran Majeed\",\n  ArabicFonts.amiriQuran: \"Amiri Quran\",\n  ArabicFonts.lateef: \"Lateef\",\n  ArabicFonts.nooreHira: \"Noore Hira\",\n  ArabicFonts.nooreHuda: \"Noore Huda\",\n  ArabicFonts.indoPakNastaleeq: \"IndoPak Nastaleeq\",\n  ArabicFonts.uthmani: \"Uthmani\",\n  ArabicFonts.husrevHatti: \"Husrev Hatti\",\n};\n"}, {"structure_type": "class", "name": "AnnouncementEntity extends Equatable", "docstring": "", "module": "notification", "file_path": "Quran-Majeed/lib/domain/entities/notification/announcement_entity.dart", "file_name": "announcement_entity.dart", "line": 5, "line_from": 5, "line_to": 35, "snippet": "class AnnouncementEntity extends Equatable {\n  const AnnouncementEntity({\n    required this.ayahList,\n    required this.promotionalMessage,\n    required this.announcementType,\n  });\n\n  factory AnnouncementEntity.empty() => AnnouncementEntity(\n        ayahList: const [\n        ],\n        promotionalMessage: PromotionalMessageEntity.empty(),\n        announcementType: AnnouncementType.ayah,\n      );\n\n  final List<DailyAyah> ayahList;\n  final PromotionalMessageEntity? promotionalMessage;\n  final AnnouncementType announcementType;\n\n  @override\n  List<Object?> get props => [ayahList, promotionalMessage, announcementType];\n\n  AnnouncementEntity close() => AnnouncementEntity(\n        ayahList: ayahList,\n        promotionalMessage: null,\n        announcementType: AnnouncementType.ayah,\n      );\n}\n\nenum AnnouncementType { ayah, promotionalMessage }\n"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/settings/widgets/custom_slider.dart", "file_name": "custom_slider.dart", "line": 35, "line_from": 35, "line_to": 202, "snippet": "  void initState() {\n    super.initState();\n    _currentSliderValue = widget.defaultValue;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    final Color activeColor = widget.activeColor ?? context.color.primaryColor;\n    final Color inactiveColor =\n        widget.inactiveColor ?? activeColor.withOpacityInt(0.35);\n\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Text(\n          widget.title,\n          style: theme.textTheme.bodyMedium!.copyWith(\n            fontWeight: FontWeight.w600,\n            color: isDarkMode(context)\n                ? context.color.subtitleColor\n                : context.color.blackColor,\n          ),\n        ),\n        gapH10,\n        Row(\n          children: [\n            Expanded(\n              child: SliderTheme(\n                data: SliderTheme.of(context).copyWith(\n                  // valueIndicatorTextStyle: TextStyle(\n                  //   color: context.color.primaryColor,\n                  //   fontSize: bodyMediumFontSize,\n                  //   fontWeight: FontWeight.w600,\n                  // ),\n                  // valueIndicatorShape: AbovePointerSliderValueIndicatorShape(\n                  //   valueStyle: TextStyle(\n                  //     color: context.color.primaryColor,\n                  //     fontSize: bodyMediumFontSize,\n                  //     fontWeight: FontWeight.w600,\n                  //   ),\n                  //   context: context,\n                  // ),\n                  // showValueIndicator: ShowValueIndicator.always,\n                  trackHeight: _trackHeight,\n                  activeTrackColor: activeColor,\n                  inactiveTrackColor: inactiveColor,\n                  thumbColor: activeColor,\n                  thumbShape:\n                      const RoundSliderThumbShape(enabledThumbRadius: 5),\n                  overlayShape:\n                      const RoundSliderOverlayShape(overlayRadius: 12),\n                  tickMarkShape: SliderTickMarkShape.noTickMark,\n                  trackShape: CustomTrackShape(trackHeight: _trackHeight),\n                ),\n                child: Slider(\n                  value: _currentSliderValue,\n                  min: widget.min,\n                  max: widget.max,\n                  label: _currentSliderValue\n                      .round()\n                      .toString()\n                      .toLocalizedNumber(context),\n                  onChanged: (double value) {\n                    setState(() {\n                      _currentSliderValue = value;\n                    });\n                    widget.onChanged(value);\n                  },\n                ),\n              ),\n            ),\n            gapW5,\n            Container(\n              alignment: Alignment.centerRight,\n              width: 20,\n              child: Text(\n                _currentSliderValue\n                    .round()\n                    .toString()\n                    .toLocalizedNumber(context),\n                style: TextStyle(\n                  fontSize: 13,\n                  fontWeight: FontWeight.w600,\n                  color: theme.primaryColor,\n                ),\n              ),\n            ),\n          ],\n        ),\n      ],\n    );\n  }\n}\n\n// CustomTrackShape to customize track height\nclass CustomTrackShape extends SliderTrackShape {\n  final double trackHeight;\n\n  const CustomTrackShape({required this.trackHeight});\n\n  @override\n  Rect getPreferredRect({\n    required RenderBox parentBox,\n    Offset offset = Offset.zero,\n    required SliderThemeData sliderTheme,\n    bool isEnabled = false,\n    bool isDiscrete = false,\n  }) {\n    final double trackHeight = sliderTheme.trackHeight ?? this.trackHeight;\n\n    final double trackLength = parentBox.size.width;\n\n    final Rect trackRect = Rect.fromLTWH(\n      offset.dx,\n      offset.dy + (parentBox.size.height - trackHeight) / 2,\n      trackLength,\n      trackHeight,\n    );\n\n    return trackRect;\n  }\n\n  @override\n  void paint(\n    PaintingContext context,\n    Offset offset, {\n    required RenderBox parentBox,\n    required SliderThemeData sliderTheme,\n    required Animation<double> enableAnimation,\n    required Offset thumbCenter,\n    bool isEnabled = false,\n    bool isDiscrete = false,\n    TextDirection? textDirection,\n    Offset? secondaryOffset,\n  }) {\n    final Paint activePaint = Paint()..color = sliderTheme.activeTrackColor!;\n    final Paint inactivePaint = Paint()\n      ..color = sliderTheme.inactiveTrackColor!;\n\n    final double trackHeight = sliderTheme.trackHeight ?? this.trackHeight;\n    final double trackRadius = trackHeight / 2;\n    final double trackLength = parentBox.size.width;\n\n    final RRect activeTrackRRect = RRect.fromRectAndRadius(\n      Rect.fromLTWH(\n        offset.dx,\n        thumbCenter.dy - trackRadius,\n        thumbCenter.dx - offset.dx,\n        trackHeight,\n      ),\n      Radius.circular(trackRadius),\n    );\n\n    final RRect inactiveTrackRRect = RRect.fromRectAndRadius(\n      Rect.fromLTWH(\n        thumbCenter.dx,\n        thumbCenter.dy - (trackHeight / 2),\n        trackLength - thumbCenter.dx,\n        trackHeight,\n      ),\n      Radius.circular(trackHeight / 2),\n    );\n\n    context.canvas.drawRRect(activeTrackRRect, activePaint);\n    context.canvas.drawRRect(inactiveTrackRRect, inactivePaint);\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "mini_settings", "file_path": "Quran-Majeed/lib/presentation/settings/widgets/mini_settings/mini_settings_drawer.dart", "file_name": "mini_settings_drawer.dart", "line": 31, "line_from": 31, "line_to": 176, "snippet": "  Widget build(BuildContext context) {\n    final SettingsPresenter settingPresenter = locate();\n    final ThemeData themeData = Theme.of(context);\n\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      PageType pageType = PageType.settings;\n      if (isAyahPage) {\n        pageType = PageType.ayah;\n      } else if (isTafseerPage || showOnlyFontSettings) {\n        pageType = PageType.tafseer;\n      }\n      settingPresenter.initializeMiniSettings(pageType: pageType);\n    });\n\n    return Container(\n      margin: EdgeInsets.only(\n        top: MediaQuery.of(context).padding.top,\n      ),\n      height: double.infinity,\n      width: QuranScreen.width * 0.75,\n      decoration: BoxDecoration(\n        color: themeData.scaffoldBackgroundColor,\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(twentyPx),\n        ),\n      ),\n      child: ClipRRect(\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(twentyPx),\n        ),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.start,\n          children: [\n            const MiniSettingsTopBar(),\n            gapH5,\n            Expanded(\n              child: SingleChildScrollView(\n                child: Column(\n                  children: showOnlyFontSettings\n                      ? [\n                          FontSettingsCard(\n                            settingPresenter: settingPresenter,\n                            showTextReview: false,\n                            showTafseerFontSlider: showTafseerFontSlider,\n                          ),\n                        ]\n                      : [\n                          ContentSettingsCard(\n                            settingPresenter: settingPresenter,\n                            isFromSettingsPage: false,\n                          ),\n                          Padding(\n                            padding: EdgeInsets.symmetric(horizontal: twentyPx),\n                            child: BuildDivider(\n                              theme: themeData,\n                            ),\n                          ),\n                          WordByWordSwitch(\n                            settingPresenter: settingPresenter,\n                            theme: themeData,\n                          ),\n                          Padding(\n                            padding: EdgeInsets.symmetric(horizontal: twentyPx),\n                            child: BuildDivider(\n                              theme: themeData,\n                            ),\n                          ),\n                          FontSettingsCard(\n                            settingPresenter: settingPresenter,\n                            showTextReview: false,\n                          ),\n                        ],\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass MiniSettingsTopBar extends StatelessWidget {\n  const MiniSettingsTopBar({\n    super.key,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n    return Container(\n      padding: EdgeInsets.only(\n        left: twelvePx,\n        right: twelvePx,\n        top: twentyOnePx,\n      ),\n      decoration: BoxDecoration(\n        color: themeData.scaffoldBackgroundColor,\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(twentyPx),\n        ),\n      ),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.center,\n        children: [\n          GestureDetector(\n            onTap: () => context.navigatorPop(),\n            child: Padding(\n              padding: paddingH6,\n              child: Icon(\n                Icons.arrow_forward_ios_rounded,\n                size: sixteenPx,\n                color: themeData.primaryColor,\n              ),\n            ),\n          ),\n          gapW8,\n          Align(\n            alignment: Alignment.centerLeft,\n            child: Text(\n              context.l10n.quickTools,\n              style: themeData.textTheme.headlineSmall?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: themeData.primaryColor,\n              ),\n            ),\n          ),\n          const Spacer(),\n          GestureDetector(\n            onTap: () async {\n              await context.navigatorPush<void>(const SettingsPage());\n            },\n            child: SvgPicture.asset(\n              SvgPath.icSettings,\n              height: twentyOnePx,\n              colorFilter: buildColorFilter(isDarkMode(context)\n                  ? context.color.subtitleColor\n                  : context.color.primaryColor),\n            ),\n          ),\n          gapW10,\n        ],\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "word_by_word_language_selection_bottom_sheet", "file_path": "Quran-Majeed/lib/presentation/settings/widgets/word_by_word_language_selection_bottom_sheet/word_by_word_downloaded_items.dart", "file_name": "word_by_word_downloaded_items.dart", "line": 12, "line_from": 12, "line_to": 58, "snippet": "  final void Function({required String name})? onLanguageSelected;\n  final void Function({required String name})? onLanguageDelete;\n  final ThemeData theme;\n  const WordByWordDownloadedItems({\n    super.key,\n    required this.title,\n    required this.theme,\n    this.selectedLanguage,\n    this.downloadedLanguages,\n    this.onLanguageSelected,\n    this.onLanguageDelete,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Padding(\n          padding: EdgeInsets.symmetric(horizontal: sixteenPx),\n          child: SectionHeader(\n            theme: theme,\n            title:\n                '$title (${downloadedLanguages!.length.toLocalizedString(context)})',\n          ),\n        ),\n        ListView.builder(\n          shrinkWrap: true,\n          physics: const NeverScrollableScrollPhysics(),\n          itemCount: downloadedLanguages!.length,\n          padding: EdgeInsets.zero,\n          itemBuilder: (context, index) {\n            final String name = downloadedLanguages![index];\n\n            return WordByWordDownloadedSingleItem(\n              name: name,\n              isSelected: name == selectedLanguage,\n              onSelect: (String name) => onLanguageSelected?.call(name: name),\n              onDelete: (String name) => onLanguageDelete?.call(name: name),\n              theme: theme,\n            );\n          },\n        ),\n      ],\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "word_by_word_language_selection_bottom_sheet", "file_path": "Quran-Majeed/lib/presentation/settings/widgets/word_by_word_language_selection_bottom_sheet/word_by_word_available_items.dart", "file_name": "word_by_word_available_items.dart", "line": 12, "line_from": 12, "line_to": 68, "snippet": "  final void Function({required String name})? onLanguageDownload;\n  final void Function({required String name})? onLanguageDelete;\n  final ThemeData theme;\n  final bool? isDownloading;\n  final String? activeDownloadId;\n  final int? downloadProgress;\n\n  const WordByWordAvailableItems({\n    super.key,\n    required this.title,\n    required this.items,\n    required this.theme,\n    this.selectedLanguage,\n    this.onLanguageDownload,\n    this.onLanguageDelete,\n    this.isDownloading,\n    this.activeDownloadId,\n    this.downloadProgress,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Padding(\n          padding: EdgeInsets.symmetric(horizontal: sixteenPx),\n          child: SectionHeader(\n            theme: theme,\n            title: '$title (${items.length.toLocalizedString(context)})',\n          ),\n        ),\n        ListView.builder(\n          shrinkWrap: true,\n          physics: const NeverScrollableScrollPhysics(),\n          itemCount: items.length,\n          padding: EdgeInsets.zero,\n          itemBuilder: (context, index) {\n            final WbwDbFileModel file = items[index];\n            final String name = file.name;\n            final String size = file.size;\n\n            return WordByWordAvailableSingleItem(\n              name: name,\n              onDownload: (String name) => onLanguageDownload?.call(name: name),\n              theme: theme,\n              isDownloading: isDownloading!,\n              size: size,\n              activeDownloadId: activeDownloadId,\n              downloadProgress: downloadProgress!,\n            );\n          },\n        ),\n      ],\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "notice", "file_path": "Quran-Majeed/lib/presentation/home/ui/notice/notice_dialog.dart", "file_name": "notice_dialog.dart", "line": 421, "line_from": 421, "line_to": 433, "snippet": "    required void Function(PromotionalMessageEntity) onClose,\n  }) async {\n    final bool? isClosed = await showAnimatedDialog<bool>(\n      context: context,\n      barrierDismissible: true,\n      builder: (context) => NoticeDialog(\n        payload: notice,\n      ),\n      animationType: DialogTransitionType.fadeScale,\n      curve: Curves.fastOutSlowIn,\n    );\n    if (isClosed ?? false) onClose(notice);\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "announcement", "file_path": "Quran-Majeed/lib/presentation/home/ui/announcement/carousel_item.dart", "file_name": "carousel_item.dart", "line": 24, "line_from": 24, "line_to": 69, "snippet": "  Widget build(BuildContext context) {\n    return RepaintBoundary(\n      child: GestureDetector(\n        onTap: onTap,\n        child: _CarouselContent(\n          ayah: ayah,\n          surahName: surahName,\n          theme: theme,\n          context: context,\n        ),\n      ),\n    );\n  }\n}\n\nclass _CarouselContent extends StatelessWidget {\n  const _CarouselContent({\n    required this.ayah,\n    required this.surahName,\n    required this.theme,\n    required this.context,\n  });\n\n  final DailyAyah ayah;\n  final String surahName;\n  final ThemeData theme;\n  final BuildContext context;\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox(\n      width: QuranScreen.width - 70,\n      child: Text(\n        \"${ayah.text} \\n\\n [$surahName ${ayah.surahId.toLocalizedString(context)}:${ayah.ayahId.toLocalizedString(context)}]\",\n        overflow: TextOverflow.ellipsis,\n        maxLines: 7,\n        textAlign: TextAlign.center,\n        style: context.quranText.aText!.copyWith(\n          // color: context.color.whiteColor.withAlpha((0.7 * 255).toInt()),\n\n          height: 1.7,\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/home/presenter/home_presenter.dart", "file_name": "home_presenter.dart", "line": 125, "line_from": 125, "line_to": 135, "snippet": "    required void Function(UpdateInfoEntity) onForceUpdate,\n  }) async {\n    await Future<void>.delayed(4.inSeconds);\n    await parseDataFromEitherWithUserMessage(\n      task: () async => _determineIfNeedForceUpdate.execute(),\n      onDataLoaded: (updateInfo) {\n        final bool needForceUpdate = updateInfo.askToUpdate;\n        if (needForceUpdate) onForceUpdate(updateInfo);\n      },\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/home/presenter/home_presenter.dart", "file_name": "home_presenter.dart", "line": 320, "line_from": 320, "line_to": 334, "snippet": "    required void Function(String promotionUrl) onInternet,\n    required VoidCallback onNoInternet,\n  }) async {\n    final bool isNetworkAvailable = await checkInternetConnection();\n    if (!isNetworkAvailable) {\n      onNoInternet();\n      return;\n    }\n    const String appStoreUrl =\n        \"https://apps.apple.com/us/developer/md-saiful-islam-saif/id1238182913\";\n    const String playStoreUrl =\n        \"https://play.google.com/store/apps/dev?id=5689317609893757784\";\n    final String promotionUrl = Platform.isIOS ? appStoreUrl : playStoreUrl;\n    onInternet(promotionUrl);\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/home/presenter/home_presenter.dart", "file_name": "home_presenter.dart", "line": 367, "line_from": 367, "line_to": 375, "snippet": "    await Future<void>.delayed(5.inSeconds);\n    await _askReviewIfNecessary.execute(askForReview: askForReview);\n  }\n\n  @override\n  void onClose() {\n    _fetchAnnouncementsSub?.cancel();\n    super.onClose();\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/home/widgets/home_page_fancy_background.dart", "file_name": "home_page_fancy_background.dart", "line": 12, "line_from": 12, "line_to": 48, "snippet": "  Widget build(BuildContext context) {\n    // used vector for improved rendering performance\n    return SvgPicture.asset(\n      SvgPath.imgBgHome,\n      height: 55.percentHeight,\n      width: 100.percentWidth,\n      colorFilter: buildColorFilterToChangeColor(\n          context.theme.bannerTheme.backgroundColor!.withOpacityInt(0.8)),\n    );\n  }\n}\n\nclass StartPageFancyBackgroundColor extends StatelessWidget {\n  const StartPageFancyBackgroundColor({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return ClipPath(\n      clipper: OvalBottomBorderClipper(),\n      child: Container(\n        height: 55.percentHeight,\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            stops: const [0.0, 0.42, 1.0],\n            colors: [\n              context.color.gdTop,\n              context.color.gdMiddle,\n              context.color.gdBottom,\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/home/widgets/page_list_widget.dart", "file_name": "page_list_widget.dart", "line": 24, "line_from": 24, "line_to": 119, "snippet": "  Widget build(BuildContext context) {\n    return ListView.builder(\n      padding: EdgeInsets.zero,\n      physics: const NeverScrollableScrollPhysics(),\n      shrinkWrap: true,\n      itemCount: pages.length,\n      itemBuilder: (context, index) {\n        final PageEntity page = pages[index];\n\n        return _buildPageListItem(\n          theme: theme,\n          pageNumber: page.id,\n          context: context,\n          surahName: getTranslatedSurahName(\n              surahNumber: page.startSurahNo, context: context),\n          pageInitialText: page.arabicInitial,\n          onTapPageItem: () async =>\n              await homePresenter.goToSurahDetailsPageWithSpecificAyah(\n            context: context,\n            surahIndex: page.startSurahNo - 1,\n            ayahIndex: page.startAyatNo - 1,\n            isNeedToJump: false,\n            showPageIndicator: true,\n          ),\n        );\n      },\n    );\n  }\n}\n\nOnTapWidget _buildPageListItem({\n  required ThemeData theme,\n  required int pageNumber,\n  required BuildContext context,\n  required String surahName,\n  required String pageInitialText,\n  required VoidCallback onTapPageItem,\n}) {\n  return OnTapWidget(\n    theme: theme,\n    onTap: onTapPageItem,\n    child: Container(\n      margin: EdgeInsets.symmetric(horizontal: twentyPx, vertical: sixteenPx),\n      child: Row(\n        children: [\n          ShowSurahNumberWidget(\n            formatSurahNumber: pageNumber.toLocalizedString(context),\n            theme: theme,\n          ),\n          gapW18,\n          SizedBox(\n            width: 35.percentWidth,\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.start,\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\n                  '${context.l10n.page} ${pageNumber.toLocalizedString(context)}',\n                  overflow: TextOverflow.ellipsis,\n                  style: theme.textTheme.titleLarge?.copyWith(\n                    fontWeight: FontWeight.w600,\n                  ),\n                ),\n                gapH4,\n                Text(\n                  surahName,\n                  overflow: TextOverflow.ellipsis,\n                  style: theme.textTheme.bodySmall!.copyWith(\n                    color: context.color.subtitleColor,\n                  ),\n                ),\n              ],\n            ),\n          ),\n          gapW15,\n          Flexible(\n            child: Align(\n              alignment: Alignment.centerRight,\n              child: Text(\n                pageInitialText,\n                overflow: TextOverflow.clip,\n                maxLines: 1,\n                textDirection: TextDirection.rtl,\n                style: context.quranText.arabicAyah!.copyWith(\n                  fontFamily: FontFamily.alQalamQuranMajeed,\n                  fontSize: nineteenPx,\n                  letterSpacing: 0,\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n    ),\n  );\n}"}, {"structure_type": "function", "name": "show", "docstring": "", "module": "ui", "file_path": "Quran-Majeed/lib/presentation/grammar/ui/grammar_bottom_sheet.dart", "file_name": "grammar_bottom_sheet.dart", "line": 31, "line_from": 31, "line_to": 220, "snippet": "  static Future<void> show({\n    required BuildContext context,\n    required List<WordByWordEntity> wordList,\n    required int selectedWordIndex,\n  }) async {\n    final GrammarPresenter grammarPresenter = locate<GrammarPresenter>();\n    final bool success = await grammarPresenter.loadCorpusDataAndPrepare(\n      suraId: wordList[selectedWordIndex].surah!,\n      ayahId: wordList[selectedWordIndex].ayah!,\n    );\n\n    if (!success || !context.mounted) return;\n\n    final GrammarBottomSheet grammarBottomSheet = GrammarBottomSheet(\n      key: const Key(\"GrammarBottomSheet\"),\n      wordList: wordList,\n      selectedWordIndex: selectedWordIndex,\n    );\n    await grammarPresenter.jumpToPage(selectedWordIndex);\n    if (context.mounted) {\n      await context.showBottomSheet<void>(grammarBottomSheet, context);\n    }\n  }\n\n  @override\n  State<GrammarBottomSheet> createState() => _GrammarBottomSheetState();\n}\n\nclass _GrammarBottomSheetState extends State<GrammarBottomSheet> {\n  late int currentWordIndex;\n\n  String _getTranslation(\n      WordByWordEntity word, GrammarPresenter grammarPresenter, int wordIndex) {\n    final WordByWordPresenter wordByWordPresenter =\n        locate<WordByWordPresenter>();\n    final String selectedLanguage =\n        wordByWordPresenter.currentUiState.selectedLanguage;\n\n    switch (selectedLanguage) {\n      case 'English':\n        return word.en ?? '';\n      case 'Bangla':\n        return word.bn ?? '';\n      default:\n        return CacheData\n                .wordByWordCache[selectedLanguage]?[word.surah ?? 0]\n                    ?[word.ayah ?? 0]?[wordIndex]\n                .translation ??\n            word.en ??\n            '';\n    }\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    currentWordIndex = widget.selectedWordIndex;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    final GrammarPresenter grammarPresenter = locate<GrammarPresenter>();\n\n    return PresentableWidgetBuilder(\n      presenter: grammarPresenter,\n      builder: () {\n        final List<CorpusTableData> corpusData =\n            grammarPresenter.currentUiState.corpusData;\n\n        return Container(\n          decoration: decorateBottomSheet(context),\n          alignment: Alignment.topCenter,\n          height: QuranScreen.width * 1.1,\n          child: Column(\n            key: const Key('grammar_bottom_sheet'),\n            mainAxisSize: MainAxisSize.min,\n            mainAxisAlignment: MainAxisAlignment.start,\n            children: [\n              gapH20,\n              TitleSectionWidget(\n                pageController: grammarPresenter.pageController,\n                wordList: widget.wordList,\n                selectedWordIndex: currentWordIndex,\n              ),\n              gapH15,\n              Flexible(\n                child: PageView.builder(\n                  itemCount: corpusData.length,\n                  reverse: true,\n                  controller: grammarPresenter.pageController,\n                  onPageChanged: (int index) {\n                    setState(() {\n                      currentWordIndex = index;\n                    });\n                  },\n                  itemBuilder: (context, index) {\n                    final CorpusTableData word = corpusData[index];\n                    return Wrap(\n                      alignment: WrapAlignment.center,\n                      children: [\n                        Padding(\n                          padding: EdgeInsets.symmetric(horizontal: twentyPx),\n                          child: Column(\n                            crossAxisAlignment: CrossAxisAlignment.center,\n                            children: [\n                              ArabicWordWidget(\n                                key: const Key(\"ArabicWordWidget\"),\n                                theme: theme,\n                                word: word,\n                              ),\n                              gapH20,\n                              WordPartsOfSpeechWidget(\n                                key: const Key(\"WordPartsOfSpeechWidget\"),\n                                theme: theme,\n                                pos1: word.pos1,\n                                pos2: word.pos2,\n                                pos3: word.pos3,\n                                pos4: word.pos4,\n                                pos5: word.pos5,\n                              ),\n                              gapH10,\n                              Text(\n                                key: const Key(\"TranslationText\"),\n                                _getTranslation(widget.wordList[index],\n                                    grammarPresenter, index),\n                                style: theme.textTheme.titleMedium!.copyWith(\n                                  fontWeight: FontWeight.w400,\n                                ),\n                              ),\n                              gapH20,\n                              if (word.rootAr != null) ...[\n                                ShowRootWordWidget(\n                                  key: const Key(\"ShowRootWordWidget\"),\n                                  title: context.l10n.rootWord,\n                                  subtitle: word.rootAr,\n                                  theme: theme,\n                                ),\n                                gapH6,\n                              ],\n                              if (word.lemma != null) ...[\n                                ShowRootWordWidget(\n                                  key: const Key(\"ShowLemmaDerivativeWidget\"),\n                                  title: context.l10n.lemmaDerivative,\n                                  subtitle: word.lemma!,\n                                  theme: theme,\n                                ),\n                                gapH10,\n                              ],\n                            ],\n                          ),\n                        ),\n                      ],\n                    );\n                  },\n                ),\n              ),\n              Padding(\n                padding: EdgeInsets.symmetric(horizontal: twentyPx),\n                child: TwoWayActionButton(\n                  theme: theme,\n                  svgPictureForCancelButton: SvgImage(\n                    SvgPath.icMaximize,\n                    width: twentyPx,\n                    height: twentyPx,\n                    color: context.color.primaryColor,\n                  ),\n                  svgPictureForOkButton: SvgImage(\n                    SvgPath.icPlayCircle,\n                    width: twentyPx,\n                    height: twentyPx,\n                    color: context.color.primaryColor,\n                  ),\n                  submitButtonBgColor: context.color.secondaryButtonColor,\n                  submitButtonTextColor: context.color.primaryColor,\n                  cancelButtonTextColor: context.color.primaryColor,\n                  submitButtonTitle: context.l10n.playAudio,\n                  cancelButtonTitle: 'Click for More',\n                  onSubmitButtonTap: () async => await grammarPresenter.handleSubmitButtonTap(context, widget.wordList),\n                  onCancelButtonTap: () async => await grammarPresenter.handleClickForMore(context),\n                ),\n              ),\n              gapH30,\n            ],\n          ),\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/grammar/widgets/verse_navigation.dart", "file_name": "verse_navigation.dart", "line": 32, "line_from": 32, "line_to": 134, "snippet": "  Widget build(BuildContext context) {\n    return Row(\n      mainAxisSize: MainAxisSize.min,\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: [\n        _NavigationButton(\n          onPressed: isFirstAyah ? null : onPreviousPressed,\n          text: 'Previous $previousVerse',\n          iconPath: SvgPath.icLeftArrow,\n          isNext: false,\n          theme: theme,\n          isDisabled: isFirstAyah,\n        ),\n        gapW12,\n        _NavigationButton(\n          onPressed: isLastAyah ? null : onNextPressed,\n          text: 'Next $nextVerse',\n          iconPath: SvgPath.icRightArrow,\n          isNext: true,\n          theme: theme,\n          isDisabled: isLastAyah,\n        ),\n      ],\n    );\n  }\n}\n\nclass _NavigationButton extends StatelessWidget {\n  const _NavigationButton({\n    required this.onPressed,\n    required this.text,\n    required this.iconPath,\n    required this.isNext,\n    required this.theme,\n    required this.isDisabled,\n  });\n\n  final VoidCallback? onPressed;\n  final String text;\n  final String iconPath;\n  final bool isNext;\n  final ThemeData theme;\n  final bool isDisabled;\n\n  @override\n  Widget build(BuildContext context) {\n    return OnTapWidget(\n      onTap: isDisabled ? null : onPressed,\n      theme: theme,\n      borderRadius: BorderRadius.circular(thirtySevenPx),\n      child: Container(\n        alignment: Alignment.center,\n        constraints: BoxConstraints(\n          minWidth: 41.percentWidth,\n        ),\n        decoration: BoxDecoration(\n          color: isDisabled\n              ? context.color.secondaryButtonColor.withOpacityInt(0.5)\n              : context.color.secondaryButtonColor,\n          borderRadius: BorderRadius.circular(thirtySevenPx),\n        ),\n        padding: EdgeInsets.symmetric(horizontal: fourteenPx, vertical: tenPx),\n        child: Row(\n          mainAxisSize: MainAxisSize.min,\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            if (!isNext)\n              SvgImage(\n                iconPath,\n                width: twentyPx,\n                height: twentyPx,\n                color: isDisabled\n                    ? context.color.subtitleColor\n                    : context.color.blackColor,\n              ),\n            if (!isNext) gapW8,\n            Flexible(\n              child: Text(\n                text,\n                maxLines: 1,\n                style: theme.textTheme.bodyMedium!.copyWith(\n                  fontWeight: FontWeight.normal,\n                  overflow: TextOverflow.ellipsis,\n                  color: isDisabled ? context.color.subtitleColor : null,\n                ),\n              ),\n            ),\n            if (isNext) gapW8,\n            if (isNext)\n              SvgImage(\n                iconPath,\n                width: twentyPx,\n                height: twentyPx,\n                color: isDisabled\n                    ? context.color.subtitleColor\n                    : context.color.blackColor,\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "conflicts", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/memorization/presenter/memorization_presenter.dart", "file_name": "memorization_presenter.dart", "line": 425, "line_from": 425, "line_to": 459, "snippet": "    // Create a unique notification ID based on plan name to avoid conflicts\n    final int notificationId = currentState.planName.hashCode.abs() % 100000;\n\n    final NotificationContent content = NotificationContent(\n      id: notificationId,\n      channelKey: memorizationNotificationChannelKey,\n      title: 'Memorization Reminder',\n      body:\n          'Time to practice your Quran memorization: ${currentState.planName}',\n      category: NotificationCategory.Reminder,\n      backgroundColor: QuranColor.primaryColorLight,\n      color: QuranColor.primaryColorLight,\n      notificationLayout: NotificationLayout.Default,\n      payload: {\n        'type': 'memorization_plan',\n        'plan_name': currentState.planName\n      },\n    );\n\n    final NotificationCalendar schedule = NotificationCalendar(\n      hour: time.hour,\n      minute: time.minute,\n      second: 0,\n      millisecond: 0,\n      timeZone: timeZone,\n      repeats: true,\n      allowWhileIdle: true,\n      preciseAlarm: true,\n    );\n\n    await _awesomeNotifications.createNotification(\n      content: content,\n      schedule: schedule,\n    );\n  }"}, {"structure_type": "function", "name": "progress;", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/memorization/widgets/memorization_plan_card.dart", "file_name": "memorization_plan_card.dart", "line": 29, "line_from": 29, "line_to": 164, "snippet": "  final Future<double> progress;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: EdgeInsets.symmetric(horizontal: twentyPx, vertical: sixPx),\n      child: OnTapWidget(\n        onTap: onTap,\n        theme: theme,\n        child: Container(\n          decoration: BoxDecoration(\n            borderRadius: radius15,\n            border: Border.all(color: context.color.borderColor, width: 1),\n          ),\n          child: Padding(\n            padding: padding15,\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                MemorizationPlanTopRow(\n                  planName: plan.planName,\n                  theme: theme,\n                  memorizationPresenter: memorizationPresenter,\n                  plan: plan,\n                ),\n                gapH20,\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: [\n                    Expanded(\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          DaysLeftText(\n                            daysLeft: plan.estimatedDays,\n                            theme: theme,\n                          ),\n                          gapH20,\n                          PlanInfoRow(\n                            iconPath: SvgPath.icStar,\n                            text: getCurrentLanguage(context) ==\n                                    LanguageType.bangla.code\n                                ? '${plan.startSurahId.toLocalizedString(context)}:${plan.startAyahId.toLocalizedString(context)} ${context.l10n.from} ${plan.endSurahId.toLocalizedString(context)}:${plan.endAyahId.toLocalizedString(context)}'\n                                : '${context.l10n.from} ${plan.startSurahId.toLocalizedString(context)}:${plan.startAyahId.toLocalizedString(context)} - ${plan.endSurahId.toLocalizedString(context)}:${plan.endAyahId.toLocalizedString(context)}',\n                            theme: theme,\n                          ),\n                          gapH8,\n                          FutureBuilder<String>(\n                              future: memorizationPresenter.getCurrentProgress(\n                                  plan.planName, context),\n                              builder: (context, snapshot) {\n                                return PlanInfoRow(\n                                  iconPath: SvgPath.icGraduate,\n                                  text: snapshot.data ?? context.l10n.loading,\n                                  theme: theme,\n                                );\n                              }),\n                          gapH8,\n                          PlanInfoRow(\n                            iconPath: plan.hasNotification\n                                ? SvgPath.icVolumeHigh\n                                : SvgPath.icVolumeSlash,\n                            text: plan.hasNotification &&\n                                    plan.notificationTime != null\n                                ? '${DateFormat('h:mm a').format(plan.notificationTime!)} ${context.l10n.daily}'\n                                : context.l10n.turnedOff,\n                            theme: theme,\n                          ),\n                          gapH8,\n                          PlanInfoRow(\n                            iconPath: SvgPath.icClock,\n                            text:\n                                '${context.l10n.endsIn} ${DateFormat('MMM dd, yyyy').format(plan.createdAt.add(Duration(days: plan.estimatedDays)))}',\n                            theme: theme,\n                          ),\n                        ],\n                      ),\n                    ),\n                    SizedBox(\n                      width: 26.percentWidth,\n                      child: FutureBuilder<double>(\n                        key: Key(plan.planName),\n                        future: progress,\n                        builder: (context, snapshot) {\n                          return ProgressCircle(\n                            theme: theme,\n                            progress: snapshot.data ?? 0.0,\n                            text: context.l10n.completed,\n                          );\n                        },\n                      ),\n                    )\n                  ],\n                )\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass DaysLeftText extends StatelessWidget {\n  const DaysLeftText({\n    super.key,\n    required this.daysLeft,\n    required this.theme,\n  });\n\n  final int daysLeft;\n  final ThemeData theme;\n\n  @override\n  Widget build(BuildContext context) {\n    return RichText(\n      text: TextSpan(\n        children: [\n          TextSpan(\n            text: '${daysLeft.toLocalizedString(context)} ',\n            style: theme.textTheme.headlineLarge!.copyWith(\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n          TextSpan(\n            text: context.l10n.daysLeft,\n            style: theme.textTheme.labelSmall!.copyWith(\n              color: context.color.subtitleColor,\n              fontWeight: FontWeight.w400,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/memorization/widgets/memorzation_search_widget.dart", "file_name": "memorzation_search_widget.dart", "line": 15, "line_from": 15, "line_to": 66, "snippet": "  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    return Container(\n      height: isMobile ? 40.px : 25.px,\n      margin: EdgeInsets.symmetric(horizontal: isMobile ? twentyPx : tenPx),\n      padding: EdgeInsets.symmetric(vertical: 0.px),\n      alignment: Alignment.centerLeft,\n      child: TextFormField(\n        //contextMenuBuilder: fixedLightContextMenu,\n\n        textAlignVertical: TextAlignVertical.center,\n        onTapOutside: (event) => FocusScope.of(context).unfocus(),\n        textAlign: TextAlign.left,\n        controller: textEditingController,\n\n        decoration: InputDecoration(\n          contentPadding: padding4,\n          filled: true,\n          hintText: hintText,\n          fillColor: context.color.primaryColor.withOpacityInt(0.12),\n          hintStyle: theme.textTheme.bodySmall!.copyWith(\n            color: context.color.primaryColor,\n          ),\n          enabledBorder: _determineFormFieldRadius(),\n          border: _determineFormFieldRadius(),\n          disabledBorder: _determineFormFieldRadius(),\n          focusedBorder: _determineFormFieldRadius(),\n          prefixIcon: Padding(\n            padding: isMobile ? padding12 : padding8,\n            child: SvgPicture.asset(\n              SvgPath.icSearch,\n              // height: twentyPx,\n              // width: twentyPx,\n              colorFilter: buildColorFilterToChangeColor(\n                context.color.primaryColor,\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nOutlineInputBorder _determineFormFieldRadius() => _borderRadius();\n\nOutlineInputBorder _borderRadius() {\n  return OutlineInputBorder(\n    borderRadius: isMobile ? radius8 : radius4,\n    borderSide: BorderSide.none,\n  );\n}"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "services", "file_path": "Quran-Majeed/lib/presentation/notification/services/notification_service_utilities.dart", "file_name": "notification_service_utilities.dart", "line": 20, "line_from": 20, "line_to": 50, "snippet": "      await Future<void>.delayed(manualDelayDuration, run);\n    });\n  }\n\n  static Duration _determineManualDelayDuration(int addedDayCount) =>\n      addedDayCount == 0 ? 3.inSeconds : Duration(seconds: Random().nextInt(3) + addedDayCount);\n\n  static int get notificationScheduleDayCount => Random(DateTime.now().millisecondsSinceEpoch).nextInt(65) + 31;\n\n  static NotificationContent buildNotificationContent({\n    required int notificationId,\n    required String channelKey,\n    required Map<String, String?> payload,\n  }) {\n    final String notificationTitle = payload[\"title\"] ?? \"\";\n    final String notificationBody = payload[\"body\"] ?? \"\";\n    final bool invalidNotification = notificationTitle.isEmpty || notificationBody.isEmpty;\n    if (invalidNotification) throw InvalidNotificationException();\n\n    return NotificationContent(\n      id: notificationId,\n      channelKey: channelKey,\n      title: notificationTitle,\n      body: notificationBody,\n      category: NotificationCategory.Recommendation,\n      backgroundColor: QuranColor.primaryColorLight,\n      notificationLayout: NotificationLayout.BigText,\n      payload: payload,\n      \n    );\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/daily_ayah/presenter/daily_ayah_presenter.dart", "file_name": "daily_ayah_presenter.dart", "line": 91, "line_from": 91, "line_to": 99, "snippet": "    return Future<void>.delayed(const Duration(milliseconds: 120), () {\n      uiState.value = currentUiState.copyWith(errorMessage: \"\");\n    });\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = currentUiState.copyWith(isLoading: loading);\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/last_read/presenter/last_read_presenter.dart", "file_name": "last_read_presenter.dart", "line": 87, "line_from": 87, "line_to": 115, "snippet": "    await Future<void>.delayed(1.inSeconds);\n    await getLastReadList();\n  }\n\n  Future<void> deleteSelectedLastReads(BuildContext context) async {\n    if (currentUiState.isSelected.isEmpty) {\n      addUserMessage(context.l10n.selectAnItem);\n      return;\n    }\n    await RemoveDialog.show(\n      onRemove: () async {\n        final List<int> selectedItem =\n            Set<int>.from(currentUiState.isSelected).toList();\n        final List<LastReadEntity> result =\n            await _deleteLastReadUseCase.execute(deletedItem: selectedItem);\n\n        uiState.value = uiState.value.copyWith(\n          isSelected: {},\n          lastReadList: result,\n          checkBox: result.isNotEmpty,\n        );\n        if (context.mounted && result.isEmpty) {\n          context.navigatorPop();\n        }\n      },\n      context: context,\n      title: context.l10n.lastRead,\n    );\n  }"}, {"structure_type": "function", "name": "Future.microtask", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/search/presenter/search_presenter.dart", "file_name": "search_presenter.dart", "line": 576, "line_from": 576, "line_to": 592, "snippet": "    final Widget resultPage = await Future.microtask(\n      () => SearchResultPage(\n        query: currentUiState.searchQuery,\n        searchPresenter: this,\n      ),\n    );\n    Get.to(() => resultPage);\n  }\n\n  void clearSearchAndError() {\n    uiState.value = currentUiState.copyWith(\n      userMessage: null,\n      showSearchFieldError: false,\n      showDatabaseError: false,\n    );\n    queryController.clear();\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "common", "file_path": "Quran-Majeed/lib/presentation/common/custom_bottom_sheet_container.dart", "file_name": "custom_bottom_sheet_container.dart", "line": 29, "line_from": 29, "line_to": 114, "snippet": "  Widget build(BuildContext context) {\n    return CustomStatusBarColor(\n      statusBarColor: statusBarColor ?? Colors.transparent,\n      navigationBarColor: context.color.backgroundColor,\n      statusBarIconColor:\n          isDarkMode(context) ? Brightness.light : Brightness.dark,\n      navigationBarIconColor:\n          isDarkMode(context) ? Brightness.light : Brightness.dark,\n      child: Container(\n        width: double.infinity,\n        constraints: constraints,\n        decoration: decorateBottomSheet(context),\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            if (bottomSheetTitle != null) ...[\n              BottomSheetHeader(\n                title: bottomSheetTitle!,\n                theme: theme,\n              ),\n              gapH5,\n            ],\n            Padding(\n              padding: showPadding\n                  ? EdgeInsets.only(\n                      bottom: twentyPx,\n                      left: twentyPx,\n                      right: twentyPx,\n                    )\n                  : EdgeInsets.zero,\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  showPadding ? const SizedBox.shrink() : gapH10,\n                  ...children,\n                  gapH10,\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass BottomSheetHeader extends StatelessWidget {\n  BottomSheetHeader({\n    super.key,\n    required this.title,\n    required this.theme,\n  });\n\n  final String title;\n  final ThemeData theme;\n  late final SettingsPresenter settingsPresenter = locate<SettingsPresenter>();\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      alignment: Alignment.center,\n      width: double.infinity,\n      decoration: BoxDecoration(\n        color: context.color.inputColor,\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(twentyPx),\n          topRight: Radius.circular(twentyPx),\n        ),\n      ),\n      child: Padding(\n        padding: EdgeInsets.symmetric(\n          vertical: seventeenPx,\n          horizontal: twentyPx,\n        ),\n        child: Text(\n          title,\n          overflow: TextOverflow.ellipsis,\n          maxLines: 1,\n          style: theme.textTheme.headlineSmall?.copyWith(\n              color: context.color.primaryColor,\n              fontFamily: settingsPresenter.getAppFontFamily()),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/common/widgets/custom_fade_scrollbar.dart", "file_name": "custom_fade_scrollbar.dart", "line": 6, "line_from": 6, "line_to": 136, "snippet": "  final Widget child;\n  final Color? scrollbarColor;\n  final double scrollbarWidth;\n  final double scrollbarRadius;\n  final Duration fadeOutDuration;\n  final Duration fadeInDuration;\n  final Duration idleDuration;\n\n  const CustomFadeScrollbar({\n    super.key,\n    required this.child,\n    this.scrollbarColor,\n    this.scrollbarWidth = 8.0,\n    this.scrollbarRadius = 4.0,\n    this.fadeOutDuration = const Duration(milliseconds: 300),\n    this.fadeInDuration = const Duration(milliseconds: 150),\n    this.idleDuration = const Duration(milliseconds: 600),\n  });\n\n  @override\n  State<CustomFadeScrollbar> createState() => _CustomFadeScrollbarState();\n}\n\nclass _CustomFadeScrollbarState extends State<CustomFadeScrollbar> with SingleTickerProviderStateMixin {\n  late AnimationController _fadeController;\n  late Animation<double> _fadeAnimation;\n  Timer? _fadeoutTimer;\n  ScrollController? _scrollController;\n  bool _isDragging = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _fadeController = AnimationController(\n      vsync: this,\n      duration: widget.fadeOutDuration,\n    );\n    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(\n      CurvedAnimation(\n        parent: _fadeController,\n        curve: Curves.easeInOut,\n      ),\n    );\n\n    // Start with scrollbar hidden\n    _fadeController.reverse();\n  }\n\n  @override\n  void dispose() {\n    _fadeoutTimer?.cancel();\n    _fadeController.dispose();\n    _scrollController?.dispose();\n    super.dispose();\n  }\n\n  bool _handleScrollNotification(ScrollNotification notification) {\n    final ScrollMetrics metrics = notification.metrics;\n    if (metrics.maxScrollExtent <= metrics.minScrollExtent) {\n      return false;\n    }\n\n    if (notification is ScrollStartNotification || notification is ScrollUpdateNotification) {\n      _showScrollbar();\n    } else if (notification is ScrollEndNotification) {\n      _hideScrollbarAfterIdle();\n    }\n    return false;\n  }\n\n  void _showScrollbar() {\n    _fadeoutTimer?.cancel();\n    _fadeController.duration = widget.fadeInDuration;\n    _fadeController.forward();\n  }\n\n  void _hideScrollbarAfterIdle() {\n    _fadeoutTimer?.cancel();\n    _fadeoutTimer = Timer(widget.idleDuration, () {\n      if (mounted && !_isDragging) {\n        _fadeController.duration = widget.fadeOutDuration;\n        _fadeController.reverse();\n      }\n    });\n  }\n\n  void _onPointerDown(PointerDownEvent event) {\n    _isDragging = true;\n    _showScrollbar();\n  }\n\n  void _onPointerUp(PointerUpEvent event) {\n    _isDragging = false;\n    _hideScrollbarAfterIdle();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return NotificationListener<ScrollNotification>(\n      onNotification: _handleScrollNotification,\n      child: Stack(\n        children: [\n          widget.child,\n          Positioned.fill(\n            child: IgnorePointer(\n              ignoring: false,\n              child: Listener(\n                onPointerDown: _onPointerDown,\n                onPointerUp: _onPointerUp,\n                child: FadeTransition(\n                  opacity: _fadeAnimation,\n                  child: Container(\n                    alignment: Alignment.centerRight,\n                    child: Container(\n                      width: widget.scrollbarWidth,\n                      margin: const EdgeInsets.only(right: 2.0),\n                      decoration: BoxDecoration(\n                        color: widget.scrollbarColor ?? Theme.of(context).colorScheme.onSurface.withOpacityInt(0.4),\n                        borderRadius: BorderRadius.circular(widget.scrollbarRadius),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "_onSearchQueryChanged", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/audio/reciter/presenter/reciter_presenter.dart", "file_name": "reciter_presenter.dart", "line": 57, "line_from": 57, "line_to": 511, "snippet": "  void _onSearchQueryChanged() {\n    Debounce.debounce(\"surahSearching\", 300.inMilliseconds, () async {\n      final query = surahNameSearchController.text.trim().toLowerCase();\n      uiState.value = uiState.value.copyWith(searchQuery: query);\n    });\n  }\n\n  void _onReciterSearchQueryChanged() {\n    final query = reciterSearchController.text.trim().toLowerCase();\n    Debounce.debounce(\"reciterSearching\", 300.inMilliseconds, () async {\n      try {\n        final List<Reciter> allReciters =\n            await _getRecitersFromDatabaseUseCase.call();\n\n        List<Reciter> filteredReciters = List.from(allReciters);\n\n        if (query.isNotEmpty) {\n          filteredReciters = allReciters\n              .where((reciter) => reciter.name.toLowerCase().contains(query))\n              .toList();\n        }\n\n        // Remove the currently selected reciter from the filtered list\n        filteredReciters\n            .removeWhere((r) => r.id == currentUiState.selectedReciter.id);\n        filteredReciters.sort((a, b) => a.name.compareTo(b.name));\n\n        // Force UI update by creating a new state\n        if (!uiState.value.isLoading) {\n          uiState.value = currentUiState.copyWith(\n            availableRecitersForDownload: filteredReciters,\n            searchQuery: query,\n          );\n        }\n      } catch (e) {\n        addUserMessage(\"Error filtering reciters: $e\");\n      }\n    });\n  }\n\n  @override\n  void dispose() {\n    surahNameSearchController.removeListener(_onSearchQueryChanged);\n    reciterSearchController.removeListener(_onReciterSearchQueryChanged);\n    surahNameSearchController.dispose();\n    reciterSearchController.dispose();\n    super.dispose();\n  }\n\n  List<int> get filteredSurahIndices {\n    if (currentUiState.searchQuery.isEmpty) {\n      return List.generate(CacheData.surahsCache.length, (i) => i);\n    } else {\n      return CacheData.surahsCache\n          .asMap()\n          .entries\n          .where((entry) =>\n              entry.value.nameEn\n                  .toLowerCase()\n                  .contains(currentUiState.searchQuery) ||\n              entry.value.nameBn\n                  .toLowerCase()\n                  .contains(currentUiState.searchQuery) ||\n              entry.value.serial\n                  .toString()\n                  .toLowerCase()\n                  .contains(currentUiState.searchQuery))\n          .map((entry) => entry.key)\n          .toList();\n    }\n  }\n\n  ReciterUiState get currentUiState => uiState.value;\n  final Map<int, bool> _isProcessingSurah = {}; // Map to track Surah processing\n  Future<void> downloadSurahAudio(\n      {required int surahIndex,\n      required Reciter reciter,\n      required BuildContext context}) async {\n    final bool hasInternet = await checkInternetConnection();\n    if (!hasInternet && context.mounted) {\n      await showMessage(message: context.l10n.noInternetConnection);\n      return;\n    }\n\n    if (_isProcessingSurah[surahIndex] ?? false) {\n      cancelDownload();\n      _isProcessingSurah[surahIndex] = false;\n      if (context.mounted) addUserMessage(context.l10n.downloadCancelled);\n\n      updateUiState(\n          isDownloading: false,\n          currentDownloadingSurahIndex: null,\n          downloadProgress: 0,\n          downloadCancelToken: null,\n          activeDownloadId: null);\n      _cancelTokens.remove(currentUiState.activeDownloadId);\n      return;\n    }\n\n    if (_isProcessingSurah.containsValue(true) && context.mounted) {\n      addUserMessage(context.l10n.downloadInProgress);\n      return;\n    }\n\n    _isProcessingSurah[surahIndex] = true;\n\n    try {\n      _initializeDownloadProcess();\n      await fetchAudioFilesAndVerseTimings([surahIndex], reciter);\n      updateUiState(\n          isDownloading: true,\n          currentDownloadingSurahIndex: surahIndex,\n          currentDownloadingReciterId: reciter.id,\n          downloadCancelToken: CancelToken(),\n          downloadProgress: 0);\n\n      final connectivitySubscription = await monitorNetworkConnectivity(\n        context,\n        onConnectionLost: () {\n          addUserMessage(context.l10n.noInternetConnection);\n        },\n        onConnectionRestored: () {\n          addUserMessage(context.l10n.internetConnectionRestored);\n        },\n      );\n\n      final result = await _downloadAndSaveAudioLocationUseCase.execute(\n        surahID: surahIndex,\n        reciter: reciter,\n        onProgress: updateDownloadProgress,\n        cancelToken: currentUiState.downloadCancelToken!,\n      );\n\n      // Cancel connectivity subscription\n      await connectivitySubscription.cancel();\n\n      await result.fold(\n        (failure) => processDownloadFailure(),\n        (_) async {\n          if (!currentUiState.downloadCancelToken!.isCancelled) {\n            await processDownloadSuccess(reciter, context);\n            await loadDownloadCounts();\n          }\n        },\n      );\n    } catch (e) {\n      addUserMessage(\"Failed to download surah: $e\");\n    } finally {\n      _isProcessingSurah[surahIndex] = false;\n      _cancelTokens.remove(currentUiState.activeDownloadId);\n      updateUiState(\n          isDownloading: false,\n          currentDownloadingSurahIndex: null,\n          downloadProgress: 0,\n          currentDownloadingReciterId: null,\n          downloadCancelToken: null,\n          activeDownloadId: null);\n    }\n  }\n\n  Future<void> deleteAudioFilesBySurahAndReciter(\n      {required int surahNumber, required Reciter reciter}) async {\n    final result = await _deleteAudioBySurahAndReciter.execute(\n      surahNumber: surahNumber,\n      reciter: reciter,\n    );\n    await result.fold(\n      (failure) async => await addUserMessage(failure),\n      (_) async {\n        await addUserMessage('Audio deleted successfully');\n        await updateDownloadCountsAndReciters(reciter, surahNumber,\n            isDelete: true);\n      },\n    );\n  }\n\n  void updateDownloadProgress(int percentage) {\n    updateUiState(downloadProgress: percentage);\n  }\n\n  Future<void> processDownloadFailure() async {\n    addUserMessage('Failed to download surah');\n    updateUiState(isDownloading: false);\n  }\n\n  Future<void> processDownloadSuccess(\n      Reciter reciter, BuildContext context) async {\n    if (context.mounted) addUserMessage(context.l10n.surahDownloaded);\n    await updateDownloadCountsAndReciters(\n        reciter, currentUiState.currentDownloadingSurahIndex!);\n    updateUiState(isDownloading: false, downloadProgress: 0);\n  }\n\n  void _initializeDownloadProcess() {\n    final String downloadId = DateTime.now().millisecondsSinceEpoch.toString();\n    final CancelToken cancelToken = CancelToken();\n    _cancelTokens[downloadId] = cancelToken;\n    uiState.value = currentUiState.copyWith(\n      downloadCancelToken: cancelToken,\n      activeDownloadId: downloadId,\n    );\n  }\n\n  void cancelDownload() {\n    if (currentUiState.isDownloading! &&\n        currentUiState.downloadCancelToken != null) {\n      currentUiState.downloadCancelToken!.cancel();\n      if (currentUiState.activeDownloadId != null) {\n        _cancelTokens.remove(currentUiState.activeDownloadId);\n      }\n      uiState.value = uiState.value.copyWith(\n        isDownloading: false,\n        downloadProgress: 0,\n        currentDownloadingSurahIndex: null,\n        currentDownloadingReciterId: null,\n        downloadCancelToken: null,\n        activeDownloadId: null,\n      );\n    }\n  }\n\n  Future<void> fetchAudioFilesAndVerseTimings(\n      List<int> totalSurahs, Reciter reciter) async {\n    await _fetchAudioFilesAndVerseTimingsUseCase.execute(totalSurahs, reciter);\n  }\n\n  Future<void> updateDownloadCountsAndReciters(Reciter reciter, int surahId,\n      {bool isDelete = false}) async {\n    Map<int, int> currentCounts =\n        Map<int, int>.from(currentUiState.downloadedSurahCounts ?? {});\n    List<int> surahIds = await _getSurahIdsForReciterUseCase.call(reciter);\n\n    if (isDelete) {\n      surahIds.remove(surahId);\n    } else if (!surahIds.contains(surahId)) {\n      surahIds.add(surahId);\n    }\n\n    int newCount = surahIds.length;\n    currentCounts[reciter.id] = newCount;\n    await _saveDownloadCountUseCase.saveDownloadCount(reciter.id, newCount);\n    await _saveReciterWithSurahIdUseCase.call(surahId, reciter,\n        isDelete: isDelete);\n\n    await loadReciterSurahIds();\n\n    updateUiState(downloadedSurahCounts: currentCounts);\n  }\n\n  String getImagePath(String reciterName) {\n    return 'assets/images/non_svg/img_qari/$reciterName.png';\n  }\n\n  void updateUiState({\n    bool? isDownloading,\n    int? currentDownloadingSurahIndex,\n    int? downloadProgress,\n    Map<int, int>? downloadedSurahCounts,\n    int? currentDownloadingReciterId,\n    CancelToken? downloadCancelToken,\n    String? activeDownloadId,\n  }) {\n    uiState.value = uiState.value.copyWith(\n      isDownloading: isDownloading,\n      currentDownloadingSurahIndex: currentDownloadingSurahIndex,\n      downloadProgress: downloadProgress,\n      downloadedSurahCounts: downloadedSurahCounts,\n      currentDownloadingReciterId: currentDownloadingReciterId,\n      downloadCancelToken: downloadCancelToken,\n      activeDownloadId: activeDownloadId,\n    );\n  }\n\n  int getCurrentDownloadCount(Reciter reciter) =>\n      uiState.value.downloadedSurahCounts?[reciter.id] ?? 0;\n\n  Future<void> downloadAllSurahs(\n      {required Reciter reciter, required BuildContext context}) async {\n    final bool hasInternet = await checkInternetConnection();\n    if (!hasInternet) {\n      if (context.mounted) addUserMessage(context.l10n.noInternetConnection);\n      return;\n    }\n\n    updateUiState(isDownloading: true);\n    int totalSurahs = 114;\n    List<String> errors = [];\n    _initializeDownloadProcess();\n\n    for (int surahIndex = 1; surahIndex <= totalSurahs; surahIndex++) {\n      if (currentUiState.downloadCancelToken!.isCancelled) break;\n      await fetchAudioFilesAndVerseTimings([surahIndex], reciter);\n      updateUiState(currentDownloadingSurahIndex: surahIndex);\n\n      final result = await _downloadAndSaveAudioLocationUseCase.execute(\n        surahID: surahIndex,\n        reciter: reciter,\n        onProgress: (percentage) =>\n            updateOverallProgress(surahIndex, percentage, totalSurahs),\n        cancelToken: currentUiState.downloadCancelToken!,\n      );\n\n      result.fold(\n        (failure) => errors.add(\"Surah $surahIndex: $failure\"),\n        (_) async => await updateDownloadCountsAndReciters(\n            reciter, currentUiState.currentDownloadingSurahIndex!),\n      );\n    }\n\n    if (errors.isNotEmpty) {\n      addUserMessage(\"Errors occurred during download: ${errors.join(', ')}\");\n    } else if (context.mounted) {\n      addUserMessage(context.l10n.surahDownloaded);\n    }\n\n    updateUiState(\n        isDownloading: false,\n        downloadProgress: 0,\n        currentDownloadingSurahIndex: 0);\n  }\n\n  void updateOverallProgress(int surahIndex, int percentage, int totalSurahs) {\n    int progress = ((surahIndex / totalSurahs) * 100).toInt() +\n        (percentage ~/ totalSurahs);\n    updateUiState(downloadProgress: progress);\n  }\n\n  void toggleCheckBoxVisibility() {\n    final bool newState = !currentUiState.checkBoxVisible!;\n    uiState.value = currentUiState.copyWith(\n      checkBoxVisible: newState,\n      isSelected: newState ? currentUiState.isSelected : {},\n    );\n  }\n\n  void selectSurah(int index) {\n    if (currentUiState.checkBoxVisible!) {\n      final isSelectedSet =\n          Set<int>.from(currentUiState.isSelected as Set<int>);\n      isSelectedSet.contains(index)\n          ? isSelectedSet.remove(index)\n          : isSelectedSet.add(index);\n      uiState.value = currentUiState.copyWith(isSelected: isSelectedSet);\n      // isSelectedSet.isEmpty ? showDownlaod.value = false : showDownlaod.value = true;\n    }\n  }\n\n  Future<void> loadDownloadCounts() async {\n    try {\n      Map<int, int> downloadCounts = {};\n      List<Reciter> allReciters =\n          await _getRecitersFromDatabaseUseCase.call(); // Get all reciters\n      for (Reciter reciter in allReciters) {\n        List<int> surahIds = await _getSurahIdsForReciterUseCase.call(reciter);\n        downloadCounts[reciter.id] = surahIds.length;\n      }\n      uiState.value =\n          currentUiState.copyWith(downloadedSurahCounts: downloadCounts);\n    } catch (e) {\n      addUserMessage(\"Failed to load download counts: $e\");\n    }\n  }\n\n  Future<void> selectReciter(\n      {required Reciter reciter, required BuildContext context}) async {\n    List<Reciter> availableReciters =\n        List.from(currentUiState.availableRecitersForDownload ?? []);\n\n    availableReciters.removeWhere((r) => r.id == reciter.id);\n    availableReciters.insert(0, currentUiState.selectedReciter);\n    availableReciters.sort((a, b) => a.name.compareTo(b.name));\n\n    uiState.value = currentUiState.copyWith(\n      availableRecitersForDownload: availableReciters,\n      selectedReciterId: reciter.id,\n      selectedReciter: reciter,\n    );\n\n    await saveSelectedReciter(reciter);\n    await audioPresenter.onReciterChanged(reciter);\n\n    // Show toast message after reciter selection\n    await addUserMessage(context.l10n.selectedSuccessfully);\n  }\n\n  @override\n  Future<void> addUserMessage(String message) {\n    return showMessage(message: message);\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = currentUiState.copyWith(isLoading: loading);\n  }\n\n  @override\n  Future<void> onInit() async {\n    await toggleLoading(loading: true);\n    await getSelectedReciter();\n    await getReciters();\n    await loadDownloadCounts();\n    await loadReciterSurahIds();\n    await toggleLoading(loading: false);\n\n    super.onInit();\n  }\n\n  Future<void> loadReciterSurahIds() async {\n    try {\n      final reciters =\n          await _getRecitersFromDatabaseUseCase.call(); // Get all reciters\n      final Map<int, List<int>> reciterSurahIds = {\n        for (var reciter in reciters)\n          reciter.id: await _getSurahIdsForReciterUseCase.call(reciter)\n      };\n      uiState.value = uiState.value.copyWith(reciterSurahIds: reciterSurahIds);\n    } catch (e) {\n      addUserMessage(\"Failed to load Reciter Surah IDs: $e\");\n    }\n  }\n\n  Future<void> getReciters() async {\n    final List<Reciter> reciters = await _getRecitersFromDatabaseUseCase.call();\n\n    final List<Reciter> availableReciters = List.from(reciters);\n    availableReciters\n        .removeWhere((r) => r.id == currentUiState.selectedReciter.id);\n    availableReciters.sort((a, b) => a.name.compareTo(b.name));\n    uiState.value = currentUiState.copyWith(\n        availableRecitersForDownload: availableReciters);\n  }\n\n  Future<void> saveSelectedReciter(Reciter reciter) async {\n    await _manageSelectedReciterUseCase.saveSelectedReciter(reciter);\n  }\n\n  Future<void> getSelectedReciter() async {\n    final Reciter reciter =\n        await _manageSelectedReciterUseCase.getSelectedReciter();\n    uiState.value = currentUiState.copyWith(\n      defaultReciter: reciter,\n      selectedReciter: reciter,\n      selectedReciterId: reciter.id,\n    );\n    await audioPresenter.onReciterChanged(reciter);\n  }\n\n  Future<void> saveReciterWithSurahId(int surahId, Reciter reciter) async {\n    await _saveReciterWithSurahIdUseCase.call(surahId, reciter);\n    uiState.value = currentUiState.copyWith(reciterSurahIds: {\n      ...?currentUiState.reciterSurahIds,\n      reciter.id: [surahId]\n    });\n  }\n}"}, {"structure_type": "function", "name": "_updateState", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/profile/presenter/profile_presenter.dart", "file_name": "profile_presenter.dart", "line": 48, "line_from": 48, "line_to": 485, "snippet": "  void _updateState(ProfileUiState newState) => uiState.value = newState;\n  // --- End State Management ---\n\n  // Flags to prevent concurrent refreshes\n  bool _isRefreshingActivity = false;\n\n  // Animation controllers for charts\n  final Map<ActivityTimeRange, AnimationController> _animationControllers = {};\n\n  ProfilePresenter({\n    required GetWeeklyActivityUseCase getWeeklyActivityUseCase,\n    required GetMonthlyActivityUseCase getMonthlyActivityUseCase,\n    required GetYearlyActivityUseCase getYearlyActivityUseCase,\n    required GetActivityStatsUseCase getActivityStatsUseCase,\n  })  : _getWeeklyActivityUseCase = getWeeklyActivityUseCase,\n        _getMonthlyActivityUseCase = getMonthlyActivityUseCase,\n        _getYearlyActivityUseCase = getYearlyActivityUseCase,\n        _getActivityStatsUseCase = getActivityStatsUseCase;\n\n  @override\n  void onInit() {\n    super.onInit();\n    loadProfileData(); // Load initial data\n    _listenForUsageDataChanges(); // Start listening for updates\n  }\n\n  @override\n  void onClose() {\n    _usageDataChangeSubscription?.cancel(); // Cancel subscription on close\n\n    // Dispose animation controllers\n    for (final controller in _animationControllers.values) {\n      controller.dispose();\n    }\n\n    super.onClose();\n  }\n\n  void navigateToActivityDetails(BuildContext context) {\n    // If data isn't already loaded, load it first\n    if (currentUiState.monthlyActivity.isEmpty ||\n        currentUiState.yearlyActivity.isEmpty) {\n      // Show a loading indicator\n      _updateState(currentUiState.copyWith(isActivityLoading: true));\n\n      // Load all activity data\n      Future.wait([\n        _loadWeeklyActivityData(),\n        _loadMonthlyActivityData(),\n        _loadYearlyActivityData(),\n      ]).then((_) {\n        // Hide loading indicator\n        _updateState(currentUiState.copyWith(isActivityLoading: false));\n\n        // Now navigate with the loaded data\n        _showDetailedActivityPage(context);\n      });\n    } else {\n      // Data is already loaded, navigate directly\n      _showDetailedActivityPage(context);\n    }\n  }\n\n  /// Creates and initializes animation controllers for various charts\n  void initAnimationController(\n      ActivityTimeRange timeRange, TickerProvider vsync) {\n    if (_animationControllers.containsKey(timeRange)) {\n      return;\n    }\n\n    final controller = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: vsync,\n    );\n\n    _animationControllers[timeRange] = controller;\n    controller.forward();\n  }\n\n  /// Restarts animations for the currently active time range\n  void restartAnimation(ActivityTimeRange timeRange) {\n    final controller = _animationControllers[timeRange];\n    if (controller != null) {\n      controller.reset();\n      controller.forward();\n    }\n  }\n\n  /// Listens to the [AppLifecycleTracker.onUsageDataChanged] stream and\n  /// triggers a refresh of the activity data, debouncing events to prevent\n  /// excessive updates.\n  void _listenForUsageDataChanges() {\n    _usageDataChangeSubscription = _appLifecycleTracker.onUsageDataChanged\n        .debounceTime(\n            const Duration(milliseconds: 1000)) // Debounce for 1 second\n        .listen((_) {\n      if (!_isRefreshingActivity) {\n        // Prevent concurrent refreshes\n        refreshActivityData(); // Call refresh method\n      }\n    }, onError: (Object e, StackTrace stackTrace) {\n      logErrorStatic(\n          'ProfilePresenter', 'Error in usage data change stream: $e');\n    });\n  }\n\n  /// Loads all necessary data for the profile page, including user details,\n  /// stats, and the initial activity data.\n  Future<void> loadProfileData() async {\n    await toggleLoading(loading: true);\n\n    // Simulated user data - would come from a repository in production\n    String userName = 'Ahmad Saleh';\n    String userEmail = 'ahmad.saleh@example.com';\n    String avatarUrl = '';\n    double dailyReadingProgress = 0.65;\n    int totalReads = 365;\n    int totalBookmarks = 28;\n    int totalNotes = 17;\n    int badgesEarned = 8;\n    double nextBadgeProgress = 0.75;\n\n    // Set initial time range to weekly (default view)\n    final activeTimeRange = currentUiState.activeTimeRange;\n\n    // Fetch Initial Activity Data based on active time range\n    await _loadActivityDataForTimeRange(activeTimeRange);\n\n    // Fetch usage stats for active time range\n    final Either<String, UsageStatsEntity> statsResult =\n        await _getActivityStatsUseCase.execute(\n      timeRange: _mapActivityTimeRangeToTimeRange(activeTimeRange),\n    );\n\n    UsageStatsEntity? usageStats;\n\n    statsResult.fold(\n      (String error) async {\n        await addUserMessage(error);\n        logErrorStatic('ProfilePresenter', 'Error loading usage stats: $error');\n      },\n      (UsageStatsEntity stats) {\n        usageStats = stats;\n      },\n    );\n\n    // Update UI state with all fetched data\n    _updateState(currentUiState.copyWith(\n      userName: userName,\n      userEmail: userEmail,\n      avatarUrl: avatarUrl,\n      dailyReadingProgress: dailyReadingProgress,\n      totalReads: totalReads,\n      totalBookmarks: totalBookmarks,\n      totalNotes: totalNotes,\n      badgesEarned: badgesEarned,\n      nextBadgeProgress: nextBadgeProgress,\n      usageStats: usageStats,\n      isLoading: false,\n      userMessage: () => null, // Clear any previous message\n    ));\n  }\n\n  /// Maps the UI time range enum to the domain time range enum\n  TimeRange _mapActivityTimeRangeToTimeRange(ActivityTimeRange uiTimeRange) {\n    switch (uiTimeRange) {\n      case ActivityTimeRange.weekly:\n        return TimeRange.last7Days;\n      case ActivityTimeRange.monthly:\n        return TimeRange.currentMonth;\n      case ActivityTimeRange.yearly:\n        return TimeRange.currentYear;\n    }\n  }\n\n  /// Loads activity data for the specified time range\n  Future<void> _loadActivityDataForTimeRange(\n      ActivityTimeRange timeRange) async {\n    switch (timeRange) {\n      case ActivityTimeRange.weekly:\n        await _loadWeeklyActivityData();\n        break;\n      case ActivityTimeRange.monthly:\n        await _loadMonthlyActivityData();\n        break;\n      case ActivityTimeRange.yearly:\n        await _loadYearlyActivityData();\n        break;\n    }\n  }\n\n  /// Loads weekly activity data\n  Future<void> _loadWeeklyActivityData() async {\n    final Either<String, List<WeeklyActivityEntity>> activityResult =\n        await _getWeeklyActivityUseCase.execute();\n\n    List<ActivityData> activityData = [];\n\n    activityResult.fold(\n      (String error) async {\n        await addUserMessage(error);\n        logErrorStatic(\n            'ProfilePresenter', 'Error loading weekly activity: $error');\n        activityData = []; // Keep activity data empty on failure\n      },\n      (List<WeeklyActivityEntity> entities) {\n        activityData =\n            _mapWeeklyActivityToPresentationModel(entities: entities);\n      },\n    );\n\n    // Update just the weekly activity part of the state\n    _updateState(currentUiState.copyWith(\n      weeklyActivity: activityData,\n    ));\n  }\n\n  /// Loads monthly activity data\n  Future<void> _loadMonthlyActivityData() async {\n    final Either<String, List<MonthlyActivityEntity>> activityResult =\n        await _getMonthlyActivityUseCase.execute();\n\n    List<MonthlyActivityData> activityData = [];\n\n    activityResult.fold(\n      (String error) async {\n        await addUserMessage(error);\n        logErrorStatic(\n            'ProfilePresenter', 'Error loading monthly activity: $error');\n        activityData = []; // Keep activity data empty on failure\n      },\n      (List<MonthlyActivityEntity> entities) {\n        activityData =\n            _mapMonthlyActivityToPresentationModel(entities: entities);\n      },\n    );\n\n    // Update just the monthly activity part of the state\n    _updateState(currentUiState.copyWith(\n      monthlyActivity: activityData,\n    ));\n  }\n\n  /// Loads yearly activity data\n  Future<void> _loadYearlyActivityData() async {\n    final Either<String, List<YearlyActivityEntity>> activityResult =\n        await _getYearlyActivityUseCase.execute();\n\n    List<YearlyActivityData> activityData = [];\n\n    activityResult.fold(\n      (String error) async {\n        await addUserMessage(error);\n        logErrorStatic(\n            'ProfilePresenter', 'Error loading yearly activity: $error');\n        activityData = []; // Keep activity data empty on failure\n      },\n      (List<YearlyActivityEntity> entities) {\n        activityData =\n            _mapYearlyActivityToPresentationModel(entities: entities);\n      },\n    );\n\n    // Update just the yearly activity part of the state\n    _updateState(currentUiState.copyWith(\n      yearlyActivity: activityData,\n    ));\n  }\n\n  /// Maps a list of [WeeklyActivityEntity] (domain) to a list of [ActivityData] (presentation).\n  List<ActivityData> _mapWeeklyActivityToPresentationModel(\n      {required List<WeeklyActivityEntity> entities}) {\n    // Assumes 'entities' is the sorted list of 7 days from the use case.\n    final DateTime todayDateOnly = DateUtils.dateOnly(DateTime.now());\n\n    return entities.map((entity) {\n      final bool isTodayFlag = DateUtils.dateOnly(entity.date) == todayDateOnly;\n      return ActivityData(\n        day: entity.date.day, // Day of month for display\n        date: entity.date, // Full date object\n        minutes: entity.minutes,\n        isToday: isTodayFlag,\n        // 'isActive' is derived in ActivityData constructor\n      );\n    }).toList();\n  }\n\n  /// Maps a list of [MonthlyActivityEntity] (domain) to a list of [MonthlyActivityData] (presentation).\n  List<MonthlyActivityData> _mapMonthlyActivityToPresentationModel(\n      {required List<MonthlyActivityEntity> entities}) {\n    final DateTime todayDateOnly = DateUtils.dateOnly(DateTime.now());\n\n    return entities.map((entity) {\n      final bool isTodayFlag = DateUtils.dateOnly(entity.date) == todayDateOnly;\n      return MonthlyActivityData(\n        day: entity.date.day,\n        date: entity.date,\n        minutes: entity.minutes,\n        isToday: isTodayFlag,\n      );\n    }).toList();\n  }\n\n  /// Maps a list of [YearlyActivityEntity] (domain) to a list of [YearlyActivityData] (presentation).\n  List<YearlyActivityData> _mapYearlyActivityToPresentationModel(\n      {required List<YearlyActivityEntity> entities}) {\n    return entities.map((entity) {\n      return YearlyActivityData(\n        date: entity.date,\n        minutes: entity.minutes,\n      );\n    }).toList();\n  }\n\n  /// Refreshes all activity data\n  Future<void> refreshActivityData() async {\n    if (_isRefreshingActivity) return;\n    _isRefreshingActivity = true;\n\n    // Show loading indicator for activity data\n    _updateState(currentUiState.copyWith(\n      isActivityLoading: true,\n    ));\n\n    // Load data for all time ranges regardless of the currently active range\n    // This ensures all data is available when viewing detailed activity\n    await Future.wait([\n      _loadWeeklyActivityData(),\n      _loadMonthlyActivityData(),\n      _loadYearlyActivityData(),\n    ]);\n\n    // Update usage stats for the current time range\n    final timeRange =\n        _mapActivityTimeRangeToTimeRange(currentUiState.activeTimeRange);\n    final Either<String, UsageStatsEntity> statsResult =\n        await _getActivityStatsUseCase.execute(\n      timeRange: timeRange,\n    );\n\n    UsageStatsEntity? usageStats;\n    statsResult.fold(\n      (String error) async {\n        await addUserMessage(error);\n        logErrorStatic('ProfilePresenter', 'Error loading usage stats: $error');\n      },\n      (UsageStatsEntity stats) {\n        usageStats = stats;\n      },\n    );\n\n    // Update UI state with refreshed data\n    _updateState(currentUiState.copyWith(\n      usageStats: usageStats,\n      isActivityLoading: false,\n    ));\n\n    _isRefreshingActivity = false;\n  }\n\n  /// Shows the detailed activity page with current activity data\n  void _showDetailedActivityPage(BuildContext context) {\n    context.navigatorPush(\n      DetailedActivityPage(\n        weeklyActivity: currentUiState.weeklyActivity,\n        monthlyActivity: currentUiState.monthlyActivity,\n        yearlyActivity: currentUiState.yearlyActivity,\n        onAnimationInit: initAnimationController,\n        isLoading: currentUiState.isActivityLoading,\n      ),\n    );\n  }\n\n  /// Changes the active time range and loads the corresponding data\n  Future<void> changeTimeRange(ActivityTimeRange newTimeRange) async {\n    if (newTimeRange == currentUiState.activeTimeRange) return;\n\n    // Update state with new time range first (for UI feedback)\n    _updateState(currentUiState.copyWith(\n      activeTimeRange: newTimeRange,\n      // Optional: Set a loading state for the specific chart\n      // isActivityLoading: true,\n    ));\n\n    // Load data for the new time range\n    await _loadActivityDataForTimeRange(newTimeRange);\n\n    // Update stats for the new time range\n    final statsResult = await _getActivityStatsUseCase.execute(\n      timeRange: _mapActivityTimeRangeToTimeRange(newTimeRange),\n    );\n\n    statsResult.fold(\n      (String error) async {\n        await addUserMessage(error);\n        logErrorStatic('ProfilePresenter', 'Error loading usage stats: $error');\n      },\n      (UsageStatsEntity stats) {\n        _updateState(currentUiState.copyWith(\n          usageStats: stats,\n        ));\n      } as Future<Null> Function(dynamic r),\n    );\n\n    // Restart animation for the active chart\n    restartAnimation(newTimeRange);\n  }\n\n  /// Records test usage data via the [AppLifecycleTracker].\n  /// The UI will update automatically via the stream listener.\n  void recordTestUsage({required Duration duration}) {\n    _appLifecycleTracker.recordTestUsage(duration: duration);\n    // No manual refresh needed here. Listener handles UI update.\n    addUserMessage(\n        \"Recorded ${duration.inMinutes} minutes. Chart will update shortly.\");\n  }\n\n  /// Handles the tap action for the \"Set Daily Reminder\" button.\n  void navigateToSetReminder(BuildContext context) {\n    addUserMessage(\"Set Reminder feature coming soon!\");\n    // Example: Navigator.pushNamed(context, '/set-reminder');\n  }\n\n  // --- BasePresenter Overrides ---\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    // This controls the overall page loading state\n    _updateState(currentUiState.copyWith(isLoading: loading));\n  }\n\n  @override\n  Future<void> addUserMessage(String message) async {\n    _updateState(currentUiState.copyWith(\n      userMessage: () => message,\n    ));\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/profile/widgets/lifetime_activity_card.dart", "file_name": "lifetime_activity_card.dart", "line": 22, "line_from": 22, "line_to": 112, "snippet": "  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Text(\n          'Lifetime Activity',\n          style: theme.textTheme.titleLarge?.copyWith(\n            fontWeight: FontWeight.bold,\n            color: context.color.primaryColor,\n          ),\n        ),\n        gapH10,\n        Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          spacing: tenPx,\n          children: [\n            _StatItem(\n              theme: theme,\n              icon: SvgPath.icQuran,\n              value: totalReads,\n              label: 'Readings',\n            ),\n            _StatItem(\n              theme: theme,\n              icon: SvgPath.icBookmark,\n              value: totalBookmarks,\n              label: context.l10n.bookmark,\n            ),\n            _StatItem(\n              theme: theme,\n              icon: SvgPath.icSettings,\n              value: totalNotes,\n              label: context.l10n.pin,\n            ),\n            _StatItem(\n              theme: theme,\n              icon: SvgPath.icSettings,\n              value: totalNotes,\n              label: context.l10n.note,\n            ),\n          ],\n        ),\n      ],\n    );\n  }\n}\n\nclass _StatItem extends StatelessWidget {\n  const _StatItem({\n    required this.theme,\n    required this.icon,\n    required this.value,\n    required this.label,\n  });\n\n  final ThemeData theme;\n  final String icon;\n  final int value;\n  final String label;\n\n  @override\n  Widget build(BuildContext context) {\n    return Expanded(\n      child: Container(\n        height: 75.px,\n        decoration: BoxDecoration(\n          color: context.color.tabBarShade,\n          borderRadius: radius12,\n        ),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text(\n              '${value.toLocalizedString(context)}+',\n              style: theme.textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.w600,\n              ),\n            ),\n            gapH4,\n            Text(\n              label,\n              style: theme.textTheme.bodySmall?.copyWith(\n                color: context.color.subtitleColor,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "paint", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/profile/widgets/chart_animations.dart", "file_name": "chart_animations.dart", "line": 27, "line_from": 27, "line_to": 124, "snippet": "  void paint(Canvas canvas, Size size) {\n    final width = size.width;\n    final height = size.height;\n\n    if (values.isEmpty) return;\n\n    // Calculate spacing between bars\n    final totalBarsWidth = barWidth * values.length;\n    final spacing = (width - totalBarsWidth) / (values.length + 1);\n\n    // Draw each bar with ripple animation\n    for (int i = 0; i < values.length; i++) {\n      final normalizedValue = values[i] / maxValue;\n      final barHeight = normalizedValue * height * animationValue;\n\n      // Calculate bar position\n      final left = spacing + (spacing + barWidth) * i;\n      final top = height - barHeight;\n      final rect = RRect.fromRectAndRadius(\n        Rect.fromLTWH(left, top, barWidth, barHeight),\n        Radius.circular(cornerRadius),\n      );\n\n      // Create gradient for each bar\n      final gradient = LinearGradient(\n        begin: Alignment.topCenter,\n        end: Alignment.bottomCenter,\n        colors: [\n          colors[i % colors.length].withOpacityInt(0.8),\n          colors[i % colors.length],\n        ],\n      );\n\n      // Paint bar with gradient\n      final paint = Paint()\n        ..shader = gradient.createShader(rect.outerRect)\n        ..style = PaintingStyle.fill;\n\n      canvas.drawRRect(rect, paint);\n\n      // Add glow effect (optional)\n      if (animationValue > 0.7) {\n        final glowPaint = Paint()\n          ..color = colors[i % colors.length].withOpacityInt(0.2)\n          ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 8);\n\n        canvas.drawRRect(rect, glowPaint);\n      }\n\n      // Add ripple effect on top of bar (wave animation)\n      if (animationValue > 0.9 && values[i] > 0) {\n        const double waveHeight = 3.0;\n        const double waveFrequency = 10.0;\n        final double wavePhase = animationValue * 10.0;\n\n        final wavePaint = Paint()\n          ..color = Colors.white.withOpacityInt(0.3)\n          ..style = PaintingStyle.stroke\n          ..strokeWidth = 1.5;\n\n        final wavePath = Path();\n        double startX = left;\n        wavePath.moveTo(startX, top + waveHeight * sin(startX / waveFrequency + wavePhase));\n\n        for (double x = startX; x <= left + barWidth; x += 2) {\n          final y = top + waveHeight * sin(x / waveFrequency + wavePhase);\n          wavePath.lineTo(x, y);\n        }\n\n        canvas.drawPath(wavePath, wavePaint);\n      }\n    }\n  }\n\n  @override\n  bool shouldRepaint(covariant AnimatedBarChartPainter oldDelegate) {\n    return oldDelegate.animationValue != animationValue;\n  }\n}\n\n/// Custom line chart with animation effects\nclass AnimatedLineChart extends StatefulWidget {\n  final List<FlSpot> spots;\n  final Color lineColor;\n  final Color gradientColor;\n  final bool animate;\n\n  const AnimatedLineChart({\n    super.key,\n    required this.spots,\n    required this.lineColor,\n    required this.gradientColor,\n    this.animate = true,\n  });\n\n  @override\n  State<AnimatedLineChart> createState() => _AnimatedLineChartState();\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/profile/widgets/chart_animations.dart", "file_name": "chart_animations.dart", "line": 131, "line_from": 131, "line_to": 326, "snippet": "  void initState() {\n    super.initState();\n    _animationController = AnimationController(\n      vsync: this,\n      duration: const Duration(milliseconds: 1500),\n    );\n\n    _animation = CurvedAnimation(\n      parent: _animationController,\n      curve: Curves.elasticOut,\n    );\n\n    if (widget.animate) {\n      _animationController.forward();\n    } else {\n      _animationController.value = 1.0;\n    }\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    super.dispose();\n  }\n\n  void reset() {\n    _animationController.reset();\n    _animationController.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _animation,\n      builder: (context, child) {\n        final animatedSpots = _getAnimatedSpots();\n\n        return LineChart(\n          LineChartData(\n            gridData: const FlGridData(show: false),\n            titlesData: FlTitlesData(\n              topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),\n              rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),\n              bottomTitles: AxisTitles(\n                sideTitles: SideTitles(\n                  showTitles: true,\n                  getTitlesWidget: (value, meta) {\n                    // Show every 5th point or important x values\n                    if (value % 5 != 0 && value != 1) {\n                      return const SizedBox();\n                    }\n                    return Padding(\n                      padding: const EdgeInsets.only(top: 8.0),\n                      child: Text(\n                        value.toInt().toString(),\n                        style: Theme.of(context).textTheme.bodySmall,\n                      ),\n                    );\n                  },\n                ),\n              ),\n              leftTitles: AxisTitles(\n                sideTitles: SideTitles(\n                  showTitles: true,\n                  reservedSize: 30,\n                  getTitlesWidget: (value, meta) {\n                    if (value == 0) return const SizedBox();\n                    return Padding(\n                      padding: const EdgeInsets.only(right: 8.0),\n                      child: Text(\n                        value.toInt().toString(),\n                        style: Theme.of(context).textTheme.bodySmall,\n                      ),\n                    );\n                  },\n                ),\n              ),\n            ),\n            borderData: FlBorderData(show: false),\n            lineBarsData: [\n              LineChartBarData(\n                spots: animatedSpots,\n                isCurved: true,\n                curveSmoothness: 0.3,\n                color: widget.lineColor,\n                barWidth: 3,\n                isStrokeCapRound: true,\n                dotData: FlDotData(\n                  show: true,\n                  getDotPainter: (spot, percent, barData, index) {\n                    // Determine if this is today's spot based on index\n                    final bool isToday = index == (animatedSpots.length - 1);\n                    return FlDotCirclePainter(\n                      radius: isToday ? 5 * _animation.value : 3 * _animation.value, // Larger radius for today\n                      color: widget.lineColor, // Primary color for dots\n                      strokeWidth: 1,\n                      strokeColor: Theme.of(context).cardColor, // Use card background for stroke\n                    );\n                  },\n                ),\n                belowBarData: BarAreaData(\n                  show: true,\n                  color: widget.gradientColor,\n                  gradient: LinearGradient(\n                    colors: [\n                      widget.gradientColor.withOpacityInt(0.3), // Start a bit stronger\n                      widget.gradientColor.withOpacityInt(0.05), // End very transparent\n                    ],\n                    begin: Alignment.topCenter,\n                    end: Alignment.bottomCenter,\n                  ),\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n\n  List<FlSpot> _getAnimatedSpots() {\n    if (widget.spots.isEmpty) return [];\n\n    // Animate the growth of the line\n    final animationValue = _animation.value;\n\n    // Animate both y values and line progress\n    return widget.spots.asMap().entries.map((entry) {\n      final index = entry.key;\n      final spot = entry.value;\n\n      // Determine if this spot should be shown based on animation progress\n      if (index / widget.spots.length > animationValue) {\n        return FlSpot(spot.x, 0); // Not yet visible\n      }\n\n      // Animate the y value\n      return FlSpot(spot.x, spot.y * animationValue);\n    }).toList();\n  }\n}\n\n/// Heat map cell for yearly activity visualization\nclass HeatMapCell extends StatelessWidget {\n  final double value;\n  final double maxValue;\n  final Color baseColor;\n  final bool isAnimated;\n  final bool isHighlighted;\n\n  const HeatMapCell({\n    super.key,\n    required this.value,\n    required this.maxValue,\n    required this.baseColor,\n    this.isAnimated = true,\n    this.isHighlighted = false,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final intensity = value > 0 ? (value / maxValue).clamp(0.1, 1.0) : 0.0;\n\n    return TweenAnimationBuilder<double>(\n      tween: Tween<double>(begin: 0, end: intensity),\n      duration: Duration(milliseconds: isAnimated ? 800 : 0),\n      curve: Curves.easeInOut,\n      builder: (context, value, child) {\n        // Calculate color based on intensity\n        final color = intensity > 0 ? Color.lerp(baseColor.withOpacityInt(0.2), baseColor, value)! : Colors.transparent;\n\n        return Container(\n          margin: const EdgeInsets.all(1),\n          decoration: BoxDecoration(\n            color: color,\n            borderRadius: BorderRadius.circular(2),\n            boxShadow: isHighlighted\n                ? [\n                    BoxShadow(\n                      color: baseColor.withOpacityInt(0.4),\n                      blurRadius: 4,\n                      spreadRadius: 1,\n                    ),\n                  ]\n                : null,\n          ),\n          child: AnimatedScale(\n            scale: isHighlighted ? 1.1 : 1.0,\n            duration: const Duration(milliseconds: 200),\n            child: const SizedBox.square(dimension: 10),\n          ),\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "duplicates", "docstring": "", "module": "activity_details", "file_path": "Quran-Majeed/lib/presentation/profile/widgets/activity_details/monthly_activity_chart_view.dart", "file_name": "monthly_activity_chart_view.dart", "line": 53, "line_from": 53, "line_to": 241, "snippet": "    // Create fixed y-axis labels to avoid duplicates\n    final List<double> yLabels = [0]; // Always show 0\n    if (maxYValue <= 60) {\n      // If max is less than an hour, show minutes\n      final double interval = (maxYValue / 3).ceil().toDouble();\n      yLabels.addAll([interval, 2 * interval, 3 * interval]);\n    } else {\n      // If max includes hours, ensure proper hour spacing\n      final int maxHours = (maxYValue / 60).ceil();\n      final double hourInterval = (maxHours / 3).ceil().toDouble();\n      yLabels.addAll(\n          [hourInterval * 60, 2 * hourInterval * 60, 3 * hourInterval * 60]);\n    }\n\n    return CustomContainer(\n      theme: widget.theme,\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          // Title section\n          Text(\n            'Monthly Activity (${DateFormat('MMMM yyyy').format(now)})',\n            style: widget.theme.textTheme.titleMedium?.copyWith(\n              fontWeight: FontWeight.bold,\n              color: widget.theme.textTheme.bodyLarge?.color,\n            ),\n          ),\n          gapH16,\n          SizedBox(\n            height: 180,\n            child: BarChart(\n              BarChartData(\n                alignment: BarChartAlignment.spaceAround,\n                maxY: maxYValue,\n                gridData: const FlGridData(show: false),\n                titlesData: FlTitlesData(\n                  topTitles: const AxisTitles(\n                      sideTitles: SideTitles(showTitles: false)),\n                  rightTitles: const AxisTitles(\n                      sideTitles: SideTitles(showTitles: false)),\n                  bottomTitles: AxisTitles(\n                    sideTitles: SideTitles(\n                      showTitles: true,\n                      getTitlesWidget: (value, meta) {\n                        final day = value.toInt();\n                        // Only show every 5th day or 1st day to avoid crowding\n                        if (day % 5 != 0 && day != 1 && day != data.length) {\n                          return const SizedBox.shrink();\n                        }\n                        return Padding(\n                          padding: EdgeInsets.only(top: eightPx),\n                          child: Text(\n                            day.toLocalizedString(context),\n                            style: widget.theme.textTheme.bodySmall?.copyWith(\n                              color: context.color.subtitleColor,\n                            ),\n                          ),\n                        );\n                      },\n                      reservedSize: 28,\n                    ),\n                  ),\n                  leftTitles: AxisTitles(\n                    sideTitles: SideTitles(\n                      showTitles: true,\n                      reservedSize: 40,\n                      // Use our explicit label values\n                      interval: 1,\n                      getTitlesWidget: (value, meta) {\n                        // Check if this value is in our yLabels (with small tolerance)\n                        bool isLabelValue = false;\n                        double labelToUse = 0;\n\n                        for (final labelValue in yLabels) {\n                          if ((value - labelValue).abs() < 1.0) {\n                            isLabelValue = true;\n                            labelToUse = labelValue;\n                            break;\n                          }\n                        }\n\n                        if (!isLabelValue) {\n                          return const SizedBox.shrink();\n                        }\n\n                        // Format the label based on its value\n                        final String label;\n                        if (labelToUse >= 60) {\n                          final int hours = (labelToUse / 60).floor();\n                          label = '${hours.toLocalizedString(context)}h';\n                        } else {\n                          label =\n                              '${labelToUse.toInt().toLocalizedString(context)}m';\n                        }\n\n                        return Padding(\n                          padding: EdgeInsets.only(right: eightPx),\n                          child: Text(\n                            label,\n                            style: widget.theme.textTheme.bodySmall?.copyWith(\n                              color: context.color.subtitleColor,\n                            ),\n                          ),\n                        );\n                      },\n                    ),\n                  ),\n                ),\n                borderData: FlBorderData(show: false),\n                barGroups: List.generate(data.length, (i) {\n                  final dayData = data[i];\n                  final bool isToday = dayData.isToday;\n\n                  return BarChartGroupData(\n                    x: dayData.day,\n                    barRods: [\n                      BarChartRodData(\n                        toY: dayData.minutes,\n                        color: isToday\n                            ? primaryColor\n                            : context.color.primaryColor30,\n                        width: sixPx, // Thinner bars due to more data points\n                        borderRadius: BorderRadius.only(\n                          topLeft: Radius.circular(fourPx),\n                          topRight: Radius.circular(fourPx),\n                        ),\n                        backDrawRodData: BackgroundBarChartRodData(\n                          show: true,\n                          toY: maxYValue,\n                          color: context.color.chartShade.withOpacityInt(0.6),\n                        ),\n                      ),\n                    ],\n                    groupVertically: false,\n                    barsSpace: 4,\n                  );\n                }),\n                barTouchData: BarTouchData(\n                  touchTooltipData: BarTouchTooltipData(\n                    tooltipRoundedRadius: 8,\n                    tooltipBorder: BorderSide(\n                      color: context.color.borderColor,\n                      width: 1,\n                    ),\n                    getTooltipItem: (group, groupIndex, rod, rodIndex) {\n                      final day = group.x;\n                      final minutesTotal = rod.toY.round();\n                      final hours = minutesTotal ~/ 60;\n                      final minutes = minutesTotal % 60;\n\n                      // Format the day to show the date (e.g., Aug 15)\n                      final DateTime date = DateTime(now.year, now.month, day);\n                      final String dayText = DateFormat('MMM d').format(date);\n\n                      String timeText = '';\n                      if (hours > 0) {\n                        timeText += '${hours.toLocalizedString(context)} h ';\n                      }\n                      timeText += '${minutes.toLocalizedString(context)} min';\n\n                      return BarTooltipItem(\n                        '$dayText\\n',\n                        widget.theme.textTheme.bodySmall!.copyWith(\n                          fontWeight: FontWeight.bold,\n                          color: widget.theme.textTheme.bodyLarge?.color,\n                        ),\n                        children: [\n                          TextSpan(\n                            text: timeText,\n                            style: TextStyle(\n                              color: primaryColor,\n                              fontWeight: FontWeight.bold,\n                            ),\n                          ),\n                        ],\n                      );\n                    },\n                    getTooltipColor: (group) {\n                      return widget.theme.cardColor;\n                    },\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "activity_dashboard", "file_path": "Quran-Majeed/lib/presentation/profile/widgets/activity_dashboard/weekly_activity_chart.dart", "file_name": "weekly_activity_chart.dart", "line": 19, "line_from": 19, "line_to": 152, "snippet": "  Widget build(BuildContext context) {\n    assert(activityData.length <= 7,\n        \"Weekly ActivityChart requires at most 7 days of data.\");\n\n    final List<ActivityData> data = activityData.isEmpty\n        ? List.generate(\n            7,\n            (index) => ActivityData(\n              day: DateTime.now().subtract(Duration(days: 6 - index)).day,\n              date: DateTime.now().subtract(Duration(days: 6 - index)),\n              minutes: 0,\n              isToday: index == 6,\n            ),\n          )\n        : activityData;\n\n    final double maxMinutesInWeek = data.isNotEmpty\n        ? data\n            .map((d) => d.minutes)\n            .fold(0.0, (prev, current) => max(prev, current))\n        : 0.0;\n\n    final double effectiveMaxMinutes =\n        (maxMinutesInWeek <= 0) ? 30.0 : maxMinutesInWeek;\n\n    final Color primaryChartColor = context.color.primaryColor;\n\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        SizedBox(\n          height: 160,\n          child: Row(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            crossAxisAlignment: CrossAxisAlignment.end,\n            children: List.generate(\n              data.length,\n              (index) => _ActivityBar(\n                theme: theme,\n                data: data[index],\n                maxMinutesInWeek: effectiveMaxMinutes,\n                barColor: primaryChartColor,\n                inactiveBarColor: primaryChartColor.withOpacityInt(0.2),\n              ),\n            ),\n          ),\n        ),\n        gapH12,\n        Row(\n          mainAxisAlignment: MainAxisAlignment.spaceAround,\n          children: List.generate(\n            data.length,\n            (index) => _DayLabel(\n              day: data[index].day,\n              isToday: data[index].isToday,\n              isActive: data[index].isActive,\n              theme: theme,\n              activeColor: primaryChartColor,\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n}\n\nclass _ActivityBar extends StatelessWidget {\n  const _ActivityBar({\n    required this.theme,\n    required this.data,\n    required this.maxMinutesInWeek,\n    required this.barColor,\n    required this.inactiveBarColor,\n  });\n\n  final ThemeData theme;\n  final ActivityData data;\n  final double maxMinutesInWeek;\n  final Color barColor;\n  final Color inactiveBarColor;\n\n  @override\n  Widget build(BuildContext context) {\n    const double maxBarHeight = 125.0;\n    const double minBarHeight = 5.0;\n    const double barWidth = 30.0;\n\n    final double ratio =\n        maxMinutesInWeek > 0 ? data.minutes / maxMinutesInWeek : 0.0;\n\n    final double barHeight = data.isActive\n        ? (ratio * maxBarHeight).clamp(minBarHeight, maxBarHeight)\n        : minBarHeight;\n\n    final Color inactiveColor = context.color.primaryColor20;\n\n    final Color currentBarColor = data.isActive ? barColor : inactiveColor;\n\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.end,\n      children: [\n        SizedBox(\n          height: sixteenPx,\n          child: (data.isActive && data.minutes >= 1)\n              ? Text(\n                  \"${data.minutes.toInt().toLocalizedString(context)}m\",\n                  style: theme.textTheme.bodySmall?.copyWith(\n                    color: barColor,\n                    fontWeight: FontWeight.w500,\n                    fontSize: tenPx,\n                  ),\n                )\n              : null,\n        ),\n        gapH4,\n        TweenAnimationBuilder<double>(\n          tween: Tween<double>(begin: 0, end: barHeight),\n          duration: const Duration(milliseconds: 800),\n          curve: Curves.elasticOut,\n          builder: (context, height, child) {\n            return Container(\n              width: barWidth,\n              height: height.clamp(minBarHeight, maxBarHeight),\n              decoration: BoxDecoration(\n                color: currentBarColor,\n                borderRadius: radius8,\n              ),\n            );\n          },\n        ),\n      ],\n    );\n  }\n}"}, {"structure_type": "function", "name": "[];", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/tafseer/presenter/tafseer_presenter.dart", "file_name": "tafseer_presenter.dart", "line": 911, "line_from": 911, "line_to": 939, "snippet": "    List<Future<void>> futures = [];\n    for (TTDbFileModel model in modelsToDownload) {\n      if (!isAlreadyDownloaded(model) && context.mounted) {\n        futures.add(_loadTafseer(model, context));\n      }\n    }\n    await Future.wait(futures);\n    uiState.value = uiState.value.copyWith(isAllFilesDownloading: false);\n  }\n\n  List<MapEntry<String, List<TTDbFileModel>>> _getDownloadableTafseers(\n      Map<String, List<TTDbFileModel>> allTafseers,\n      List<TTDbFileModel> downloadedModels) {\n    final List<TTDbFileModel> allItems =\n        allTafseers.values.expand((models) => models).toList();\n    final Set<String> downloadedFileNames =\n        downloadedModels.map((model) => model.fileName).toSet();\n    final List<TTDbFileModel> downloadableItems = allItems\n        .where((model) => !downloadedFileNames.contains(model.fileName))\n        .toList();\n\n    return allTafseers.entries\n        .map((entry) => MapEntry(\n            entry.key,\n            entry.value\n                .where((model) => downloadableItems.contains(model))\n                .toList()))\n        .toList();\n  }"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/tafseer/widgets/custom_speed_dial.dart", "file_name": "custom_speed_dial.dart", "line": 41, "line_from": 41, "line_to": 224, "snippet": "  void initState() {\n    super.initState();\n    presenter = CustomSpeedDialPresenter(vsync: this);\n  }\n\n  @override\n  void dispose() {\n    _isDisposed = true;\n    presenter.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_isDisposed) return const SizedBox();\n\n    final TafseerPresenter tafseerPresenter = locate<TafseerPresenter>();\n    final NotePresenter notePresenter = locate<NotePresenter>();\n\n    return PresentableWidgetBuilder<CustomSpeedDialPresenter>(\n      presenter: presenter,\n      builder: () {\n        final isOpened = presenter.state.isOpened;\n        final slideAnimations = presenter.slideAnimations;\n\n        return StreamBuilder<void>(\n          stream: notePresenter.noteUpdateStream,\n          builder: (context, _) {\n            return FutureBuilder<bool>(\n              future: tafseerPresenter.hasExistingNote(\n                  widget.surahID, widget.ayahID),\n              builder: (context, snapshot) {\n                final bool hasNote = snapshot.data ?? false;\n\n                return Column(\n                  mainAxisAlignment: MainAxisAlignment.end,\n                  crossAxisAlignment: CrossAxisAlignment.end,\n                  children: [\n                    SpeedDialItem(\n                      isOpened: isOpened,\n                      theme: Theme.of(context),\n                      svgIconPath:\n                          hasNote ? SvgPath.icEdit : SvgPath.icNoteFavorite,\n                      backgroundColor: QuranColor.axolotlColor,\n                      label: hasNote\n                          ? context.l10n.editNote\n                          : context.l10n.createNote,\n                      onTap: () {\n                        widget.onTapCreateNote();\n                        presenter.closeSpeedDial();\n                      },\n                      slideAnimation: slideAnimations[0],\n                    ),\n                    SpeedDialItem(\n                      isOpened: isOpened,\n                      theme: Theme.of(context),\n                      svgIconPath: SvgPath.icCopyFill,\n                      backgroundColor: QuranColor.tigerEyeColor,\n                      label: context.l10n.copyTafseer,\n                      onTap: () {\n                        widget.onTapCopy();\n                        presenter.closeSpeedDial();\n                      },\n                      slideAnimation: slideAnimations[1],\n                    ),\n                    SpeedDialItem(\n                      isOpened: isOpened,\n                      theme: Theme.of(context),\n                      svgIconPath: SvgPath.icShare2,\n                      backgroundColor: QuranColor.cornflowerBlueColor,\n                      label: context.l10n.share,\n                      onTap: () {\n                        widget.onTapShare();\n                        presenter.closeSpeedDial();\n                      },\n                      slideAnimation: slideAnimations[2],\n                    ),\n                    FloatingActionButton(\n                      elevation: 2,\n                      shape: RoundedRectangleBorder(borderRadius: radius20),\n                      backgroundColor: context.color.primaryButtonColor,\n                      onPressed: presenter.toggleSpeedDial,\n                      child: AnimatedRotation(\n                        turns: isOpened ? 0.5 : 0,\n                        duration: const Duration(milliseconds: 300),\n                        child: SvgImage(\n                          isOpened ? SvgPath.icClose : SvgPath.icDashboard,\n                          width: twentyFourPx,\n                          height: twentyFourPx,\n                          color: context.color.primaryButtonTextColor,\n                        ),\n                      ),\n                    ),\n                  ],\n                );\n              },\n            );\n          },\n        );\n      },\n    );\n  }\n}\n\nclass SpeedDialItem extends StatelessWidget {\n  const SpeedDialItem({\n    super.key,\n    required this.isOpened,\n    required this.theme,\n    required this.svgIconPath,\n    required this.backgroundColor,\n    required this.label,\n    required this.onTap,\n    required this.slideAnimation,\n  });\n\n  final bool isOpened;\n  final ThemeData theme;\n  final String svgIconPath;\n  final Color backgroundColor;\n  final String label;\n  final VoidCallback onTap;\n  final Animation<Offset> slideAnimation;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedOpacity(\n      opacity: isOpened ? 1.0 : 0.0,\n      duration: const Duration(milliseconds: 300),\n      child: isOpened\n          ? SlideTransition(\n              position: slideAnimation,\n              child: OnTapWidget(\n                onTap: onTap,\n                theme: theme,\n                child: Transform.translate(\n                  offset: Offset(0, isOpened ? 0 : 20),\n                  child: Container(\n                    margin: EdgeInsets.only(bottom: tenPx),\n                    child: Row(\n                      mainAxisAlignment: MainAxisAlignment.end,\n                      mainAxisSize: MainAxisSize.min,\n                      children: [\n                        Material(\n                          color: context.color.primaryColor10,\n                          elevation: 2,\n                          borderRadius: radius20,\n                          child: Padding(\n                            padding: EdgeInsets.symmetric(\n                                horizontal: sixteenPx, vertical: eightPx),\n                            child: Text(\n                              label,\n                              style: context.quranText.buttonText!.copyWith(\n                                color: context.color.primaryColor,\n                                fontWeight: FontWeight.normal,\n                              ),\n                            ),\n                          ),\n                        ),\n                        gapW8,\n                        FloatingActionButton(\n                          heroTag: label,\n                          elevation: 2,\n                          mini: true,\n                          splashColor: Colors.transparent,\n                          backgroundColor: backgroundColor,\n                          onPressed: onTap,\n                          child: SvgImage(\n                            svgIconPath,\n                            width: twentyPx,\n                            height: twentyPx,\n                            color: context.color.primaryButtonTextColor,\n                          ),\n                        ),\n                      ],\n                    ),\n                  ),\n                ),\n              ),\n            )\n          : const SizedBox(),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/tafseer/widgets/view_tafseer_details.dart", "file_name": "view_tafseer_details.dart", "line": 32, "line_from": 32, "line_to": 137, "snippet": "  Widget build(BuildContext context) {\n    return FutureBuilder<String>(\n      future: tafseerPresenter.getTafsirTextFuture(surahID, ayahID, index),\n      builder: (context, snapshot) {\n        return SingleChildScrollView(\n          physics: const ClampingScrollPhysics(),\n          key: Key('tafseer_details_$index'),\n          child: Container(\n            padding: EdgeInsets.only(\n                left: twentyPx,\n                right: twentyPx,\n                top: thirtyPx,\n                bottom: 30.percentWidth),\n            width: double.infinity,\n            child: Column(\n              key: const Key('tafseer_details_column'),\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                if (snapshot.hasData) ...[\n                  HtmlFormattedText(\n                    tafsirText: snapshot.data!,\n                    theme: theme,\n                    ayahPresenter: ayahPresenter,\n                  ),\n                ] else if (snapshot.hasError) ...[\n                  Text('Error: ${snapshot.error}'),\n                ] else ...[\n                  const Center(child: Text('Loading...')),\n                ],\n              ],\n            ),\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass OptimizedHtmlContent extends StatelessWidget {\n  const OptimizedHtmlContent({\n    super.key,\n    required this.tafsirText,\n    required this.theme,\n    required this.tafseerFontSize,\n    required this.arabicFontSize,\n    required this.tafseerArabicFontFamily,\n  });\n\n  final String tafsirText;\n  final ThemeData theme;\n  final double tafseerFontSize;\n  final double arabicFontSize;\n  final ArabicFonts tafseerArabicFontFamily;\n\n  @override\n  Widget build(BuildContext context) {\n    return Html(\n      key: ValueKey(\n          'html_content_${tafseerFontSize}_${arabicFontSize}_${tafseerArabicFontFamily.name}'),\n      data: tafsirText.replaceAll(RegExp(r'\\r?\\n'), '<br/>'),\n      shrinkWrap: true,\n      extensions: [\n        TagExtension(\n          tagsToExtend: {\"longer\"},\n          builder: (ExtensionContext extensionContext) {\n            return Padding(\n              padding: EdgeInsets.only(top: sixteenPx, bottom: sixteenPx),\n              child: SizedBox(\n                width: double.infinity,\n                child: Text(\n                  extensionContext.element!.innerHtml.replaceAll('<br>', \"\\n\"),\n                  textDirection: TextDirection.rtl,\n                  style: TextStyle(\n                    fontSize: arabicFontSize,\n                    fontFamily: tafseerArabicFontFamily.name,\n                    letterSpacing: 0,\n                  ),\n                ),\n              ),\n            );\n          },\n        ),\n      ],\n      style: {\n        \"body\": Style(\n          margin: Margins.zero,\n          textAlign: TextAlign.left,\n          padding: HtmlPaddings.zero,\n          fontFamily: FontFamily.kalpurush,\n          fontSize: FontSize(tafseerFontSize),\n          letterSpacing: 0,\n          lineHeight: const LineHeight(1.5),\n          color: theme.textTheme.bodyMedium!.color,\n        ),\n        \"span\": Style(\n          direction: TextDirection.rtl,\n          lineHeight: const LineHeight(2),\n          letterSpacing: 0,\n          wordSpacing: 2,\n          fontFamily: tafseerArabicFontFamily.name,\n          fontSize: FontSize(arabicFontSize),\n        ),\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "ui", "file_path": "Quran-Majeed/lib/presentation/main_page/ui/main_page.dart", "file_name": "main_page.dart", "line": 32, "line_from": 32, "line_to": 181, "snippet": "  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    QuranScreen.setUp(context);\n    _mainPagePresenter.updateContext(context);\n    // _tafseerPresenter.updateContext(context);\n    return PopScope(\n      onPopInvokedWithResult: (bool isInvoked, dynamic result) async {\n        final bool isDrawerOpen =\n            _mainPagePresenter.mainScaffoldKey.currentState?.isDrawerOpen ??\n                false;\n        final int currentIndex = _mainPagePresenter.currentUiState.currentIndex;\n\n        if (isDrawerOpen) {\n          _mainPagePresenter.closeDrawer();\n          return;\n        }\n        if (currentIndex != 0) {\n          await _mainPagePresenter.setNavBarIndex(0);\n          return;\n        }\n\n        _mainPagePresenter.showExitDialog(context);\n      },\n      canPop: false,\n      child: PresentableWidgetBuilder(\n        presenter: _mainPagePresenter,\n        builder: () {\n          final MainPageUiState uiState = _mainPagePresenter.currentUiState;\n          return CustomStatusBarColor(\n            statusBarColor: isDarkMode(context)\n                ? theme.colorScheme.secondary\n                : (uiState.currentIndex == 0\n                    ? theme.primaryColor\n                    : context.color.gradientTop),\n            statusBarIconColor: isDarkMode(context)\n                ? Brightness.light\n                : (uiState.currentIndex == 0\n                    ? Brightness.light\n                    : Brightness.dark),\n            navigationBarIconColor:\n                isDarkMode(context) ? Brightness.light : Brightness.dark,\n            navigationBarColor: context.color.bottomNavBgColor,\n            child: Scaffold(\n              key: _mainPagePresenter.mainScaffoldKey,\n              resizeToAvoidBottomInset: false,\n              body: _pages[uiState.currentIndex],\n              drawer: const MainPageDrawer(),\n              bottomNavigationBar: MainNavigationBar(\n                selectedIndex: uiState.currentIndex,\n                onDestinationSelected: (index) {\n                  _mainPagePresenter.changeTabIndex(index);\n                },\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n\nclass MainNavigationBar extends StatelessWidget {\n  const MainNavigationBar({\n    super.key,\n    required this.selectedIndex,\n    required this.onDestinationSelected,\n  });\n\n  final int selectedIndex;\n  final ValueChanged<int> onDestinationSelected;\n\n  @override\n  Widget build(BuildContext context) {\n    return Theme(\n      key: const Key('main_navigation_bar_theme'),\n      data: Theme.of(context).copyWith(\n        navigationBarTheme: NavigationBarThemeData(\n          elevation: 0,\n          backgroundColor: context.color.backgroundColor,\n          labelTextStyle: WidgetStateProperty.resolveWith((states) {\n            if (states.contains(WidgetState.selected)) {\n              return TextStyle(\n                fontSize: twelvePx,\n                fontWeight: FontWeight.w600,\n                color: context.color.primaryColor,\n              );\n            }\n            return TextStyle(\n              fontSize: twelvePx,\n              fontWeight: FontWeight.normal,\n              color: context.color.navInactive,\n            );\n          }),\n          indicatorColor: context.color.navBgAc,\n        ),\n      ),\n      child: Container(\n        key: const Key('main_navigation_bar_container'),\n        padding: EdgeInsets.symmetric(horizontal: tenPx),\n        decoration: BoxDecoration(\n          color: context.color.backgroundColor,\n          border: Border(\n            top: BorderSide(\n              color: context.color.borderColor,\n            ),\n          ),\n        ),\n        child: NavigationBar(\n          key: const Key('main_navigation_bar'),\n          backgroundColor: context.color.backgroundColor,\n          selectedIndex: selectedIndex,\n          onDestinationSelected: onDestinationSelected,\n          overlayColor: WidgetStateProperty.all(Colors.transparent),\n          destinations: const [\n            NavDestinationItem(\n              key: Key('home_nav_destination_item'),\n              outlineIcon: SvgPath.icHomeActive,\n              fillIcon: SvgPath.icHomeInactive,\n              label: 'Home',\n            ),\n            NavDestinationItem(\n              key: Key('subject_wise_nav_destination_item'),\n              outlineIcon: SvgPath.icSubjectWiseActive,\n              fillIcon: SvgPath.icSubjectWiseInactive,\n              label: 'Topics',\n            ),\n            NavDestinationItem(\n              key: Key('collection_nav_destination_item'),\n              outlineIcon: SvgPath.icCollectionActive,\n              fillIcon: SvgPath.icCollectionInactive,\n              label: 'Collection',\n            ),\n            NavDestinationItem(\n              key: Key('memorize_nav_destination_item'),\n              outlineIcon: SvgPath.icMemorizeActive,\n              fillIcon: SvgPath.icMemorizeInactive,\n              label: 'Memorize',\n            ),\n            NavDestinationItem(\n              key: Key('profile_nav_destination_item'),\n              outlineIcon: SvgPath.icSettingsFill,\n              fillIcon: SvgPath.icSettingsDeactive,\n              label: 'Profile',\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "class", "name": "NoticeDialogButton extends StatelessWidget", "docstring": "", "module": "drawer", "file_path": "Quran-Majeed/lib/presentation/main_page/widgets/drawer/notice_dialog_button.dart", "file_name": "notice_dialog_button.dart", "line": 11, "line_from": 11, "line_to": 99, "snippet": "class NoticeDialogButton extends StatelessWidget {\n  const NoticeDialogButton({\n    super.key,\n    required this.title,\n    required this.icon,\n    required this.color,\n    this.opacity,\n    this.trailing = true,\n    required this.onPressed,\n    required this.actionType,\n    required this.theme,\n  });\n\n  final String title;\n  final String icon;\n  final Color color;\n  final double? opacity;\n  final VoidCallback onPressed;\n  final ButtonActionType actionType;\n  final bool trailing;\n  final ThemeData theme;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: EdgeInsets.only(bottom: twelvePx),\n      child: OnTapWidget(\n        theme: theme,\n        onTap: onPressed,\n        child: Container(\n          width: QuranScreen.width,\n          padding: EdgeInsets.only(\n              left: eightPx, right: twelvePx, top: twelvePx, bottom: twelvePx),\n          decoration: BoxDecoration(\n            color: theme.primaryColor.withOpacityInt(0.07),\n            borderRadius: radius6,\n          ),\n          child: Row(\n            mainAxisAlignment: trailing\n                ? MainAxisAlignment.spaceBetween\n                : MainAxisAlignment.center,\n            children: [\n              Row(\n                children: [\n                  gapW5,\n                  SizedBox(\n                    width: thirtyPx,\n                    height: thirtyPx,\n                    child: SvgPicture.asset(icon),\n                  ),\n                  gapW15,\n                  SizedBox(\n                    width: trailing ? 55.percentWidth : null,\n                    child: Text(\n                      title,\n                      overflow: TextOverflow.ellipsis,\n                      style: theme.textTheme.titleMedium!.copyWith(\n                        fontWeight: FontWeight.w500,\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              if (trailing)\n                if (actionType == ButtonActionType.copy)\n                  SvgPicture.asset(\n                    SvgPath.icCopy,\n                    width: eighteenPx,\n                    height: eighteenPx,\n                    colorFilter: buildColorFilter(context.color.subtitleColor),\n                  )\n                else\n                  SvgPicture.asset(\n                    SvgPath.icSend,\n                    width: sixteenPx,\n                    height: sixteenPx,\n                    colorFilter: buildColorFilter(context.color.subtitleColor),\n                  ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nenum ButtonActionType { copy, send }\n"}, {"structure_type": "function", "name": "_handlePopScope", "docstring": "", "module": "ui", "file_path": "Quran-Majeed/lib/presentation/ayah_detail/ui/ayah_details_page.dart", "file_name": "ayah_details_page.dart", "line": 40, "line_from": 40, "line_to": 278, "snippet": "  Future<void> _handlePopScope() async {\n    await _ayahPresenter.stopAudio();\n    _ayahPresenter.stopAutoScroll();\n    await _ayahPresenter.fetchAndSaveLastAyah();\n  }\n\n  Future<void> _initializePage() async {\n    await _ayahPresenter.initializeAyahDetailsPage(\n      initialPageIndex: initialPageIndex,\n      initialAyahIndex: initialAyahIndex,\n      showPageIndicator: showPageIndicator,\n    );\n    _audioPresenter.setPageChangeSubscription(\n      _ayahPresenter.uiState.stream.map((state) => state.currentPageIndex),\n    );\n\n    // Add preloading logic here after initialization\n    _preloadAyahData();\n  }\n\n  // New method to preload ayah data safely\n  void _preloadAyahData() {\n    // Start a microtask to ensure this runs after initialization\n    Future.microtask(() {\n      final int surahId = initialPageIndex + 1; // Convert to 1-indexed\n      final int currentAyah = initialAyahIndex + 1;\n      final int totalAyahs = CacheData.surahsCache[initialPageIndex].totalAyah;\n\n      // Determine range to preload\n      final int pageSize = _ayahPresenter.pageSize;\n      final int endAyah = (currentAyah + pageSize - 1) > totalAyahs\n          ? totalAyahs\n          : (currentAyah + pageSize - 1);\n\n      // Preload the range\n      _ayahPresenter.getWordsForAyahRange(surahId, currentAyah, endAyah);\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n\n    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(\n      statusBarColor: context.color.gradientTop,\n      statusBarIconBrightness:\n          isDarkMode(context) ? Brightness.light : Brightness.dark,\n      systemNavigationBarIconBrightness:\n          isDarkMode(context) ? Brightness.light : Brightness.dark,\n    ));\n\n    return AnnotatedRegion<SystemUiOverlayStyle>(\n      value: SystemUiOverlayStyle(\n        statusBarColor: context.color.gradientTop,\n        statusBarIconBrightness:\n            isDarkMode(context) ? Brightness.light : Brightness.dark,\n      ),\n      child: Stack(\n        children: [\n          PopScope(\n            onPopInvokedWithResult: (bool isPopInvoked, dynamic result) =>\n                _handlePopScope(),\n            child: PresentableWidgetBuilder(\n              presenter: _ayahPresenter,\n              onInit: () {\n                // Use post-frame callback to ensure initialization happens after the first build\n                WidgetsBinding.instance.addPostFrameCallback((_) {\n                  _initializePage();\n                });\n              },\n              builder: () {\n                final AyahViewUiState uiState = _ayahPresenter.uiState.value;\n                final AudioUIState audioUIState = _audioPresenter.uiState.value;\n\n                return Scaffold(\n                  backgroundColor: context.color.gradientTop,\n                  key: scaffoldKey,\n                  endDrawer: const MiniSettingsDrawer(isAyahPage: true),\n                  extendBody: true,\n                  endDrawerEnableOpenDragGesture: false,\n                  body: SafeArea(\n                    child: FancyScaffold(\n                      floatingWidgetController:\n                          _ayahPresenter.floatingWidgetController,\n                      isAudioPlaying: audioUIState.showPlayerControls ||\n                          _ayahPresenter\n                              .currentUiState.autoScrollOptionTurnedOn,\n                      appBar: AyahDetailsPageAppBar(\n                        key: const Key(_ayahDetailsPageAppBarKey),\n                        ayahPresenter: _ayahPresenter,\n                        scaffoldKey: scaffoldKey,\n                        theme: theme,\n                      ),\n                      body: Column(\n                        children: [\n                          Expanded(\n                            child: AyahPageScrollView(\n                              key: const Key(_ayahPageScrollViewKey),\n                              ayahPresenter: _ayahPresenter,\n                              uiState: uiState,\n                              showPageIndicator: showPageIndicator,\n                            ),\n                          ),\n                        ],\n                      ),\n                      bottomNavigationBarHeight:\n                          uiState.bottomNavigationBarHeight,\n                      bottomNavigationBar: _BottomNavigationWidget(\n                        audioUIState: audioUIState,\n                        uiState: uiState,\n                        audioPresenter: _audioPresenter,\n                        ayahPresenter: _ayahPresenter,\n                        theme: theme,\n                      ),\n                    ),\n                  ),\n                );\n              },\n            ),\n          ),\n          StreamBuilder<AudioAction>(\n            stream: _audioPresenter.actionStream,\n            builder: (context, snapshot) {\n              if (snapshot.hasData) {\n                final AudioAction action = snapshot.data!;\n                switch (action.type) {\n                  case AudioActionType.scrollToAyah:\n                    final scrollController = ScrollControllerManager()\n                        .getScrollController(action.pageIndex!);\n                    if (scrollController.isAttached) {\n                      WidgetsBinding.instance.addPostFrameCallback((_) {\n                        scrollController.scrollTo(\n                          index: action.ayahIndex!,\n                          duration: const Duration(milliseconds: 100),\n                          curve: Curves.easeInOut,\n                        );\n                      });\n                    }\n                    break;\n                  case AudioActionType.jumpToPage:\n                    WidgetsBinding.instance.addPostFrameCallback((_) {\n                      _ayahPresenter.pageController\n                          .jumpToPage(action.pageIndex!);\n                    });\n                    break;\n                  case AudioActionType.jumpToAyah:\n                    final scrollController = ScrollControllerManager()\n                        .getScrollController(action.pageIndex!);\n                    if (scrollController.isAttached) {\n                      WidgetsBinding.instance.addPostFrameCallback((_) {\n                        scrollController.jumpTo(index: action.ayahIndex!);\n                      });\n                    }\n                    break;\n                  case AudioActionType.setBottomBarHeight:\n                    WidgetsBinding.instance.addPostFrameCallback((_) {\n                      _ayahPresenter\n                          .setBottomNavigationBarHeight(action.height!);\n                    });\n                    break;\n                }\n              }\n              return const SizedBox.shrink();\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass _BottomNavigationWidget extends StatelessWidget {\n  const _BottomNavigationWidget({\n    required this.audioUIState,\n    required this.uiState,\n    required this.audioPresenter,\n    required this.ayahPresenter,\n    required this.theme,\n  });\n\n  final AudioUIState audioUIState;\n  final AyahViewUiState uiState;\n  final AudioPresenter audioPresenter;\n  final AyahPresenter ayahPresenter;\n  final ThemeData theme;\n\n  @override\n  Widget build(BuildContext context) {\n    if (audioUIState.isDownloading) {\n      // return AudioDownloadState(\n      //   qariName: audioPresenter.getSelectedReciterName(),\n      //   downloadRange:\n      //       '${audioUIState.selectedStartSurahName} - ${audioUIState.selectedEndSurahName}',\n      //   downloadProgress: audioUIState.downloadProgress,\n      //   onCancelPressed: () async => await audioPresenter.cancelDownload(),\n      //   bottomNavigationBarHeight: uiState.bottomNavigationBarHeight,\n      //   theme: theme,\n      // );\n      return AudioDownloadStatusBar(\n        qariName: audioPresenter.getSelectedReciterName(),\n        downloadRange:\n            '${audioUIState.selectedStartSurahName} - ${audioUIState.selectedEndSurahName}',\n        downloadProgress: audioUIState.downloadProgress,\n        onCancelPressed: () async => await audioPresenter.cancelDownload(),\n        bottomNavigationBarHeight: uiState.bottomNavigationBarHeight,\n        theme: theme,\n      );\n    }\n\n    if (audioUIState.showPlayerControls) {\n      return AudioPlayerWidget(\n        theme: theme,\n        progress: audioUIState.currentPlayTime != null &&\n                audioUIState.totalDuration != null\n            ? audioUIState.currentPlayTime!.inMilliseconds /\n                audioUIState.totalDuration!.inMilliseconds\n            : 0.0,\n        audioPresenter: audioPresenter,\n        isFromAyahDetail: true,\n        bottomNavigationBarHeight: uiState.bottomNavigationBarHeight,\n      );\n    }\n\n    if (uiState.autoScrollOptionTurnedOn) {\n      return AutoScrollControlWidget(\n        theme: theme,\n        ayahPresenter: ayahPresenter,\n        bottomNavigationBarHeight: uiState.bottomNavigationBarHeight,\n      );\n    }\n\n    return SimpleNavigationButtons(\n      ayahPresenter: ayahPresenter,\n      audioPresenter: audioPresenter,\n      theme: theme,\n      bottomNavigationBarHeight: uiState.bottomNavigationBarHeight,\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "collection", "file_path": "Quran-Majeed/lib/presentation/ayah_detail/widgets/collection/collection_bottomsheet_persistent_footer.dart", "file_name": "collection_bottomsheet_persistent_footer.dart", "line": 26, "line_from": 26, "line_to": 129, "snippet": "  final void Function(int, {required bool isBookmarked}) onBookmarkToggled;\n  final CollectionType collectionType;\n  final VoidCallback onNewCreateBottomSheetClosed;\n  final ThemeData theme;\n\n  @override\n  Widget build(BuildContext context) {\n    final pinPresenter = locate<PinPresenter>();\n\n    return Container(\n      // height: 14.percentWidth,\n      padding: padding20,\n      color: theme.scaffoldBackgroundColor,\n      child: TwoWayActionButton(\n        key: const Key(\"TwoWayActionButton\"),\n        theme: theme,\n        cancelButtonBgColor: isDarkMode(context)\n            ? context.color.primaryButtonColor\n            : context.color.secondaryButtonColor,\n        cancelButtonTextColor: isDarkMode(context)\n            ? context.color.primaryButtonTextColor\n            : context.color.secondaryButtonTextColor,\n        onCancelButtonTap: () {\n          presenter.onClickNewCreate(\n            context: context,\n            surahID: surahID,\n            ayahID: ayahID,\n            collectionType: collectionType,\n          );\n          onNewCreateBottomSheetClosed();\n        },\n        onSubmitButtonTap: () async {\n          if (collectionType == CollectionType.pin) {\n            // Handle pin update\n            final selectedPinName = pinPresenter.currentUiState.selectedPinName;\n            if (selectedPinName.isEmpty) {\n              context.navigatorPop<void>();\n              return;\n            }\n\n            // Find the selected pin\n            final selectedPin = pinPresenter.currentUiState.pins.firstWhere(\n              (pin) => pin.name == selectedPinName,\n            );\n\n            // Only show toast if the pin's ayah or surah has actually changed\n            final bool hasChanges = selectedPin.surahId != surahID ||\n                selectedPin.ayahNumber != ayahID;\n\n            // Update the existing pin with new ayah\n            await pinPresenter.updatePin(\n              oldPin: selectedPin,\n              newName: selectedPin.name,\n              newColor: selectedPin.color,\n              newSurahId: surahID,\n              newAyahNumber: ayahID,\n              context: context,\n              onUpdated: () async {\n                // Update the UI state to show the pin icon for the new ayah\n                final ayahPresenter = locate<AyahPresenter>();\n\n                // Only update the old position if it changed\n                if (hasChanges) {\n                  // Mark the old position as no longer pinned\n                  await ayahPresenter.updateAyahDataWithPin(\n                    surahID: selectedPin.surahId,\n                    ayahID: selectedPin.ayahNumber,\n                    isPinned: false,\n                  );\n                }\n\n                // Mark the new position as pinned\n                await ayahPresenter.updateAyahDataWithPin(\n                  surahID: surahID,\n                  ayahID: ayahID,\n                  isPinned: true,\n                );\n\n                ayahPresenter.uiState.refresh();\n\n                context.navigatorPop<void>();\n                // Only show toast if there were actual changes\n                if (hasChanges) {\n                  pinPresenter.addUserMessage(context.l10n.pinUpdSuccess);\n                }\n              },\n            );\n          } else {\n            // Handle bookmark update\n            await presenter.doneButtonHandlerWithToast(\n              context: context,\n              surahID: surahID,\n              ayahID: ayahID,\n              onBookmarkToggled: onBookmarkToggled,\n              showToastAlways: true,\n            );\n          }\n        },\n        cancelButtonTitle: context.l10n.createNew,\n        submitButtonTitle: context.l10n.done,\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "collection", "file_path": "Quran-Majeed/lib/presentation/ayah_detail/widgets/collection/collection_bottom_sheet.dart", "file_name": "collection_bottom_sheet.dart", "line": 29, "line_from": 29, "line_to": 66, "snippet": "  final void Function(int, {required bool isBookmarked}) onBookmarkAdded;\n  final String? title;\n  final CollectionType collectionType;\n  @override\n  State<CollectionBottomSheet> createState() => _CollectionBottomSheetState();\n\n  static Future<void> show({\n    required int surahID,\n    required int ayahID,\n    required String? title,\n    required Future<void> Function(int, {required bool isBookmarked})\n        onBookmarkToggled,\n    required CollectionType collectionType,\n    required BuildContext context,\n  }) async {\n    try {\n      if (!context.mounted) return;\n\n      await showModalBottomSheet<void>(\n        context: context,\n        isScrollControlled: true,\n        enableDrag: false,\n        shape: const RoundedRectangleBorder(borderRadius: BorderRadius.zero),\n        backgroundColor: Colors.transparent,\n        builder: (_) => CollectionBottomSheet(\n          surahID: surahID,\n          ayahID: ayahID,\n          title: title,\n          onBookmarkAdded: onBookmarkToggled,\n          collectionType: collectionType,\n        ),\n      );\n    } catch (e, stack) {\n      log(\"BottomSheet Error: $e\", error: e, stackTrace: stack);\n    }\n    // dislocate<MoreMenuPresenter>();\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "ayah_details", "file_path": "Quran-Majeed/lib/presentation/ayah_detail/widgets/ayah_details/surah_list_column.dart", "file_name": "surah_list_column.dart", "line": 25, "line_from": 25, "line_to": 89, "snippet": "  final void Function(int surahId)? onSurahSelected;\n  final ThemeData theme;\n  final int selectedSurahIndex;\n  final List<SurahEntity> filteredSurahs;\n  final Function(String) onSearchChanged;\n  final TextEditingController surahSearchController;\n  final int? initialSurahIndex;\n  @override\n  State<SurahListColumn> createState() => _SurahListColumnState();\n}\n\nclass _SurahListColumnState extends State<SurahListColumn> {\n  final ItemScrollController _scrollController = ItemScrollController();\n\n  @override\n  void initState() {\n    super.initState();\n    UiHelper.doOnPageLoaded(() {\n      // Prioritize scrollToSurahIndex if provided, otherwise use initialSurahIndex\n      if (widget.initialSurahIndex != null && _scrollController.isAttached) {\n        _scrollController.jumpTo(index: widget.initialSurahIndex!);\n      } else if (widget.initialSurahIndex != null &&\n          _scrollController.isAttached) {\n        _scrollController.jumpTo(index: widget.initialSurahIndex!);\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return BuildExpandedColumn(\n      flex: 2,\n      searchTextField: UserInputField(\n        borderRadius: BorderRadius.circular(fiftyPx),\n        textEditingController: widget.surahSearchController,\n        hintText: context.l10n.searchSurah,\n        onChanged: widget.onSearchChanged,\n      ),\n      listViewBuilder: () {\n        if (widget.filteredSurahs.isEmpty) {\n          return CustomizableFeedbackWidget(\n            theme: widget.theme,\n            svgPath: SvgPath.icSearchBox,\n            message: context.l10n.noResultFound,\n          );\n        }\n\n        return ScrollablePositionedList.builder(\n          itemScrollController: _scrollController,\n          itemCount: widget.filteredSurahs.length,\n          itemBuilder: (context, index) {\n            final surah = widget.filteredSurahs[index];\n            return SurahListItem(\n              surah: surah,\n              theme: widget.theme,\n              index: surah.serial - 1,\n              onSelect: () => widget.onSurahSelected?.call(surah.serial - 1),\n              selectedSurahIndex: widget.selectedSurahIndex,\n            );\n          },\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "onFontChanged", "docstring": "", "module": "ayah_details", "file_path": "Quran-Majeed/lib/presentation/ayah_detail/widgets/ayah_details/arabic_ayah_text_widget.dart", "file_name": "arabic_ayah_text_widget.dart", "line": 19, "line_from": 19, "line_to": 326, "snippet": "  static void onFontChanged(String fontFamily, double fontSize) {\n    // If the font has changed, clear the entire cache\n    if (_lastFontFamily != fontFamily || _lastFontSize != fontSize) {\n      _cache.clear();\n      _processedAyahs.clear();\n      _lastFontFamily = fontFamily;\n      _lastFontSize = fontSize;\n\n      // Also clear the TajweedEntity cache to ensure consistency\n      TajweedEntity.clearCache();\n    }\n  }\n\n  static TextSpan getProcessedText({\n    required String text,\n    required TextStyle baseStyle,\n    required int surahNumber,\n    required int ayahNumber,\n    required bool showTajweed,\n  }) {\n    if (text.isEmpty) {\n      // Return a simple text span if the text is empty to avoid processing issues\n      return TextSpan(text: '', style: baseStyle);\n    }\n\n    // Check if font has changed and update tracking\n    final fontFamily = baseStyle.fontFamily ?? '';\n    final fontSize = baseStyle.fontSize ?? 0.0;\n\n    if (_lastFontFamily != fontFamily || _lastFontSize != fontSize) {\n      onFontChanged(fontFamily, fontSize);\n    }\n\n    final String ayahKey = '${surahNumber}_$ayahNumber';\n    // Enhanced cache key including more font properties and theme color\n    final String key =\n        '${surahNumber}_${ayahNumber}_${text.length}_${fontSize}_${fontFamily}_${baseStyle.fontWeight?.index}_${baseStyle.fontStyle?.index}_${baseStyle.color?.toARGB32()}_$showTajweed';\n\n    // Skip cache for previously problematic ayahs\n    if (_processedAyahs.containsKey(ayahKey) && _processedAyahs[ayahKey] == false) {\n      _cache.remove(key);\n    }\n\n    if (!_cache.containsKey(key)) {\n      try {\n        final result = TajweedEntity.processTajweedText(\n          text: text,\n          baseStyle: baseStyle,\n          surahNumber: surahNumber,\n          ayahNumber: ayahNumber,\n          showTajweed: showTajweed,\n        );\n\n        // Extract the original text without tajweed markup for comparison\n        final String strippedOriginal = text.replaceAllMapped(\n            RegExp(r'\\[(.*?)\\]\\((.*?)\\)|\\((.*?)\\)\\[(.*?)\\]', dotAll: true, multiLine: true), (Match match) {\n          if (match.group(1) != null) return match.group(1)!;\n          return match.group(4)!;\n        });\n\n        // Verify the processed text has expected content\n        if (_isProcessedTextValid(result, strippedOriginal)) {\n          _cache[key] = result;\n          _processedAyahs[ayahKey] = true; // Mark as successfully processed\n        } else {\n          // If verification fails, mark as problematic\n          _processedAyahs[ayahKey] = false;\n\n          // Process without cache and return the result\n          return TajweedEntity.processTajweedText(\n            text: text,\n            baseStyle: baseStyle,\n            surahNumber: surahNumber,\n            ayahNumber: ayahNumber,\n            showTajweed: showTajweed,\n          );\n        }\n\n        // Manage cache size\n        if (_cache.length > 200) {\n          final keysToRemove = _cache.keys.take(50).toList();\n          for (final cacheKey in keysToRemove) {\n            _cache.remove(cacheKey);\n          }\n        }\n      } catch (e) {\n        // Fallback to simple text span if processing fails\n        _processedAyahs[ayahKey] = false; // Mark as problematic\n        return TextSpan(text: text, style: baseStyle);\n      }\n    }\n\n    // Double-check the cached result for completeness\n    final cachedResult = _cache[key]!;\n\n    // Extract the original text without tajweed markup for verification\n    final String strippedOriginal = text.replaceAllMapped(\n        RegExp(r'\\[(.*?)\\]\\((.*?)\\)|\\((.*?)\\)\\[(.*?)\\]', dotAll: true, multiLine: true), (Match match) {\n      if (match.group(1) != null) return match.group(1)!;\n      return match.group(4)!;\n    });\n\n    if (!_isProcessedTextValid(cachedResult, strippedOriginal)) {\n      _processedAyahs[ayahKey] = false; // Mark as problematic\n      _cache.remove(key);\n\n      // Regenerate without caching\n      return TajweedEntity.processTajweedText(\n        text: text,\n        baseStyle: baseStyle,\n        surahNumber: surahNumber,\n        ayahNumber: ayahNumber,\n        showTajweed: showTajweed,\n      );\n    }\n\n    return cachedResult;\n  }\n\n  // Helper method to extract all text from a TextSpan tree\n  static String _extractTextFromSpan(TextSpan span) {\n    String result = span.text ?? '';\n\n    if (span.children != null) {\n      for (var child in span.children!) {\n        if (child is TextSpan) {\n          result += _extractTextFromSpan(child);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  // Helper method to verify processed text contains all expected content\n  static bool _isProcessedTextValid(TextSpan processedSpan, String originalText) {\n    if (processedSpan.children == null || processedSpan.children!.isEmpty) {\n      return processedSpan.text == originalText;\n    }\n\n    // Extract all text from the TextSpan tree\n    final String extractedText = _extractTextFromSpan(processedSpan);\n\n    // Remove whitespace for comparison\n    final String normalizedOriginal = originalText.replaceAll(RegExp(r'\\s+'), '');\n    final String normalizedProcessed = extractedText.replaceAll(RegExp(r'\\s+'), '');\n\n    // Check for length equality and some content matching at the beginning and end\n    if (normalizedOriginal.length != normalizedProcessed.length) {\n      return false;\n    }\n\n    // Add extra checks for the start and end of the text\n    // This ensures the processed text maintains the same structure\n    final int checkLength = normalizedOriginal.length > 10 ? 5 : normalizedOriginal.length ~/ 2;\n\n    if (checkLength > 0) {\n      if (!normalizedProcessed.startsWith(normalizedOriginal.substring(0, checkLength))) {\n        return false;\n      }\n\n      if (!normalizedProcessed.endsWith(normalizedOriginal.substring(normalizedOriginal.length - checkLength))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Clear the cache\n  static void clearCache() {\n    _cache.clear();\n    _processedAyahs.clear();\n    _lastFontFamily = '';\n    _lastFontSize = 0;\n    // Also clear the TajweedEntity cache\n    TajweedEntity.clearCache();\n  }\n}\n\nclass ArabicAyahTextWidget extends StatelessWidget {\n  const ArabicAyahTextWidget({\n    super.key,\n    required this.ayahNumber,\n    this.wordData,\n    required this.arabicFontScript,\n    required this.arabicFontName,\n    required this.arabicFontSize,\n    required this.theme,\n    this.singleAyah,\n    this.highlightedAyah,\n    this.isArabicSearch = false,\n    this.surahID,\n    required this.showTajweed,\n    this.selectedWordIndex,\n  });\n\n  final int ayahNumber;\n  final List<WordByWordEntity>? wordData;\n  final ArabicFontScript arabicFontScript;\n  final String arabicFontName;\n  final double arabicFontSize;\n  final AyahEntity? singleAyah;\n  final ThemeData theme;\n  final TextSpan? highlightedAyah;\n  final bool isArabicSearch;\n  final int? surahID;\n  final bool showTajweed;\n  final int? selectedWordIndex;\n\n  // Static method to clear all caches when font settings change\n  static void onFontSettingsChanged(String fontFamily, double fontSize) {\n    _TajweedTextCache.clearCache();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox(\n      width: double.infinity,\n      child: _buildWordByWordText(context),\n    );\n  }\n\n  Widget _buildWordByWordText(BuildContext context) {\n    // In search results, if we have a highlighted span, use that directly\n    if (isArabicSearch && highlightedAyah != null) {\n      // For search results, we need to use the highlightedAyah directly\n      // but still apply the proper font and styling\n      final TextStyle baseStyle = context.quranText.arabicAyah!.copyWith(\n        fontFamily: arabicFontName,\n        fontSize: arabicFontSize,\n      );\n\n      // The highlighted ayah already has tajweed tags stripped\n      // in the SearchPresenter.getHighlightedAyah method\n      return RichText(\n        textDirection: TextDirection.rtl,\n        text: TextSpan(\n          children: highlightedAyah!.children,\n          style: baseStyle.merge(highlightedAyah!.style),\n          text: highlightedAyah!.text,\n        ),\n      );\n    }\n\n    if (wordData == null) return const SizedBox.shrink();\n\n    return Wrap(\n      key: Key(\"ayah_$ayahNumber\"),\n      direction: Axis.horizontal,\n      alignment: WrapAlignment.start,\n      textDirection: TextDirection.rtl,\n      children: List.generate(wordData!.length, (index) {\n        final word = wordData![index];\n        final String arabicText = arabicFontScript == ArabicFontScript.uthmani ? word.uthmani! : word.indopak!;\n        final TextStyle baseStyle = context.quranText.arabicAyah!.copyWith(\n          fontFamily: arabicFontName,\n          fontSize: arabicFontSize,\n          letterSpacing: 0,\n          height: 1.3,\n        );\n        final bool isSelected = index == selectedWordIndex;\n        final TextStyle wordStyle = isSelected ? baseStyle.copyWith(color: theme.colorScheme.primary) : baseStyle;\n\n        return Padding(\n          padding: const EdgeInsets.only(left: 2.0, bottom: 8.0),\n          child: OnTapWidget(\n            theme: theme,\n            onTap: () => _showGrammarBottomSheet(context, word),\n            child: Container(\n              padding: EdgeInsets.symmetric(horizontal: twoPx),\n              decoration: BoxDecoration(\n                color: isSelected ? theme.colorScheme.primary.withOpacityInt(0.2) : null,\n                borderRadius: BorderRadius.circular(fourPx),\n              ),\n              child: showTajweed\n                  ? RichText(\n                      textDirection: TextDirection.rtl,\n                      text: _TajweedTextCache.getProcessedText(\n                        text: arabicText,\n                        baseStyle: wordStyle,\n                        surahNumber: surahID ?? 1,\n                        ayahNumber: ayahNumber,\n                        showTajweed: showTajweed,\n                      ),\n                    )\n                  : Text(\n                      TajweedEntity.stripTajweedTags(arabicText),\n                      textDirection: TextDirection.rtl,\n                      style: wordStyle,\n                    ),\n            ),\n          ),\n        );\n      }),\n    );\n  }\n\n  void _showGrammarBottomSheet(BuildContext context, WordByWordEntity selectedWord) {\n    if (wordData != null) {\n      GrammarBottomSheet.show(\n        context: context,\n        wordList: wordData!,\n        selectedWordIndex: wordData!.indexOf(selectedWord),\n      );\n    }\n  }\n}"}, {"structure_type": "function", "name": "issues", "docstring": "", "module": "ayah_details", "file_path": "Quran-Majeed/lib/presentation/ayah_detail/widgets/ayah_details/ayah_content_widget.dart", "file_name": "ayah_content_widget.dart", "line": 95, "line_from": 95, "line_to": 166, "snippet": "        // We use Future.microtask to avoid blocking the UI thread and prevent initialization issues\n        Future.microtask(() {\n          ayahPresenter.preloadNextAyahPage(\n              pageIndex + 1, currentAyahIndex + 1);\n        });\n      }\n    }\n  }\n\n  Widget _buildAyahItem(BuildContext context, SurahEntity surah,\n      ThemeData theme, List<WordByWordEntity> wordData, int ayahIndex) {\n    final int ayahNumber = ayahIndex + 1;\n    final List<WordByWordEntity> ayahWords =\n        wordData.where((word) => word.ayah == ayahNumber).toList();\n\n    final bool isFirstAyah = ayahIndex == 0;\n    final bool isNewPage = CacheData.uniquePageIDwithSurahAndAyahID\n        .containsKey('${surah.serial}:$ayahNumber');\n    final WordByWordEntity? firstWordOfPageAyah =\n        ayahWords.isNotEmpty ? ayahWords.first : null;\n    final bool shouldShowBismillah =\n        isFirstAyah && surah.serial != 1 && surah.serial != 9;\n\n    return Column(\n      children: [\n        if (isFirstAyah) ...[\n          SurahHeader(surah: surah, theme: theme),\n          gapH16,\n        ],\n        if (shouldShowBismillah) ...[\n          ShowBismillahWidget(theme: theme),\n          gapH12,\n        ],\n        if (showPageIndicator && isNewPage) ...[\n          CenteredPageIndicator(\n            theme: theme,\n            pageNumber: firstWordOfPageAyah?.page ?? 0,\n            juzNumber: firstWordOfPageAyah?.juz ?? 0,\n            hijbNumber: firstWordOfPageAyah?.hijb != null\n                ? ayahPresenter.formatHijbNumber(firstWordOfPageAyah!.hijb!)\n                : '',\n          ),\n          gapH8,\n        ],\n        AyahContainer(\n          theme: theme,\n          isFromSpecificPage: true,\n          onTapAyahCard: () async {\n            await ayahPresenter.onTapAyahCard(\n              context: context,\n              surahID: surah.serial,\n              ayahNumber: ayahNumber,\n            );\n          },\n          ayahPresenter: ayahPresenter,\n          index: ayahIndex,\n          surahID: pageIndex + 1,\n          ayahNumber: ayahNumber,\n          ayahTopRowTitle: ayahNumber.toLocalizedString(context),\n          wordData: ayahWords,\n          onClickMore: () {\n            ayahPresenter.onAyahMoreClicked(\n              context: context,\n              surah: surah,\n              ayahNumber: ayahNumber,\n            );\n          },\n        ),\n        if (ayahIndex == surah.totalAyah - 1) SizedBox(height: 22.percentWidth),\n      ],\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "ayah_details", "file_path": "Quran-Majeed/lib/presentation/ayah_detail/widgets/ayah_details/build_ayah_list_column.dart", "file_name": "build_ayah_list_column.dart", "line": 22, "line_from": 22, "line_to": 80, "snippet": "  final void Function(int ayahID)? onAyahSelected;\n  final ThemeData theme;\n  final int selectedAyahIndex;\n  final List<int> filteredAyahs;\n  final Function(String) onSearchChanged;\n  final TextEditingController ayahSearchController;\n  final int ayahNumbers;\n  final int? initialAyahIndex;\n\n  @override\n  State<BuildAyahListColumn> createState() => _BuildAyahListColumnState();\n}\n\nclass _BuildAyahListColumnState extends State<BuildAyahListColumn> {\n  final ItemScrollController _scrollController = ItemScrollController();\n\n  @override\n  void initState() {\n    super.initState();\n    if (widget.initialAyahIndex != null) {\n      UiHelper.doOnPageLoaded(() {\n        if (_scrollController.isAttached) {\n          _scrollController.jumpTo(index: widget.initialAyahIndex!);\n        }\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return BuildExpandedColumn(\n        flex: 1,\n        searchTextField: UserInputField(\n          textEditingController: widget.ayahSearchController,\n          borderRadius: BorderRadius.circular(50),\n          hintText: context.l10n.ayah,\n          onChanged: widget.onSearchChanged,\n          inputFormatters: [\n            FilteringTextInputFormatter.digitsOnly,\n            LengthLimitingTextInputFormatter(3),\n          ],\n        ),\n        listViewBuilder: () {\n          return ScrollablePositionedList.builder(\n            itemScrollController: _scrollController,\n            itemCount: widget.filteredAyahs.length,\n            itemBuilder: (context, index) {\n              final ayahID = widget.filteredAyahs[index];\n              return AyahNumberListItem(\n                index: ayahID - 1,\n                theme: widget.theme,\n                selectedAyahIndex: widget.selectedAyahIndex,\n                onSelect: () => widget.onAyahSelected!(ayahID - 1),\n              );\n            },\n          );\n        });\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "bottom_sheet", "file_path": "Quran-Majeed/lib/presentation/ayah_detail/widgets/bottom_sheet/more_option_bottom_sheet.dart", "file_name": "more_option_bottom_sheet.dart", "line": 60, "line_from": 60, "line_to": 95, "snippet": "    void Function(BookmarkEntity)? onBookmarkRemoved,\n    bool isDirectButtonVisible = false,\n    bool idAddCollectionButtonVisible = true,\n    bool isPlayButtonVisible = true,\n    bool isCopyAyahButtonVisible = true,\n    bool isFromMemorization = false,\n    bool isFromDailyAyah = false,\n    bool isFromSearch = false,\n    bool isFromSubjectWise = false,\n    bool isTafseerButtonVisible = false,\n    bool isFromAyahPage = false,\n    bool isFromDua = false,\n  }) async {\n    final MoreOptionBottomSheet moreOptionBottomSheet = MoreOptionBottomSheet(\n      surahID: surahID,\n      ayahID: ayahID,\n      bookmark: bookmark,\n      dua: dua,\n      onBookmarkRemoved: onBookmarkRemoved,\n      isDirectButtonVisible: isDirectButtonVisible,\n      idAddCollectionButtonVisible: idAddCollectionButtonVisible,\n      isPlayButtonVisible: isPlayButtonVisible,\n      isCopyAyahButtonVisible: isCopyAyahButtonVisible,\n      isFromMemorization: isFromMemorization,\n      isFromDailyAyah: isFromDailyAyah,\n      isFromSearch: isFromSearch,\n      isFromSubjectWise: isFromSubjectWise,\n      isTafseerButtonVisible: isTafseerButtonVisible,\n      isFromAyahPage: isFromAyahPage,\n      isFromDua: isFromDua,\n      key: const Key(\"MoreOptionBottomSheet\"),\n    );\n\n    if (!context.mounted) return;\n    await context.showBottomSheet(moreOptionBottomSheet, context);\n  }"}, {"structure_type": "function", "name": "onInit", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/word_by_word/presenter/word_by_word_presenter.dart", "file_name": "word_by_word_presenter.dart", "line": 47, "line_from": 47, "line_to": 322, "snippet": "  Future<void> onInit() async {\n    super.onInit();\n    await _loadInitialData();\n  }\n\n  Future<void> _loadInitialData() async {\n    await toggleLoading(loading: true);\n    await _loadDownloadedLanguages();\n    await _loadAvailableLanguages();\n    await _loadSelectedLanguage();\n    await toggleLoading(loading: false);\n  }\n\n  Future<void> _loadAvailableLanguages() async {\n    final result = await _getAvailableWbwLanguagesUseCase.execute();\n    result.fold(\n      (failure) => addUserMessage(failure),\n      (wbwJsonModel) async {\n        final input = _LanguageProcessInput(\n          allLanguages: wbwJsonModel.wordbyword,\n          downloadedLanguages: currentUiState.downloadedLanguages,\n        );\n\n        final List<WbwDbFileModel> availableLanguages = await compute(\n          _processAvailableLanguages,\n          input,\n        );\n\n        uiState.value = currentUiState.copyWith(\n          availableLanguages: availableLanguages,\n          allLanguages: wbwJsonModel.wordbyword,\n        );\n      },\n    );\n  }\n\n  static List<WbwDbFileModel> _processAvailableLanguages(_LanguageProcessInput input) {\n    return input.allLanguages.where((language) => !input.downloadedLanguages.contains(language.name)).toList();\n  }\n\n  Future<void> _loadDownloadedLanguages() async {\n    final result = await _getDownloadedWbwLanguagesUseCase.execute();\n    result.fold(\n      (failure) => addUserMessage(failure),\n      (downloadedLanguages) {\n        uiState.value = currentUiState.copyWith(\n          downloadedLanguages: downloadedLanguages,\n        );\n      },\n    );\n  }\n\n  String getFileSize(String fileName, BuildContext context) {\n    if (fileName == 'Bangla' || fileName == 'English') {\n      return context.l10n.defaultLang;\n    }\n    final WbwDbFileModel file = currentUiState.allLanguages.firstWhere((element) => element.name == fileName);\n    return '${context.l10n.fileSize}: ${file.size.toLocalizedNumber(context)} ${context.l10n.mb}';\n  }\n\n  Future<void> _loadSelectedLanguage() async {\n    final result = await _getSelectedWbwLanguageUseCase.execute();\n    result.fold(\n      (failure) => addUserMessage(failure),\n      (selectedLanguage) {\n        uiState.value = currentUiState.copyWith(\n          selectedLanguage: selectedLanguage,\n        );\n      },\n    );\n  }\n\n  Future<void> downloadLanguage({required WbwDbFileModel wbwFile, required BuildContext context}) async {\n    final bool hasInternet = await checkInternetConnection();\n    if (!hasInternet && context.mounted) {\n      showMessage(message: context.l10n.noInternetConnection);\n      return;\n    }\n\n    if (currentUiState.isDownloading) {\n      if (currentUiState.activeDownloadId == wbwFile.name && context.mounted) {\n        cancelDownload(context);\n        return addUserMessage(context.l10n.downloadCancelled);\n      } else {\n        if (context.mounted) {\n          return addUserMessage(context.l10n.downloadInProgress);\n        }\n      }\n    }\n\n    uiState.value = currentUiState.copyWith(\n      isDownloading: true,\n      activeDownloadId: wbwFile.name,\n      downloadProgress: 0,\n    );\n\n    final Either<String, void> result = await _downloadWbwLanguageUseCase.execute(\n      wbwFile: wbwFile,\n      onProgress: (progress) {\n        uiState.value = currentUiState.copyWith(downloadProgress: progress);\n      },\n      cancelToken: _addCancelToken(wbwFile),\n    );\n\n    result.fold(\n      (failure) {\n        if (failure == \"Download cancelled\") {\n          if (context.mounted) addUserMessage(context.l10n.downloadCancelled);\n        } else {\n          if (context.mounted) addUserMessage(context.l10n.downloadFailed);\n        }\n        uiState.value = currentUiState.copyWith(\n          isDownloading: false,\n          activeDownloadId: null,\n          downloadProgress: 0,\n        );\n      },\n      (_) async {\n        await _loadDownloadedLanguages();\n        await _loadAvailableLanguages();\n        if (context.mounted) {\n          addUserMessage(context.l10n.downloadedSuccessfully);\n        }\n        uiState.value = currentUiState.copyWith(\n          isDownloading: false,\n          activeDownloadId: null,\n          downloadProgress: 0,\n        );\n      },\n    );\n  }\n\n  Future<void> loadWordByWordByFileModel(WbwDbFileModel fileModel, BuildContext context) async {\n    if (['Bangla', 'English'].contains(fileModel.name)) {\n      // Handle default language\n      await setSelectedLanguage(fileName: fileModel.name);\n    } else {\n      // Handle non-default language\n      final bool hasInternet = await checkInternetConnection();\n      if (!hasInternet) {\n        if (context.mounted) {\n          showMessage(message: context.l10n.noInternetConnection);\n        }\n        return;\n      }\n\n      uiState.value = currentUiState.copyWith(\n        isDownloading: true,\n        activeDownloadId: fileModel.name,\n        downloadProgress: 0,\n      );\n\n      final result = await _downloadWbwLanguageUseCase.execute(\n        wbwFile: fileModel,\n        cancelToken: _addCancelToken(fileModel),\n        onProgress: (progress) {\n          uiState.value = currentUiState.copyWith(downloadProgress: progress);\n        },\n      );\n\n      result.fold(\n        (error) => addUserMessage(error),\n        (_) async {\n          await _loadDownloadedLanguages();\n          await setSelectedLanguage(fileName: fileModel.name);\n        },\n      );\n    }\n\n    await _loadAvailableLanguages();\n    uiState.value = currentUiState.copyWith(\n      isDownloading: false,\n      activeDownloadId: null,\n      downloadProgress: 0,\n    );\n  }\n\n  CancelToken _addCancelToken(WbwDbFileModel file) {\n    final CancelToken cancelToken = CancelToken();\n    _cancelTokens[file.name] = cancelToken;\n    return cancelToken;\n  }\n\n  void cancelDownload(BuildContext context) {\n    if (currentUiState.isDownloading) {\n      _cancelTokens[currentUiState.activeDownloadId]?.cancel();\n\n      uiState.value = currentUiState.copyWith(\n        isDownloading: false,\n        activeDownloadId: null,\n        downloadProgress: 0,\n      );\n      addUserMessage(context.l10n.downloadCancelled);\n    }\n  }\n\n  Future<void> deleteLanguage({required String fileName, required BuildContext context}) async {\n    if (['Bangla', 'English'].contains(fileName)) {\n      addUserMessage(context.l10n.cannotDeleteDefaultLanguages);\n      return;\n    }\n\n    await RemoveDialog.show(\n      title: context.l10n.language,\n      context: context,\n      onRemove: () async {\n        final bool isCurrentlySelected = currentUiState.selectedLanguage == fileName;\n        final Either<String, WbwJsonModel> availableLanguagesResult = await _getAvailableWbwLanguagesUseCase.execute();\n        final WbwDbFileModel? wbwFile = availableLanguagesResult.fold(\n          (failure) {\n            addUserMessage(failure);\n            return null;\n          },\n          (wbwJsonModel) {\n            return wbwJsonModel.wordbyword.firstWhere((element) => element.name == fileName);\n          },\n        );\n        final deletedFile = await _deleteWbwLanguageUseCase.execute(file: wbwFile!);\n        deletedFile.fold(\n          (failure) => addUserMessage(failure),\n          (_) async {\n            await _loadDownloadedLanguages();\n            await _loadAvailableLanguages();\n            if (isCurrentlySelected) {\n              await setSelectedLanguage(fileName: currentUiState.downloadedLanguages.first);\n            }\n            if (context.mounted) {\n              addUserMessage(context.l10n.deletedSuccessfully);\n            }\n          },\n        );\n      },\n    );\n  }\n\n  Future<void> setSelectedLanguage({required String fileName}) async {\n    final WbwDbFileModel file = currentUiState.allLanguages.firstWhere((element) => element.fileName == fileName);\n    final result = await _setSelectedWbwLanguageUseCase.execute(file: file);\n    result.fold(\n      (failure) => addUserMessage(failure),\n      (_) async {\n        await _loadSelectedLanguage();\n      },\n    );\n  }\n\n  @override\n  Future<void> addUserMessage(String message) async {\n    uiState.value = currentUiState.copyWith(userMessage: message);\n    showMessage(message: message);\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async =>\n      uiState.value = currentUiState.copyWith(isLoading: loading);\n\n  bool isLanguageDownloaded(String fileName) {\n    // Convert fileName to language name if needed\n    String languageName = fileName;\n\n    // Map filename to language name\n    final Map<String, String> fileToName = {\n      'wbw_bn': 'Bangla',\n      'wbw_en': 'English',\n      'wbw_de': 'German',\n      'wbw_hi': 'Hindi',\n      'wbw_indo': 'Indonesian',\n      'wbw_ru': 'Russian',\n      'wbw_tr': 'Turkish',\n      'wbw_ur': 'Urdu',\n    };\n    languageName = fileToName[fileName] ?? fileName;\n\n    return currentUiState.downloadedLanguages.contains(languageName);\n  }\n}"}, {"structure_type": "function", "name": "conflicts", "docstring": "", "module": "ui", "file_path": "Quran-Majeed/lib/presentation/mushaf/ui/mushaf_page.dart", "file_name": "mushaf_page.dart", "line": 40, "line_from": 40, "line_to": 58, "snippet": "    // Set the mushaf type in the next frame to avoid build conflicts\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      presenter.setSelectedMushafType(type: widget.mushafType);\n      // Update appbar title after initialization\n      presenter.updateAppbarTitle(context);\n\n      // Start preloading pages in the background\n      presenter.preloadMushafPages();\n    });\n\n    // Register for app lifecycle events to manage memory\n    WidgetsBinding.instance.addObserver(this);\n  }\n\n  @override\n  void dispose() {\n    WidgetsBinding.instance.removeObserver(this);\n    super.dispose();\n  }"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "ui", "file_path": "Quran-Majeed/lib/presentation/mushaf/ui/text_mushaf_page.dart", "file_name": "text_mushaf_page.dart", "line": 27, "line_from": 27, "line_to": 132, "snippet": "  void initState() {\n    super.initState();\n\n    // Defer initialization to after the build is complete\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      presenter.initializePreloadCache();\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    super.build(context);\n    final ThemeData theme = Theme.of(context);\n\n    return Scaffold(\n      body: PresentableWidgetBuilder(\n        presenter: presenter,\n        builder: () {\n          final TextMushafUiState state = presenter.currentUiState;\n\n          return Column(\n            children: [\n              Expanded(\n                child: PageView.builder(\n                  controller: presenter.pageController,\n                  onPageChanged: (index) => presenter.onPageChanged(newPage: index + 1),\n                  itemCount: state.totalPages,\n                  itemBuilder: (BuildContext context, int pageIndex) {\n                    final int pageNumber = pageIndex + 1;\n\n                    final pageData = presenter.getPageCache(pageNumber);\n\n                    String fontFamily;\n                    if (state.selectedTextFormat == TextFormat.qpcV1) {\n                      fontFamily = state.pageFonts[pageNumber] ?? FontConstants.defaultFontFamily;\n                    } else {\n                      fontFamily = state.selectedTextFormat.fontFamily;\n                    }\n\n                    final bool hasPageFont = state.pageFonts.containsKey(pageNumber);\n\n                    return _TextMushafPageContent(\n                      key: ValueKey('text_page_$pageNumber'),\n                      pageNumber: pageNumber,\n                      layoutData: pageData?.layout ?? [],\n                      wordsByLine: pageData?.words ?? {},\n                      theme: theme,\n                      fontFamily: fontFamily,\n                      textFormat: state.selectedTextFormat,\n                      hasPageFont: hasPageFont,\n                    );\n                  },\n                ),\n              ),\n              Text(\n                'Page ${state.currentPage} of ${state.totalPages}',\n                style: theme.textTheme.bodySmall,\n              ),\n            ],\n          );\n        },\n      ),\n    );\n  }\n}\n\nclass _TextMushafPageContent extends StatelessWidget {\n  final int pageNumber;\n  final List<TextLayoutEntity> layoutData;\n  final Map<int, List<TextWordEntity>> wordsByLine;\n  final ThemeData theme;\n  final String fontFamily;\n  final bool hasPageFont;\n  final TextFormat textFormat;\n\n  const _TextMushafPageContent({\n    super.key,\n    required this.pageNumber,\n    required this.layoutData,\n    required this.wordsByLine,\n    required this.theme,\n    required this.fontFamily,\n    required this.textFormat,\n    this.hasPageFont = false,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return ListView.builder(\n      itemCount: layoutData.length,\n      itemBuilder: (context, lineIndex) {\n        final TextLayoutEntity lineLayout = layoutData[lineIndex];\n        final List<TextWordEntity>? words = wordsByLine[lineLayout.line];\n        return _TextLineWidget(\n          key: ValueKey('line_${pageNumber}_${lineLayout.line}'),\n          lineLayout: lineLayout,\n          words: words,\n          theme: theme,\n          fontFamily: fontFamily,\n          textFormat: textFormat,\n          hasPageFont: hasPageFont,\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "conflicts", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/text_mushaf_presenter.dart", "file_name": "text_mushaf_presenter.dart", "line": 134, "line_from": 134, "line_to": 145, "snippet": "    // Update state in a microtask to avoid build conflicts\n    await Future.microtask(() {\n      uiState.value = currentUiState.copyWith(pageFonts: updatedFonts);\n    });\n\n    return fontFamily;\n  }\n\n  Future<void> _preloadFonts(int currentPage) async {\n    _fontDirPath ??= await _textMushafRepository.getFontDirectoryPath();\n    await _fontManager.preloadFonts(currentPage, currentUiState.totalPages, _fontDirPath!);\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/text_mushaf_presenter.dart", "file_name": "text_mushaf_presenter.dart", "line": 149, "line_from": 149, "line_to": 177, "snippet": "    void Function(double progress)? onProgressUpdate,\n  }) async {\n    _fontDirPath ??= await _textMushafRepository.getFontDirectoryPath();\n\n    final List<int> pagesToDownload = List.generate(_initialFontBatchSize, (index) => index + 1);\n\n    uiState.value = currentUiState.copyWith(\n      isFontDownloading: true,\n      fontDownloadProgress: 0.0,\n    );\n\n    await _textMushafRepository.downloadPageFontBatch(\n      pageNumbers: pagesToDownload,\n      onBatchProgress: (completed, total) {\n        final double progress = completed / total;\n        uiState.value = currentUiState.copyWith(fontDownloadProgress: progress);\n        onProgressUpdate?.call(progress);\n      },\n      onFontProgress: (pageNumber, progress) {},\n      cancelToken: cancelToken,\n    );\n\n    uiState.value = currentUiState.copyWith(\n      isFontDownloading: false,\n      fontDownloadProgress: 1.0,\n    );\n\n    await _loadFontForPage(currentUiState.currentPage);\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/text_mushaf_presenter.dart", "file_name": "text_mushaf_presenter.dart", "line": 218, "line_from": 218, "line_to": 262, "snippet": "    void Function(double progress)? onProgressUpdate,\n  }) async {\n    final bool isAvailable = await isDatabaseAvailable();\n\n    _initCancelToken = CancelToken();\n\n    if (isAvailable) {\n      await loadTextDataForPage(pageNumber: currentUiState.currentPage);\n\n      _fontDirPath ??= await _textMushafRepository.getFontDirectoryPath();\n\n      final bool fontAvailable = await _isPageFontAvailable(currentUiState.currentPage);\n      if (fontAvailable) {\n        await _loadFontForPage(currentUiState.currentPage);\n      }\n\n      _initCancelToken = null;\n      return;\n    }\n\n    uiState.value = currentUiState.copyWith(\n      isDownloading: true,\n      downloadProgress: 0.0,\n    );\n\n    await _initializeTextMushafDatabaseUseCase.execute(\n      onProgress: (received, total) {\n        if (total > 0) {\n          final progress = received / total;\n          uiState.value = currentUiState.copyWith(downloadProgress: progress);\n          onProgressUpdate?.call(progress);\n        }\n      },\n      cancelToken: _initCancelToken!,\n    );\n\n    await loadTextDataForPage(pageNumber: currentUiState.currentPage);\n\n    uiState.value = currentUiState.copyWith(\n      isDownloading: false,\n      downloadProgress: 1.0,\n    );\n\n    _initCancelToken = null;\n  }"}, {"structure_type": "function", "name": "conflicts", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/text_mushaf_presenter.dart", "file_name": "text_mushaf_presenter.dart", "line": 321, "line_from": 321, "line_to": 338, "snippet": "        // Update state in a microtask to avoid build conflicts\n        await Future.microtask(() {\n          uiState.value = currentUiState.copyWith(\n            textLayout: layoutData,\n            textWordsByLine: wordsByLine,\n            isLoading: false,\n          );\n        });\n\n        _preloadFonts(pageNumber);\n      }\n    } catch (e) {\n      if (!background) {\n        await addUserMessage('An unexpected error occurred.');\n      }\n    } finally {\n      _loadingPages.remove(pageNumber);\n    }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/text_mushaf_presenter.dart", "file_name": "text_mushaf_presenter.dart", "line": 360, "line_from": 360, "line_to": 420, "snippet": "    // Use microtask to avoid updating state during build\n    Future.microtask(() {\n      uiState.value = currentUiState.copyWith(\n        currentSurahNameOrNull: () => surahName ?? currentUiState.currentSurahName,\n        currentJuzNumberOrNull: () => juzNumber ?? currentUiState.currentJuzNumber,\n        currentHizbNumberOrNull: () => hizbNumber ?? currentUiState.currentHizbNumber,\n        appbarTitleKeyOrNull: () => surahName != null ? null : 'textMushafTitle',\n        appbarTitleOrNull: () => surahName,\n      );\n    });\n  }\n\n  Future<void> loadTextDataForPage({required int pageNumber}) async {\n    if (pageNumber < 1 || pageNumber > currentUiState.totalPages) return;\n\n    if (currentUiState.isLoading && currentUiState.currentPage == pageNumber) return;\n\n    // Update state in a microtask to avoid build conflicts\n    await Future.microtask(() {\n      uiState.value = currentUiState.copyWith(\n        isLoading: true,\n        currentPage: pageNumber,\n        userMessage: null,\n      );\n    });\n\n    // Make sure the glyph database is initialized\n    try {\n      await _glyphRepository.initializeGlyphDatabase();\n    } catch (e) {\n      log('Error initializing glyph database: $e');\n    }\n\n    if (_pageCache.containsKey(pageNumber)) {\n      final PageCacheData cachedData = _pageCache[pageNumber]!;\n\n      await _updatePageHeaderInfo(pageNumber);\n\n      if (await _isPageFontAvailable(pageNumber)) {\n        await _loadFontForPage(pageNumber);\n      }\n\n      // Update state in a microtask to avoid build conflicts\n      await Future.microtask(() {\n        uiState.value = currentUiState.copyWith(\n          textLayout: cachedData.layout,\n          textWordsByLine: cachedData.words,\n          isLoading: false,\n        );\n      });\n\n      _preloadAdjacentPages(pageNumber);\n\n      _preloadFonts(pageNumber);\n      return;\n    }\n\n    await _loadPageDataToCache(pageNumber: pageNumber);\n\n    _preloadAdjacentPages(pageNumber);\n  }"}, {"structure_type": "function", "name": "[];", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/text_mushaf_presenter.dart", "file_name": "text_mushaf_presenter.dart", "line": 472, "line_from": 472, "line_to": 512, "snippet": "    final List<Future<void>> wordFutures = [];\n\n    for (final TextLayoutEntity lineLayout in layoutData) {\n      if (lineLayout.type == 'ayah' && lineLayout.rangeStart > 0 && lineLayout.rangeEnd >= lineLayout.rangeStart) {\n        wordFutures.add(_getWordsForRangeUseCase\n            .execute(\n          params: GetWordsForRangeParams(\n            rangeStart: lineLayout.rangeStart,\n            rangeEnd: lineLayout.rangeEnd,\n          ),\n        )\n            .then((wordsResult) {\n          wordsResult.fold(\n            (wordsError) {\n              wordFetchError = true;\n              wordsByLine[lineLayout.line] = [];\n            },\n            (wordData) {\n              wordsByLine[lineLayout.line] = wordData;\n            },\n          );\n        }));\n      } else {\n        wordsByLine[lineLayout.line] = [];\n      }\n    }\n\n    await Future.wait(wordFutures);\n\n    if (wordFetchError) {\n      await addUserMessage('Some word data could not be loaded.');\n    }\n\n    return wordsByLine;\n  }\n\n  void onPageChanged({required int newPage}) {\n    if (newPage < 1 || newPage > currentUiState.totalPages || newPage == currentUiState.currentPage) return;\n\n    loadTextDataForPage(pageNumber: newPage);\n  }"}, {"structure_type": "function", "name": "rebuilds", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/mushaf_presenter.dart", "file_name": "mushaf_presenter.dart", "line": 215, "line_from": 215, "line_to": 243, "snippet": "    // Batch all state updates together to avoid multiple rebuilds\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      uiState.value = currentUiState.copyWith(\n        currentMushafType: newType,\n        currentPage: pageToOpen,\n        mushafDirectory: extractedPath,\n      );\n    });\n\n    await updatePageInfo(pageToOpen);\n  }\n\n  Future<int?> getFirstNonEmptyPage(MushafType type) async {\n    for (int page = 1; page <= _getTotalPages(type); page++) {\n      // Check without cache\n      try {\n        final result = await _getPageInfoUseCase.execute(\n          pageNumber: page,\n          mushafType: type,\n        );\n        if (result.isRight()) {\n          return page;\n        }\n      } catch (_) {\n        // Skip this page if there's an error\n      }\n    }\n    return null;\n  }"}, {"structure_type": "function", "name": "exists", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/mushaf_presenter.dart", "file_name": "mushaf_presenter.dart", "line": 426, "line_from": 426, "line_to": 466, "snippet": "            // Use exists() instead of existsSync() to avoid blocking the UI thread\n            if (await file1.exists()) {\n              nuraniFileFormat = 'nurani_quran_%d.png';\n            } else if (await file2.exists()) {\n              nuraniFileFormat = 'page%03d.png';\n            } else {\n              // Default if neither exists\n              nuraniFileFormat = 'nurani_quran_%d.png';\n            }\n          }\n\n          // Use last read page if available or default to page 1\n          final int initialPage = lastReadPage ?? 1;\n\n          uiState.value = currentUiState.copyWith(\n            isLoading: false,\n            isExtracting: false,\n            userMessage: null,\n            totalPages: totalPages,\n            currentMushafType: mushafType,\n            mushafDirectory: extractedPath,\n            nuraniFileFormat: nuraniFileFormat,\n            currentPage: initialPage,\n            appbarTitle: appbarTitle, // Set the appbar title directly here\n          );\n        },\n      );\n\n      // Fix the state update during build issue by handling navigation and state updates separately\n      if (isOnMushafPage) {\n        await updateCurrentMushafType(mushafType);\n      } else {\n        context.navigatorPop();\n        // Navigate first, then update state in the next frame to avoid build conflicts\n        Get.to(() => MushafPage(mushafType: mushafType));\n\n        // Use a post-frame callback to update state after navigation is complete\n        WidgetsBinding.instance.addPostFrameCallback((_) async {\n          await updateCurrentMushafType(mushafType);\n        });\n      }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/mushaf_presenter.dart", "file_name": "mushaf_presenter.dart", "line": 543, "line_from": 543, "line_to": 568, "snippet": "    // Use a post-frame callback to avoid updating state during build\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      // Make sure we're using the most up-to-date mushaf type\n      final MushafType currentType = currentUiState.currentMushafType;\n      final String title = getMushafTitle(type: currentType, context: context);\n\n      // Update the UI state with the new title\n      uiState.value = currentUiState.copyWith(appbarTitle: title);\n\n      // Force UI to refresh by calling update\n      update();\n    });\n  }\n\n  String getMushafFileSize({required MushafType type}) {\n    const Map<MushafType, double> fileSizes = {\n      MushafType.hafezi: 120.3,\n      MushafType.newmadani: 123.4,\n      MushafType.nurani: 50.0,\n      MushafType.qaloon: 104.9,\n      MushafType.shemerly: 115.9,\n      MushafType.warsh: 234.1,\n      MushafType.text: 5.2, // Smaller file size for the database\n    };\n    return '${fileSizes[type] ?? 0.0}';\n  }"}, {"structure_type": "function", "name": "system", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/mushaf_presenter.dart", "file_name": "mushaf_presenter.dart", "line": 1050, "line_from": 1050, "line_to": 1079, "snippet": "    // Preload images in batches to avoid overwhelming the system\n    const int batchSize = 3;\n    for (int i = 0; i < paths.length; i += batchSize) {\n      final end = (i + batchSize < paths.length) ? i + batchSize : paths.length;\n      final batch = paths.sublist(i, end);\n\n      await Future.wait(batch.map((path) => _preloadSingleImage(path)));\n\n      // Update preloading progress\n      final progress = end / paths.length;\n      uiState.value = currentUiState.copyWith(\n        preloadProgress: progress,\n      );\n    }\n\n    uiState.value = currentUiState.copyWith(\n      isPreloading: false,\n      preloadProgress: 1.0,\n    );\n  }\n\n  Future<bool> _preloadSingleImage(String path) async {\n    try {\n      final params = PreloadImageParams(path);\n      return await compute(_preloadImageIsolate, params);\n    } catch (e) {\n      logError('Error preloading image: $e');\n      return false;\n    }\n  }"}, {"structure_type": "function", "name": "rebuilds", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/mushaf_presenter.dart", "file_name": "mushaf_presenter.dart", "line": 1098, "line_from": 1098, "line_to": 1172, "snippet": "    // Set flag in UI state but don't update preload paths to avoid widget rebuilds\n    uiState.value = currentUiState.copyWith(\n      isPreloading: true,\n      preloadProgress: 0.0,\n    );\n\n    int completed = 0;\n    final int total = paths.length;\n\n    // Preload in batches of 3 to avoid overwhelming the system\n    const int batchSize = 3;\n    for (int i = 0; i < paths.length; i += batchSize) {\n      final end = (i + batchSize < paths.length) ? i + batchSize : paths.length;\n      final batch = paths.sublist(i, end);\n\n      await Future.wait(batch.map((path) => _preloadSingleImage(path)));\n\n      completed += batch.length;\n      final progress = completed / total;\n\n      uiState.value = currentUiState.copyWith(\n        preloadProgress: progress,\n      );\n    }\n\n    uiState.value = currentUiState.copyWith(\n      isPreloading: false,\n      preloadProgress: 1.0,\n    );\n  }\n\n  // Get button title for the bottom sheet based on current state\n  String getButtonTitleForSelectedMushaf(BuildContext context) {\n    final MushafType selectedType = tempSelectedMushafType;\n    final uiState = currentUiState;\n\n    // Handle Text Mushaf download progress separately as a priority\n    if (selectedType == MushafType.text) {\n      // Get TextMushafPresenter to check its download state\n      final textUiState = textPresenter.currentUiState;\n\n      // Calculate combined progress\n      double combinedProgress = 0.0;\n\n      if (textUiState.isDownloading) {\n        // If database is downloading, it's 1% of total progress\n        combinedProgress = textUiState.downloadProgress * 0.01;\n        final int progressPercent = (combinedProgress * 100).round();\n        return '${context.l10n.downloading} DB ${progressPercent.toLocalizedString(context)}%';\n      } else if (textUiState.isFontDownloading) {\n        // If fonts are downloading, database is complete (1%) and fonts are 99%\n        combinedProgress = 0.01 + (textUiState.fontDownloadProgress * 0.99);\n        final int progressPercent = (combinedProgress * 100).round();\n        return '${context.l10n.downloading} Fonts ${progressPercent.toLocalizedString(context)}%';\n      }\n\n      // If not downloading, check if it's available\n      return textUiState.downloadProgress >= 1.0 ? context.l10n.apply : context.l10n.downloadNow;\n    }\n\n    // For regular mushafs:\n    // First priority: Show extraction status\n    if (uiState.isExtracting && uiState.downloadingMushafName == selectedType.name) {\n      return context.l10n.extracting;\n    }\n\n    // Second priority: Show download progress\n    if (uiState.isDownloading && uiState.downloadingMushafName == selectedType.name) {\n      final int progressPercent = (uiState.downloadProgress * 100).round();\n      return '${context.l10n.downloading} ${progressPercent.toLocalizedString(context)}%';\n    }\n\n    // Default based on downloaded status\n    return uiState.isSelectedMushafDownloaded ? context.l10n.apply : context.l10n.downloadNow;\n  }"}, {"structure_type": "function", "name": "rebuilds", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/mushaf/presenter/mushaf_presenter.dart", "file_name": "mushaf_presenter.dart", "line": 1192, "line_from": 1192, "line_to": 1219, "snippet": "    // Only update if the value has changed to avoid unnecessary rebuilds\n    if (currentUiState.isSelectedMushafDownloaded != isDownloaded) {\n      uiState.value = currentUiState.copyWith(\n        isSelectedMushafDownloaded: isDownloaded,\n      );\n    }\n  }\n\n  void onPageChanged(int index) {\n    // This is called by the PageView in MushafPage (for image mushafs)\n    final int newPage = index + 1;\n    if (newPage == currentUiState.currentPage) {\n      return; // Ignore if same page\n    }\n\n    // Save last read page for the *previous* image mushaf page\n    saveLastReadPage();\n\n    // Update state for the new page\n    uiState.value = currentUiState.copyWith(\n      currentPage: newPage,\n      currentSurahName: null, // Clear old info, updatePageInfo will fetch new\n      currentJuzNumber: null,\n    );\n\n    // Update header info (Surah/Juz) for the new page\n    updatePageInfo(newPage);\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/mushaf/widgets/mushaf_juz_list_widget.dart", "file_name": "mushaf_juz_list_widget.dart", "line": 20, "line_from": 20, "line_to": 96, "snippet": "  Widget build(BuildContext context) {\n    final MushafPresenter mushafPresenter = locate();\n\n    return ListView.builder(\n      itemCount: 30,\n      shrinkWrap: true,\n      padding: EdgeInsets.only(top: tenPx),\n      itemBuilder: (context, index) {\n        final int juzNumber = index + 1;\n        return JuzSection(\n          juzNumber: juzNumber,\n          theme: theme,\n          mushafPresenter: mushafPresenter,\n        );\n      },\n    );\n  }\n}\n\nclass JuzSection extends StatelessWidget {\n  const JuzSection({\n    super.key,\n    required this.juzNumber,\n    required this.theme,\n    required this.mushafPresenter,\n  });\n\n  final int juzNumber;\n  final ThemeData theme;\n  final MushafPresenter mushafPresenter;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: double.infinity,\n      decoration: BoxDecoration(\n        borderRadius: radius10,\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          gapH10,\n          InkWell(\n            onTap: () {\n              mushafPresenter.navigateToJuz(juzNumber: juzNumber);\n              context.navigatorPop();\n            },\n            child: Container(\n              width: double.infinity,\n              padding: EdgeInsets.symmetric(\n                horizontal: fifteenPx,\n                vertical: sixPx,\n              ),\n              decoration: BoxDecoration(\n                color: context.color.dropDownColor,\n                borderRadius: radius4,\n              ),\n              child: Text(\n                '${context.l10n.juz} ${juzNumber.toLocalizedString(context)}',\n                style: theme.textTheme.titleMedium!.copyWith(\n                  fontWeight: FontWeight.w600,\n                  color: theme.primaryColor,\n                ),\n              ),\n            ),\n          ),\n          gapH8,\n          JuzSurahList(\n            juzNumber: juzNumber,\n            theme: theme,\n            mushafPresenter: mushafPresenter,\n          ),\n        ],\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "imageFuture;", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/mushaf/widgets/mushaf_image_loader.dart", "file_name": "mushaf_image_loader.dart", "line": 62, "line_from": 62, "line_to": 235, "snippet": "  final Future<Uint8List?>? imageFuture;\n  final bool hasError;\n  final bool isInitialized;\n\n  MushafImageUiState({\n    this.imageFuture,\n    this.hasError = false,\n    this.isInitialized = false,\n  });\n\n  static MushafImageUiState empty() => MushafImageUiState();\n\n  MushafImageUiState copyWith({\n    Future<Uint8List?>? imageFuture,\n    bool? hasError,\n    bool? isInitialized,\n  }) {\n    return MushafImageUiState(\n      imageFuture: imageFuture ?? this.imageFuture,\n      hasError: hasError ?? this.hasError,\n      isInitialized: isInitialized ?? this.isInitialized,\n    );\n  }\n}\n\n// Presenter class for MushafImageLoader\nclass MushafImagePresenter extends GetxController {\n  final String filePath;\n  final double viewportWidth;\n  final List<String>? preloadPaths;\n\n  // Static image cache\n  static final Map<String, Uint8List> _imageCache =\n      LinkedHashMap<String, Uint8List>(equals: (a, b) => a == b, hashCode: (k) => k.hashCode);\n  static const int _maxCacheSize = 20;\n\n  // Reactive state\n  final Rx<MushafImageUiState> uiState = Rx<MushafImageUiState>(MushafImageUiState.empty());\n  MushafImageUiState get currentUiState => uiState.value;\n\n  final List<Future<void>> _pendingPreloads = [];\n\n  MushafImagePresenter({\n    required this.filePath,\n    required this.viewportWidth,\n    this.preloadPaths,\n  });\n\n  @override\n  void onClose() {\n    _pendingPreloads.clear();\n    super.onClose();\n  }\n\n  // Add to image cache\n  void _addToCache(String key, Uint8List value) {\n    // Remove oldest entries if cache is getting too large\n    if (_imageCache.length >= _maxCacheSize) {\n      final oldestKey = _imageCache.keys.first;\n      _imageCache.remove(oldestKey);\n    }\n    _imageCache[key] = value;\n  }\n\n  // Initialize image loading\n  void initializeImageLoading(BuildContext context) {\n    if (currentUiState.isInitialized) return;\n\n    _loadImage(context);\n    _preloadImages(context);\n\n    uiState.value = currentUiState.copyWith(isInitialized: true);\n  }\n\n  // Load image\n  void _loadImage(BuildContext context) {\n    // Get device pixel ratio safely\n    final double devicePixelRatio = MediaQuery.of(context).devicePixelRatio;\n    final double targetWidth = viewportWidth * devicePixelRatio;\n\n    // Check if the image is already in cache\n    if (_imageCache.containsKey(filePath)) {\n      uiState.value = currentUiState.copyWith(imageFuture: Future.value(_imageCache[filePath]), hasError: false);\n    } else {\n      uiState.value = currentUiState.copyWith(imageFuture: _loadImageData(filePath, targetWidth), hasError: false);\n    }\n  }\n\n  // Retry loading the image\n  void retryLoadImage(BuildContext context) {\n    _loadImage(context);\n  }\n\n  // Process image data in an isolate\n  Future<Uint8List?> _processImageData(Uint8List bytes, double targetWidth) async {\n    try {\n      return await compute(_processImageInIsolate, ProcessImageParams(bytes, targetWidth.round()));\n    } catch (e) {\n      return bytes; // If processing fails, return the original bytes\n    }\n  }\n\n  // Preload images for faster access\n  void _preloadImages(BuildContext context) {\n    if (preloadPaths == null || preloadPaths!.isEmpty) return;\n\n    // Get device pixel ratio safely\n    final double devicePixelRatio = MediaQuery.of(context).devicePixelRatio;\n    final double targetWidth = viewportWidth * devicePixelRatio;\n\n    // Prioritize loading - load closest pages first\n    final preloadPriority = [...preloadPaths!];\n\n    // Load images in a staggered manner to avoid overwhelming the system\n    for (int i = 0; i < preloadPriority.length; i++) {\n      final path = preloadPriority[i];\n\n      // Skip if already cached\n      if (_imageCache.containsKey(path)) continue;\n\n      // Add a small delay between preloads to avoid UI freezes\n      final preloadFuture = Future.delayed(Duration(milliseconds: i * 50), () async {\n        try {\n          final bytes = await _loadImageData(path, targetWidth);\n          if (bytes != null) {\n            _addToCache(path, bytes);\n          }\n        } catch (e) {\n          // Silently handle preload errors\n          logErrorStatic('Error preloading image $path:', e.toString());\n        }\n      });\n\n      _pendingPreloads.add(preloadFuture);\n    }\n  }\n\n  // Load image data from file\n  Future<Uint8List?> _loadImageData(String path, double targetWidth) async {\n    try {\n      // Check cache first\n      if (_imageCache.containsKey(path)) {\n        return _imageCache[path];\n      }\n\n      // Load file bytes in isolate\n      final params = FileReadParams(path);\n      final rawBytes = await compute(_readFileBytes, params);\n\n      if (rawBytes == null || rawBytes.isEmpty) {\n        return null;\n      }\n\n      // Process image in isolate\n      final processedData = await _processImageData(rawBytes, targetWidth);\n\n      if (processedData != null && processedData.isNotEmpty) {\n        // Cache the processed image\n        _addToCache(path, processedData);\n        return processedData;\n      }\n\n      return rawBytes;\n    } catch (e) {\n      logErrorStatic('Error loading image $path:', e.toString());\n      return null;\n    }\n  }\n\n  // Set error state\n  void setErrorState() {\n    uiState.value = currentUiState.copyWith(hasError: true);\n  }\n}"}, {"structure_type": "function", "name": "changes", "docstring": "", "module": "widgets", "file_path": "Quran-Majeed/lib/presentation/mushaf/widgets/mushaf_page_view.dart", "file_name": "mushaf_page_view.dart", "line": 49, "line_from": 49, "line_to": 99, "snippet": "        // Move page controller logic to post-frame callback to avoid build-time state changes\n        WidgetsBinding.instance.addPostFrameCallback((_) {\n          _syncPageControllerWithState(state);\n        });\n\n        return PageView.builder(\n          controller: pageController,\n          itemCount: totalPages,\n          reverse: true,\n          physics: const PageScrollPhysics(\n            parent: ClampingScrollPhysics(),\n          ),\n          scrollDirection: Axis.horizontal,\n          pageSnapping: true,\n          allowImplicitScrolling:\n              true, // This helps preload adjacent pages in memory\n          padEnds: false,\n          itemBuilder: (context, index) {\n            return _buildPage(context, index, state);\n          },\n          onPageChanged: (index) {\n            onPageChanged?.call(index);\n\n            // Defer state updates to after build phase\n            WidgetsBinding.instance.addPostFrameCallback((_) {\n              if (pageController.positions.isNotEmpty) {\n                mushafPresenter.updatePageInfo(index + 1);\n\n                // Preload surrounding pages when page changes\n                _preloadSurroundingPages(index);\n              }\n            });\n          },\n        );\n      },\n    );\n  }\n\n  // New helper method to handle page controller synchronization\n  void _syncPageControllerWithState(MushafPageUiState state) {\n    if (pageController.hasClients) {\n      final currentPageIndex = pageController.page?.round() ?? 0;\n      if ((currentPageIndex + 1) != state.currentPage) {\n        pageController.jumpToPage(\n          state.currentPage - 1,\n        );\n      }\n      // Always update page info for the current page\n      mushafPresenter.updatePageInfo(state.currentPage);\n    }\n  }"}, {"structure_type": "function", "name": "show", "docstring": "", "module": "pins", "file_path": "Quran-Majeed/lib/presentation/collections/ui/pins/edit_pin_bottomsheet.dart", "file_name": "edit_pin_bottomsheet.dart", "line": 28, "line_from": 28, "line_to": 137, "snippet": "  static Future<void> show({\n    required PinEntity pin,\n    required BuildContext context,\n  }) async {\n    await showModalBottomSheet(\n      context: context,\n      isScrollControlled: true,\n      backgroundColor: Colors.transparent,\n      builder: (context) => EditPinBottomSheet(pin: pin),\n    );\n  }\n\n  @override\n  State<EditPinBottomSheet> createState() => _EditPinBottomSheetState();\n}\n\nclass _EditPinBottomSheetState extends State<EditPinBottomSheet> {\n  late final TextEditingController _pinNameEditingController;\n  late final PinPresenter _pinPresenter = locate<PinPresenter>();\n  late final BookmarkPresenter _bookmarkPresenter = locate<BookmarkPresenter>();\n\n  @override\n  @override\n  void initState() {\n    super.initState();\n    _pinNameEditingController = TextEditingController(text: widget.pin.name);\n  }\n\n  @override\n  void dispose() {\n    _pinNameEditingController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    return PresentableWidgetBuilder(\n      presenter: _pinPresenter,\n      onInit: () async {\n        _bookmarkPresenter.toggleColor(\n            color: getColorFromHex(widget.pin.color));\n      },\n      builder: () {\n        return Padding(\n          padding: EdgeInsets.only(\n            bottom: MediaQuery.of(context).viewInsets.bottom,\n          ),\n          child: CustomBottomSheetContainer(\n            key: const Key('EditPinBottomSheet'),\n            theme: theme,\n            bottomSheetTitle: context.l10n.editPin,\n            children: [\n              gapH10,\n              HeaderTitle(\n                key: const Key('EditPinBottomSheetHeader'),\n                title: context.l10n.changeName,\n                theme: theme,\n              ),\n              gapH10,\n              SizedBox(\n                height: fortyFivePx,\n                child: UserInputField(\n                  key: const Key('EditPinBottomSheetUserInputField'),\n                  textEditingController: _pinNameEditingController,\n                  contentPadding: EdgeInsets.only(right: tenPx),\n                  hintText: context.l10n.example,\n                  prefixIconPath: SvgPath.icPin,\n                  prefixIconColor:\n                      _bookmarkPresenter.currentUiState.selectedColor,\n                  inputFormatters: [\n                    FilteringTextInputFormatter.deny(RegexPatterns.denySpace),\n                  ],\n                  borderRadius: radius10,\n                ),\n              ),\n              gapH22,\n              HeaderTitle(\n                  key: const Key('EditPinBottomSheetHeaderTitle'),\n                  title: context.l10n.changeFolderColor,\n                  theme: theme),\n              gapH10,\n              SelectableColorList(),\n              gapH22,\n              TwoWayActionButton(\n                theme: theme,\n                submitButtonTitle: context.l10n.done,\n                cancelButtonTitle: context.l10n.cancel,\n                onCancelButtonTap: () => context.navigatorPop<void>(),\n                onSubmitButtonTap: () async {\n                  await _pinPresenter.updatePin(\n                    oldPin: widget.pin,\n                    newName: _pinNameEditingController.text,\n                    newColor: getHexFromColor(\n                        _bookmarkPresenter.currentUiState.selectedColor),\n                    context: context,\n                    onUpdated: () {\n                      context.navigatorPop<void>();\n                      _pinPresenter.addUserMessage(context.l10n.pinUpdSuccess);\n                    },\n                  );\n                },\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "components", "file_path": "Quran-Majeed/lib/presentation/collections/ui/components/remove_dialog.dart", "file_name": "remove_dialog.dart", "line": 23, "line_from": 23, "line_to": 35, "snippet": "    required Future<void> Function() onRemove,\n  }) async {\n    await showAnimatedDialog<void>(\n      context: context,\n      builder: (_) => RemoveDialog(\n        onRemove: onRemove,\n        title: title,\n      ),\n      animationType: DialogTransitionType.scale,\n      curve: Curves.fastOutSlowIn,\n      barrierDismissible: true,\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "components", "file_path": "Quran-Majeed/lib/presentation/collections/ui/components/import_export_bottom_sheet.dart", "file_name": "import_export_bottom_sheet.dart", "line": 68, "line_from": 68, "line_to": 83, "snippet": "    required Future<void> Function() onImportSelected,\n    required Future<void> Function() onExportSelected,\n  }) async {\n    final ImportExportBottomSheet importExportBottomSheet =\n        await Future.microtask(\n      () => ImportExportBottomSheet(\n        key: const Key('ImportExportBottomSheet'),\n        onImportSelected: onImportSelected,\n        onExportSelected: onExportSelected,\n      ),\n    );\n\n    if (context.mounted) {\n      await context.showBottomSheet<void>(importExportBottomSheet, context);\n    }\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "components", "file_path": "Quran-Majeed/lib/presentation/collections/ui/components/log_out_dialog.dart", "file_name": "log_out_dialog.dart", "line": 24, "line_from": 24, "line_to": 36, "snippet": "    required Future<void> Function() onRemove,\n  }) async {\n    await showAnimatedDialog<void>(\n      context: context,\n      builder: (_) => LogOutDialog(\n        onRemove: onRemove,\n        title: title,\n      ),\n      animationType: DialogTransitionType.scale,\n      curve: Curves.fastOutSlowIn,\n      barrierDismissible: true,\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "bookmarks", "file_path": "Quran-Majeed/lib/presentation/collections/ui/bookmarks/edit_bookmark_bottomsheet.dart", "file_name": "edit_bookmark_bottomsheet.dart", "line": 33, "line_from": 33, "line_to": 45, "snippet": "    required Future<bool> Function(String, Color) onEditBookmarkFolder,\n  }) async {\n    final EditBookmarkBottomSheet editBookmarkCollection = await Future.microtask(\n      () => EditBookmarkBottomSheet(\n        key: const Key(\"EditBookmarkBottomSheet\"),\n        folder: bookmarkFolder,\n        onEditBookmarkFolder: onEditBookmarkFolder,\n      ),\n    );\n    if (context.mounted) {\n      await context.showBottomSheet<void>(editBookmarkCollection, context);\n    }\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "bookmarks", "file_path": "Quran-Majeed/lib/presentation/collections/ui/bookmarks/more_bookmark_option_bottom_sheet.dart", "file_name": "more_bookmark_option_bottom_sheet.dart", "line": 75, "line_from": 75, "line_to": 92, "snippet": "    required void Function(BookmarkFolderEntity) onRemoveBookmarkFolder,\n    required Future<bool> Function(BookmarkFolderEntity, String, Color) onEditBookmarkFolder,\n    required BookmarkFolderEntity folder,\n    required ThemeData theme,\n  }) async {\n    final MoreBookmarkOptionBottomSheet moreBookmarkOption = await Future.microtask(\n      () => MoreBookmarkOptionBottomSheet(\n        onRemoveBookmarkFolder: (folder) => onRemoveBookmarkFolder(folder),\n        onEditBookmarkFolder: (newName, color) async => onEditBookmarkFolder(folder, newName, color),\n        theme: theme,\n        folder: folder,\n      ),\n    );\n\n    if (context.mounted) {\n      await context.showBottomSheet<void>(moreBookmarkOption, context);\n    }\n  }"}, {"structure_type": "class", "name": "CollectionUiState extends BaseUiState", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/collections/presenter/collection_ui_state.dart", "file_name": "collection_ui_state.dart", "line": 4, "line_from": 4, "line_to": 52, "snippet": "class CollectionUiState extends BaseUiState {\n  final bool isAuthenticated;\n  final bool isSyncing;\n  final Color selectedColor;\n\n  const CollectionUiState({\n    required super.isLoading,\n    required super.userMessage,\n    this.isAuthenticated = false,\n    this.isSyncing = false,\n    this.selectedColor = const Color(0xff66BB6A),\n  });\n\n  factory CollectionUiState.empty() => const CollectionUiState(\n        isLoading: false,\n        userMessage: null,\n      );\n\n  @override\n  List<Object?> get props => [\n        isAuthenticated,\n        userMessage,\n        isLoading,\n        isSyncing,\n        selectedColor,\n      ];\n\n  bool get askToSync => !isAuthenticated;\n\n  CollectionUiState copyWith({\n    bool? isAuthenticated,\n    bool? isSyncing,\n    String? userMessage,\n    bool? isLoading,\n    Color? selectedColor,\n  }) {\n    return CollectionUiState(\n      isAuthenticated: isAuthenticated ?? this.isAuthenticated,\n      isSyncing: isSyncing ?? this.isSyncing,\n      isLoading: isLoading ?? this.isLoading,\n      userMessage: userMessage ?? this.userMessage,\n      selectedColor: selectedColor ?? this.selectedColor,\n    );\n  }\n}\n\n\nenum CollectionType { bookmark, pin }"}, {"structure_type": "function", "name": "=", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/collections/presenter/collection_presenter.dart", "file_name": "collection_presenter.dart", "line": 84, "line_from": 84, "line_to": 101, "snippet": "      final Future<Either<String, String>> authenticationTask =\n          isAuthenticated ? _signOutUser.execute() : _signInUser.execute();\n\n      await executeMessageOnlyUseCase(() => authenticationTask);\n      await Future<void>.delayed(const Duration(milliseconds: 560));\n\n      await onCheckAuthentication(onAuthenticated: _syncCollections);\n    });\n  }\n\n  Future<void> onCheckAuthentication({\n    required VoidCallback onAuthenticated,\n    VoidCallback? onUnauthenticated,\n  }) async {\n    final bool isAuthenticated = await _checkAuthenticationStatus.execute();\n    uiState.value = currentUiState.copyWith(isAuthenticated: isAuthenticated);\n    isAuthenticated ? onAuthenticated() : onUnauthenticated?.call();\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/collections/presenter/collection_presenter.dart", "file_name": "collection_presenter.dart", "line": 198, "line_from": 198, "line_to": 208, "snippet": "    required void Function(String) onFetched,\n  }) async {\n    final BuildContext context = QuranMajeed.globalContext;\n    await parseDataFromEitherWithUserMessage(\n      task: () async => await _exportCollectionsUseCase.execute(),\n      onDataLoaded: (data) async {\n        onFetched(data);\n        await showMessage(message: context.l10n.urCollsExptdSuccessfully);\n      },\n    );\n  }"}, {"structure_type": "function", "name": "", "docstring": "", "module": "note", "file_path": "Quran-Majeed/lib/presentation/collections/presenter/note/note_presenter.dart", "file_name": "note_presenter.dart", "line": 154, "line_from": 154, "line_to": 184, "snippet": "      (void _) async {\n        // Trigger immediate sync with Firebase after adding\n        await syncCollectionsWithRemote();\n\n        await _loadNotes();\n        _noteUpdateController.add(null);\n        addUserMessage('Note added successfully');\n      },\n    );\n\n    await toggleLoading(loading: false);\n  }\n\n  Future<void> deleteNote({required NoteEntity note}) async {\n    await toggleLoading(loading: true);\n\n    final result = await deleteNoteUseCase(surahId: note.surahId, ayahNumber: note.ayahNumber);\n    result.fold(\n      (String error) => addUserMessage(error),\n      (void _) async {\n        // Trigger immediate sync with Firebase after deletion\n        await syncCollectionsWithRemote();\n\n        await _loadNotes();\n        _noteUpdateController.add(null);\n        addUserMessage('Note deleted successfully');\n      },\n    );\n\n    await toggleLoading(loading: false);\n  }"}, {"structure_type": "function", "name": "", "docstring": "", "module": "note", "file_path": "Quran-Majeed/lib/presentation/collections/presenter/note/note_presenter.dart", "file_name": "note_presenter.dart", "line": 215, "line_from": 215, "line_to": 235, "snippet": "      (void _) async {\n        // Trigger immediate sync with Firebase after update\n        await syncCollectionsWithRemote();\n\n        await _loadNotes();\n        _noteUpdateController.add(null);\n        addUserMessage('Note updated successfully');\n      },\n    );\n\n    await toggleLoading(loading: false);\n  }\n\n  Future<void> updateSortOption(SortOptionEntity option) async {\n    // First save the option\n    await saveNoteSortOptionUseCase.execute(option: option);\n    // Then update UI state\n    uiState.value = currentUiState.copyWith(selectedSort: option);\n    // Refresh the UI to show sorted notes\n    uiState.refresh();\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/on_boarding/presenter/on_boarding_presenter.dart", "file_name": "on_boarding_presenter.dart", "line": 271, "line_from": 271, "line_to": 279, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = uiState.value.copyWith(userMessage: \"\", isLoading: false);\n  }\n\n  @override\n  Future<void> onReady() async {\n    super.onReady();\n    await syncSelectedLanguageWithSettings();\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "ui", "file_path": "Quran-Majeed/lib/presentation/dua/ui/dua_details_page.dart", "file_name": "dua_details_page.dart", "line": 45, "line_from": 45, "line_to": 211, "snippet": "  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n\n    // Sync language with app settings when page is built\n    Future.microtask(() => _duaPresenter.syncLanguageWithAppSettings());\n\n    // Load duas for the selected category if not already loaded\n    if (_duaPresenter.currentUiState.categoryId != category.categoryId) {\n      Future.microtask(\n          () => _duaPresenter.loadDuasByCategory(category.categoryId));\n    }\n\n    return Scaffold(\n      key: scaffoldKey,\n      endDrawer: const DuaMiniSettingsDrawer(),\n      appBar: CustomAppBar(\n        theme: theme,\n        title: context.l10n.duas,\n        actions: [\n          AppbarActionIcon(\n            theme: theme,\n            svgPath: SvgPath.icSettings,\n            onIconTap: () => scaffoldKey.currentState!.openEndDrawer(),\n          ),\n          gapW8\n        ],\n      ),\n      body: Column(\n        children: [\n          Padding(\n            padding: paddingH16,\n            child: CustomHeaderSectionWidget(\n              title: category.categoryTitle,\n              theme: theme,\n              isDuaPage: true,\n            ),\n          ),\n          Expanded(\n            child: PresentableWidgetBuilder(\n              presenter: _duaPresenter,\n              builder: () {\n                final duas = _duaPresenter.currentUiState.currentDuas;\n\n                // Scroll to the initial dua index if specified\n                if (initialDuaIndex != null) {\n                  // Using post-frame callback to ensure the list is built before scrolling\n                  WidgetsBinding.instance.addPostFrameCallback((_) {\n                    if (_scrollController.isAttached) {\n                      _scrollController.jumpTo(\n                        index: initialDuaIndex!,\n                      );\n                    }\n                  });\n                }\n\n                return ScrollablePositionedList.builder(\n                  itemCount: duas.length,\n                  initialScrollIndex: initialDuaIndex ?? 0,\n                  itemScrollController: _scrollController,\n                  itemPositionsListener: _itemPositionsListener,\n                  itemBuilder: (context, index) {\n                    final dua = duas[index];\n                    final int surahId = dua.surahId ?? 1;\n                    final int ayahId = dua.ayahId?.contains('-') == true\n                        ? int.parse(dua.ayahId!.split('-')[0])\n                        : int.tryParse(dua.ayahId ?? '1') ?? 1;\n                    return DuaDetailsPageAyahContainer(\n                      index: index,\n                      surahID: surahId,\n                      ayahNumber: ayahId,\n                      ayahTopRowTitle: dua.name ?? '',\n                      sectionIcon: SvgPicture.asset(\n                        SvgPath.icAllah,\n                        height: twentyFourPx,\n                        colorFilter: buildColorFilter(theme.primaryColor),\n                      ),\n                      wordData: const [],\n                      onClickMore: () async => await MoreOptionBottomSheet.show(\n                        context: context,\n                        surahID: surahId,\n                        ayahID: ayahId,\n                        dua: dua,\n                        isDirectButtonVisible: true,\n                        isPlayButtonVisible: true,\n                        isCopyAyahButtonVisible: true,\n                        isFromDua: true,\n                      ),\n                      ayahPresenter: _ayahPresenter,\n                      duaReference: dua.reference ?? '',\n                      theme: theme,\n                      dua: dua,\n                    );\n                  },\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\n/// Custom Mini Settings Drawer specifically for the Dua Details page\n/// Excludes word-by-word and tajweed settings\nclass DuaMiniSettingsDrawer extends StatelessWidget {\n  const DuaMiniSettingsDrawer({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final SettingsPresenter settingPresenter = locate();\n    final ThemeData themeData = Theme.of(context);\n\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      settingPresenter.initializeMiniSettings(pageType: PageType.dua);\n    });\n\n    return Container(\n      margin: EdgeInsets.only(\n        top: MediaQuery.of(context).padding.top,\n      ),\n      height: double.infinity,\n      width: QuranScreen.width * 0.75,\n      decoration: BoxDecoration(\n        color: themeData.scaffoldBackgroundColor,\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(twentyPx),\n        ),\n      ),\n      child: ClipRRect(\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(twentyPx),\n        ),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.start,\n          children: [\n            _MiniSettingsTopBar(),\n            gapH5,\n            Expanded(\n              child: SingleChildScrollView(\n                child: Column(\n                  children: [\n                    // Custom content settings without tajweed\n                    _DuaContentSettingsCard(\n                      settingPresenter: settingPresenter,\n                    ),\n                    Padding(\n                      padding: EdgeInsets.symmetric(horizontal: twentyPx),\n                      child: BuildDivider(\n                        theme: themeData,\n                      ),\n                    ),\n                    // Include font settings\n                    FontSettingsCard(\n                      settingPresenter: settingPresenter,\n                      showTextReview: false,\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "ui", "file_path": "Quran-Majeed/lib/presentation/dua/ui/dua_details_page.dart", "file_name": "dua_details_page.dart", "line": 216, "line_from": 216, "line_to": 340, "snippet": "  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n    return Container(\n      padding: EdgeInsets.only(\n        left: twelvePx,\n        right: twelvePx,\n        top: twentyOnePx,\n      ),\n      decoration: BoxDecoration(\n        color: themeData.scaffoldBackgroundColor,\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(twentyPx),\n        ),\n      ),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.center,\n        children: [\n          GestureDetector(\n            onTap: () => context.navigatorPop(),\n            child: Padding(\n              padding: paddingH6,\n              child: Icon(\n                Icons.arrow_forward_ios_rounded,\n                size: sixteenPx,\n                color: themeData.primaryColor,\n              ),\n            ),\n          ),\n          gapW8,\n          Align(\n            alignment: Alignment.centerLeft,\n            child: Text(\n              context.l10n.quickTools,\n              style: themeData.textTheme.headlineSmall?.copyWith(\n                fontWeight: FontWeight.bold,\n                color: themeData.primaryColor,\n              ),\n            ),\n          ),\n          const Spacer(),\n          GestureDetector(\n            onTap: () async {\n              await context.navigatorPush<void>(const SettingsPage());\n            },\n            child: SvgPicture.asset(\n              SvgPath.icSettings,\n              height: twentyOnePx,\n              colorFilter: buildColorFilter(isDarkMode(context)\n                  ? context.color.subtitleColor\n                  : context.color.primaryColor),\n            ),\n          ),\n          gapW10,\n        ],\n      ),\n    );\n  }\n}\n\n/// Custom Content Settings Card for Dua page\n/// Excludes tajweed settings\nclass _DuaContentSettingsCard extends StatelessWidget {\n  const _DuaContentSettingsCard({\n    required this.settingPresenter,\n  });\n\n  final SettingsPresenter settingPresenter;\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    return PresentableWidgetBuilder(\n      presenter: settingPresenter,\n      builder: () {\n        final bool isExpanded = settingPresenter.isSectionExpanded(1);\n\n        return SettingsContainer(\n          child: Column(\n            children: [\n              SettingsCardHeader(\n                title: context.l10n.viewSettings,\n                svgPath: SvgPath.icViews,\n                isExpanded: isExpanded,\n                onTap: () => settingPresenter.toggleSection(1),\n              ),\n              SettingsAnimatedContent(\n                isExpanded: isExpanded,\n                child: Column(\n                  children: [\n                    gapH18,\n                    SwitchSettingItem(\n                      theme: theme,\n                      title: context.l10n.showArabic,\n                      value: settingPresenter\n                              .uiState.value.settingsState?.showArabic ??\n                          true,\n                      onChanged: (value) => settingPresenter.toggleShowArabic(\n                        showArabic: value,\n                        context: context,\n                      ),\n                    ),\n                    gapH8,\n                    SwitchSettingItem(\n                      theme: theme,\n                      title: context.l10n.showTranslation,\n                      value: settingPresenter\n                              .uiState.value.settingsState?.showTranslation ??\n                          true,\n                      onChanged: (bool value) {\n                        settingPresenter.toggleShowTranslation(\n                          showTranslation: value,\n                          context: context,\n                        );\n                      },\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "addUserMessage", "docstring": "", "module": "presenter", "file_path": "Quran-Majeed/lib/presentation/tajweed/presenter/tajweed_presenter.dart", "file_name": "tajweed_presenter.dart", "line": 12, "line_from": 12, "line_to": 39, "snippet": "  Future<void> addUserMessage(String message) async {\n    uiState.value = currentUiState.copyWith(userMessage: message);\n    showMessage(message: message);\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = currentUiState.copyWith(isLoading: loading);\n  }\n}\n\n// Model class for Tajweed stop symbols\nclass TajweedStopSymbol {\n  final String symbolSvgPath; // The Arabic symbol shown in the colored circle\n  final String name; // Name of the stop type (e.g., \"Must Stop\")\n  final String meaning; // The meaning or instruction (optional)\n\n  final int occurrences; // Number of times found in the text\n  final int priority; // Priority level (optional, for sorting)\n\n  TajweedStopSymbol({\n    required this.symbolSvgPath,\n    required this.name,\n    this.meaning = '',\n    required this.occurrences,\n    this.priority = 0,\n  });\n}"}, {"structure_type": "function", "name": "setUp", "docstring": "", "module": "config", "file_path": "sadaqah-flutter-app/lib/core/config/app_screen.dart", "file_name": "app_screen.dart", "line": 7, "line_from": 7, "line_to": 62, "snippet": "  static void setUp(BuildContext context) {\n    final Size size = MediaQuery.sizeOf(context);\n    _height = size.height;\n    _width = size.width;\n    _resetIfInvalid();\n  }\n\n  static double? _width;\n  static double? _height;\n\n  static Size get _size => MediaQuery.sizeOf(Sadaka.globalContext);\n\n  static double get width {\n    _width ??= _size.width;\n    return _width!;\n  }\n\n  static double get height {\n    _height ??= _size.height;\n    return _height!;\n  }\n\n  static void _resetIfInvalid() {\n    if (_width! < 10 || _height! < 10) {\n      _width = null;\n      _height = null;\n    }\n  }\n}\n\nextension AppScreenExtensions on Widget {\n  // Percentage-based sizes\n  double get onePercentWidth => 1.percentWidth;\n  double get twoPercentWidth => 2.percentWidth;\n  double get threePercentWidth => 3.percentWidth;\n  double get fourPercentWidth => 4.percentWidth;\n  double get fivePercentWidth => 5.percentWidth;\n  double get sixPercentWidth => 6.percentWidth;\n  double get sevenPercentWidth => 7.percentWidth;\n  double get eightPercentWidth => 8.percentWidth;\n  double get tenPercentWidth => 10.percentWidth;\n  double get twentyPercentWidth => 20.percentWidth;\n  double get twentyFivePercentWidth => 25.percentWidth;\n  double get thirtyPercentWidth => 30.percentWidth;\n  double get fortyPercentWidth => 40.percentWidth;\n  double get fiftyPercentWidth => 50.percentWidth;\n  double get fiftyFivePercentWidth => 55.percentWidth;\n  double get sixtySixPercentWidth => 66.percentWidth;\n  double get seventyPercentWidth => 70.percentWidth;\n\n  double get tenPercentHeight => 10.percentHeight;\n  double get twelvePercentHeight => 12.percentHeight;\n  double get fourteenPercentHeight => 14.percentHeight;\n  double get twentyPercentHeight => 20.percentHeight;\n  double get fiftyPercentHeight => 50.percentHeight;\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "external_libs", "file_path": "sadaqah-flutter-app/lib/core/external_libs/presentable_widget_builder.dart", "file_name": "presentable_widget_builder.dart", "line": 20, "line_from": 20, "line_to": 63, "snippet": "  final Widget Function() builder;\n\n  @override\n  State<PresentableWidgetBuilder<T>> createState() =>\n      _PresentableWidgetBuilderState<T>();\n}\n\nclass _PresentableWidgetBuilderState<T extends DisposableInterface>\n    extends State<PresentableWidgetBuilder<T>> {\n  T? _previousState;\n\n  @override\n  void initState() {\n    super.initState();\n    if (widget.onInit != null) {\n      widget.onInit!();\n    }\n    if (widget.presenter != null) {\n      Get.put(widget.presenter!);\n    }\n  }\n\n  @override\n  void dispose() {\n    if (widget.dispose != null) {\n      widget.dispose!();\n    }\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Obx(() {\n      final currentState = widget.presenter;\n      if (widget.shouldRebuild != null) {\n        if (!widget.shouldRebuild!(_previousState, currentState)) {\n          return widget.builder();\n        }\n      }\n      _previousState = currentState;\n      return widget.builder();\n    });\n  }\n}"}, {"structure_type": "function", "name": "call", "docstring": "", "module": "base", "file_path": "sadaqah-flutter-app/lib/core/base/base_usecase.dart", "file_name": "base_usecase.dart", "line": 2, "line_from": 2, "line_to": 7, "snippet": "  Future<Type> call(Params params);\n}\n\nclass NoParams {\n  const NoParams();\n}"}, {"structure_type": "function", "name": "toggleLoading", "docstring": "", "module": "base", "file_path": "sadaqah-flutter-app/lib/core/base/base_presenter.dart", "file_name": "base_presenter.dart", "line": 14, "line_from": 14, "line_to": 87, "snippet": "  Future<void> toggleLoading({required bool loading});\n\n  // Function to add user message\n  Future<void> addUserMessage(String message);\n\n  @protected\n  Future<void> handleStreamEvents<T>({\n    required Stream<Either<String, T>> stream,\n    required Function(T) onData,\n    required StreamSubscription<Either<String, T>>? subscription,\n  }) async {\n    await subscription?.cancel();\n    subscription = stream.listen(\n      (result) => result.fold(addUserMessage, onData),\n      onError: (error) => addUserMessage(error.toString()),\n      onDone: () => subscription?.cancel(),\n      cancelOnError: true,\n    );\n  }\n\n  @protected\n  Future<void> executeTaskWithLoading<T>(FutureOr<T> Function() task) async {\n    await toggleLoading(loading: true);\n    await task();\n    await toggleLoading(loading: false);\n  }\n\n  // Function to execute a use case that only shows a message\n  @protected\n  Future<void> executeMessageOnlyUseCase(\n    FutureOr<Either<String, String>> Function() task, {\n    bool showMessage = true,\n    VoidCallback? onSuccess,\n  }) async {\n    await toggleLoading(loading: true);\n    final Either<String, String> result = await task();\n    await result.fold(addUserMessage, (message) async {\n      if (showMessage) await addUserMessage(message);\n      onSuccess?.call();\n    });\n    await toggleLoading(loading: false);\n  }\n\n  // Function to parse data from Either with user message\n  @protected\n  Future<void> parseDataFromEitherWithUserMessage<T>({\n    required FutureOr<Either<String, T>> Function() task,\n    required void Function(T) onDataLoaded,\n    bool showLoading = false,\n    T? valueOnError,\n  }) async {\n    if (showLoading) await toggleLoading(loading: true);\n    final Either<String, T> result = await task();\n    result.fold((message) {\n      addUserMessage(message);\n      if (valueOnError != null) onDataLoaded(valueOnError);\n    }, onDataLoaded);\n    if (showLoading) await toggleLoading(loading: false);\n  }\n\n  // Function to map data from Either with user message\n  @protected\n  Future<T?> mapDataFromEitherWithUserMessage<T>({\n    required FutureOr<Either<String, T>> Function() task,\n    bool showLoading = false,\n  }) async {\n    T? data;\n    if (showLoading) await toggleLoading(loading: true);\n    final Either<String, T> result = await task();\n    if (showLoading) await toggleLoading(loading: false);\n    result.fold(addUserMessage, (d) => data = d);\n    return data;\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "presenter", "file_path": "sadaqah-flutter-app/lib/presentation/home/presenter/home_presenter.dart", "file_name": "home_presenter.dart", "line": 106, "line_from": 106, "line_to": 145, "snippet": "      // Use a post-frame callback to avoid updating state during build\n      WidgetsBinding.instance.addPostFrameCallback((_) {\n        for (final donation in uiState.donationDetails!) {\n          if (donation.image != null && donation.image!.isNotEmpty) {\n            preloadImage(donation.image!);\n          }\n        }\n      });\n    }\n  }\n\n  Future<void> fetchDonationDetails() async {\n    toggleLoading(loading: true);\n    // Always show shimmer when loading content\n    _uiState.value = _uiState.value.copyWith(showShimmer: true);\n\n    // Check for internet connectivity\n    final hasConnection = await _connectivityService.checkConnectivity();\n    if (!hasConnection) {\n      // Show toast message for no internet connection\n      _connectivityService.showNoInternetToast();\n\n      // Make sure to stop loading but keep shimmer for UI\n      toggleLoading(loading: false);\n      return;\n    }\n\n    final donationDetails = await getDonationUsecase.call();\n    _uiState.value = _uiState.value.copyWith(\n      donationDetails: donationDetails,\n      lastRefreshTime: DateTime.now(),\n      // Keep showing shimmer if there are no donations\n      showShimmer: false,\n    );\n\n    // Preload all donation images after we get the data\n    preloadDonationImages();\n\n    toggleLoading(loading: false);\n  }"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "external_libs", "file_path": "al-hadith-flutter/lib/core/external_libs/animated_progress_bar.dart", "file_name": "animated_progress_bar.dart", "line": 63, "line_from": 63, "line_to": 209, "snippet": "  void initState() {\n    _controller =\n        AnimationController(duration: widget.animatedDuration, vsync: this);\n    _animation = Tween<double>(begin: _currentBegin, end: _currentEnd)\n        .animate(_controller);\n    triggerAnimation();\n    super.initState();\n  }\n\n  @override\n  void didUpdateWidget(ProgressIndicatorBar oldWidget) {\n    triggerAnimation();\n    super.didUpdateWidget(oldWidget);\n  }\n\n  void triggerAnimation() {\n    setState(() {\n      _currentBegin = _animation.value;\n\n      if (widget.currentValue == 0 || widget.maxValue == 0) {\n        _currentEnd = 0;\n      } else {\n        _currentEnd = widget.currentValue / widget.maxValue;\n      }\n\n      _animation = Tween<double>(begin: _currentBegin, end: _currentEnd)\n          .animate(_controller);\n    });\n    _controller\n      ..reset()\n      ..duration = widget.animatedDuration\n      ..forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedProgressBar(\n        animation: _animation,\n        widget: widget,\n      );\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n\nclass AnimatedProgressBar extends AnimatedWidget {\n  const AnimatedProgressBar({\n    super.key,\n    required Animation<double> animation,\n    required this.widget,\n  }) : super(listenable: animation);\n\n  final ProgressIndicatorBar widget;\n\n  double transformValue(double x, double begin, double end, double before) {\n    final double y = (end * x - (begin - before)) * (1 / before);\n    return y < 0 ? 0 : ((y > 1) ? 1 : y);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation<double>;\n    Color progressColor = widget.progressColor;\n\n    if (widget.changeColorValue != null) {\n      final colorTween = ColorTween(\n        begin: widget.progressColor,\n        end: widget.changeProgressColor,\n      );\n\n      progressColor = colorTween.transform(\n        transformValue(\n          animation.value,\n          widget.changeColorValue?.toDouble() ?? 0.0,\n          widget.maxValue,\n          5,\n        ),\n      )!;\n    }\n\n    final List<Widget> progressWidgets = [];\n    final Widget progressWidget = Container(\n      decoration: BoxDecoration(\n        color: widget.progressGradient != null ? null : progressColor,\n        gradient: widget.progressGradient,\n        borderRadius: widget._borderRadius,\n        border: widget.border,\n      ),\n    );\n    progressWidgets.add(progressWidget);\n\n    if (widget.displayText != null) {\n      final Widget textProgress = Container(\n        alignment: widget.direction == Axis.horizontal\n            ? const FractionalOffset(0.95, 0.5)\n            : (widget.verticalDirection == VerticalDirection.up\n                ? const FractionalOffset(0.5, 0.05)\n                : const FractionalOffset(0.5, 0.95)),\n        child: Text(\n          widget.formatValue.call(\n                animation.value * widget.maxValue,\n                widget.formatValueFixed,\n              ) +\n              widget.displayText!,\n          softWrap: false,\n          style: widget.displayTextStyle,\n        ),\n      );\n      progressWidgets.add(textProgress);\n    }\n\n    return Directionality(\n      textDirection: TextDirection.ltr,\n      child: Container(\n        key: const Key(\"progress_bar_container\"),\n        width: widget.direction == Axis.vertical ? widget.size : null,\n        height: widget.direction == Axis.horizontal ? widget.size : null,\n        decoration: BoxDecoration(\n          color: widget.backgroundColor,\n          borderRadius: widget._borderRadius,\n          border: widget.border,\n        ),\n        child: Flex(\n          key: const Key(\"progress_bar\"),\n          direction: widget.direction,\n          verticalDirection: widget.verticalDirection,\n          children: <Widget>[\n            Expanded(\n              key: const Key(\"total_animation_value\"),\n              flex: (animation.value * 100).toInt(),\n              child: Stack(\n                children: progressWidgets,\n              ),\n            ),\n            Expanded(\n              key: const Key(\"remaining_animation_value\"),\n              flex: 100 - (animation.value * 100).toInt(),\n              child: Container(),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Container", "docstring": "", "module": "external_libs", "file_path": "al-hadith-flutter/lib/core/external_libs/lazy_load_indexed_stack.dart", "file_name": "lazy_load_indexed_stack.dart", "line": 13, "line_from": 13, "line_to": 69, "snippet": "    this.unloadWidget = unloadWidget ?? Container();\n  }\n\n  late final Widget unloadWidget;\n\n  final AlignmentGeometry alignment;\n\n  final StackFit sizing;\n\n  final TextDirection? textDirection;\n\n  final int index;\n\n  final List<Widget> children;\n\n  @override\n  LazyLoadIndexedStackState createState() => LazyLoadIndexedStackState();\n}\n\nclass LazyLoadIndexedStackState extends State<LazyLoadIndexedStack> {\n  late List<Widget> _children;\n  final _stackKey = GlobalKey();\n\n  @override\n  void initState() {\n    super.initState();\n\n    _children = _initialChildren();\n  }\n\n  @override\n  void didUpdateWidget(LazyLoadIndexedStack oldWidget) {\n    super.didUpdateWidget(oldWidget);\n\n    _children[widget.index] = widget.children[widget.index];\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return IndexedStack(\n      key: _stackKey,\n      index: widget.index,\n      alignment: widget.alignment,\n      textDirection: widget.textDirection,\n      sizing: widget.sizing,\n      children: _children,\n    );\n  }\n\n  List<Widget> _initialChildren() {\n    return widget.children.asMap().entries.map((entry) {\n      final index = entry.key;\n      final childWidget = entry.value;\n      return index == widget.index ? childWidget : widget.unloadWidget;\n    }).toList();\n  }\n}"}, {"structure_type": "function", "name": "retry<T>", "docstring": "", "module": "external_libs", "file_path": "al-hadith-flutter/lib/core/external_libs/retry.dart", "file_name": "retry.dart", "line": 33, "line_from": 33, "line_to": 67, "snippet": "  Future<T> retry<T>(\n    FutureOr<T> Function() fn, {\n    FutureOr<bool> Function(Exception)? retryIf,\n    FutureOr<void> Function(Exception)? onRetry,\n  }) async {\n    var attempt = 0;\n\n    while (true) {\n      attempt++;\n      try {\n        return await fn();\n      } on Exception catch (e) {\n        if (attempt >= maxAttempts ||\n            (retryIf != null && !(await retryIf(e)))) {\n          rethrow;\n        }\n        if (onRetry != null) {\n          await onRetry(e);\n        }\n      }\n\n      await Future<void>.delayed(delay(attempt));\n    }\n  }\n}\n\nFuture<T> retry<T>(\n  FutureOr<T> Function() fn, {\n  Duration delayFactor = const Duration(milliseconds: 200),\n  double randomizationFactor = 0.25,\n  Duration maxDelay = const Duration(seconds: 30),\n  int maxAttempts = 8,\n  FutureOr<bool> Function(Exception)? retryIf,\n  FutureOr<void> Function(Exception)? onRetry,\n}) =>"}, {"structure_type": "function", "name": "cancel", "docstring": "", "module": "external_libs", "file_path": "al-hadith-flutter/lib/core/external_libs/throttle_service.dart", "file_name": "throttle_service.dart", "line": 47, "line_from": 47, "line_to": 69, "snippet": "  static void cancel(String tag) {\n    _operations[tag]?.timer.cancel();\n    _operations.remove(tag);\n  }\n\n  static void cancelAll() {\n    for (final _ThrottleOperation operation in _operations.values) {\n      operation.timer.cancel();\n    }\n    _operations.clear();\n  }\n\n  static int count() => _operations.length;\n}\n\ntypedef EasyDebounceCallback = void Function();\n\nclass _EasyDebounceOperation {\n  _EasyDebounceOperation(this.callback, this.timer);\n\n  EasyDebounceCallback callback;\n  Timer timer;\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "external_libs", "file_path": "al-hadith-flutter/lib/core/external_libs/hadith_positioned_scroll_bar.dart", "file_name": "hadith_positioned_scroll_bar.dart", "line": 17, "line_from": 17, "line_to": 32, "snippet": "  final void Function({required bool dragging})? onDragging;\n\n  @override\n  Widget build(BuildContext context) {\n    if (!showScrollBar) return listView;\n\n    return DraggableScrollbarPositionedList.arrows(\n      key: const Key('HadithPositionedScrollBar'),\n      backgroundColor: Theme.of(context).primaryColor,\n      padding: const EdgeInsets.only(right: 2),\n      onDragging: onDragging,\n      controller: controller,\n      child: listView,\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "external_libs", "file_path": "al-hadith-flutter/lib/core/external_libs/implicitly_animated_list.dart", "file_name": "implicitly_animated_list.dart", "line": 56, "line_from": 56, "line_to": 166, "snippet": "  final Widget Function(BuildContext context, ItemData data) itemBuilder;\n  final Duration insertDuration;\n  final AnimatedChildBuilder insertAnimation;\n  final Duration deleteDuration;\n  final AnimatedChildBuilder deleteAnimation;\n  final bool initialAnimation;\n  final Axis scrollDirection;\n  final bool reverse;\n  final ScrollController? controller;\n  final bool? primary;\n  final ScrollPhysics? physics;\n  final bool shrinkWrap;\n  final EdgeInsetsGeometry? padding;\n\n  @override\n  ImplicitlyAnimatedListState<ItemData> createState() =>\n      ImplicitlyAnimatedListState<ItemData>();\n}\n\nclass ImplicitlyAnimatedListState<ItemData>\n    extends State<ImplicitlyAnimatedList<ItemData>> {\n  final _listKey = GlobalKey<AnimatedListState>();\n  final _dataForBuild = List<ItemData>.empty(growable: true);\n\n  @override\n  void initState() {\n    super.initState();\n\n    if (widget.initialAnimation) {\n      Future.microtask(() {\n        _updateData(widget.itemData, _dataForBuild);\n      });\n    } else {\n      _dataForBuild.addAll(widget.itemData);\n    }\n  }\n\n  @override\n  void didUpdateWidget(ImplicitlyAnimatedList<ItemData> oldWidget) {\n    super.didUpdateWidget(oldWidget);\n\n    if (!listEquals(widget.itemData, _dataForBuild)) {\n      _updateData(widget.itemData, _dataForBuild);\n    }\n  }\n\n  void _updateData(List<ItemData> to, List<ItemData> from) {\n    final listState = _listKey.currentState;\n    final equalityCustom = widget.itemEquality;\n\n    setState(() {\n      final operations = diffSync(from, to);\n      final operationsCustom = equalityCustom != null\n          ? diffSync(from, to, areEqual: equalityCustom)\n          : operations;\n\n      // First apply all animations to the list but without touching the model.\n      if (listState != null) {\n        for (final op in operationsCustom) {\n          if (op.isInsertion) {\n            listState.insertItem(\n              op.index,\n              duration: widget.insertDuration,\n            );\n          } else if (op.isDeletion) {\n            listState.removeItem(\n              op.index,\n              (context, animation) => widget.deleteAnimation(\n                context,\n                widget.itemBuilder(context, op.item),\n                animation,\n              ),\n              duration: widget.deleteDuration,\n            );\n          }\n        }\n      }\n\n      // Then update the model according to the intrinsic item-data equality to\n      // make sure that:\n      // - the next diff will operate on the correct base,\n      // - rendering of the remove-item animation will use the last known item-data, and\n      // - we always use refreshed item-datas when building.\n      for (final op in operations) {\n        op.applyTo(from);\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedList(\n      key: _listKey,\n      controller: widget.controller,\n      initialItemCount: _dataForBuild.length,\n      padding: widget.padding,\n      physics: widget.physics,\n      primary: widget.primary,\n      reverse: widget.reverse,\n      scrollDirection: widget.scrollDirection,\n      shrinkWrap: widget.shrinkWrap,\n      itemBuilder: (context, index, animation) {\n        return widget.insertAnimation(\n          context,\n          widget.itemBuilder(context, _dataForBuild[index]),\n          animation,\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "onReady;", "docstring": "", "module": "carousel_slider", "file_path": "al-hadith-flutter/lib/core/external_libs/carousel_slider/carousel_controller.dart", "file_name": "carousel_controller.dart", "line": 14, "line_from": 14, "line_to": 27, "snippet": "  Future<void> get onReady;\n\n  Future<void> nextPage({Duration? duration, Curve? curve});\n\n  Future<void> previousPage({Duration? duration, Curve? curve});\n\n  void jumpToPage(int page);\n\n  Future<void> animateToPage(int page, {Duration? duration, Curve? curve});\n\n  void startAutoPlay();\n\n  void stopAutoPlay();\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "carousel_slider", "file_path": "al-hadith-flutter/lib/core/external_libs/carousel_slider/carousel_slider.dart", "file_name": "carousel_slider.dart", "line": 14, "line_from": 14, "line_to": 411, "snippet": "typedef ExtendedIndexedWidgetBuilder = Widget Function(\n  BuildContext context,\n  int index,\n  int realIndex,\n);\n\nclass CarouselSlider extends StatefulWidget {\n  CarouselSlider({\n    required this.items,\n    required this.options,\n    this.disableGesture,\n    CarouselController? carouselController,\n    super.key,\n  })  : itemBuilder = null,\n        itemCount = items != null ? items.length : 0,\n        _carouselController = carouselController != null\n            ? carouselController as CarouselControllerImpl\n            : CarouselController() as CarouselControllerImpl;\n\n  CarouselSlider.builder({\n    required this.itemCount,\n    required this.itemBuilder,\n    required this.options,\n    this.disableGesture,\n    CarouselController? carouselController,\n    super.key,\n  })  : items = null,\n        _carouselController = carouselController != null\n            ? carouselController as CarouselControllerImpl\n            : CarouselController() as CarouselControllerImpl;\n\n  final CarouselOptions options;\n\n  final bool? disableGesture;\n\n  final List<Widget>? items;\n\n  final ExtendedIndexedWidgetBuilder? itemBuilder;\n\n  final CarouselControllerImpl _carouselController;\n\n  final int? itemCount;\n\n  @override\n  // ignore: no_logic_in_create_state\n  CarouselSliderState createState() => CarouselSliderState(_carouselController);\n}\n\nclass CarouselSliderState extends State<CarouselSlider>\n    with TickerProviderStateMixin {\n  CarouselSliderState(this.carouselController);\n\n  final CarouselControllerImpl carouselController;\n  Timer? timer;\n\n  CarouselOptions get options => widget.options;\n\n  CarouselState? carouselState;\n\n  PageController? pageController;\n\n  CarouselPageChangedReason _mode = CarouselPageChangedReason.controller;\n\n  set mode(CarouselPageChangedReason mode) => _mode = mode;\n\n  @override\n  void didUpdateWidget(CarouselSlider oldWidget) {\n    carouselState!.options = options;\n    carouselState!.itemCount = widget.itemCount;\n\n    // pageController needs to be re-initialized to respond to state changes\n    pageController = PageController(\n      viewportFraction: options.viewportFraction,\n      initialPage: carouselState!.realPage,\n    );\n    carouselState!.pageController = pageController;\n\n    // handle autoplay when state changes\n    handleAutoPlay();\n\n    super.didUpdateWidget(oldWidget);\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    carouselState =\n        CarouselState(options, clearTimer, resumeTimer, (m) => mode = m);\n\n    carouselState!.itemCount = widget.itemCount;\n    carouselController.state = carouselState;\n    carouselState!.initialPage = widget.options.initialPage;\n    carouselState!.realPage = options.enableInfiniteScroll\n        ? carouselState!.realPage + carouselState!.initialPage\n        : carouselState!.initialPage;\n    handleAutoPlay();\n\n    pageController = PageController(\n      viewportFraction: options.viewportFraction,\n      initialPage: carouselState!.realPage,\n    );\n\n    carouselState!.pageController = pageController;\n  }\n\n  Timer? getTimer() {\n    return catchAndReturn(() {\n      if (!widget.options.autoPlay) throw Exception(\"Autoplay is not enabled\");\n\n      return Timer.periodic(widget.options.autoPlayInterval, (_) {\n        if (!mounted) {\n          clearTimer();\n          return;\n        }\n\n        final ModalRoute<Object?>? route = ModalRoute.of(context);\n        if (route?.isCurrent == false) return;\n\n        final CarouselPageChangedReason previousReason = _mode;\n        mode = CarouselPageChangedReason.timed;\n\n        final int currentPage =\n            carouselState?.pageController?.page?.round() ?? 0;\n        int nextPage = currentPage + 1;\n        final int itemCount = widget.itemCount ?? widget.items?.length ?? 1;\n\n        if (nextPage >= itemCount &&\n            widget.options.enableInfiniteScroll == false) {\n          if (widget.options.pauseAutoPlayInFiniteScroll) {\n            clearTimer();\n            return;\n          }\n          nextPage = 0;\n        }\n\n        carouselState?.pageController\n            ?.animateToPage(\n              nextPage,\n              duration: widget.options.autoPlayAnimationDuration,\n              curve: widget.options.autoPlayCurve,\n            )\n            .then((_) => mode = previousReason);\n      });\n    });\n  }\n\n  void clearTimer() {\n    if (timer != null) {\n      timer?.cancel();\n      timer = null;\n    }\n  }\n\n  void resumeTimer() {\n    timer ??= getTimer();\n  }\n\n  void handleAutoPlay() {\n    final bool autoPlayEnabled = widget.options.autoPlay;\n\n    if (autoPlayEnabled && timer != null) return;\n\n    clearTimer();\n    if (autoPlayEnabled) {\n      resumeTimer();\n    }\n  }\n\n  Widget getGestureWrapper(Widget child) {\n    Widget wrapper;\n    if (widget.options.height != null) {\n      wrapper = SizedBox(height: widget.options.height, child: child);\n    } else {\n      wrapper =\n          AspectRatio(aspectRatio: widget.options.aspectRatio, child: child);\n    }\n\n    if (true == widget.disableGesture) {\n      return NotificationListener(\n        onNotification: (Notification notification) {\n          if (widget.options.onScrolled != null &&\n              notification is ScrollUpdateNotification) {\n            widget.options.onScrolled!(carouselState!.pageController!.page);\n          }\n          return false;\n        },\n        child: wrapper,\n      );\n    }\n\n    return RawGestureDetector(\n      behavior: HitTestBehavior.opaque,\n      gestures: {\n        _MultipleGestureRecognizer:\n            GestureRecognizerFactoryWithHandlers<_MultipleGestureRecognizer>(\n                _MultipleGestureRecognizer.new,\n                (_MultipleGestureRecognizer instance) {\n          instance\n            ..onStart = (_) {\n              onStart();\n            }\n            ..onDown = (_) {\n              onPanDown();\n            }\n            ..onEnd = (_) {\n              onPanUp();\n            }\n            ..onCancel = onPanUp;\n        }),\n      },\n      child: NotificationListener(\n        onNotification: (Notification notification) {\n          if (widget.options.onScrolled != null &&\n              notification is ScrollUpdateNotification) {\n            widget.options.onScrolled!(carouselState!.pageController!.page);\n          }\n          return false;\n        },\n        child: wrapper,\n      ),\n    );\n  }\n\n  Widget getCenterWrapper(Widget child) {\n    if (widget.options.disableCenter) {\n      return Container(\n        child: child,\n      );\n    }\n    return Center(child: child);\n  }\n\n  Widget getEnlargeWrapper(\n    Widget? child, {\n    double? width,\n    double? height,\n    double? scale,\n    required double itemOffset,\n  }) {\n    if (widget.options.enlargeStrategy == CenterPageEnlargeStrategy.height) {\n      return SizedBox(width: width, height: height, child: child);\n    }\n    if (widget.options.enlargeStrategy == CenterPageEnlargeStrategy.zoom) {\n      late Alignment alignment;\n      final bool horizontal = options.scrollDirection == Axis.horizontal;\n      if (itemOffset > 0) {\n        alignment = horizontal ? Alignment.centerRight : Alignment.bottomCenter;\n      } else {\n        alignment = horizontal ? Alignment.centerLeft : Alignment.topCenter;\n      }\n      return Transform.scale(scale: scale, alignment: alignment, child: child);\n    }\n    return Transform.scale(\n      scale: scale,\n      child: SizedBox(width: width, height: height, child: child),\n    );\n  }\n\n  void onStart() {\n    mode = CarouselPageChangedReason.manual;\n  }\n\n  void onPanDown() {\n    if (widget.options.pauseAutoPlayOnTouch) {\n      clearTimer();\n    }\n\n    mode = CarouselPageChangedReason.manual;\n  }\n\n  void onPanUp() {\n    if (widget.options.pauseAutoPlayOnTouch) {\n      resumeTimer();\n    }\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n    clearTimer();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return getGestureWrapper(\n      PageView.builder(\n        padEnds: widget.options.padEnds,\n        scrollBehavior: ScrollConfiguration.of(context).copyWith(\n          scrollbars: false,\n          overscroll: false,\n          dragDevices: {\n            PointerDeviceKind.touch,\n            PointerDeviceKind.mouse,\n          },\n        ),\n        clipBehavior: widget.options.clipBehavior,\n        physics: widget.options.scrollPhysics,\n        scrollDirection: widget.options.scrollDirection,\n        pageSnapping: widget.options.pageSnapping,\n        controller: carouselState!.pageController,\n        reverse: widget.options.reverse,\n        itemCount:\n            widget.options.enableInfiniteScroll ? null : widget.itemCount,\n        onPageChanged: (int index) {\n          final int currentPage = getRealIndex(\n            index + carouselState!.initialPage,\n            carouselState!.realPage,\n            widget.itemCount,\n          );\n          widget.options.onPageChanged?.call(currentPage, _mode);\n        },\n        itemBuilder: (BuildContext context, int idx) {\n          final int index = getRealIndex(\n            idx + carouselState!.initialPage,\n            carouselState!.realPage,\n            widget.itemCount,\n          );\n\n          return AnimatedBuilder(\n            animation: carouselState!.pageController!,\n            child: (widget.items != null)\n                ? (widget.items!.isNotEmpty\n                    ? widget.items![index]\n                    : Container())\n                : widget.itemBuilder!(context, index, idx),\n            builder: (BuildContext context, child) {\n              double distortionValue = 1;\n              // if `enlargeCenterPage` is true, we must calculate the carousel item's height\n              // to display the visual effect\n              double itemOffset = 0;\n              if (widget.options.enlargeCenterPage != null &&\n                  (widget.options.enlargeCenterPage ?? false)) {\n                // pageController.page can only be accessed after the first build,\n                // so in the first build we calculate the itemoffset manually\n                final position = carouselState?.pageController?.position;\n                if (position != null &&\n                    position.hasPixels &&\n                    position.hasContentDimensions) {\n                  final page = carouselState?.pageController?.page;\n                  if (page != null) {\n                    itemOffset = page - idx;\n                  }\n                } else {\n                  final BuildContext storageContext = carouselState!\n                      .pageController!.position.context.storageContext;\n                  final double? previousSavedPosition =\n                      PageStorage.of(storageContext).readState(storageContext)\n                          as double?;\n                  if (previousSavedPosition != null) {\n                    itemOffset = previousSavedPosition - idx.toDouble();\n                  } else {\n                    itemOffset =\n                        carouselState!.realPage.toDouble() - idx.toDouble();\n                  }\n                }\n\n                final double enlargeFactor =\n                    options.enlargeFactor.clamp(0.0, 1.0);\n                final num distortionRatio =\n                    (1 - (itemOffset.abs() * enlargeFactor)).clamp(0.0, 1.0);\n                distortionValue =\n                    Curves.easeOut.transform(distortionRatio as double);\n              }\n\n              final double height = widget.options.height ??\n                  MediaQuery.of(context).size.width *\n                      (1 / widget.options.aspectRatio);\n\n              if (widget.options.scrollDirection == Axis.horizontal) {\n                return getCenterWrapper(\n                  getEnlargeWrapper(\n                    child,\n                    height: distortionValue * height,\n                    scale: distortionValue,\n                    itemOffset: itemOffset,\n                  ),\n                );\n              } else {\n                return getCenterWrapper(\n                  getEnlargeWrapper(\n                    child,\n                    width: distortionValue * MediaQuery.of(context).size.width,\n                    scale: distortionValue,\n                    itemOffset: itemOffset,\n                  ),\n                );\n              }\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n\nclass _MultipleGestureRecognizer extends PanGestureRecognizer {}\n"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "hadith_scrollbar", "file_path": "al-hadith-flutter/lib/core/external_libs/hadith_scrollbar/hadith_scrollbar.dart", "file_name": "hadith_scrollbar.dart", "line": 44, "line_from": 44, "line_to": 80, "snippet": "  final Widget child;\n\n  final ScrollController? controller;\n\n  final bool? thumbVisibility;\n\n  final bool? showTrackOnHover;\n\n  final HadithScrollbarStyle style;\n\n  final ScrollNotificationPredicate? notificationPredicate;\n\n  final Duration? scrollbarTimeToFade;\n\n  final Duration? scrollbarFadeDuration;\n\n  @override\n  ScrollbarState createState() => ScrollbarState();\n}\n\nclass ScrollbarState extends State<HadithScrollbar> {\n  @override\n  Widget build(BuildContext context) {\n    return _MaterialScrollbar(\n      key: const Key(\"_MaterialScrollbar\"),\n      controller: widget.controller,\n      thumbVisibility: widget.thumbVisibility,\n      showTrackOnHover: widget.showTrackOnHover,\n      hoverThickness: widget.style.hoverThickness,\n      thickness: widget.style.thickness,\n      radius: widget.style.radius,\n      color: widget.style.color,\n      notificationPredicate: widget.notificationPredicate,\n      child: widget.child,\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "draggable_scrollbar_positioned_list", "file_path": "al-hadith-flutter/lib/core/external_libs/draggable_scrollbar_positioned_list/draggable_scrollbar_positioned_list.dart", "file_name": "draggable_scrollbar_positioned_list.dart", "line": 61, "line_from": 61, "line_to": 125, "snippet": "  final void Function({required bool dragging})? onDragging;\n\n  @override\n  DraggableScrollbarPositionedListState createState() =>\n      DraggableScrollbarPositionedListState();\n\n  static Widget buildScrollThumb({\n    required Widget scrollThumb,\n    required Color backgroundColor,\n    required Animation<double> thumbAnimation,\n    required bool alwaysVisibleScrollThumb,\n  }) {\n    if (alwaysVisibleScrollThumb) return scrollThumb;\n\n    return SlideFadeTransition(\n      key: const ValueKey('SlideFadeTransition2938492'),\n      animation: thumbAnimation,\n      child: scrollThumb,\n    );\n  }\n\n  static ScrollThumbBuilder _thumbArrowBuilder(\n    Key? scrollThumbKey,\n    bool alwaysVisibleScrollThumb,\n  ) {\n    return (\n      Color backgroundColor,\n      Animation<double> thumbAnimation,\n      double height,\n    ) {\n      // creates a ClipPath widget named scrollThumb that represents a scroll\n      // thumb used in a scrollbar. The scroll thumb is a rectangular container\n      // with rounded corners, and it uses an ArrowClipper as its clipper to\n      // give it an arrow-shaped appearance.\n      final ClipPath scrollThumb = ClipPath(\n        key: const Key(\"ScrollThumbBuilderClipPath\"),\n        // clipper: ArrowClipper(),\n        child: Container(\n          key: scrollThumbKey,\n          height: 50,\n          width: 50,\n          decoration: BoxDecoration(\n            color: backgroundColor,\n            borderRadius: const BorderRadius.only(\n              topLeft: Radius.circular(50),\n              bottomLeft: Radius.circular(50),\n              topRight: Radius.circular(50),\n            ),\n          ),\n          child: Icon(\n            Icons.unfold_more,\n            color: Colors.grey.shade100,\n          ),\n        ),\n      );\n\n      return buildScrollThumb(\n        scrollThumb: scrollThumb,\n        backgroundColor: backgroundColor,\n        thumbAnimation: thumbAnimation,\n        alwaysVisibleScrollThumb: alwaysVisibleScrollThumb,\n      );\n    };\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/floating_bottom_navigation_bar/src/floating_navbar.dart", "file_name": "floating_navbar.dart", "line": 33, "line_from": 33, "line_to": 78, "snippet": "  final void Function(int val) onTap;\n  final ItemBuilder itemBuilder;\n\n  @override\n  FloatingNavbarState createState() => FloatingNavbarState();\n}\n\nclass FloatingNavbarState extends State<FloatingNavbar> {\n  List<FloatingNavbarItem> get items => widget.items;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 12),\n      height: Platform.isAndroid ? HadithScreen.width * 0.15 : HadithScreen.width * 0.17,\n      decoration: BoxDecoration(\n        borderRadius: const BorderRadius.only(\n          topLeft: Radius.circular(16),\n          topRight: Radius.circular(16),\n        ),\n        color: context.colors.card,\n        boxShadow: const [\n          BoxShadow(\n            color: Color.fromRGBO(9, 13, 34, 0.15),\n            blurRadius: 20,\n          ),\n        ],\n      ),\n      width: HadithScreen.width,\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        mainAxisAlignment: MainAxisAlignment.spaceAround,\n        children: items\n            .asMap()\n            .map((index, navBarItem) {\n              return MapEntry(\n                index,\n                widget.itemBuilder(context, index, navBarItem),\n              );\n            })\n            .values\n            .toList(),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/floating_bottom_navigation_bar/src/floating_navbar.dart", "file_name": "floating_navbar.dart", "line": 81, "line_from": 81, "line_to": 115, "snippet": "  required void Function(int val) onTap,\n  required List<FloatingNavbarItem> items,\n  int? currentIndex,\n  Color? selectedBackgroundColor,\n}) {\n  return (BuildContext context, int index, FloatingNavbarItem item) {\n    final bool selected = currentIndex == index;\n    return Expanded(\n      child: Row(\n        mainAxisSize: MainAxisSize.min,\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          InkWell(\n            onTap: () => onTap(index),\n            child: Container(\n              padding: const EdgeInsets.all(15),\n              decoration: BoxDecoration(\n                color: selected ? selectedBackgroundColor : Colors.transparent,\n                borderRadius: BorderRadius.circular(10),\n              ),\n              child: SizedBox(\n                height: 22,\n                width: 30,\n                child: SvgImage(\n                  selected ? items[index].selectedSvgPath : items[index].unselectedSvgPath,\n                  color: selected ? Theme.of(context).primaryColor : Theme.of(context).iconTheme.color,\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  };\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "expandable_bottom_sheet", "file_path": "al-hadith-flutter/lib/core/external_libs/expandable_bottom_sheet/expandable_bottom_sheet.dart", "file_name": "expandable_bottom_sheet.dart", "line": 44, "line_from": 44, "line_to": 392, "snippet": "  final void Function()? onIsExtendedCallback;\n\n  final void Function()? onIsContractedCallback;\n\n  final bool enableToggle;\n\n  final bool isDraggable;\n  bool isExpanded;\n\n  ExpandableBottomSheetState? expandableBottomSheetState;\n\n  // // ignore: no_logic_in_create_state\n  // ExpandableBottomSheetState createState() {\n  //   expandableBottomSheetState = ExpandableBottomSheetState();\n  //   return expandableBottomSheetState;\n  // }\n  @override\n  ExpandableBottomSheetState createState() => ExpandableBottomSheetState();\n}\n\nclass ExpandableBottomSheetState extends State<ExpandableBottomSheet>\n    with TickerProviderStateMixin {\n  final GlobalKey _contentKey = GlobalKey(debugLabel: 'contentKey');\n  final GlobalKey _headerKey = GlobalKey(debugLabel: 'headerKey');\n  final GlobalKey _footerKey = GlobalKey(debugLabel: 'footerKey');\n\n  late AnimationController _controller;\n\n  double _draggableHeight = 0;\n  double? _positionOffset;\n  double _startOffsetAtDragDown = 0;\n  double? _startPositionAtDragDown = 0;\n\n  double _minOffset = 0;\n  double _maxOffset = 0;\n  double _animationMinOffset = 0;\n\n  AnimationStatus _oldStatus = AnimationStatus.dismissed;\n\n  bool _useDrag = true;\n  bool _callCallbacks = false;\n\n  void expand() {\n    _afterUpdateWidgetBuild(false);\n    _callCallbacks = true;\n    widget.isExpanded = true;\n    _animateToTop();\n  }\n\n  void contract() {\n    _afterUpdateWidgetBuild(false);\n    _callCallbacks = true;\n    _animateToBottom();\n  }\n\n  ExpansionStatus get expansionStatus {\n    if (_positionOffset == null) return ExpansionStatus.contracted;\n    if (_positionOffset == _maxOffset) return ExpansionStatus.contracted;\n    if (_positionOffset == _minOffset) return ExpansionStatus.expanded;\n    return ExpansionStatus.middle;\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(vsync: this);\n    _controller.addStatusListener(_handleAnimationStatusUpdate);\n    WidgetsBinding.instance\n        .addPostFrameCallback((_) => _afterUpdateWidgetBuild(true));\n    UiHelper.doOnPageLoaded(_setBottomSheetAnimationFunction);\n  }\n\n  late final MoreMenuPresenter _presenter = locate();\n\n  Future<void> _setBottomSheetAnimationFunction() async {\n    await _presenter.setBottomSheetExpandCallback(\n      animateToTop: _animateToTop,\n      animateToBottom: _animateToBottom,\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    WidgetsBinding.instance\n        .addPostFrameCallback((_) => _afterUpdateWidgetBuild(false));\n    return Column(\n      children: <Widget>[\n        Expanded(\n          child: Stack(\n            children: <Widget>[\n              Align(\n                alignment: Alignment.topLeft,\n                child: InkWell(\n                  onTap: () => {Navigator.pop(context)},\n                  child: widget.background,\n                ),\n              ),\n              AnimatedBuilder(\n                animation: _controller,\n                builder: (_, Widget? child) {\n                  if (_controller.isAnimating) {\n                    _positionOffset = _animationMinOffset +\n                        _controller.value * _draggableHeight;\n                  }\n                  return Positioned(\n                    top: _positionOffset,\n                    right: 0,\n                    left: 0,\n                    child: child!,\n                  );\n                },\n                child: GestureDetector(\n                  onTap: _toggle,\n                  onVerticalDragDown: widget.isDraggable ? _dragDown : (_) {},\n                  onVerticalDragUpdate:\n                      widget.isDraggable ? _dragUpdate : (_) {},\n                  onVerticalDragEnd: widget.isDraggable ? _dragEnd : (_) {},\n                  child: Padding(\n                    padding: const EdgeInsets.only(top: 40),\n                    child: Column(\n                      mainAxisSize: MainAxisSize.min,\n                      children: <Widget>[\n                        Container(\n                          key: _headerKey,\n                          child: widget.persistentHeader ?? Container(),\n                        ),\n                        Container(\n                          key: _contentKey,\n                          child: widget.expandableContent,\n                        ),\n                      ],\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n        Container(\n          key: _footerKey,\n          child: widget.persistentFooter ?? Container(),\n        ),\n      ],\n    );\n  }\n\n  void _handleAnimationStatusUpdate(AnimationStatus status) {\n    if (status == AnimationStatus.completed) {\n      if (_oldStatus == AnimationStatus.forward) {\n        setState(() {\n          _draggableHeight = _maxOffset - _minOffset;\n          _positionOffset = _minOffset;\n        });\n        if (widget.onIsExtendedCallback != null && _callCallbacks) {\n          widget.onIsExtendedCallback!();\n        }\n      }\n      if (_oldStatus == AnimationStatus.reverse) {\n        setState(() {\n          _draggableHeight = _maxOffset - _minOffset;\n          _positionOffset = _maxOffset;\n        });\n        if (widget.onIsContractedCallback != null && _callCallbacks) {\n          widget.onIsContractedCallback!();\n        }\n      }\n    }\n  }\n\n  void _afterUpdateWidgetBuild(bool isFirstBuild) {\n    final double headerHeight = _headerKey.currentContext!.size!.height;\n    final double footerHeight = _footerKey.currentContext!.size!.height;\n    final double contentHeight = _contentKey.currentContext!.size!.height;\n\n    final double checkedPersistentContentHeight =\n        (widget.persistentContentHeight < contentHeight)\n            ? widget.persistentContentHeight\n            : contentHeight;\n\n    _minOffset =\n        context.size!.height - headerHeight - contentHeight - footerHeight;\n    _maxOffset = context.size!.height -\n        headerHeight -\n        footerHeight -\n        checkedPersistentContentHeight;\n\n    if (!isFirstBuild) {\n      _positionOutOfBounds();\n    } else {\n      setState(() {\n        _positionOffset = _maxOffset;\n        _draggableHeight = _maxOffset - _minOffset;\n      });\n    }\n  }\n\n  void _positionOutOfBounds() {\n    if (_positionOffset! < _minOffset) {\n      //the extend is larger than contentHeight\n      _callCallbacks = false;\n      _animateToMin();\n    } else {\n      if (_positionOffset! > _maxOffset) {\n        //the extend is smaller than persistentContentHeight\n        _callCallbacks = false;\n        _animateToMax();\n      } else {\n        _draggableHeight = _maxOffset - _minOffset;\n      }\n    }\n  }\n\n  void _animateOnIsAnimating() {\n    if (_controller.isAnimating) {\n      _controller.stop();\n    }\n  }\n\n  void _toggle() {\n    if (widget.enableToggle) {\n      if (expansionStatus == ExpansionStatus.expanded) {\n        _callCallbacks = true;\n        _animateToBottom();\n      }\n      if (expansionStatus == ExpansionStatus.contracted) {\n        _callCallbacks = true;\n        _animateToTop();\n      }\n    }\n  }\n\n  void _dragDown(DragDownDetails details) {\n    if (_controller.isAnimating) {\n      _useDrag = false;\n    } else {\n      _useDrag = true;\n      _startOffsetAtDragDown = details.localPosition.dy;\n      _startPositionAtDragDown = _positionOffset;\n    }\n  }\n\n  void _dragUpdate(DragUpdateDetails details) {\n    if (!_useDrag) return;\n    final double offset = details.localPosition.dy;\n    final double newOffset =\n        _startPositionAtDragDown! + offset - _startOffsetAtDragDown;\n    if (_minOffset <= newOffset && _maxOffset >= newOffset) {\n      setState(() {\n        _positionOffset = newOffset;\n      });\n    } else {\n      if (_minOffset > newOffset) {\n        setState(() {\n          _positionOffset = _minOffset;\n        });\n      }\n      if (_maxOffset < newOffset) {\n        setState(() {\n          _positionOffset = _maxOffset;\n        });\n      }\n    }\n  }\n\n  void _dragEnd(DragEndDetails details) {\n    if (_startPositionAtDragDown == _positionOffset || !_useDrag) return;\n    if (details.primaryVelocity! < -250) {\n      //drag up ended with high speed\n      _callCallbacks = true;\n      _animateToTop();\n    } else {\n      if (details.primaryVelocity! > 250) {\n        //drag down ended with high speed\n        _callCallbacks = true;\n        _animateToBottom();\n      } else {\n        if (_positionOffset == _maxOffset &&\n            widget.onIsContractedCallback != null) {\n          widget.onIsContractedCallback!();\n        }\n        if (_positionOffset == _minOffset &&\n            widget.onIsExtendedCallback != null) {\n          widget.onIsExtendedCallback!();\n        }\n      }\n    }\n  }\n\n  void _animateToTop() {\n    // booksC.isBottomSheetExpanded.value = true;\n    _animateOnIsAnimating();\n    _controller.value = (_positionOffset! - _minOffset) / _draggableHeight;\n    _animationMinOffset = _minOffset;\n    _oldStatus = AnimationStatus.forward;\n    _controller.animateTo(\n      .001,\n      duration: widget.animationDurationExtend,\n      curve: widget.animationCurveExpand,\n    );\n  }\n\n  void _animateToBottom() {\n    // booksC.isBottomSheetExpanded.value = false;\n    _animateOnIsAnimating();\n\n    _controller.value = (_positionOffset! - _minOffset) / _draggableHeight;\n    _animationMinOffset = _minOffset;\n    _oldStatus = AnimationStatus.reverse;\n    _controller.animateTo(\n      0.999,\n      duration: widget.animationDurationContract,\n      curve: widget.animationCurveContract,\n    );\n  }\n\n  void _animateToMax() {\n    _animateOnIsAnimating();\n\n    _controller.value = 1.0;\n    _draggableHeight = _positionOffset! - _maxOffset;\n    _animationMinOffset = _maxOffset;\n    _oldStatus = AnimationStatus.reverse;\n    _controller.animateTo(\n      0.001,\n      duration: widget.animationDurationExtend,\n      curve: widget.animationCurveExpand,\n    );\n  }\n\n  void _animateToMin() {\n    _animateOnIsAnimating();\n\n    _controller.value = 1.0;\n    _draggableHeight = _positionOffset! - _minOffset;\n    _animationMinOffset = _minOffset;\n    _oldStatus = AnimationStatus.forward;\n    _controller.animateTo(\n      0.0001,\n      duration: widget.animationDurationContract,\n      curve: widget.animationCurveContract,\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "animate_do", "file_path": "al-hadith-flutter/lib/core/external_libs/animate_do/zooms.dart", "file_name": "zooms.dart", "line": 21, "line_from": 21, "line_to": 94, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final void Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  @override\n  ZoomInState createState() => ZoomInState();\n}\n\nclass ZoomInState extends State<ZoomIn> with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n  bool disposed = false;\n  late Animation<double> fade;\n  late Animation<double> opacity;\n\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n    fade = Tween(begin: 0.001, end: widget.from)\n        .animate(CurvedAnimation(curve: Curves.easeOut, parent: controller!));\n\n    opacity = Tween<double>(begin: 0, end: 1).animate(\n      CurvedAnimation(parent: controller!, curve: const Interval(0, 0.65)),\n    );\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    if (!widget.animate) {\n      controller?.animateBack(0);\n    }\n\n    return AnimatedBuilder(\n      animation: fade,\n      builder: (BuildContext context, Widget? child) {\n        return Transform.scale(\n          scale: fade.value,\n          child: Opacity(\n            opacity: opacity.value,\n            child: widget.child,\n          ),\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "animate_do", "file_path": "al-hadith-flutter/lib/core/external_libs/animate_do/fades.dart", "file_name": "fades.dart", "line": 20, "line_from": 20, "line_to": 85, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final void Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n\n  @override\n  FadeInState createState() => FadeInState();\n}\n\nclass FadeInState extends State<FadeIn> with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n\n  bool disposed = false;\n\n  late Animation<double> animation;\n\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n    animation = CurvedAnimation(curve: Curves.easeOut, parent: controller!);\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    if (!widget.animate) {\n      controller?.animateBack(0);\n    }\n\n    return AnimatedBuilder(\n      animation: animation,\n      builder: (BuildContext context, Widget? child) {\n        return Opacity(\n          opacity: animation.value,\n          child: widget.child,\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "animate_do", "file_path": "al-hadith-flutter/lib/core/external_libs/animate_do/bounces.dart", "file_name": "bounces.dart", "line": 21, "line_from": 21, "line_to": 93, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final void Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  @override\n  BounceInDownState createState() => BounceInDownState();\n}\n\nclass BounceInDownState extends State<BounceInDown>\n    with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n  bool disposed = false;\n  late Animation<double> animation;\n  late Animation<double> opacity;\n\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n\n    opacity = Tween<double>(begin: 0, end: 1).animate(\n      CurvedAnimation(parent: controller!, curve: const Interval(0, 0.65)),\n    );\n\n    animation = Tween<double>(begin: widget.from * -1, end: 0)\n        .animate(CurvedAnimation(parent: controller!, curve: Curves.bounceOut));\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    if (!widget.animate) {\n      controller?.animateBack(0);\n    }\n\n    return AnimatedBuilder(\n      animation: controller!,\n      builder: (BuildContext context, Widget? child) {\n        return Transform.translate(\n          offset: Offset(0, animation.value),\n          child: Opacity(opacity: opacity.value, child: widget.child),\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "animate_do", "file_path": "al-hadith-flutter/lib/core/external_libs/animate_do/slides.dart", "file_name": "slides.dart", "line": 21, "line_from": 21, "line_to": 88, "snippet": "  final Widget child;\n  final Duration duration;\n  final Duration delay;\n  final void Function(AnimationController)? controller;\n  final bool manualTrigger;\n  final bool animate;\n  final double from;\n\n  @override\n  SlideInUpState createState() => SlideInUpState();\n}\n\nclass SlideInUpState extends State<SlideInUp>\n    with SingleTickerProviderStateMixin {\n  AnimationController? controller;\n  bool disposed = false;\n  late Animation<double> animation;\n\n  @override\n  void dispose() {\n    disposed = true;\n    controller!.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = AnimationController(duration: widget.duration, vsync: this);\n\n    animation = Tween<double>(begin: widget.from, end: 0)\n        .animate(CurvedAnimation(parent: controller!, curve: Curves.easeOut));\n\n    if (!widget.manualTrigger && widget.animate) {\n      Future.delayed(widget.delay, () {\n        if (!disposed) {\n          controller?.forward();\n        }\n      });\n    }\n\n    if (widget.controller is Function) {\n      widget.controller!(controller!);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (widget.animate && widget.delay.inMilliseconds == 0) {\n      controller?.forward();\n    }\n\n    if (!widget.animate) {\n      controller?.animateBack(0);\n    }\n\n    return AnimatedBuilder(\n      animation: controller!,\n      builder: (BuildContext context, Widget? child) {\n        return Transform.translate(\n          offset: Offset(0, animation.value),\n          child: widget.child,\n        );\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/simple_html_css/src/html_stylist.dart", "file_name": "html_stylist.dart", "line": 13, "line_from": 13, "line_to": 39, "snippet": "    void Function(Object)? linksCallback,\n    Map<String, TextStyle>? overrideStyle,\n    TextStyle? defaultTextStyle,\n  }) {\n    // Validating empty content\n    if (htmlContent.isEmpty) return const TextSpan();\n\n    String content = htmlContent;\n\n    // to fix a known issue with &nbsp; when appearing after an ending tag\n    content = content.replaceAll('&nbsp;', ' ').replaceAll('&nbsp', ' ');\n\n    // to fix a known issue with non self closing <br> tags\n    content = content.replaceAll('<br>', '<br />');\n    final Parser parser = Parser(\n      context,\n      HtmlUnescape().convert(content),\n      linksCallback: linksCallback,\n      overrideStyleMap: overrideStyle ?? <String, TextStyle>{},\n      defaultTextStyle: defaultTextStyle,\n    );\n\n    List<TextSpan> list = <TextSpan>[];\n    catchVoid(() => list = parser.parse());\n\n    return TextSpan(children: list);\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/simple_html_css/src/html_stylist.dart", "file_name": "html_stylist.dart", "line": 44, "line_from": 44, "line_to": 64, "snippet": "    void Function(Object)? linksCallback,\n    Map<String, TextStyle>? overrideStyle,\n    TextStyle? defaultTextStyle,\n  }) {\n    return SelectableText.rich(\n      toTextSpan(\n        context,\n        htmlContent,\n        linksCallback: linksCallback,\n        overrideStyle: overrideStyle,\n        defaultTextStyle: defaultTextStyle,\n      ),\n      key: const Key(\"SelectableTextToRichText28423\"),\n      contextMenuBuilder: (context, editableTextState) {\n        return CopyShareContextMenu(\n          anchor: editableTextState.contextMenuAnchors.primaryAnchor,\n          editableTextState: editableTextState,\n        );\n      },\n    );\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/flutter_animated_dialog/src/classic_dialog_widget.dart", "file_name": "classic_dialog_widget.dart", "line": 42, "line_from": 42, "line_to": 112, "snippet": "  Widget build(BuildContext context) {\n    return CustomDialogWidget(\n      title: titleText != null\n          ? Text(\n              titleText!,\n              style: Theme.of(context).dialogTheme.titleTextStyle,\n            )\n          : null,\n      content: contentText != null\n          ? Text(\n              contentText!,\n              style: Theme.of(context).dialogTheme.contentTextStyle,\n            )\n          : null,\n      actions: actions ??\n          [\n            if (onNegativeClick != null)\n              TextButton(\n                onPressed: onNegativeClick,\n                child: Text(\n                  negativeText ?? 'cancel',\n                  style: negativeTextStyle ??\n                      TextStyle(\n                        color: Theme.of(context).textTheme.bodySmall!.color,\n                        fontSize:\n                            Theme.of(context).textTheme.labelLarge!.fontSize,\n                      ),\n                ),\n              )\n            else\n              Container(),\n            if (onPositiveClick != null)\n              TextButton(\n                onPressed: onPositiveClick,\n                style: ButtonStyle(\n                  foregroundColor: MaterialStateProperty.resolveWith<Color>(\n                    (Set<MaterialState> states) {\n                      if (states.contains(MaterialState.pressed)) {\n                        return Theme.of(context)\n                            .colorScheme\n                            .primary\n                            .withOpacity(0.5);\n                      }\n                      return Theme.of(context).splashColor;\n                    },\n                  ),\n                ),\n                child: Text(\n                  positiveText ?? 'confirm',\n                  style: positiveTextStyle ??\n                      TextStyle(\n                        color: Theme.of(context).primaryColor,\n                        fontSize:\n                            Theme.of(context).textTheme.labelLarge!.fontSize,\n                      ),\n                ),\n              )\n            else\n              Container(),\n          ],\n      elevation: 0,\n      shape: Theme.of(context).dialogTheme.shape,\n    );\n  }\n}\n\nenum ListType {\n  single,\n  singleSelect,\n  multiSelect,\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/flutter_animated_dialog/src/custom_dialog_transitions.dart", "file_name": "custom_dialog_transitions.dart", "line": 20, "line_from": 20, "line_to": 57, "snippet": "  Widget build(BuildContext context) {\n    final double turnsValue = turns.value;\n    final Matrix4 transform = Matrix4.identity()\n      ..setEntry(3, 2, 0.0006)\n      ..rotateY(turnsValue);\n    return Transform(\n      transform: transform,\n      alignment: FractionalOffset.center,\n      child: child,\n    );\n  }\n}\n\nclass CustomRotationTransition extends AnimatedWidget {\n  const CustomRotationTransition({\n    super.key,\n    required Animation<double> turns,\n    this.alignment = Alignment.center,\n    this.child,\n  }) : super(listenable: turns);\n\n  Animation<double> get turns => listenable as Animation<double>;\n\n  final Alignment? alignment;\n\n  final Widget? child;\n\n  @override\n  Widget build(BuildContext context) {\n    final double turnsValue = turns.value;\n    final Matrix4 transform = Matrix4.rotationZ(turnsValue * math.pi);\n    return Transform(\n      transform: transform,\n      alignment: alignment,\n      child: child,\n    );\n  }\n}"}, {"structure_type": "function", "name": "Builder", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/flutter_animated_dialog/src/animated_dialog.dart", "file_name": "animated_dialog.dart", "line": 53, "line_from": 53, "line_to": 291, "snippet": "      final Widget pageChild = Builder(builder: builder);\n      return SafeArea(\n        top: false,\n        child: Builder(\n          builder: (BuildContext context) {\n            return Theme(data: theme, child: pageChild);\n          },\n        ),\n      );\n    },\n    barrierDismissible: barrierDismissible,\n    barrierLabel: \"Close dialog\",\n    barrierColor: barrierColor ?? Colors.black54,\n    transitionDuration: duration ?? const Duration(milliseconds: 400),\n    transitionBuilder: (\n      BuildContext context,\n      Animation<double> animation,\n      Animation<double> secondaryAnimation,\n      Widget child,\n    ) {\n      switch (animationType) {\n        case DialogTransitionType.fade:\n          return FadeTransition(opacity: animation, child: child);\n        case DialogTransitionType.slideFromRight:\n          return SlideTransition(\n            transformHitTests: false,\n            position: Tween<Offset>(\n              begin: const Offset(1, 0),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: child,\n          );\n        case DialogTransitionType.slideFromLeft:\n          return SlideTransition(\n            transformHitTests: false,\n            position: Tween<Offset>(\n              begin: const Offset(-1, 0),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: child,\n          );\n        case DialogTransitionType.slideFromRightFade:\n          return SlideTransition(\n            position: Tween<Offset>(\n              begin: const Offset(1, 0),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: FadeTransition(\n              opacity: animation,\n              child: child,\n            ),\n          );\n        case DialogTransitionType.slideFromLeftFade:\n          return SlideTransition(\n            position: Tween<Offset>(\n              begin: const Offset(-1, 0),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: FadeTransition(\n              opacity: animation,\n              child: child,\n            ),\n          );\n        case DialogTransitionType.slideFromTop:\n          return SlideTransition(\n            transformHitTests: false,\n            position: Tween<Offset>(\n              begin: const Offset(0, -1),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: child,\n          );\n        case DialogTransitionType.slideFromTopFade:\n          return SlideTransition(\n            position: Tween<Offset>(\n              begin: const Offset(0, -1),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: FadeTransition(\n              opacity: animation,\n              child: child,\n            ),\n          );\n        case DialogTransitionType.slideFromBottom:\n          return SlideTransition(\n            transformHitTests: false,\n            position: Tween<Offset>(\n              begin: const Offset(0, 1),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: child,\n          );\n        case DialogTransitionType.slideFromBottomFade:\n          return SlideTransition(\n            position: Tween<Offset>(\n              begin: const Offset(0, 1),\n              end: Offset.zero,\n            ).chain(CurveTween(curve: curve)).animate(animation),\n            child: FadeTransition(\n              opacity: animation,\n              child: child,\n            ),\n          );\n        case DialogTransitionType.scale:\n          return ScaleTransition(\n            alignment: alignment,\n            scale: CurvedAnimation(\n              parent: animation,\n              curve: Interval(\n                0,\n                0.50,\n                curve: curve,\n              ),\n            ),\n            child: child,\n          );\n        case DialogTransitionType.fadeScale:\n          return ScaleTransition(\n            alignment: alignment,\n            scale: CurvedAnimation(\n              parent: animation,\n              curve: Interval(\n                0,\n                0.50,\n                curve: curve,\n              ),\n            ),\n            child: FadeTransition(\n              opacity: CurvedAnimation(\n                parent: animation,\n                curve: curve,\n              ),\n              child: child,\n            ),\n          );\n        case DialogTransitionType.scaleRotate:\n          return ScaleTransition(\n            alignment: alignment,\n            scale: CurvedAnimation(\n              parent: animation,\n              curve: Interval(\n                0,\n                0.50,\n                curve: curve,\n              ),\n            ),\n            child: CustomRotationTransition(\n              alignment: alignment,\n              turns: Tween<double>(begin: 1, end: 2).animate(\n                CurvedAnimation(\n                  parent: animation,\n                  curve: Interval(0, 1, curve: curve),\n                ),\n              ),\n              child: child,\n            ),\n          );\n        case DialogTransitionType.rotate:\n          return CustomRotationTransition(\n            alignment: alignment,\n            turns: Tween<double>(begin: 1, end: 2).animate(\n              CurvedAnimation(\n                parent: animation,\n                curve: Interval(0, 1, curve: curve),\n              ),\n            ),\n            child: child,\n          );\n        case DialogTransitionType.fadeRotate:\n          return CustomRotationTransition(\n            alignment: alignment,\n            turns: Tween<double>(begin: 1, end: 2).animate(\n              CurvedAnimation(\n                parent: animation,\n                curve: Interval(0, 1, curve: curve),\n              ),\n            ),\n            child: FadeTransition(\n              opacity: CurvedAnimation(\n                parent: animation,\n                curve: curve,\n              ),\n              child: child,\n            ),\n          );\n        case DialogTransitionType.rotate3D:\n          return Rotation3DTransition(\n            alignment: alignment,\n            turns: Tween<double>(begin: math.pi, end: 2.0 * math.pi).animate(\n              CurvedAnimation(\n                parent: animation,\n                curve: Interval(0, 1, curve: curve),\n              ),\n            ),\n            child: FadeTransition(\n              opacity: Tween<double>(begin: 0, end: 1).animate(\n                CurvedAnimation(\n                  parent: animation,\n                  curve: const Interval(0.5, 1, curve: Curves.elasticOut),\n                ),\n              ),\n              child: child,\n            ),\n          );\n        case DialogTransitionType.size:\n          return Align(\n            alignment: alignment,\n            child: SizeTransition(\n              sizeFactor: CurvedAnimation(\n                parent: animation,\n                curve: curve,\n              ),\n              axis: axis ?? Axis.vertical,\n              child: child,\n            ),\n          );\n        case DialogTransitionType.sizeFade:\n          return Align(\n            alignment: alignment,\n            child: SizeTransition(\n              sizeFactor: CurvedAnimation(\n                parent: animation,\n                curve: curve,\n              ),\n              child: FadeTransition(\n                opacity: CurvedAnimation(\n                  parent: animation,\n                  curve: curve,\n                ),\n                child: child,\n              ),\n            ),\n          );\n        case DialogTransitionType.none:\n          return child;\n        default:\n          return FadeTransition(opacity: animation, child: child);\n      }\n    },"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/flutter_animated_dialog/src/animated_dialog.dart", "file_name": "animated_dialog.dart", "line": 340, "line_from": 340, "line_to": 511, "snippet": "  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    final DialogTheme dialogTheme = DialogTheme.of(context);\n    final List<Widget> children = <Widget>[];\n    String? label = semanticLabel;\n\n    if (title != null) {\n      children.add(\n        Padding(\n          padding: titlePadding ??\n              EdgeInsets.fromLTRB(24, 24, 24, content == null ? 20.0 : 0.0),\n          child: DefaultTextStyle(\n            style: (titleTextStyle ??\n                dialogTheme.titleTextStyle ??\n                theme.textTheme.titleLarge)!,\n            child: Semantics(\n              namesRoute: true,\n              container: true,\n              child: title,\n            ),\n          ),\n        ),\n      );\n    } else {\n      switch (defaultTargetPlatform) {\n        case TargetPlatform.iOS:\n          label = semanticLabel;\n        case TargetPlatform.android:\n        case TargetPlatform.fuchsia:\n          label = semanticLabel ??\n              MaterialLocalizations.of(context).alertDialogLabel;\n        case TargetPlatform.linux:\n          label = semanticLabel ??\n              MaterialLocalizations.of(context).alertDialogLabel;\n        case TargetPlatform.macOS:\n          label = semanticLabel;\n        case TargetPlatform.windows:\n          label = semanticLabel ??\n              MaterialLocalizations.of(context).alertDialogLabel;\n      }\n    }\n\n    if (content != null) {\n      children.add(\n        Flexible(\n          child: Padding(\n            padding: contentPadding!,\n            child: DefaultTextStyle(\n              style: (contentTextStyle ??\n                  dialogTheme.contentTextStyle ??\n                  theme.textTheme.titleMedium)!,\n              child: content!,\n            ),\n          ),\n        ),\n      );\n    }\n\n    if (bottomWidget != null) {\n      children.add(bottomWidget!);\n    } else if (actions != null) {\n      children.add(\n        ButtonBarTheme(\n          data: ButtonBarTheme.of(context),\n          child: ButtonBar(\n            children: actions!,\n          ),\n        ),\n      );\n    }\n\n    Widget dialogChild = IntrinsicWidth(\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: children,\n      ),\n    );\n\n    if (label != null) {\n      dialogChild = Semantics(\n        namesRoute: true,\n        label: label,\n        child: dialogChild,\n      );\n    }\n\n    dialogChild = CustomDialog(\n      backgroundColor: backgroundColor,\n      elevation: elevation,\n      minWidth: minWidth,\n      shape: shape,\n      child: dialogChild,\n    );\n\n    return AnnotatedRegion<SystemUiOverlayStyle>(\n      value: SystemUiOverlayStyle.light.copyWith(\n        statusBarIconBrightness: Brightness.light,\n        statusBarColor: Colors.transparent,\n        systemNavigationBarColor: Colors.white,\n        systemNavigationBarIconBrightness: Brightness.dark,\n      ),\n      child: dialogChild,\n    );\n  }\n}\n\nclass CustomDialog extends StatelessWidget {\n  const CustomDialog({\n    super.key,\n    this.backgroundColor,\n    this.elevation,\n    this.insetAnimationDuration = const Duration(milliseconds: 100),\n    this.insetAnimationCurve = Curves.decelerate,\n    this.minWidth = 280.0,\n    this.shape,\n    this.child,\n  });\n\n  final Color? backgroundColor;\n\n  final double? elevation;\n\n  final Duration? insetAnimationDuration;\n\n  final Curve? insetAnimationCurve;\n\n  final double? minWidth;\n\n  final ShapeBorder? shape;\n\n  final Widget? child;\n\n  static const RoundedRectangleBorder _defaultDialogShape =\n      RoundedRectangleBorder(\n    borderRadius: BorderRadius.all(Radius.circular(2)),\n  );\n  static const double _defaultElevation = 24;\n\n  @override\n  Widget build(BuildContext context) {\n    final DialogTheme dialogTheme = DialogTheme.of(context);\n    return AnimatedPadding(\n      padding: MediaQuery.of(context).viewInsets +\n          const EdgeInsets.symmetric(horizontal: 40, vertical: 24),\n      duration: insetAnimationDuration!,\n      curve: insetAnimationCurve!,\n      child: MediaQuery.removeViewInsets(\n        removeLeft: true,\n        removeTop: true,\n        removeRight: true,\n        removeBottom: true,\n        context: context,\n        child: Center(\n          child: ConstrainedBox(\n            constraints: BoxConstraints(minWidth: minWidth ?? 280.0),\n            child: Material(\n              color: backgroundColor ??\n                  dialogTheme.backgroundColor ??\n                  Theme.of(context).dialogBackgroundColor,\n              elevation:\n                  elevation ?? dialogTheme.elevation ?? _defaultElevation,\n              shape: shape ?? dialogTheme.shape ?? _defaultDialogShape,\n              type: MaterialType.card,\n              child: child,\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "_workerSendPortCompleter.future;", "docstring": "used by [IsolatedWorker] to send messages to [_Worker]", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/isolated_worker/src/isolated_worker_default_impl.dart", "file_name": "isolated_worker_default_impl.dart", "line": 128, "line_from": 128, "line_to": 193, "snippet": "  Future<SendPort> get _workerSendPort => _workerSendPortCompleter.future;\n\n  /// current count for next [_CallbackMessage] id\n  int _callbackMessageId = 0;\n\n  Future<void> _init() async {\n    _workerMessages = _receivePort.listen(_workerMessageReceiver);\n    _isolate = await Isolate.spawn<SendPort>(\n      _workerEntryPoint,\n      _receivePort.sendPort,\n    );\n  }\n\n  /// reset [_callbackMessageId] when reached [_kMaxCallbackMessageId]\n  void _resetCurrentCallbackMessageIdIfReachedMax() {\n    if (_callbackMessageId == _kMaxCallbackMessageId) {\n      _callbackMessageId = 0;\n    }\n  }\n\n  @override\n  Future<R> run<Q, R>(\n    FutureOr<R> Function(Q message) callback,\n    Q message,\n  ) async {\n    _resetCurrentCallbackMessageIdIfReachedMax();\n    final Completer<R> callbackCompleter = Completer<R>();\n    final _CallbackMessage callbackMessage = _CallbackMessage(\n      id: _callbackMessageId++,\n      callback: callback,\n      message: message,\n    );\n    _callbackObjects[callbackMessage] = callbackCompleter;\n    (await _workerSendPort).send(callbackMessage);\n    return callbackCompleter.future;\n  }\n\n  void _workerMessageReceiver(dynamic message) {\n    if (message is SendPort) {\n      _workerSendPortCompleter.complete(message);\n    } else if (message is _CallbackObject) {\n      final Completer<dynamic> callbackCompleter =\n          _callbackObjects.remove(message) as Completer<dynamic>;\n\n      if (message is _ResultMessage) {\n        callbackCompleter.complete(message.result);\n      } else if (message is _ResultErrorMessage) {\n        callbackCompleter.completeError(message.error);\n      }\n    }\n  }\n\n  @override\n  Future<void> close() async {\n    /// tell [_Worker] to call _dispose()\n    final SendPort sendPort = await _workerSendPort;\n    sendPort.send(false);\n    _workerMessages.cancel();\n    _receivePort.close();\n    _isolate.kill();\n  }\n}\n\nvoid _workerEntryPoint( SendPort parentSendPort) {\n  _Worker(parentSendPort);\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/isolated_worker/src/isolated_worker_web_unimpl.dart", "file_name": "isolated_worker_web_unimpl.dart", "line": 28, "line_from": 28, "line_to": 33, "snippet": "//     Future<dynamic> Function()? fallback,\n//   }) {\n//     throw UnimplementedError(\n//       'JsIsolatedWorker is not available on this platform',\n//     );\n//   }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/isolated_worker/src/isolated_worker_web_impl.dart", "file_name": "isolated_worker_web_impl.dart", "line": 98, "line_from": 98, "line_to": 118, "snippet": "//     Future<dynamic> Function()? fallback,\n//   }) async {\n//     assert(functionName != null);\n//\n//     final Worker? worker = await _worker;\n//     // worker not available\n//     if (worker == null) {\n//       return fallback?.call();\n//     }\n//     _resetCurrentCallbackMessageIdIfReachedMax();\n//     final Completer<dynamic> callbackCompleter = Completer<dynamic>();\n//     final List<dynamic> callbackMessage = <dynamic>[\n//       _callbackMessageId++,\n//       functionName,\n//       arguments,\n//     ];\n//\n//     _callbackObjects[callbackMessage] = callbackCompleter;\n//     worker.postMessage(callbackMessage);\n//     return callbackCompleter.future;\n//   }"}, {"structure_type": "function", "name": "Future<bool>.value", "docstring": "", "module": "worker_delegator", "file_path": "al-hadith-flutter/lib/core/external_libs/isolated_worker/src/worker_delegator/worker_delegator_impl.dart", "file_name": "worker_delegator_impl.dart", "line": 17, "line_from": 17, "line_to": 25, "snippet": "    return Future<bool>.value(true);\n  }\n\n  @override\n  void addAllDelegates<Q, R>(Iterable<WorkerDelegate<Q, R>> delegates) {\n    for (final WorkerDelegate delegate in delegates) {\n      addDelegate(delegate);\n    }\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "worker_delegator", "file_path": "al-hadith-flutter/lib/core/external_libs/isolated_worker/src/worker_delegator/js_delegate.dart", "file_name": "js_delegate.dart", "line": 9, "line_from": 9, "line_to": 36, "snippet": "    Future<dynamic> Function()? fallback,\n  }) = _SingleDynamicArgumentJsDelegate;\n\n  /// The callback name declared in the web worker.\n  /// This should either be a [String] or a [List] of [String],\n  /// otherwise it will throw [AssertionError] on debug mode.\n  dynamic get callback;\n\n  /// The fallback function that will be called by JsIsolatedWorker\n  /// when Web Worker is not available on the user's browser.\n  Future<dynamic> Function()? get fallback;\n}\n\nclass _SingleDynamicArgumentJsDelegate implements JsDelegate {\n  const _SingleDynamicArgumentJsDelegate({\n    required this.callback,\n    this.fallback,\n  }) : assert(\n          callback is String || callback is List<String>,\n          '$callback is not compatible with type `String` or `List<String>`',\n        );\n\n  @override\n  final dynamic callback;\n\n  @override\n  final Future<dynamic> Function()? fallback;\n}"}, {"structure_type": "function", "name": "child;", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/scrollable_positioned_list/src/element_registry.dart", "file_name": "element_registry.dart", "line": 10, "line_from": 10, "line_to": 23, "snippet": "  final Widget child;\n\n  final ValueNotifier<Set<Element>?>? elementNotifier;\n\n  @override\n  State<StatefulWidget> createState() => _RegistryWidgetState();\n}\n\nclass RegisteredElementWidget extends ProxyWidget {\n  const RegisteredElementWidget({super.key, required super.child});\n\n  @override\n  Element createElement() => _RegisteredElement(this);\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/scrollable_positioned_list/src/element_registry.dart", "file_name": "element_registry.dart", "line": 29, "line_from": 29, "line_to": 45, "snippet": "  Widget build(BuildContext context) => _InheritedRegistryWidget(\n        state: this,\n        child: widget.child,\n      );\n}\n\nclass _InheritedRegistryWidget extends InheritedWidget {\n  const _InheritedRegistryWidget({\n    required this.state,\n    required super.child,\n  });\n\n  final _RegistryWidgetState state;\n\n  @override\n  bool updateShouldNotify(InheritedWidget oldWidget) => true;\n}"}, {"structure_type": "function", "name": "notifyClients", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/scrollable_positioned_list/src/element_registry.dart", "file_name": "element_registry.dart", "line": 51, "line_from": 51, "line_to": 84, "snippet": "  void notifyClients(ProxyWidget oldWidget) {}\n\n  late _RegistryWidgetState _registryWidgetState;\n\n  @override\n  void mount(Element? parent, Object? newSlot) {\n    super.mount(parent, newSlot);\n    final inheritedRegistryWidget =\n        dependOnInheritedWidgetOfExactType<_InheritedRegistryWidget>()!;\n    _registryWidgetState = inheritedRegistryWidget.state;\n    _registryWidgetState.registeredElements.add(this);\n    _registryWidgetState.widget.elementNotifier?.value =\n        _registryWidgetState.registeredElements;\n  }\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    final inheritedRegistryWidget =\n        dependOnInheritedWidgetOfExactType<_InheritedRegistryWidget>()!;\n    _registryWidgetState = inheritedRegistryWidget.state;\n    _registryWidgetState.registeredElements.add(this);\n    _registryWidgetState.widget.elementNotifier?.value =\n        _registryWidgetState.registeredElements;\n  }\n\n  @override\n  void unmount() {\n    _registryWidgetState.registeredElements.remove(this);\n    _registryWidgetState.widget.elementNotifier?.value =\n        _registryWidgetState.registeredElements;\n    super.unmount();\n  }\n}"}, {"structure_type": "function", "name": "jumpTo", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/scrollable_positioned_list/src/scrollable_positioned_list.dart", "file_name": "scrollable_positioned_list.dart", "line": 119, "line_from": 119, "line_to": 178, "snippet": "  void jumpTo({required int index, double alignment = 0}) {\n    _scrollableListState?._jumpTo(index: index, alignment: alignment);\n  }\n\n  Future<void> scrollTo({\n    required int index,\n    double alignment = 0,\n    required Duration duration,\n    Curve curve = Curves.linear,\n    List<double> opacityAnimationWeights = const [40, 20, 40],\n  }) {\n    assert(_scrollableListState != null);\n    assert(opacityAnimationWeights.length == 3);\n    assert(duration > Duration.zero);\n    return _scrollableListState!._scrollTo(\n      index: index,\n      alignment: alignment,\n      duration: duration,\n      curve: curve,\n      opacityAnimationWeights: opacityAnimationWeights,\n    );\n  }\n\n  void _attach(_ScrollablePositionedListState scrollableListState) {\n    assert(_scrollableListState == null);\n    _scrollableListState = scrollableListState;\n  }\n\n  void _detach() {\n    _scrollableListState = null;\n  }\n}\n\nclass ScrollOffsetController {\n  Future<void> animateScroll({\n    required double offset,\n    required Duration duration,\n    Curve curve = Curves.linear,\n  }) async {\n    final currentPosition =\n        _scrollableListState!.primary.scrollController.offset;\n    final newPosition = currentPosition + offset;\n    await _scrollableListState!.primary.scrollController.animateTo(\n      newPosition,\n      duration: duration,\n      curve: curve,\n    );\n  }\n\n  _ScrollablePositionedListState? _scrollableListState;\n\n  void _attach(_ScrollablePositionedListState scrollableListState) {\n    assert(_scrollableListState == null);\n    _scrollableListState = scrollableListState;\n  }\n\n  void _detach() {\n    _scrollableListState = null;\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/scrollable_positioned_list/src/scrollable_positioned_list.dart", "file_name": "scrollable_positioned_list.dart", "line": 188, "line_from": 188, "line_to": 544, "snippet": "  void Function() startAnimationCallback = () {};\n\n  bool _isTransitioning = false;\n\n  late AnimationController _animationController =\n      AnimationController(vsync: this);\n\n  double previousOffset = 0;\n\n  @override\n  void initState() {\n    super.initState();\n    final ItemPosition? initialPosition =\n        PageStorage.of(context).readState(context) as ItemPosition?;\n    primary = _ListDisplayDetails(\n      const ValueKey('Ping'),\n      widget.itemScrollController?.scrollController ??\n          ScrollController(keepScrollOffset: false),\n    );\n    secondary = _ListDisplayDetails(\n      const ValueKey('Pong'),\n      ScrollController(keepScrollOffset: false),\n    );\n    primary\n      ..target = initialPosition?.index ?? widget.initialScrollIndex\n      ..alignment = initialPosition?.itemLeadingEdge ?? widget.initialAlignment;\n    if (widget.itemCount > 0 && primary.target > widget.itemCount - 1) {\n      primary.target = widget.itemCount - 1;\n    }\n    widget.itemScrollController?._attach(this);\n    widget.scrollOffsetController?._attach(this);\n    primary.itemPositionsNotifier.itemPositions.addListener(_updatePositions);\n    secondary.itemPositionsNotifier.itemPositions.addListener(_updatePositions);\n    primary.scrollController.addListener(() {\n      final currentOffset = primary.scrollController.offset;\n      final offsetChange = currentOffset - previousOffset;\n      previousOffset = currentOffset;\n      if (!_isTransitioning |\n          (widget.scrollOffsetNotifier?.recordProgrammaticScrolls ?? false)) {\n        widget.scrollOffsetNotifier?.changeController.add(offsetChange);\n      }\n    });\n  }\n\n  @override\n  void activate() {\n    super.activate();\n    widget.itemScrollController?._attach(this);\n    widget.scrollOffsetController?._attach(this);\n  }\n\n  @override\n  void deactivate() {\n    widget.itemScrollController?._detach();\n    widget.scrollOffsetController?._detach();\n    super.deactivate();\n  }\n\n  @override\n  void dispose() {\n    primary.itemPositionsNotifier.itemPositions\n        .removeListener(_updatePositions);\n    secondary.itemPositionsNotifier.itemPositions\n        .removeListener(_updatePositions);\n    // _animationController.dispose();\n    super.dispose();\n  }\n\n  @override\n  void didUpdateWidget(ScrollablePositionedList oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (oldWidget.itemScrollController?._scrollableListState == this) {\n      oldWidget.itemScrollController?._detach();\n    }\n    if (widget.itemScrollController?._scrollableListState != this) {\n      widget.itemScrollController?._detach();\n      widget.itemScrollController?._attach(this);\n    }\n\n    if (widget.itemCount == 0) {\n      setState(() {\n        primary.target = 0;\n        secondary.target = 0;\n      });\n    } else {\n      if (primary.target > widget.itemCount - 1) {\n        setState(() {\n          primary.target = widget.itemCount - 1;\n        });\n      }\n      if (secondary.target > widget.itemCount - 1) {\n        setState(() {\n          secondary.target = widget.itemCount - 1;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n      builder: (context, constraints) {\n        final cacheExtent = _cacheExtent(constraints);\n        return Listener(\n          onPointerDown: (_) => _stopScroll(canceled: true),\n          child: Stack(\n            children: <Widget>[\n              PostMountCallback(\n                key: primary.key,\n                callback: startAnimationCallback,\n                child: FadeTransition(\n                  opacity: ReverseAnimation(opacity),\n                  child: NotificationListener<ScrollNotification>(\n                    onNotification: (_) => _isTransitioning,\n                    child: PositionedList(\n                      itemBuilder: widget.itemBuilder,\n                      separatorBuilder: widget.separatorBuilder,\n                      itemCount: widget.itemCount,\n                      positionedIndex: primary.target,\n                      controller: primary.scrollController,\n                      itemPositionsNotifier: primary.itemPositionsNotifier,\n                      scrollDirection: widget.scrollDirection,\n                      reverse: widget.reverse,\n                      cacheExtent: cacheExtent,\n                      alignment: primary.alignment,\n                      physics: widget.physics,\n                      shrinkWrap: widget.shrinkWrap,\n                      addSemanticIndexes: widget.addSemanticIndexes,\n                      semanticChildCount: widget.semanticChildCount,\n                      padding: widget.padding,\n                      addAutomaticKeepAlives: widget.addAutomaticKeepAlives,\n                      addRepaintBoundaries: widget.addRepaintBoundaries,\n                    ),\n                  ),\n                ),\n              ),\n              if (_isTransitioning)\n                PostMountCallback(\n                  key: secondary.key,\n                  callback: startAnimationCallback,\n                  child: FadeTransition(\n                    opacity: opacity,\n                    child: NotificationListener<ScrollNotification>(\n                      onNotification: (_) => false,\n                      child: PositionedList(\n                        itemBuilder: widget.itemBuilder,\n                        separatorBuilder: widget.separatorBuilder,\n                        itemCount: widget.itemCount,\n                        itemPositionsNotifier: secondary.itemPositionsNotifier,\n                        positionedIndex: secondary.target,\n                        controller: secondary.scrollController,\n                        scrollDirection: widget.scrollDirection,\n                        reverse: widget.reverse,\n                        cacheExtent: cacheExtent,\n                        alignment: secondary.alignment,\n                        physics: widget.physics,\n                        shrinkWrap: widget.shrinkWrap,\n                        addSemanticIndexes: widget.addSemanticIndexes,\n                        semanticChildCount: widget.semanticChildCount,\n                        padding: widget.padding,\n                        addAutomaticKeepAlives: widget.addAutomaticKeepAlives,\n                        addRepaintBoundaries: widget.addRepaintBoundaries,\n                      ),\n                    ),\n                  ),\n                ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n\n  double _cacheExtent(BoxConstraints constraints) => max(\n        (widget.scrollDirection == Axis.vertical\n                ? constraints.maxHeight\n                : constraints.maxWidth) *\n            _screenScrollCount,\n        widget.minCacheExtent ?? 0,\n      );\n\n  void _jumpTo({required int index, required double alignment}) {\n    _stopScroll(canceled: true);\n    if (index > widget.itemCount - 1) {\n      index = widget.itemCount - 1;\n    }\n    setState(() {\n      primary.scrollController.jumpTo(0);\n      primary\n        ..target = index\n        ..alignment = alignment;\n    });\n  }\n\n  Future<void> _scrollTo({\n    required int index,\n    required double alignment,\n    required Duration duration,\n    Curve curve = Curves.linear,\n    required List<double> opacityAnimationWeights,\n  }) async {\n    if (index > widget.itemCount - 1) {\n      index = widget.itemCount - 1;\n    }\n    if (_isTransitioning) {\n      final scrollCompleter = Completer<void>();\n      _stopScroll(canceled: true);\n      SchedulerBinding.instance.addPostFrameCallback((_) async {\n        await _startScroll(\n          index: index,\n          alignment: alignment,\n          duration: duration,\n          curve: curve,\n          opacityAnimationWeights: opacityAnimationWeights,\n        );\n        scrollCompleter.complete();\n      });\n      await scrollCompleter.future;\n    } else {\n      await _startScroll(\n        index: index,\n        alignment: alignment,\n        duration: duration,\n        curve: curve,\n        opacityAnimationWeights: opacityAnimationWeights,\n      );\n    }\n  }\n\n  Future<void> _startScroll({\n    required int index,\n    required double alignment,\n    required Duration duration,\n    Curve curve = Curves.linear,\n    required List<double> opacityAnimationWeights,\n  }) async {\n    final direction = index > primary.target ? 1 : -1;\n    final itemPosition = primary.itemPositionsNotifier.itemPositions.value\n        .firstWhereOrNull((itemPosition) => itemPosition.index == index);\n    if (itemPosition != null) {\n      final localScrollAmount = itemPosition.itemLeadingEdge *\n          primary.scrollController.position.viewportDimension;\n      await primary.scrollController.animateTo(\n        primary.scrollController.offset +\n            localScrollAmount -\n            alignment * primary.scrollController.position.viewportDimension,\n        duration: duration,\n        curve: curve,\n      );\n    } else {\n      final scrollAmount = _screenScrollCount *\n          primary.scrollController.position.viewportDimension;\n      final startCompleter = Completer<void>();\n      final endCompleter = Completer<void>();\n      startAnimationCallback = () {\n        SchedulerBinding.instance.addPostFrameCallback((_) {\n          startAnimationCallback = () {};\n          _animationController.dispose();\n          _animationController =\n              AnimationController(vsync: this, duration: duration)..forward();\n          opacity.parent = _opacityAnimation(opacityAnimationWeights)\n              .animate(_animationController);\n          secondary.scrollController.jumpTo(\n            -direction *\n                (_screenScrollCount *\n                        primary.scrollController.position.viewportDimension -\n                    alignment *\n                        secondary.scrollController.position.viewportDimension),\n          );\n\n          startCompleter.complete(\n            primary.scrollController.animateTo(\n              primary.scrollController.offset + direction * scrollAmount,\n              duration: duration,\n              curve: curve,\n            ),\n          );\n          endCompleter.complete(\n            secondary.scrollController\n                .animateTo(0, duration: duration, curve: curve),\n          );\n        });\n      };\n      setState(() {\n        secondary\n          ..target = index\n          ..alignment = alignment;\n        _isTransitioning = true;\n      });\n      await Future.wait<void>([startCompleter.future, endCompleter.future]);\n      _stopScroll();\n    }\n  }\n\n  void _stopScroll({bool canceled = false}) {\n    if (!_isTransitioning) {\n      return;\n    }\n\n    if (canceled) {\n      if (primary.scrollController.hasClients) {\n        primary.scrollController.jumpTo(primary.scrollController.offset);\n      }\n      if (secondary.scrollController.hasClients) {\n        secondary.scrollController.jumpTo(secondary.scrollController.offset);\n      }\n    }\n    if (mounted) {\n      setState(() {\n        if (opacity.value >= 0.5) {\n          final temp = primary;\n          primary = secondary;\n          secondary = temp;\n        }\n        _isTransitioning = false;\n        opacity.parent = const AlwaysStoppedAnimation<double>(0);\n      });\n    }\n  }\n\n  Animatable<double> _opacityAnimation(List<double> opacityAnimationWeights) {\n    const startOpacity = 0.0;\n    const endOpacity = 1.0;\n    return TweenSequence<double>(<TweenSequenceItem<double>>[\n      TweenSequenceItem<double>(\n        tween: ConstantTween<double>(startOpacity),\n        weight: opacityAnimationWeights[0],\n      ),\n      TweenSequenceItem<double>(\n        tween: Tween<double>(begin: startOpacity, end: endOpacity),\n        weight: opacityAnimationWeights[1],\n      ),\n      TweenSequenceItem<double>(\n        tween: ConstantTween<double>(endOpacity),\n        weight: opacityAnimationWeights[2],\n      ),\n    ]);\n  }\n\n  void _updatePositions() {\n    final itemPositions =\n        primary.itemPositionsNotifier.itemPositions.value.where(\n      (position) =>\n          position.itemLeadingEdge < 1 && position.itemTrailingEdge > 0,\n    );\n    if (itemPositions.isNotEmpty) {\n      PageStorage.of(context).writeState(\n        context,\n        itemPositions.reduce(\n          (value, element) =>\n              value.itemLeadingEdge < element.itemLeadingEdge ? value : element,\n        ),\n      );\n    }\n    widget.itemPositionsNotifier?.itemPositions.value = itemPositions;\n  }\n}"}, {"structure_type": "function", "name": "updateRenderObject", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/scrollable_positioned_list/src/wrapping.dart", "file_name": "wrapping.dart", "line": 70, "line_from": 70, "line_to": 348, "snippet": "  void updateRenderObject(\n    BuildContext context,\n    CustomRenderShrinkWrappingViewport renderObject,\n  ) {\n    renderObject\n      ..axisDirection = axisDirection\n      ..crossAxisDirection = crossAxisDirection ??\n          Viewport.getDefaultCrossAxisDirection(context, axisDirection)\n      ..anchor = anchor\n      ..offset = offset\n      ..cacheExtent = cacheExtent\n      ..cacheExtentStyle = cacheExtentStyle\n      ..clipBehavior = clipBehavior;\n  }\n}\n\n/// A render object that is bigger on the inside and shrink wraps its children\n/// in the main axis.\n///\n/// [RenderShrinkWrappingViewport] displays a subset of its children according\n/// to its own dimensions and the given [offset]. As the offset varies, different\n/// children are visible through the viewport.\n///\n/// [RenderShrinkWrappingViewport] differs from [RenderViewport] in that\n/// [RenderViewport] expands to fill the main axis whereas\n/// [RenderShrinkWrappingViewport] sizes itself to match its children in the\n/// main axis. This shrink wrapping behavior is expensive because the children,\n/// and hence the viewport, could potentially change size whenever the [offset]\n/// changes (e.g., because of a collapsing header).\n///\n/// [RenderShrinkWrappingViewport] cannot contain [RenderBox] children directly.\n/// Instead, use a [RenderSliverList], [RenderSliverFixedExtentList],\n/// [RenderSliverGrid], or a [RenderSliverToBoxAdapter], for example.\n///\n/// See also:\n///\n///  * [RenderViewport], a viewport that does not shrink-wrap its contents.\n///  * [RenderSliver], which explains more about the Sliver protocol.\n///  * [RenderBox], which explains more about the Box protocol.\n///  * [RenderSliverToBoxAdapter], which allows a [RenderBox] object to be\n///    placed inside a [RenderSliver] (the opposite of this class).\nclass CustomRenderShrinkWrappingViewport extends CustomRenderViewport {\n  /// Creates a viewport (for [RenderSliver] objects) that shrink-wraps its\n  /// contents.\n  ///\n  /// The [offset] must be specified. For testing purposes, consider passing a\n  /// [ViewportOffset.zero] or [ViewportOffset.fixed].\n  CustomRenderShrinkWrappingViewport({\n    super.axisDirection,\n    required super.crossAxisDirection,\n    required super.offset,\n    double anchor = 0.0,\n    super.children,\n    super.center,\n    super.cacheExtent,\n  }) : _anchor = anchor;\n\n  double _anchor;\n\n  @override\n  double get anchor => _anchor;\n\n  @override\n  bool get sizedByParent => false;\n\n  double lastMainAxisExtent = -1;\n\n  @override\n  set anchor(double value) {\n    if (value == _anchor) return;\n    _anchor = value;\n    markNeedsLayout();\n  }\n\n  late double _shrinkWrapExtent;\n\n  /// This value is set during layout based on the [CacheExtentStyle].\n  ///\n  /// When the style is [CacheExtentStyle.viewport], it is the main axis extent\n  /// of the viewport multiplied by the requested cache extent, which is still\n  /// expressed in pixels.\n  double? _calculatedCacheExtent;\n\n  /// While List in a wrapping container, eg. ListView\uff0cthe mainAxisExtent will\n  /// be infinite. This time need to change mainAxisExtent to this value.\n  final double _maxMainAxisExtent = double.maxFinite;\n\n  @override\n  void performLayout() {\n    if (center == null) {\n      assert(firstChild == null);\n      _minScrollExtent = 0.0;\n      _maxScrollExtent = 0.0;\n      _hasVisualOverflow = false;\n      offset.applyContentDimensions(0, 0);\n      return;\n    }\n\n    assert(center!.parent == this);\n\n    final BoxConstraints constraints = this.constraints;\n    if (firstChild == null) {\n      switch (axis) {\n        case Axis.vertical:\n          assert(constraints.hasBoundedWidth);\n          size = Size(constraints.maxWidth, constraints.minHeight);\n        case Axis.horizontal:\n          assert(constraints.hasBoundedHeight);\n          size = Size(constraints.minWidth, constraints.maxHeight);\n      }\n      offset.applyViewportDimension(0);\n      _maxScrollExtent = 0.0;\n      _shrinkWrapExtent = 0.0;\n      _hasVisualOverflow = false;\n      offset.applyContentDimensions(0, 0);\n      return;\n    }\n\n    double mainAxisExtent;\n    final double crossAxisExtent;\n    switch (axis) {\n      case Axis.vertical:\n        assert(constraints.hasBoundedWidth);\n        mainAxisExtent = constraints.maxHeight;\n        crossAxisExtent = constraints.maxWidth;\n      case Axis.horizontal:\n        assert(constraints.hasBoundedHeight);\n        mainAxisExtent = constraints.maxWidth;\n        crossAxisExtent = constraints.maxHeight;\n    }\n\n    if (mainAxisExtent.isInfinite) {\n      mainAxisExtent = _maxMainAxisExtent;\n    }\n\n    final centerOffsetAdjustment = center!.centerOffsetAdjustment;\n\n    double correction = 0;\n    double effectiveExtent = 0;\n    do {\n      correction = _attemptLayout(\n        mainAxisExtent,\n        crossAxisExtent,\n        offset.pixels + centerOffsetAdjustment,\n      );\n      if (correction != 0.0) {\n        offset.correctBy(correction);\n      } else {\n        switch (axis) {\n          case Axis.vertical:\n            effectiveExtent = constraints.constrainHeight(_shrinkWrapExtent);\n          case Axis.horizontal:\n            effectiveExtent = constraints.constrainWidth(_shrinkWrapExtent);\n        }\n        // *** Difference from [RenderViewport].\n        final top = _minScrollExtent + mainAxisExtent * anchor;\n        final bottom = _maxScrollExtent - mainAxisExtent * (1.0 - anchor);\n\n        final double maxScrollOffset = math.max(math.min(0, top), bottom);\n        final double minScrollOffset = math.min(top, maxScrollOffset);\n\n        final bool didAcceptViewportDimension =\n            offset.applyViewportDimension(effectiveExtent);\n        final bool didAcceptContentDimension =\n            offset.applyContentDimensions(minScrollOffset, maxScrollOffset);\n        if (didAcceptViewportDimension && didAcceptContentDimension) {\n          break;\n        }\n      }\n    } while (int.tryParse(\"1\") == 1);\n    switch (axis) {\n      case Axis.vertical:\n        size =\n            constraints.constrainDimensions(crossAxisExtent, effectiveExtent);\n      case Axis.horizontal:\n        size =\n            constraints.constrainDimensions(effectiveExtent, crossAxisExtent);\n    }\n  }\n\n  double _attemptLayout(\n    double mainAxisExtent,\n    double crossAxisExtent,\n    double correctedOffset,\n  ) {\n    assert(!mainAxisExtent.isNaN);\n    assert(mainAxisExtent >= 0.0);\n    assert(crossAxisExtent.isFinite);\n    assert(crossAxisExtent >= 0.0);\n    assert(correctedOffset.isFinite);\n    _minScrollExtent = 0.0;\n    _maxScrollExtent = 0.0;\n    _hasVisualOverflow = false;\n    _shrinkWrapExtent = 0.0;\n\n    // centerOffset is the offset from the leading edge of the RenderViewport\n    // to the zero scroll offset (the line between the forward slivers and the\n    // reverse slivers).\n    final centerOffset = mainAxisExtent * anchor - correctedOffset;\n    final reverseDirectionRemainingPaintExtent =\n        centerOffset.clamp(0.0, mainAxisExtent);\n    final forwardDirectionRemainingPaintExtent =\n        (mainAxisExtent - centerOffset).clamp(0.0, mainAxisExtent);\n\n    switch (cacheExtentStyle) {\n      case CacheExtentStyle.pixel:\n        _calculatedCacheExtent = cacheExtent;\n      case CacheExtentStyle.viewport:\n        _calculatedCacheExtent = mainAxisExtent * cacheExtent!;\n    }\n\n    final fullCacheExtent = mainAxisExtent + 2 * _calculatedCacheExtent!;\n    final centerCacheOffset = centerOffset + _calculatedCacheExtent!;\n    final reverseDirectionRemainingCacheExtent =\n        centerCacheOffset.clamp(0.0, fullCacheExtent);\n    final forwardDirectionRemainingCacheExtent =\n        (fullCacheExtent - centerCacheOffset).clamp(0.0, fullCacheExtent);\n\n    final leadingNegativeChild = childBefore(center!);\n\n    if (leadingNegativeChild != null) {\n      // negative scroll offsets\n      final result = layoutChildSequence(\n        child: leadingNegativeChild,\n        scrollOffset: math.max(mainAxisExtent, centerOffset) - mainAxisExtent,\n        overlap: 0,\n        layoutOffset: forwardDirectionRemainingPaintExtent,\n        remainingPaintExtent: reverseDirectionRemainingPaintExtent,\n        mainAxisExtent: mainAxisExtent,\n        crossAxisExtent: crossAxisExtent,\n        growthDirection: GrowthDirection.reverse,\n        advance: childBefore,\n        remainingCacheExtent: reverseDirectionRemainingCacheExtent,\n        cacheOrigin: (mainAxisExtent - centerOffset)\n            .clamp(-_calculatedCacheExtent!, 0.0),\n      );\n      if (result != 0.0) return -result;\n    }\n\n    // positive scroll offsets\n    return layoutChildSequence(\n      child: center,\n      scrollOffset: math.max(0, -centerOffset),\n      overlap: leadingNegativeChild == null ? math.min(0, -centerOffset) : 0.0,\n      layoutOffset: centerOffset >= mainAxisExtent\n          ? centerOffset\n          : reverseDirectionRemainingPaintExtent,\n      remainingPaintExtent: forwardDirectionRemainingPaintExtent,\n      mainAxisExtent: mainAxisExtent,\n      crossAxisExtent: crossAxisExtent,\n      growthDirection: GrowthDirection.forward,\n      advance: childAfter,\n      remainingCacheExtent: forwardDirectionRemainingCacheExtent,\n      cacheOrigin: centerOffset.clamp(-_calculatedCacheExtent!, 0.0),\n    );\n  }\n\n  @override\n  bool get hasVisualOverflow => _hasVisualOverflow;\n\n  @override\n  void updateOutOfBandData(\n    GrowthDirection growthDirection,\n    SliverGeometry childLayoutGeometry,\n  ) {\n    switch (growthDirection) {\n      case GrowthDirection.forward:\n        _maxScrollExtent += childLayoutGeometry.scrollExtent;\n      case GrowthDirection.reverse:\n        _minScrollExtent -= childLayoutGeometry.scrollExtent;\n    }\n    if (childLayoutGeometry.hasVisualOverflow) _hasVisualOverflow = true;\n    _shrinkWrapExtent += childLayoutGeometry.maxPaintExtent;\n    growSize = _shrinkWrapExtent;\n  }\n\n  @override\n  String labelForChild(int index) => 'child $index';\n}"}, {"structure_type": "function", "name": "slivers.where", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/scrollable_positioned_list/src/wrapping.dart", "file_name": "wrapping.dart", "line": 404, "line_from": 404, "line_to": 551, "snippet": "              slivers.where((Widget child) => child.key == center).length == 1,\n        ),\n        assert(\n          cacheExtentStyle != CacheExtentStyle.viewport || cacheExtent != null,\n        ),\n        super(children: slivers);\n\n  /// The direction in which the [offset]'s [ViewportOffset.pixels] increases.\n  ///\n  /// For example, if the [axisDirection] is [AxisDirection.down], a scroll\n  /// offset of zero is at the top of the viewport and increases towards the\n  /// bottom of the viewport.\n  final AxisDirection axisDirection;\n\n  /// The direction in which child should be laid out in the cross axis.\n  ///\n  /// If the [axisDirection] is [AxisDirection.down] or [AxisDirection.up], this\n  /// property defaults to [AxisDirection.left] if the ambient [Directionality]\n  /// is [TextDirection.rtl] and [AxisDirection.right] if the ambient\n  /// [Directionality] is [TextDirection.ltr].\n  ///\n  /// If the [axisDirection] is [AxisDirection.left] or [AxisDirection.right],\n  /// this property defaults to [AxisDirection.down].\n  final AxisDirection? crossAxisDirection;\n\n  /// The relative position of the zero scroll offset.\n  ///\n  /// For example, if [anchor] is 0.5 and the [axisDirection] is\n  /// [AxisDirection.down] or [AxisDirection.up], then the zero scroll offset is\n  /// vertically centered within the viewport. If the [anchor] is 1.0, and the\n  /// [axisDirection] is [AxisDirection.right], then the zero scroll offset is\n  /// on the left edge of the viewport.\n  final double anchor;\n\n  /// Which part of the content inside the viewport should be visible.\n  ///\n  /// The [ViewportOffset.pixels] value determines the scroll offset that the\n  /// viewport uses to select which part of its content to display. As the user\n  /// scrolls the viewport, this value changes, which changes the content that\n  /// is displayed.\n  ///\n  /// Typically a [ScrollPosition].\n  final ViewportOffset offset;\n\n  /// The first child in the [GrowthDirection.forward] growth direction.\n  ///\n  /// Children after [center] will be placed in the [axisDirection] relative to\n  /// the [center]. Children before [center] will be placed in the opposite of\n  /// the [axisDirection] relative to the [center].\n  ///\n  /// The [center] must be the key of a child of the viewport.\n  final Key? center;\n\n  /// {@macro flutter.rendering.RenderViewportBase.cacheExtent}\n  ///\n  /// See also:\n  ///\n  ///  * [cacheExtentStyle], which controls the units of the [cacheExtent].\n  final double? cacheExtent;\n\n  /// {@macro flutter.rendering.RenderViewportBase.cacheExtentStyle}\n  final CacheExtentStyle cacheExtentStyle;\n\n  /// {@macro flutter.material.Material.clipBehavior}\n  ///\n  /// Defaults to [Clip.hardEdge].\n  final Clip clipBehavior;\n\n  /// Given a [BuildContext] and an [AxisDirection], determine the correct cross\n  /// axis direction.\n  ///\n  /// This depends on the [Directionality] if the `axisDirection` is vertical;\n  /// otherwise, the default cross axis direction is downwards.\n  static AxisDirection getDefaultCrossAxisDirection(\n    BuildContext context,\n    AxisDirection axisDirection,\n  ) {\n    switch (axisDirection) {\n      case AxisDirection.up:\n        assert(\n          debugCheckHasDirectionality(\n            context,\n            why:\n                \"to determine the cross-axis direction when the viewport has an 'up' axisDirection\",\n            alternative:\n                \"Alternatively, consider specifying the 'crossAxisDirection' argument on the Viewport.\",\n          ),\n        );\n        return textDirectionToAxisDirection(Directionality.of(context));\n      case AxisDirection.right:\n        return AxisDirection.down;\n      case AxisDirection.down:\n        assert(\n          debugCheckHasDirectionality(\n            context,\n            why:\n                \"to determine the cross-axis direction when the viewport has a 'down' axisDirection\",\n            alternative:\n                \"Alternatively, consider specifying the 'crossAxisDirection' argument on the Viewport.\",\n          ),\n        );\n        return textDirectionToAxisDirection(Directionality.of(context));\n      case AxisDirection.left:\n        return AxisDirection.down;\n    }\n  }\n\n  @override\n  CustomRenderViewport createRenderObject(BuildContext context);\n\n  @override\n  ViewportElement createElement() => ViewportElement(this);\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties\n      ..add(EnumProperty<AxisDirection>('axisDirection', axisDirection))\n      ..add(\n        EnumProperty<AxisDirection>(\n          'crossAxisDirection',\n          crossAxisDirection,\n          defaultValue: null,\n        ),\n      )\n      ..add(DoubleProperty('anchor', anchor))\n      ..add(DiagnosticsProperty<ViewportOffset>('offset', offset));\n    if (center != null) {\n      properties.add(DiagnosticsProperty<Key>('center', center));\n    } else if (children.isNotEmpty && children.first.key != null) {\n      properties.add(\n        DiagnosticsProperty<Key>(\n          'center',\n          children.first.key,\n          tooltip: 'implicit',\n        ),\n      );\n    }\n    properties\n      ..add(DiagnosticsProperty<double>('cacheExtent', cacheExtent))\n      ..add(\n        DiagnosticsProperty<CacheExtentStyle>(\n          'cacheExtentStyle',\n          cacheExtentStyle,\n        ),\n      );\n  }\n}"}, {"structure_type": "function", "name": "mount", "docstring": "", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/scrollable_positioned_list/src/wrapping.dart", "file_name": "wrapping.dart", "line": 565, "line_from": 565, "line_to": 612, "snippet": "  void mount(Element? parent, Object? newSlot) {\n    super.mount(parent, newSlot);\n    _updateCenter();\n  }\n\n  @override\n  void update(MultiChildRenderObjectWidget newWidget) {\n    super.update(newWidget);\n    _updateCenter();\n  }\n\n  void _updateCenter() {\n    if (widget.center != null) {\n      renderObject.center = children\n          .singleWhere((Element element) => element.widget.key == widget.center)\n          .renderObject as RenderSliver?;\n    } else if (children.isNotEmpty) {\n      renderObject.center = children.first.renderObject as RenderSliver?;\n    } else {\n      renderObject.center = null;\n    }\n  }\n\n  @override\n  void debugVisitOnstageChildren(ElementVisitor visitor) {\n    children.where((Element e) {\n      final RenderSliver renderSliver = e.renderObject! as RenderSliver;\n      return renderSliver.geometry!.visible;\n    }).forEach(visitor);\n  }\n}\n\nclass CustomSliverPhysicalContainerParentData\n    extends SliverPhysicalContainerParentData {\n  /// The position of the child relative to the zero scroll offset.\n  ///\n  /// The number of pixels from from the zero scroll offset of the parent sliver\n  /// (the line at which its [SliverConstraints.scrollOffset] is zero) to the\n  /// side of the child closest to that offset. A [layoutOffset] can be null\n  /// when it cannot be determined. The value will be set after layout.\n  ///\n  /// In a typical list, this does not change as the parent is scrolled.\n  ///\n  /// Defaults to null.\n  double? layoutOffset;\n\n  GrowthDirection? growthDirection;\n}"}, {"structure_type": "function", "name": "child;", "docstring": "The widget below this widget in the tree.", "module": "src", "file_path": "al-hadith-flutter/lib/core/external_libs/scrollable_positioned_list/src/post_mount_callback.dart", "file_name": "post_mount_callback.dart", "line": 13, "line_from": 13, "line_to": 34, "snippet": "  final Widget child;\n\n  /// Callback to call when the element for this widget is mounted.\n  final void Function()? callback;\n\n  @override\n  StatelessElement createElement() => _PostMountCallbackElement(this);\n\n  @override\n  Widget build(BuildContext context) => child;\n}\n\nclass _PostMountCallbackElement extends StatelessElement {\n  _PostMountCallbackElement(PostMountCallback super.widget);\n\n  @override\n  void mount(Element? parent, Object? newSlot) {\n    super.mount(parent, newSlot);\n    final PostMountCallback postMountCallback = widget as PostMountCallback;\n    postMountCallback.callback?.call();\n  }\n}"}, {"structure_type": "function", "name": "toggleLoading", "docstring": "", "module": "base", "file_path": "al-hadith-flutter/lib/core/base/base_presenter.dart", "file_name": "base_presenter.dart", "line": 12, "line_from": 12, "line_to": 83, "snippet": "  Future<void> toggleLoading({required bool loading});\n\n  Future<void> addUserMessage(String message);\n\n  @protected\n  Future<void> handleStreamEvents<T>({\n    required Stream<Either<String, T>> stream,\n    required void Function(T) onData,\n    required StreamSubscription<Either<String, T>>? subscription,\n  }) async {\n    await subscription?.cancel();\n    subscription = stream.listen(\n      (result) => result.fold(addUserMessage, onData),\n      onError: (Object e) => addUserMessage(e.toString()),\n      onDone: () async => subscription?.cancel(),\n    );\n  }\n\n  @protected\n  Future<void> executeTaskWithLoading(FutureOr<void> Function() task) async {\n    await toggleLoading(loading: true);\n    await task();\n    await toggleLoading(loading: false);\n  }\n\n  @protected\n  Future<void> executeMessageOnlyUseCase(\n    FutureOr<Either<String, String>> Function() task, {\n    bool showMessage = true,\n    VoidCallback? onSuccess,\n  }) async {\n    await toggleLoading(loading: true);\n    final Either<String, String> result = await task();\n    await result.fold(addUserMessage, (message) async {\n      if (showMessage) await addUserMessage(message);\n      onSuccess?.call();\n    });\n    await toggleLoading(loading: false);\n  }\n\n  @protected\n  Future<void> parseDataFromEitherWithUserMessage<T>({\n    required FutureOr<Either<String, T>> Function() task,\n    required void Function(T) onDataLoaded,\n    bool showLoading = false,\n    T? valueOnError,\n  }) async {\n    if (showLoading) await toggleLoading(loading: true);\n    final Either<String, T> result = await task();\n    result.fold(\n      (message) {\n        addUserMessage(message);\n        if (valueOnError != null) onDataLoaded(valueOnError);\n      },\n      onDataLoaded,\n    );\n    if (showLoading) await toggleLoading(loading: false);\n  }\n\n  @protected\n  Future<T?> mapDataFromEitherWithUserMessage<T>({\n    required FutureOr<Either<String, T>> Function() task,\n    bool showLoading = false,\n  }) async {\n    T? data;\n    if (showLoading) await toggleLoading(loading: true);\n    final Either<String, T> result = await task();\n    if (showLoading) await toggleLoading(loading: false);\n    result.fold(addUserMessage, (d) => data = d);\n    return data;\n  }\n}"}, {"structure_type": "function", "name": "runtimeType.toString", "docstring": "", "module": "utility", "file_path": "al-hadith-flutter/lib/core/utility/logger_utility.dart", "file_name": "logger_utility.dart", "line": 102, "line_from": 102, "line_to": 134, "snippet": "    // to avoid runtimeType.toString() in release mode\n    // as this can hamper performance, we use showLog\n    // to check if we are in debug mode or not\n    if (!showLog) return;\n    // we are logging only in debug mode, so the performance hit can be ignored\n    // ignore: no_runtimeType_toString\n    logErrorStatic(exception, runtimeType.toString());\n  }\n\n  /// Logs a debug message with the provided [object].\n  ///\n  /// If [showLog] is false, nothing will be logged.\n  ///\n  /// Example usage:\n  ///\n  /// ```dart\n  ///\n  /// this.logDebug('This is a debug message');\n  ///\n  /// [MyClass] [DEBUG] - 2023-04-08 11:30:00\n  /// This is a debug message\n  ///\n  /// ```\n  ///\n  void logDebug(Object object) {\n    // to avoid runtimeType.toString() in release mode\n    // as this can hamper performance, we use showLog\n    // to check if we are in debug mode or not\n    if (!showLog) return;\n    // we are logging only in debug mode, so the performance hit can be ignored\n    // ignore: no_runtimeType_toString\n    logDebugStatic(object, runtimeType.toString());\n  }"}, {"structure_type": "function", "name": "setUp", "docstring": "", "module": "utility", "file_path": "al-hadith-flutter/lib/core/utility/hadith_screen.dart", "file_name": "hadith_screen.dart", "line": 42, "line_from": 42, "line_to": 280, "snippet": "  static void setUp(BuildContext context) {\n    final Size size = MediaQuery.sizeOf(context);\n    _height = size.height;\n    _width = size.width;\n    _resetIfInvalid();\n  }\n\n  static double? _width;\n  static double? _height;\n\n  static Size get _size => MediaQuery.sizeOf(AlHadithApp.globalContext);\n\n  static double get width {\n    _width ??= _size.width;\n    return _width!;\n  }\n\n  static double get height {\n    _height ??= _size.height;\n    return _height!;\n  }\n\n  static void _resetIfInvalid() {\n    if (_width! < 10 || _height! < 10) {\n      logErrorStatic(\n        'HadithScreen size not initialized. Please initialize HadithScreen and try again.',\n        \"hadith_screen\",\n      );\n      _width = null;\n      _height = null;\n    }\n  }\n}\n\nextension HadithScreenWidth on Widget {\n  static double? _onePercentWidth;\n\n  double get onePercentWidth {\n    const double onePercent = 0.01;\n    _onePercentWidth ??= HadithScreen.width * onePercent;\n    return _onePercentWidth!;\n  }\n\n  static double? _twoPercentWidth;\n\n  double get twoPercentWidth {\n    const double twoPercent = 0.02;\n    _twoPercentWidth ??= HadithScreen.width * twoPercent;\n    return _twoPercentWidth!;\n  }\n\n  static double? _threePercentWidth;\n\n  double get threePercentWidth {\n    const double threePercent = 0.03;\n    _threePercentWidth ??= HadithScreen.width * threePercent;\n    return _threePercentWidth!;\n  }\n\n  static double? _fourPercentWidth;\n\n  double get fourPercentWidth {\n    _fourPercentWidth ??= 4.percentWidth;\n    return _fourPercentWidth!;\n  }\n\n  static double? _fivePercentWidth;\n\n  double get fivePercentWidth {\n    _fivePercentWidth ??= 5.percentWidth;\n    return _fivePercentWidth!;\n  }\n\n  static double? _sixPercentWidth;\n\n  double get sixPercentWidth {\n    const double sixPercent = 0.06;\n    _sixPercentWidth ??= HadithScreen.width * sixPercent;\n    return _sixPercentWidth!;\n  }\n\n  static double? _sevenPercentWidth;\n\n  double get sevenPercentWidth {\n    const double sevenPercent = 0.07;\n    _sevenPercentWidth ??= HadithScreen.width * sevenPercent;\n    return _sevenPercentWidth!;\n  }\n\n  static double? _eightPercentWidth;\n\n  double get eightPercentWidth {\n    const double eightPercent = 0.08;\n    _eightPercentWidth ??= HadithScreen.width * eightPercent;\n    return _eightPercentWidth!;\n  }\n\n  static double? _tenPercentWidth;\n\n  double get tenPercentWidth {\n    const double tenPercentWidth = 0.10;\n    _tenPercentWidth ??= HadithScreen.width * tenPercentWidth;\n    return _tenPercentWidth!;\n  }\n\n  static double? _fortyPercentWidth;\n\n  double get fortyPercentWidth {\n    const double fortyPercent = 0.40;\n    _fortyPercentWidth ??= HadithScreen.width * fortyPercent;\n    return _fortyPercentWidth!;\n  }\n\n  static double? _thirtyPercentWidth;\n\n  double get thirtyPercentWidth {\n    const double thirtyPercentWidth = 0.32;\n    _thirtyPercentWidth ??= HadithScreen.width * thirtyPercentWidth;\n    return _thirtyPercentWidth!;\n  }\n\n  static double? _fourtyPercentWidth;\n\n  double get fourtyPercentWidth {\n    const double fourtyPercentWidth = 0.40;\n    _fourtyPercentWidth ??= HadithScreen.width * fourtyPercentWidth;\n    return _fourtyPercentWidth!;\n  }\n\n  static double? _sixtySixPercentWidth;\n\n  double get sixtySixPercentWidth {\n    _sixtySixPercentWidth ??= 66.percentWidth;\n    return _sixtySixPercentWidth!;\n  }\n\n  static double? _fiftyFivePercentWidth;\n\n  double get fiftyFivePercentWidth {\n    _fiftyFivePercentWidth ??= 55.percentWidth;\n    return _fiftyFivePercentWidth!;\n  }\n\n  static double? _seventyPercentWidth;\n\n  double get seventyPercentWidth {\n    const double seventyPercent = 0.70;\n    _seventyPercentWidth ??= HadithScreen.width * seventyPercent;\n    return _seventyPercentWidth!;\n  }\n\n  static double? _tweentyEightPercentWidth;\n\n  double get tweentyEightPercentWidth {\n    const double tweentyEightPercentWidth = 0.28;\n    _tweentyEightPercentWidth ??= HadithScreen.width * tweentyEightPercentWidth;\n    return _tweentyEightPercentWidth!;\n  }\n\n  static double? _twentyPercentWidth;\n\n  double get twentyPercentWidth {\n    const double twentyPercentWidth = 0.20;\n    _twentyPercentWidth ??= HadithScreen.width * twentyPercentWidth;\n    return _twentyPercentWidth!;\n  }\n\n  static double? _twentyFivePercentWidth;\n\n  double get twentyFivePercentWidth {\n    const double twentyFivePercentWidth = 0.25;\n    _twentyFivePercentWidth ??= HadithScreen.width * twentyFivePercentWidth;\n    return _twentyFivePercentWidth!;\n  }\n\n  static double? _twentySixPercentWidth;\n\n  double get twentySixPercentWidth {\n    const double twentySixPercentWidth = 0.26;\n    _twentySixPercentWidth ??= HadithScreen.width * twentySixPercentWidth;\n    return _twentySixPercentWidth!;\n  }\n\n  static double? _twentyThreePercentWidth;\n\n  double get twentyThreePercentWidth {\n    const double twentyThreePercentWidth = 0.23;\n    _twentyThreePercentWidth ??= HadithScreen.width * twentyThreePercentWidth;\n    return _twentyThreePercentWidth!;\n  }\n\n  static double? _twentyPercentHeight;\n\n  double get twentyPercentHeight {\n    const double twentyPercent = 0.20;\n    _twentyPercentHeight ??= HadithScreen.height * twentyPercent;\n    return _twentyPercentHeight!;\n  }\n\n  static double? _tenPercentHeight;\n\n  double get tenPercentHeight {\n    const double tenPercentHeight = 0.10;\n    _tenPercentHeight ??= HadithScreen.height * tenPercentHeight;\n    return _tenPercentHeight!;\n  }\n\n  static double? _twelvePercentHeight;\n\n  double get twelvePercentHeight {\n    const double twentyPercent = 0.12;\n    _twelvePercentHeight ??= HadithScreen.height * twentyPercent;\n    return _twelvePercentHeight!;\n  }\n\n  static double? _fourteenPercentHeight;\n\n  double get fourteenPercentHeight {\n    const double fourteenPercentHeight = 0.14;\n    _fourteenPercentHeight ??= HadithScreen.height * fourteenPercentHeight;\n    return _fourteenPercentHeight!;\n  }\n\n  static double? _tweentyPercentHeight;\n\n  double get tweentyPercentHeight {\n    const double tweentyPercentHeight = 0.20;\n    _tweentyPercentHeight ??= HadithScreen.height * tweentyPercentHeight;\n    return _tweentyPercentHeight!;\n  }\n\n  static double? _fiftyPercentHeight;\n\n  double get fiftyPercentHeight {\n    const double fiftyPercentHeight = 0.50;\n    _fiftyPercentHeight ??= HadithScreen.height * fiftyPercentHeight;\n    return _fiftyPercentHeight!;\n  }\n}"}, {"structure_type": "function", "name": "navigatorPush<T>", "docstring": "", "module": "utility", "file_path": "al-hadith-flutter/lib/core/utility/utility.dart", "file_name": "utility.dart", "line": 346, "line_from": 346, "line_to": 411, "snippet": "  Future<T?> navigatorPush<T>(Widget page) async {\n    try {\n      if (!mounted) return null;\n      final CupertinoPageRoute<T> route = CupertinoPageRoute<T>(builder: (context) => page);\n      return Navigator.push<T>(this, route);\n    } catch (e) {\n      logError(\"Failed to navigate to ${e.runtimeType} -> $e\");\n      return null;\n    }\n  }\n\n  Future<T?> navigatorPushReplacement<T>(Widget page) async {\n    try {\n      if (!mounted) return null;\n      final CupertinoPageRoute<T> route = CupertinoPageRoute<T>(builder: (context) => page);\n      return Navigator.pushReplacement(this, route);\n    } catch (e) {\n      logError(\"Failed to navigate to ${e.runtimeType} -> $e\");\n      return null;\n    }\n  }\n\n  Future<T?> showBottomSheetLegacy<T>(Widget bottomSheet) async {\n    return Get.bottomSheet<T>(\n      bottomSheet,\n      isScrollControlled: true,\n      shape: const RoundedRectangleBorder(\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(20),\n          topRight: Radius.circular(20),\n        ),\n      ),\n    );\n  }\n\n  Future<T?> showBottomSheet<T>(Widget bottomSheet) async {\n    if (!mounted) return null;\n    final T? result = await showModalBottomSheet<T>(\n      context: this,\n      builder: (_) => bottomSheet,\n      isScrollControlled: true,\n      enableDrag: false,\n      shape: const RoundedRectangleBorder(\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(20),\n          topRight: Radius.circular(20),\n        ),\n      ),\n    );\n    return result;\n  }\n\n  void navigatorPop<T>({T? result}) {\n    if (!mounted) return;\n    Navigator.pop(this, result);\n  }\n}\n\n// Future<void> changeThemeForLegacy({required bool nightMode}) async {\n//   try {\n//     final ThemeMode themeMode = nightMode ? ThemeMode.dark : ThemeMode.light;\n//     get_x_legacy.Get.changeThemeMode(themeMode);\n//   } catch (e) {\n//     logErrorStatic(e, _fileName);\n//   }\n// }"}, {"structure_type": "function", "name": "getAllHadithBooks", "docstring": "", "module": "repositories", "file_path": "al-hadith-flutter/lib/data/repositories/hadith_book_repository_impl.dart", "file_name": "hadith_book_repository_impl.dart", "line": 13, "line_from": 13, "line_to": 39, "snippet": "  Future<List<BookEntity>> getAllHadithBooks() async {\n    // we are caching the hadith books in the memory, as we may need to access\n    // them again and again in a short period of time. Keeping them in the\n    // memory will reduce the reading time delay\n    if (_hadithBooksCache.isEmpty) {\n      final List<BookEntity> allBooks =\n          await _hadithLocalDataSource.getAllHadithBooks();\n      _hadithBooksCache = allBooks;\n    }\n\n    return _hadithBooksCache;\n  }\n\n  final Map<int, int> _maxHadithIdCache = {};\n\n  @override\n  Future<int> getMaxHadithIdByBook({required int bookId}) async {\n    if (_maxHadithIdCache.containsKey(bookId)) {\n      return _maxHadithIdCache[bookId]!;\n    }\n\n    final int maxHadithId =\n        await _hadithLocalDataSource.getMaxHadithIdByBook(bookId: bookId);\n    _maxHadithIdCache[bookId] = maxHadithId;\n    return maxHadithId;\n  }\n}"}, {"structure_type": "function", "name": "getHadithByBookAndChapterId", "docstring": "", "module": "repositories", "file_path": "al-hadith-flutter/lib/data/repositories/hadith_repository_impl.dart", "file_name": "hadith_repository_impl.dart", "line": 40, "line_from": 40, "line_to": 411, "snippet": "  Future<List<HadithEntity>> getHadithByBookAndChapterId({\n    required int hadithBookId,\n    required int chapterId,\n    bool withBookmarkIndicator = true,\n  }) async {\n    return _hadithByBookAndChapterIdLock.synchronized(() async {\n      List<HadithEntity> hadithList = [];\n      final String cacheKey = \"$hadithBookId-$chapterId\";\n      if (_hadithByBookAndChapterIdCache.containsKey(cacheKey)) {\n        hadithList = _hadithByBookAndChapterIdCache[cacheKey]!;\n      } else {\n        hadithList =\n            await _hadithLocalDataSource.getHadithListByBookAndChapterId(\n          bookId: hadithBookId,\n          chapterId: chapterId,\n        );\n        _hadithByBookAndChapterIdCache[cacheKey] = hadithList;\n      }\n      if (!withBookmarkIndicator) return hadithList;\n      final List<HadithEntity> bookmarkedHadithList =\n          await _addBookmarkIndicatorToHadithList(hadithList);\n      return bookmarkedHadithList;\n    });\n  }\n\n  final Map<CategoryEntity, List<HadithEntity>> _memoizedHadithByCategory =\n      LruMap(maximumSize: 10);\n\n  @override\n  Future<List<HadithEntity>> getHadithByCategory({\n    required CategoryEntity category,\n    bool withBookmarkIndicator = true,\n  }) async {\n    List<HadithEntity> hadithList;\n\n    if (_memoizedHadithByCategory.containsKey(category)) {\n      hadithList = _memoizedHadithByCategory[category]!;\n    } else {\n      final bool isRootCategory = category.parentId == null;\n\n      if (isRootCategory) {\n        hadithList = await _hadithLocalDataSource.getHadithByCategoryId(\n          categoryId: category.id,\n        );\n      } else {\n        hadithList = await _hadithLocalDataSource.getHadithBySubCategoryId(\n          subCategoryId: category.id,\n        );\n      }\n\n      if (hadithList.isNotEmpty) {\n        _memoizedHadithByCategory[category] = hadithList;\n      }\n    }\n    if (!withBookmarkIndicator) return hadithList;\n    return _addBookmarkIndicatorToHadithList(hadithList);\n  }\n\n  Future<List<HadithEntity>> _addBookmarkIndicatorToHadithList(\n    List<HadithEntity> hadithList,\n  ) async {\n    final Map<int, List<BookmarkEntity>> bookmarks = await _getBookmarks();\n\n    final List<HadithEntity> hadithListModified = hadithList.map(\n      (hadith) {\n        final bool isBookmarked = bookmarks.containsKey(hadith.id);\n        if (!isBookmarked) return hadith;\n        final List<BookmarkEntity> bookmarkList = bookmarks[hadith.id] ?? [];\n        return hadith.copyWith(\n          isBookmarked: isBookmarked,\n          isMultiBookmarked: bookmarkList.length > 1,\n        );\n      },\n    ).toList();\n    return hadithListModified;\n  }\n\n  Future<Map<int, List<BookmarkEntity>>> _getBookmarks() async {\n    final Map<int, List<BookmarkEntity>>? bookmarkMap =\n        await catchAndReturnFuture(\n      () async {\n        final List<BookmarkEntity> bookmarks =\n            await _userDataLocalDataSource.getAllBookmarks();\n        final Map<int, List<BookmarkEntity>> bookmarksGroupedByHadith =\n            groupBy(bookmarks, (bookmark) => bookmark.hadithId);\n        _bookmarks.clear();\n        _bookmarks = bookmarksGroupedByHadith;\n        return bookmarksGroupedByHadith;\n      },\n    );\n    return bookmarkMap ?? _bookmarks;\n  }\n\n  final LruMap<String, List<SectionEntity>>\n      _hadithSectionsByBookAndChapterIdCache = LruMap(maximumSize: 10);\n  final Lock _getHadithSectionsByBookAndChapterIdLock = Lock();\n\n  @override\n  Future<List<SectionEntity>> getHadithSectionsByBookAndChapterId({\n    required int hadithBookId,\n    required int chapterId,\n  }) async {\n    return _getHadithSectionsByBookAndChapterIdLock.synchronized(() async {\n      final String key = \"$hadithBookId-$chapterId\";\n      if (_hadithSectionsByBookAndChapterIdCache.containsKey(key)) {\n        return _hadithSectionsByBookAndChapterIdCache[key] ?? [];\n      }\n      final List<SectionEntity> hadithSectionList =\n          await _hadithLocalDataSource.getHadithSectionsByBookAndChapterId(\n        bookId: hadithBookId,\n        chapterId: chapterId,\n      );\n      _hadithSectionsByBookAndChapterIdCache[key] = hadithSectionList;\n      return hadithSectionList;\n    });\n  }\n\n  final Lock _searchHadithLock = Lock();\n  final LruMap<String, (List<HadithEntity>, int)> _searchHadithCache =\n      LruMap(maximumSize: 5);\n\n  @override\n  Future<(List<HadithEntity>, int)> searchHadith({\n    required String query,\n    required List<BookEntity> bookList,\n    required SearchType searchType,\n  }) async {\n    return _searchHadithLock.synchronized(() async {\n      final String key =\n          \"$searchType-$query-${bookList.map((bk) => bk.id).join(\"-\")}\";\n      if (_searchHadithCache.containsKey(key)) return _searchHadithCache[key]!;\n\n      unawaited(_addToSearchHistory(query));\n      final (hadithList, count) = await _searchLocalDataSource.searchHadith(\n        query: query,\n        bookList: bookList,\n        searchType: searchType,\n      );\n\n      final List<HadithEntity> hadithListModified =\n          await _addBookmarkIndicatorToHadithList(hadithList);\n\n      final (List<HadithEntity>, int) result = (hadithListModified, count);\n      _searchHadithCache[key] = result;\n      return result;\n    });\n  }\n\n  HadithEntity? _inMemoryTodaysHadith;\n\n  @override\n  Future<HadithEntity> getTodaysHadith({DateTime? date}) async {\n\n    final bool isCacheInValid = _inMemoryTodaysHadith == null;\n    \n    if (isCacheInValid) {\n      final HadithEntity hadith =\n          await _hadithLocalDataSource.getSahihHadithByDate(date: date);\n      _inMemoryTodaysHadith = hadith;\n    }\n\n    return _modifyHadithForBookmark(hadith: _inMemoryTodaysHadith!);\n  }\n\n  List<(int, String)> _inMemoryTodaysHadithAsText = [];\n\n  @override\n  Future<List<(int, String)>> getTodaysHadithAsText() async {\n    final bool isCacheInvalid = _inMemoryTodaysHadithAsText.isEmpty;\n\n    if (isCacheInvalid) {\n      final List<HadithEntity> sahihHadithList =\n          await _hadithLocalDataSource.getPresentableHadithList();\n      List<(int, String)> hadithListAsText =\n          await sahihHadithList.toPresentableText();\n      hadithListAsText = hadithListAsText.toList(growable: true)\n        ..removeWhere((hadith) => hadith.$2.isEmpty);\n      _inMemoryTodaysHadithAsText = hadithListAsText;\n    }\n\n    return _inMemoryTodaysHadithAsText;\n  }\n\n  @override\n  Future<HadithEntity> getHadithById({required int hadithId}) async {\n    final HadithEntity hadith =\n        await _hadithLocalDataSource.getSingleHadithById(hadithId: hadithId);\n    final HadithEntity hadithWithBookmark =\n        await _modifyHadithForBookmark(hadith: hadith);\n    return hadithWithBookmark;\n  }\n\n  Future<HadithEntity> _modifyHadithForBookmark({\n    required HadithEntity hadith,\n  }) async {\n    final Map<int, List<BookmarkEntity>> bookmarks = await _getBookmarks();\n    final bool isBookmarked = bookmarks.containsKey(hadith.id);\n    if (!isBookmarked) return hadith;\n    final int bookmarkCount = bookmarks[hadith.id]?.length ?? 0;\n    final HadithEntity hadithWithBookmark = hadith.copyWith(\n      isBookmarked: isBookmarked,\n      isMultiBookmarked: bookmarkCount > 1,\n    );\n    return hadithWithBookmark;\n  }\n\n  @override\n  Future<HadithEntity> getHadithByHadithNumber({\n    required int hadithNumber,\n    required BookEntity selectedBook,\n  }) async {\n    final HadithEntity hadith =\n        await _hadithLocalDataSource.getHadithByHadithNumber(\n      hadithNumber: hadithNumber,\n      selectedBook: selectedBook,\n    );\n    return _modifyHadithForBookmark(hadith: hadith);\n  }\n\n  @override\n  Future<List<HadithEntity>> getHadithListByHadithIdList({\n    required List<int> hadithIdList,\n  }) async {\n    final List<HadithEntity> hadithList = await _hadithLocalDataSource\n        .getHadithListByHadithIdList(hadithIdList: hadithIdList);\n    return _addBookmarkIndicatorToHadithList(hadithList);\n  }\n\n  final Map<int, int> _hadithCountByBookIdMap = {};\n\n  @override\n  Future<int> getHadithCountByBook({required int bookId}) async {\n    if (_hadithCountByBookIdMap.containsKey(bookId)) {\n      return _hadithCountByBookIdMap[bookId] ?? 0;\n    }\n    final int count =\n        await _hadithLocalDataSource.getHadithCountByBook(hadithBookId: bookId);\n    _hadithCountByBookIdMap.putIfAbsent(bookId, () => count);\n    return count;\n  }\n\n  // horizontal\n  @override\n  Future<List<(SectionEntity, HadithEntity)>> getHadithSectionPairByEach({\n    required int bookId,\n    required int chapterId,\n    bool refresh = false,\n  }) async {\n    final List<SectionEntity> sections =\n        await getHadithSectionsByBookAndChapterId(\n      hadithBookId: bookId,\n      chapterId: chapterId,\n    );\n\n    final List<(SectionEntity, HadithEntity)> pairedSectionHadith =\n        await _zipSectionAndAllHadith(\n      bookId: bookId,\n      chapterId: chapterId,\n      sections: sections,\n    );\n\n    return pairedSectionHadith;\n  }\n\n  @override\n  Future<List<(SectionEntity, HadithEntity)>> getHadithSectionPairByGroup({\n    required int bookId,\n    required int chapterId,\n    bool refresh = false,\n  }) async {\n    final List<SectionEntity> sections =\n        await getHadithSectionsByBookAndChapterId(\n      hadithBookId: bookId,\n      chapterId: chapterId,\n    );\n\n    final List<(SectionEntity, HadithEntity)> pairedSectionHadith =\n        await _zipSectionsAndFirstHadith(\n      bookId: bookId,\n      chapterId: chapterId,\n      sections: sections,\n    );\n\n    return pairedSectionHadith;\n  }\n\n  late final Lock _zipSectionsAndFirstHadithLock = Lock();\n  late final LruMap<String, List<(SectionEntity, HadithEntity)>>\n      _zipSectionsAndFirstHadithMap = LruMap(maximumSize: 10);\n\n  Future<List<(SectionEntity, HadithEntity)>> _zipSectionsAndFirstHadith({\n    required int bookId,\n    required int chapterId,\n    required List<SectionEntity> sections,\n    bool refresh = false,\n  }) async {\n    return _zipSectionsAndFirstHadithLock.synchronized(() async {\n      final String key = \"$bookId-$chapterId\";\n      if (_zipSectionsAndFirstHadithMap.containsKey(key) && !refresh) {\n        return _zipSectionsAndFirstHadithMap[key]!;\n      }\n\n      final List<HadithEntity> hadithList = await getHadithByBookAndChapterId(\n        hadithBookId: bookId,\n        chapterId: chapterId,\n      );\n\n      final Pair<List<SectionEntity>, List<HadithEntity>> param =\n          Pair(sections, hadithList);\n      final List<(SectionEntity, HadithEntity)> pairedSectionHadith =\n          await compute(_zipSectionsAndFirstHadithOnlyStatic, param);\n\n      // _zipSectionsAndFirstHadithMap[key] = pairedSectionHadith;\n      return pairedSectionHadith;\n    });\n  }\n\n  late final Lock _zipSectionAndAllHadithLock = Lock();\n  late final LruMap<String, List<(SectionEntity, HadithEntity)>>\n      _zipSectionAndAllHadithMap = LruMap(maximumSize: 10);\n\n  Future<List<(SectionEntity, HadithEntity)>> _zipSectionAndAllHadith({\n    required int bookId,\n    required int chapterId,\n    required List<SectionEntity> sections,\n    bool refresh = false,\n  }) async {\n    return _zipSectionAndAllHadithLock.synchronized(() async {\n      final String key = \"$bookId-$chapterId\";\n      if (_zipSectionAndAllHadithMap.containsKey(key) && !refresh) {\n        return _zipSectionAndAllHadithMap[key] ?? [];\n      }\n\n      final List<HadithEntity> hadithList = await getHadithByBookAndChapterId(\n        hadithBookId: bookId,\n        chapterId: chapterId,\n      );\n\n      final (List<SectionEntity>, List<HadithEntity>) param =\n          (sections, hadithList);\n      final List<(SectionEntity, HadithEntity)> result =\n          await compute(_zipEachHadithWith, param);\n\n      // _zipSectionAndAllHadithMap[key] = result;\n      return result;\n    });\n  }\n\n  List<(int, String)> _searchHistories = [];\n\n  Future<void> _addToSearchHistory(String query) async {\n    final currentQueryRecord =\n        _searchHistories.firstWhereOrNull((qr) => qr.$2 == query);\n    if (currentQueryRecord != null) return;\n    if (_searchHistories.length >= 10) _searchHistories.removeLast();\n\n    final int currentTimeInMilli = DateTime.now().millisecondsSinceEpoch;\n    _searchHistories.add((currentTimeInMilli, query));\n    await _hadithLocalDataSource.saveSearchHistories(\n      searchHistories: _searchHistories,\n    );\n    _searchHistories = await _hadithLocalDataSource.getSearchHistories();\n  }\n\n  @override\n  Future<List<String>> getSearchHistories() async {\n    if (_searchHistories.isEmpty) {\n      _searchHistories = await _hadithLocalDataSource.getSearchHistories();\n    }\n    return _searchHistories.map((qr) => qr.$2).toList();\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "repositories", "file_path": "al-hadith-flutter/lib/data/repositories/info_repository_impl.dart", "file_name": "info_repository_impl.dart", "line": 42, "line_from": 42, "line_to": 66, "snippet": "    required void Function(PromotionalMessageEntity?) onMessage,\n  }) async {\n    await _infoRemoteDataSource.getPromotionalMessage(\n      onMessage: (promotionalMessage) async {\n        // Checks if the promotional message should be published\n        final bool shouldPublish = await _infoLocalDataSource\n            .shouldPublishPromotionalMessage(notification: promotionalMessage);\n\n        // If the promotional message should not be published, the onNotification\n        // callback is called with null to indicate that the message should not\n        // be displayed to the user.\n        if (!shouldPublish) {\n          onMessage(null);\n          return;\n        }\n\n        notification = promotionalMessage;\n\n        // If the promotional message should be published, the message ID is\n        // saved locally as shown, and the onNotification callback is called\n        // with the notification payload to display the message.\n        onMessage(promotionalMessage);\n      },\n    );\n  }"}, {"structure_type": "function", "name": "getAllHadithBooks", "docstring": "", "module": "data_sources", "file_path": "al-hadith-flutter/lib/data/data_sources/hadith_local_data_source.dart", "file_name": "hadith_local_data_source.dart", "line": 29, "line_from": 29, "line_to": 308, "snippet": "  Future<List<BookEntity>> getAllHadithBooks() async {\n    if (_bookCache.isNotEmpty) return _bookCache.values.toList();\n\n    final List<BookDto> bookDtoList = await _hadithDatabase.hadithBooks;\n    final List<BookEntity> hadithBooks = await bookDtoList.toHadithBooks();\n\n    for (final BookEntity book in hadithBooks) {\n      _bookCache[book.id] = book.removeDescription();\n    }\n\n    return hadithBooks;\n  }\n\n  Future<HadithEntity> getHadithByHadithAndBookId({\n    required int hadithId,\n  }) async {\n    final HadithDto hadithDto = await _hadithDatabase.getHadithByHadithId(hadithId: hadithId);\n    final HadithEntity hadith = hadithDto.toHadith();\n    return hadith;\n  }\n\n  Future<HadithEntity> getSahihHadithByHadithId({\n    required int hadithId,\n  }) async {\n    HadithDto? hadithDto = await _hadithDatabase.getSahihHadithByHadithId(hadithId: hadithId);\n    if (hadithDto != null) {\n      final HadithEntity hadith = hadithDto.toHadith();\n      return hadith;\n    }\n\n    // if we failed to find the hadith in sahih collection,\n    // we will try to show any sahih hadith\n    final List<HadithDto> hadithDtoList = await _hadithDatabase.getAnySahihHadith();\n    final int randomHadithIndex = Random().nextInt(hadithDtoList.length);\n    hadithDto = hadithDtoList[randomHadithIndex];\n    final HadithEntity hadith = hadithDto.toHadith();\n    return hadith;\n  }\n\n  Future<List<ChapterEntity>> getAllChapters() async {\n    final List<ChapterDto> chapterDtoList = await _hadithDatabase.allChapters;\n    final List<ChapterEntity> chapters = await chapterDtoList.toHadithChapters();\n    return chapters;\n  }\n\n  Future<List<ChapterEntity>> getChaptersByBook({\n    required BookEntity book,\n  }) async {\n    logDebug(book.name);\n    final List<ChapterDto> chapterDtoList = await _hadithDatabase.getChaptersByBookId(book.id);\n    final List<ChapterEntity> chapters = await chapterDtoList.toHadithChapters();\n    return chapters;\n  }\n\n  Future<List<HadithEntity>> getHadithListByBookAndChapterId({\n    required int bookId,\n    required int chapterId,\n  }) async {\n    final List<HadithDto> hadithDtoList =\n        await _hadithDatabase.getHadithByChapterId(chapterId: chapterId, bookId: bookId);\n    final List<HadithEntity> hadithList = await hadithDtoList.toHadithList(\n      books: await _bookListCache,\n    );\n    return hadithList;\n  }\n\n  Future<List<BookEntity>> get _bookListCache async {\n    await getAllHadithBooks();\n    return _bookCache.values.toList();\n  }\n\n  Future<List<SectionEntity>> getHadithSectionsByBookAndChapterId({\n    required int bookId,\n    required int chapterId,\n  }) async {\n    final List<SectionDto> sectionDtoList =\n        await _hadithDatabase.getSectionByBookAndChapterId(chapterId: chapterId, bookId: bookId);\n    final List<SectionEntity> sectionList = await sectionDtoList.toHadithSectionEntities();\n    return sectionList;\n  }\n\n  Future<List<HadithEntity>> _fillUpHadithEntitiesWithCorrectData({\n    required List<HadithEntity> hadithList,\n    required List<BookmarkDto> bookmarks,\n  }) async {\n    final Map<Pair<int, int>, bool> bookmarkMap = {\n      for (final BookmarkDto bk in bookmarks) Pair(bk.hadithId, bk.bookId): true,\n    };\n\n    final List<HadithEntity> filledHadithList = hadithList.map((hadith) {\n      final isBookmarked = bookmarkMap[Pair(hadith.hadithId, hadith.bookId)] ?? false;\n      return hadith.copyWith(isBookmarked: isBookmarked);\n    }).toList();\n\n    return filledHadithList;\n  }\n\n  Future<HadithEntity> _fillUpHadithEntity({\n    required HadithEntity hadith,\n    required bool isBookmarked,\n  }) async {\n    return hadith.copyWith(\n      isBookmarked: isBookmarked,\n    );\n  }\n\n  Future<HadithEntity> getSingleHadithById({required int hadithId}) async {\n    final HadithDto? hadithDto = await _hadithDatabase.getHadithById(hadithId);\n    if (hadithDto == null) return HadithEntity.empty();\n    final HadithEntity hadithEntity = hadithDto.toHadith().copyWith(book: _bookCache[hadithDto.bookId]);\n    return hadithEntity;\n  }\n\n  Future<HadithEntity> getSahihHadithByDate({DateTime? date}) async {\n    final HadithDto? hadithDto = await _hadithDatabase.getRandomHadith();\n\n    if (hadithDto == null) return HadithEntity.empty();\n\n    final HadithEntity hadithEntity = hadithDto.toHadith().copyWith(book: _bookCache[hadithDto.bookId]);\n    return hadithEntity;\n  }\n\n  static const int presentableHadithCharLimit = 200;\n\n  Future<List<HadithEntity>> getPresentableHadithList() async {\n    final List<int> eligibleBookIdList = [21, 28, 27];\n    final List<HadithDto> sahihHadithDtoList = await _hadithDatabase.getHadithFromEligibleBooks(\n      bookIdList: eligibleBookIdList,\n      charLimit: presentableHadithCharLimit,\n    );\n    final List<HadithEntity> sahihHadithList = await sahihHadithDtoList.toHadithList(books: await _bookListCache);\n    return sahihHadithList.toList();\n  }\n\n  Future<List<HadithEntity>> getHadithByCategoryId({\n    required int categoryId,\n  }) async {\n    final List<HadithForCategoryDto> hadithForCategoryDtoList =\n        await _hadithDatabase.getHadithIdsByCategory(categoryId: categoryId);\n    final List<int> hadithIdList = hadithForCategoryDtoList.map((h) => h.hadithBn).toList();\n    final List<int> bookIdList = hadithForCategoryDtoList.map((h) => h.bookId).toList();\n    final List<HadithDto> hadithDtoList =\n        await _hadithDatabase.getHadithListByHadithAndBookId(hadithIdList, bookIdList);\n    final List<HadithEntity> hadithList = await hadithDtoList.toHadithList(\n      books: await _bookListCache,\n    );\n    final List<BookmarkDto> bookmarks = await _hadithDatabase.allBookmarks;\n    return _fillUpHadithEntitiesWithCorrectData(\n      hadithList: hadithList,\n      bookmarks: bookmarks,\n    );\n  }\n\n  Future<List<HadithEntity>> getHadithBySubCategoryId({\n    required int subCategoryId,\n  }) async {\n    final List<HadithEntity>? hadithList = await catchAndReturnFuture(() async {\n      final List<HadithForCategoryDto> hadithForCategoryDtoList = await _hadithDatabase.getHadithIdsBySubCategory(\n        subCategoryId: subCategoryId,\n      );\n\n      final List<HadithDto> hadithDtoList = List.empty(growable: true);\n\n      await Future.forEach(hadithForCategoryDtoList, (categoryDto) async {\n        final int bookId = categoryDto.bookId;\n        final int hadithId = categoryDto.hadithBn;\n        final HadithDto? hadithDto =\n            await _hadithDatabase.getHadithByBookAndHadithId(bookId: bookId, hadithId: hadithId);\n        if (hadithDto != null) hadithDtoList.add(hadithDto);\n      });\n\n      final List<HadithEntity> hadithList = await hadithDtoList.toHadithList(books: await _bookListCache);\n      return hadithList;\n    });\n    return hadithList ?? [];\n  }\n\n  Future<int> getMaxHadithIdByBook({required int bookId}) async {\n    final int? maxHadithId = await _hadithDatabase.getMaxHadithIdForBook(bookId: bookId);\n    return maxHadithId ?? 0;\n  }\n\n  Future<List<CollectorEntity>> getHadithCollectors() async {\n    final List<WritersDto> writerDtoList = await _hadithDatabase.allWriters;\n    final List<CollectorEntity> hadithCollectorList = await writerDtoList.toHadithCollectors();\n    return hadithCollectorList;\n  }\n\n  Future<Map<String, List<CategoryEntity>>> getAllCategories() async {\n    final List<HadithCategoryDto> categoryDtoList = await _hadithDatabase.allCategories;\n    final List<CategoryEntity> categories = categoryDtoList.toHadithCategoryEntities();\n    final Map<String, List<CategoryEntity>> categoriesGroupedByFirstChar =\n        categories.groupListsBy((category) => category.name.substring(0, 1));\n    return categoriesGroupedByFirstChar;\n  }\n\n  Future<List<CategoryEntity>> getSubCategoriesByCategoryId({\n    required int subCategoryId,\n  }) async {\n    final List<SubCategoryDto> subCategoryDtoList =\n        await _hadithDatabase.getSubCategoryByCategoryId(categoryId: subCategoryId);\n    final List<CategoryEntity> subCategories = subCategoryDtoList.toHadithCategoryEntities();\n    return subCategories;\n  }\n\n  Future<HadithEntity> getHadithByHadithNumber({\n    required int hadithNumber,\n    required BookEntity selectedBook,\n  }) async {\n    final HadithDto? hadithDto = await _hadithDatabase.searchHadithById(\n      bookId: selectedBook.id,\n      hadithNumber: hadithNumber,\n    );\n    final HadithEntity? hadith = hadithDto?.toHadith();\n    if (hadith == null) throw Exception(\"\u09b9\u09be\u09a6\u09bf\u09b8 \u0996\u09c1\u0981\u099c\u09c7 \u09aa\u09be\u0993\u09df\u09be \u09af\u09be\u09df\u09a8\u09bf\");\n    return hadith;\n  }\n\n  Future<List<HadithEntity>> getHadithListByHadithIdList({\n    required List<int> hadithIdList,\n  }) async {\n    final List<HadithDto> hadithDtoList = await _hadithDatabase.getHadithListById(hadithIdList);\n\n    final List<HadithEntity> hadithList = await hadithDtoList.toHadithList(\n      books: await _bookListCache,\n    );\n\n    final List<HadithEntity> filledHadithList = List.empty(growable: true);\n    await Future.forEach(hadithList, (hadith) async {\n      final HadithEntity modifiedHadith = await _fillUpHadithEntity(hadith: hadith, isBookmarked: true);\n      filledHadithList.add(modifiedHadith);\n    });\n    return filledHadithList;\n  }\n\n  Future<int> getHadithCountByBook({required int hadithBookId}) =>\n      _hadithDatabase.getHadithCountForBook(bookId: hadithBookId);\n\n  Future<List<SectionEntity>> getSectionsByBookChapter({\n    required int bookId,\n    required int chapterId,\n  }) async {\n    final List<SectionDto> sectionDto =\n        await _hadithDatabase.getSectionByBookAndChapterId(chapterId: chapterId, bookId: bookId);\n    final List<SectionEntity> sections = await sectionDto.toHadithSectionEntities();\n    return sections;\n  }\n\n  Future<ChapterEntity> getChapterByBookAndChapterId({\n    required int bookId,\n    required int chapterId,\n  }) async {\n    final ChapterDto chapterDto =\n        await _hadithDatabase.getChapterByBookAndChapterId(chapterId: chapterId, bookId: bookId);\n    final ChapterEntity chapter = await chapterDto.toChapter();\n    return chapter;\n  }\n\n  final LocalCacheService _localCacheService;\n\n  Future<void> saveSearchHistories({\n    required List<(int, String)> searchHistories,\n  }) async {\n    await catchFutureOrVoid(() async {\n      final Map<int, String> searchHistoriesMap = Map.fromEntries(searchHistories.map((e) => MapEntry(e.$1, e.$2)));\n      await _localCacheService.saveData(\n        key: CacheKeys.searchHistories,\n        value: searchHistoriesMap,\n      );\n    });\n  }\n\n  Future<List<(int, String)>> getSearchHistories() async {\n    final List<(int, String)>? searchHistories = await catchAndReturnFuture(() async {\n      final Map<dynamic, dynamic>? historiesDynamicMap = _localCacheService.getData(key: CacheKeys.searchHistories);\n      return compute(_convertMapToHistoryListWithId, historiesDynamicMap);\n    });\n    return searchHistories ?? [];\n  }\n}"}, {"structure_type": "function", "name": "getAboutApp", "docstring": "", "module": "data_sources", "file_path": "al-hadith-flutter/lib/data/data_sources/info_local_data_source.dart", "file_name": "info_local_data_source.dart", "line": 19, "line_from": 19, "line_to": 188, "snippet": "  Future<String> getAboutApp() async {\n    final DrawerDto aboutApp =\n        await _hadithDatabase.getDrawerItemByName(name: Drawer.aboutApp);\n    return aboutApp.textBn;\n  }\n\n  Future<String> getVolunteerHelp() async {\n    final DrawerDto aboutApp = await _hadithDatabase.getDrawerItemByName(\n      name: Drawer.getVolunteerHelp,\n    );\n    return aboutApp.textBn;\n  }\n\n  Future<String> getAboutOrganization() async {\n    final DrawerDto aboutApp =\n        await _hadithDatabase.getDrawerItemByName(name: Drawer.aboutUs);\n    return aboutApp.textBn;\n  }\n\n  Future<String> getContactUsMessage() async {\n    final DrawerDto aboutApp =\n        await _hadithDatabase.getDrawerItemByName(name: Drawer.contactUs);\n    return aboutApp.textBn;\n  }\n\n  Future<String> getDonateMessage() async {\n    final DrawerDto aboutApp =\n        await _hadithDatabase.getDrawerItemByName(name: Drawer.donate);\n    return aboutApp.textBn;\n  }\n\n  Future<String> getHelpUsMessage() async {\n    final DrawerDto aboutApp =\n        await _hadithDatabase.getDrawerItemByName(name: Drawer.helpUs);\n    return aboutApp.textBn;\n  }\n\n  Future<String> getLibraryAddress() async {\n    final DrawerDto aboutApp =\n        await _hadithDatabase.getDrawerItemByName(name: Drawer.libraryAddress);\n    return aboutApp.textBn;\n  }\n\n  Future<String> getThanksMessage() async {\n    final DrawerDto aboutApp =\n        await _hadithDatabase.getDrawerItemByName(name: Drawer.thanks);\n    return aboutApp.textBn;\n  }\n\n  Future<String> getTopTenApps() async {\n    final DrawerDto aboutApp =\n        await _hadithDatabase.getDrawerItemByName(name: Drawer.bugReport);\n    return aboutApp.textBn;\n  }\n\n  Future<String> getPrivacyPolicy() async {\n    final DrawerDto aboutApp =\n        await _hadithDatabase.getDrawerItemByName(name: Drawer.privacy);\n    return aboutApp.textBn;\n  }\n\n  Future<String> getPublicationAndTranslatorsInfo() async {\n    final DrawerDto aboutApp =\n        await _hadithDatabase.getDrawerItemByName(name: Drawer.libraryAddress);\n    return aboutApp.textBn;\n  }\n\n  Future<void> savePromotionalMessageShown({\n    required int promotionalMessageId,\n  }) async {\n    await _localCacheService.saveData(\n      key: CacheKeys.promotionalMessageId,\n      value: promotionalMessageId,\n    );\n  }\n\n  Future<bool> shouldPublishPromotionalMessage({\n    required PromotionalMessageEntity notification,\n  }) async {\n    final bool? shouldPublish = await catchAndReturnFuture(() {\n      if (notification.id < 0) return false;\n      final int? previousMessageId = _localCacheService.getData<int>(\n        key: CacheKeys.promotionalMessageId,\n      );\n      final bool shouldShow =\n          (previousMessageId == null || previousMessageId != notification.id) &&\n              notification.publish;\n      return shouldShow;\n    });\n    return shouldPublish ?? false;\n  }\n\n  final Map<int, TahkikEntity> _tahkikCache = {};\n\n  Future<Map<int, TahkikEntity>> getTahkikList() async {\n    if (_tahkikCache.isNotEmpty) return _tahkikCache;\n\n    final List<ValiditiesDto> hadithValidityDtoList =\n        await _hadithDatabase.allValidities;\n    final List<TahkikEntity> tahkikList =\n        await hadithValidityDtoList.toTahkikList();\n\n    _tahkikCache\n        .addEntries(tahkikList.map((tahkik) => MapEntry(tahkik.id, tahkik)));\n\n    return _tahkikCache;\n  }\n\n  Future<List<OurProjectEntity>> getOtherProjects() async {\n    return [\n      const OurProjectEntity(\n        id: 4,\n        banglaName: 'IRD Official Website',\n        englishName: 'www.IrdFoundation.com',\n        icon: 'assets/images/png/ird_logo.png',\n        banglaDescription:\n            \"\u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u09ac\u09b0\u09cd\u09a4\u09ae\u09be\u09a8\u09c7 \u09aa\u09b0\u09bf\u099a\u09be\u09b2\u09bf\u09a4 \u09aa\u09cd\u09b0\u099c\u09c7\u0995\u09cd\u099f\u09b8\u09ae\u09c2\u09b9 \u0993 \u0985\u09cd\u09af\u09be\u09aa\u09b8\u09ae\u09c2\u09b9 \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09c7 \u09a4\u09a5\u09cd\u09af \u09aa\u09c7\u09a4\u09c7 \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u0985\u09ab\u09bf\u09b8\u09bf\u09af\u09bc\u09be\u09b2 \u0993\u09df\u09c7\u09ac\u09b8\u09be\u0987\u099f \u098f\u0996\u09a8\u0987 \u09ad\u09bf\u099c\u09bf\u099f \u0995\u09b0\u09c1\u09a8\u0964\",\n        englishDescription:\n            \"Visit our official website now to obtain information about our ongoing app projects.\",\n        websiteLink: 'https://www.irdfoundation.com',\n        actionMessage: \"Download\",\n      ),\n      const OurProjectEntity(\n        id: 3,\n        banglaName: \"\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8\",\n        englishName: 'Al Hadith',\n        icon: 'assets/images/png/hadithapp.png',\n        banglaDescription:\n            \"\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8\u09c7 \u09aa\u09be\u099a\u09cd\u099b\u09c7\u09a8 \u0986\u09b2\u09cd\u09b2\u09be\u09b9\u09cd\u200c\u09b0 \u09b0\u09be\u09b8\u09c1\u09b2 (\ufdfa)-\u098f\u09b0 \u09b9\u09be\u09a6\u09bf\u09b8 \u09b8\u09ae\u09c2\u09b9\u09c7\u09b0 \u09b8\u09c1\u09ac\u09bf\u09b6\u09be\u09b2 \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8\u0964 \u09ac\u09bf\u09b6\u09c1\u09a6\u09cd\u09a7 \u09b9\u09be\u09a6\u09bf\u09b8 \u0997\u09cd\u09b0\u09a8\u09cd\u09a5\u0997\u09c1\u09b2\u09cb \u09b8\u09b9 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u09ea\u09ef,\u09e6\u09e6\u09e6 \u098f\u09b0\u0993 \u09ac\u09c7\u09b6\u09bf \u09b9\u09be\u09a6\u09bf\u09b8\u09c7\u09b0 \u09b8\u09ae\u09be\u09b9\u09be\u09b0\u0964 \",\n        englishDescription:\n            \"Al Hadith is an Great Collection of Hadith of Prophet Muhammad (\ufdfa). The app contains 49000+ hadith from Most Accepted and Authentic Hadith books.\",\n        appStoreLink: 'https://itunes.apple.com/us/app/al-hadith/id1238182914',\n        websiteLink: 'http://www.ihadis.com',\n        playStoreLink:\n            'https://play.google.com/store/apps/details?id=com.ihadis.ihadis',\n        actionMessage: \"Download\",\n      ),\n      const OurProjectEntity(\n        id: 2,\n        banglaName: \"\u0995\u09c1\u09b0\u0986\u09a8 \u09ae\u09be\u099c\u09c0\u09a6 (Tafsir & by Words)\",\n        englishName: \"Quran Mazid (Tafsir & by Words)\",\n        icon: 'assets/images/png/quranapp.png',\n        banglaDescription:\n            \"\u0995\u09c1\u09b0\u0986\u09a8 \u09ae\u09be\u099c\u09c0\u09a6 (\u09ac\u09be\u0982\u09b2\u09be) \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09b8\u09b9 \u09b8\u09be\u099c\u09bf\u09df\u09c7\u099b\u09bf\u0964 \u09b9\u09be\u09ab\u09c7\u099c\u09c0 \u0995\u09cb\u09b0\u0986\u09a8 \u09b6\u09b0\u09c0\u09ab, \u09a8\u09c2\u09b0\u09be\u09a8\u09c0 \u0995\u09cb\u09b0\u0986\u09a8 \u09b6\u09b0\u09c0\u09ab \u098f\u09ac\u0982  \u09b8\u09b9\u099c \u09b8\u09b0\u09b2 \u09ac\u09be\u0982\u09b2\u09be \u0985\u09a8\u09c1\u09ac\u09be\u09a6 \u098f\u0987 \u09b8\u09ac \u0995\u09bf\u099b\u09c1 \u098f\u0995\u09b8\u09be\u09a5\u09c7\u0987 \u09aa\u09be\u099a\u09cd\u099b\u09c7 \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf\u09a4\u09c7\u0964 \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u0985\u09cd\u09af\u09be\u09a1 \u09ab\u09cd\u09b0\u09bf\u0964  \u09af\u09c7 \u0995\u09cb\u09a8 \u0986\u09df\u09be\u09a4 \u098f \u0995\u09cd\u09b2\u09bf\u0995 \u0995\u09b0\u09b2\u09c7 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09a6\u09c7\u0996\u09be\u09b0 \u0985\u09aa\u09b6\u09a8 \u0986\u09b8\u09ac\u09c7\u0964 \u0985\u0996\u09be\u09a8\u09c7 \u0995\u09cd\u09b2\u09bf\u0995 \u0995\u09b0\u09c7 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09a6\u09c7\u0996\u09be \u09af\u09be\u09ac\u09c7\u0964 \u09a1\u09cd\u09b0\u09aa\u09a1\u09be\u0989\u09a8 \u09a5\u09c7\u0995\u09c7 \u0995\u09cb\u09a8 \u09a4\u09be\u09ab\u09b8\u09c0\u09b0 \u09a4\u09be \u09b8\u09bf\u09b2\u09c7\u0995\u09cd\u099f \u0995\u09b0\u09be \u09af\u09be\u09ac\u09c7\u0964\",\n        englishDescription:\n            \"Quran Mazid is one of the most Popular Quran App with 34000+ Reviews and 4.8/5 Ratings. In Our app will get almost all important features like Multiple Translations, Multiple Tafsirs, Word By Word with Audio, Quran Recitation, Quran Index etc.\",\n        playStoreLink:\n            'https://play.google.com/store/apps/details?id=com.ihadis.quran',\n        appStoreLink: 'https://apps.apple.com/us/app/quran-mazid/id1324615850',\n        websiteLink: 'http://www.quranmazid.com',\n        actionMessage: \"Download\",\n      ),\n      const OurProjectEntity(\n        id: 1,\n        banglaName: '\u09a6\u09cb\u09df\u09be \u0993 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 (\u09b9\u09bf\u09b8\u09a8\u09c1\u09b2 \u09ae\u09c1\u09b8\u09b2\u09bf\u09ae)',\n        englishName: 'Dua & Ruqyah (Hisnul Muslim)',\n        icon: 'assets/images/png/duaapp.png',\n        banglaDescription:\n            \"\u09a6\u09cb\u09df\u09be \u0993 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09a4\u09c7 \u09b0\u09df\u09c7\u099b\u09c7 \u0995\u09c1\u09b0\u0986\u09a8 \u098f\u09ac\u0982 \u09b9\u09be\u09a6\u09bf\u09b8 \u09a5\u09c7\u0995\u09c7 \u09b8\u0982\u0995\u09b2\u09bf\u09a4 \u09b8\u09b9\u09c0\u09b9 \u09a6\u09cb\u09af\u09bc\u09be \u0993 \u09af\u09bf\u0995\u09bf\u09b0\u09c7\u09b0 \u09b8\u09ac\u099a\u09c7\u09df\u09c7 \u09ac\u09dc \u09b8\u0982\u0997\u09cd\u09b0\u09b9\u0964 \u098f\u09a4\u09c7 \u09ae\u09cb\u099f \u09ea\u09e7 \u099f\u09bf \u0995\u09cd\u09af\u09be\u099f\u09be\u0997\u09b0\u09bf\u09a4\u09c7 \u09ee\u09ef\u09e6+ \u099f\u09bf \u09a6\u09cb\u09df\u09be \u0993 \u09af\u09bf\u0995\u09bf\u09b0 \u09aa\u09be\u09ac\u09c7\u09a8\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09aa\u09cd\u09b0\u09a7\u09be\u09a8\u09a4 \u0995\u09c1\u09b0\u0986\u09a8 \u0993 \u09b8\u09b9\u09bf\u09b9 \u09b9\u09be\u09a6\u09bf\u09b8 \u09ad\u09bf\u09a4\u09cd\u09a4\u09bf\u0995 \u09a6\u09cb\u09df\u09be\u0997\u09c1\u09b2\u09cb \u0986\u09a8\u09be \u09b9\u09df\u09c7\u099b\u09c7\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7\u09b0 \u0985\u09a8\u09cd\u09af\u09a4\u09ae \u09ac\u09dc \u09ab\u09bf\u099a\u09be\u09b0 \u09b9\u099a\u09cd\u099b\u09c7 \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 (\u0987\u09b8\u09b2\u09be\u09ae\u09bf\u0995 \u099d\u09be\u09dc-\u09ab\u09c1\u0981\u0995) \u09b8\u09c7\u0995\u09b6\u09a8\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09aa\u09a8\u09bf \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09ae\u09bf\u09a1\u09bf\u09df\u09be \u09aa\u09cd\u09b2\u09c7\u09df\u09be\u09b0 \u098f\u09b0 \u09aa\u09be\u09b6\u09be\u09aa\u09be\u09b6\u09bf \u09b0\u09c1\u0995\u09bf\u09df\u09be\u09b9 \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09bf\u09a4 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0997\u09c1\u09b0\u09c1\u09a4\u09cd\u09ac\u09aa\u09c2\u09b0\u09cd\u09a3 \u09a4\u09a5\u09cd\u09af \u09af\u09c7\u09ae\u09a8 \u09af\u09be\u09a6\u09c1, \u09ac\u09a6\u09a8\u099c\u09b0\u09c7\u09b0 \u099a\u09bf\u0995\u09bf\u09ce\u09b8\u09be \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09c7 \u099c\u09be\u09a8\u09a4\u09c7 \u09aa\u09be\u09b0\u09ac\u09c7\u09a8\u0964 \u098f\u0987 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u0995\u09cb\u09a8 \u09aa\u09cd\u09b0\u0995\u09be\u09b0 \u0985\u09cd\u09af\u09be\u09a1 \u09a8\u09c7\u0987 \u098f\u09ac\u0982 \u098f\u099f\u09bf \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u09ab\u09cd\u09b0\u09c0 !\",\n        englishDescription:\n            \"The Dua and Ruqyah app have the largest collection of Sahih Dua and Zikr compiled from the Qur'an and Sahih Hadith. You will get 890+ prayers and dhikr in 41 categories. Various categories of Duas for all occasions such as morning and evening, Children, Prayer, Ramadan, Hajj/Umrah, and Quran Duas can be found here.\",\n        playStoreLink:\n            'https://play.google.com/store/apps/details?id=com.ihadis.dua',\n        appStoreLink: 'https://apps.apple.com/us/app/dua-ruqyah/id1568942398',\n        websiteLink: 'https://www.duaruqyah.com',\n        actionMessage: \"Download\",\n      ),\n    ];\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "data_sources", "file_path": "al-hadith-flutter/lib/data/data_sources/info_remote_data_source.dart", "file_name": "info_remote_data_source.dart", "line": 19, "line_from": 19, "line_to": 31, "snippet": "    required void Function(PromotionalMessageEntity) onMessage,\n  }) async {\n    await _backendAsAService.getRemoteNotice(\n      onNotification: (map) async {\n        await catchFutureOrVoid(() async {\n          final Map<String, Object?> remoteNoticeMap = map.map(MapEntry.new);\n          final PromotionalMessageEntity promotionalMessage =\n              await convertJsonMapToPromotionalMessage(map: remoteNoticeMap);\n          onMessage(promotionalMessage);\n        });\n      },\n    );\n  }"}, {"structure_type": "function", "name": "toPinEntities", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/my_pin_mapper.dart", "file_name": "my_pin_mapper.dart", "line": 14, "line_from": 14, "line_to": 27, "snippet": "  Future<List<PinEntity>> toPinEntities() async {\n    final List<PinEntity> bookmarkEntities =\n    await compute(_convertMyPinDtoToPinEntities, this);\n    return bookmarkEntities;\n  }\n}\n\nFuture<List<PinEntity>> _convertMyPinDtoToPinEntities(\n    List<MyPinDto> param,\n    ) async {\n  final List<Future<PinEntity>> futures =\n  param.map((dto) async => convertDtoToMyPinEntity(dto)).toList();\n  return Future.wait(futures);\n}"}, {"structure_type": "function", "name": "toHadithList", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/hadith_entity_mapper.dart", "file_name": "hadith_entity_mapper.dart", "line": 18, "line_from": 18, "line_to": 49, "snippet": "  Future<List<HadithEntity>> toHadithList({\n    List<String>? highlighted,\n    required List<BookEntity> books,\n  }) async {\n    final List<HadithEntity> hadithList = await compute(\n      _convertHadithDtoListToHadithList,\n      (this, highlighted ?? [], books),\n    );\n    return hadithList;\n  }\n\n  Future<List<HadithEntity>> toPresentableText() async {\n    final List<HadithEntity> presentableText =\n        await compute(_convertHadithDtoListToPresentableText, this);\n    return presentableText;\n  }\n}\n\nFuture<List<HadithEntity>> _convertHadithDtoListToHadithList(\n  (List<HadithDto>, List<String>, List<BookEntity>) param,\n) async {\n  final (dtoList, highlighted, booksList) = param;\n  final Map<int, BookEntity> books =\n      Map.fromEntries(booksList.map((b) => MapEntry(b.id, b)));\n  final List<Future<HadithEntity>> futures = dtoList\n      .map((dto) async => _convertDtoToHadithEntity(dto, highlighted))\n      .toList();\n  final List<HadithEntity> hadithList = await Future.wait(futures);\n  final List<HadithEntity> hadithListWithBooks =\n      hadithList.map((h) => h.copyWith(book: books[h.book.id])).toList();\n  return hadithListWithBooks;\n}"}, {"structure_type": "function", "name": "<Future<Object?>>[];", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/hadith_entity_mapper.dart", "file_name": "hadith_entity_mapper.dart", "line": 77, "line_from": 77, "line_to": 139, "snippet": "  final List<Future<Object?>> futures = <Future<Object?>>[];\n\n  if (highlighted.isNotEmpty) {\n    futures\n      ..add(\n        _highlightText(dto.ar, highlighted).then((text) => arabicText = text),\n      )\n      ..add(\n        _highlightText(dto.arDiacless, highlighted)\n            .then((text) => arabicTextWithoutTashkeel = text),\n      );\n  }\n  futures\n    ..add(\n      _extractHadithBanglaText(highlighted, dto.note)\n          .then((text) => note = text),\n    )\n    ..add(\n      _extractHadithBanglaText(highlighted, dto.bn)\n          .then((text) => banglaText = text),\n    );\n\n  await Future.wait(futures);\n\n  final TahkikEntity validity = TahkikEntity(\n    id: dto.gradeId,\n    label: dto.grade ?? \"\u0985\u09a8\u09cd\u09af\u09be\u09a8\u09cd\u09af\",\n    color: getColorFromHex(dto.gradeColor),\n  );\n  final BookEntity book = BookEntity(\n    id: dto.bookId,\n    name: dto.bookName,\n    imageAbvr: dto.bookName.characters.first,\n    collectorName: getCollectorNameByBookTitle(dto.bookName),\n  );\n\n  return HadithEntity(\n    id: dto.id,\n    arabicText: arabicText,\n    chapterId: dto.chapterId,\n    banglaText: banglaText,\n    bookId: dto.bookId,\n    arabicTextWithoutTashkeel: arabicTextWithoutTashkeel,\n    hadithId: dto.hadithId ?? -1,\n    narrator: dto.narrator ?? \"\",\n    note: note,\n    validity: validity,\n    book: book,\n    sectionId: dto.sectionId,\n    isBookmarked: false,\n    isMultiBookmarked: false,\n  );\n}\n\nFuture<String> _extractHadithBanglaText(\n  List<String> highlighted,\n  String? text,\n) async {\n  final String highlightedText = highlighted.isNotEmpty\n      ? await _highlightText(text, highlighted)\n      : text ?? \"\";\n  return highlightArabicTextWithSpanAndLineBreaks(highlightedText);\n}"}, {"structure_type": "function", "name": "dtoList.map", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/hadith_entity_mapper.dart", "file_name": "hadith_entity_mapper.dart", "line": 172, "line_from": 172, "line_to": 211, "snippet": "  final List<Future<HadithEntity>> futures = dtoList.map((dto) async {\n    final BookEntity book = bookMap[dto.bookId] != null\n        ? bookMap[dto.bookId]!\n        : bookMap[dto.bookId] = BookEntity(\n            id: dto.bookId,\n            name: dto.bookName,\n            imageAbvr: dto.bookName.characters.first,\n            collectorName: getCollectorNameByBookTitle(dto.bookName),\n          );\n    final TahkikEntity validity = TahkikEntity(\n      id: dto.gradeId,\n      label: dto.grade ?? \"\u0985\u09a8\u09cd\u09af\u09be\u09a8\u09cd\u09af\",\n      color: getColorFromHex(dto.gradeColor),\n    );\n\n    return HadithEntity(\n      id: dto.id,\n      arabicText: dto.ar ?? \"\",\n      banglaText: dto.bn ?? \"\",\n      bookId: dto.bookId,\n      chapterId: dto.chapterId,\n      arabicTextWithoutTashkeel: dto.arDiacless ?? \"\",\n      hadithId: dto.hadithId ?? -1,\n      narrator: dto.narrator ?? \"\",\n      note: dto.note ?? \"\",\n      validity: validity,\n      book: book,\n      isBookmarked: false,\n      isMultiBookmarked: false,\n      sectionId: dto.sectionId,\n    );\n  }).toList();\n\n  return Future.wait(futures);\n}\n\nextension HadithEntityToOtherMapper on List<HadithEntity> {\n  Future<List<(int, String)>> toPresentableText() async =>\n      compute(_hadithToPresentableText, this);\n}"}, {"structure_type": "function", "name": "toNotificationPayload", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/notification_entity_mapper.dart", "file_name": "notification_entity_mapper.dart", "line": 55, "line_from": 55, "line_to": 62, "snippet": "  Future<NotificationPayLoadEntity> toNotificationPayload() async =>\n      compute(_convertJsonMapToNotificationPayLoadStatic, this);\n}\n\nextension NotificationPayLoadToJsonMap on NotificationPayLoadEntity {\n  Future<Map<String, String>> toJsonMap() async =>\n      compute(_convertNotificationPayLoadToJsonMapStatic, this);\n}"}, {"structure_type": "function", "name": "toTahkikList", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/tahkik_entity_mapper.dart", "file_name": "tahkik_entity_mapper.dart", "line": 16, "line_from": 16, "line_to": 38, "snippet": "  Future<List<TahkikEntity>> toTahkikList() async {\n    final List<ValiditiesDto> dtoList = this;\n    final List<TahkikEntity> tahkikList =\n        await compute(_convertDtoListToTahkikList, dtoList);\n    return tahkikList;\n  }\n}\n\nList<TahkikEntity> _convertDtoListToTahkikList(\n  List<ValiditiesDto> dtoList,\n) =>\n    dtoList.map(_convertDtoToTahkik).toList();\n\nTahkikEntity _convertDtoToTahkik(ValiditiesDto dto) {\n  final Color tahkikColor = getColorFromHex(dto.background);\n  final TahkikEntity tahkik = TahkikEntity(\n    id: dto.id,\n    label: dto.title,\n    details: dto.description,\n    color: tahkikColor,\n  );\n  return tahkik;\n}"}, {"structure_type": "function", "name": "toHadithSectionEntities", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/section_mapper.dart", "file_name": "section_mapper.dart", "line": 17, "line_from": 17, "line_to": 34, "snippet": "  Future<List<SectionEntity>> toHadithSectionEntities() async {\n    final List<SectionDto> dtoList = this;\n    final List<SectionEntity> entities =\n        await compute(_convertDtoListToSectionEntities, dtoList);\n    return entities;\n  }\n}\n\nFuture<List<SectionEntity>> _convertDtoListToSectionEntities(\n  List<SectionDto> dtoList,\n) async {\n  final List<Future<SectionEntity>> entityFutures = List.empty(growable: true);\n  for (final SectionDto dto in dtoList) {\n    entityFutures.add(Future.value(_convertDtoToSectionEntity(dto)));\n  }\n  final List<SectionEntity> entities = await Future.wait(entityFutures);\n  return entities;\n}"}, {"structure_type": "function", "name": "toHadithChapters", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/chapter_entity_mapper.dart", "file_name": "chapter_entity_mapper.dart", "line": 13, "line_from": 13, "line_to": 29, "snippet": "  Future<List<ChapterEntity>> toHadithChapters() async {\n    final List<ChapterDto> dtoList = this;\n    final List<ChapterEntity> chapterEntities =\n        await compute(_convertDtoToHadithChapters, dtoList);\n    return chapterEntities;\n  }\n}\n\nList<ChapterEntity> _convertDtoToHadithChapters(\n  List<ChapterDto> dtoList,\n) =>\n    dtoList.map(_convertDtoToHadithChapter).toList();\n\nextension DtoToHadithChapter on ChapterDto {\n  Future<ChapterEntity> toChapter() async =>\n      compute(_convertDtoToHadithChapter, this);\n}"}, {"structure_type": "function", "name": "legacyToBookmarks", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/legacy_bookmark_mapper.dart", "file_name": "legacy_bookmark_mapper.dart", "line": 18, "line_from": 18, "line_to": 63, "snippet": "  Future<List<BookmarkEntity>> legacyToBookmarks() async =>\n      compute(_convertJsonToBookmarkList, this);\n}\n\nFuture<List<BookmarkEntity>> _convertJsonToBookmarkList(\n  String? bookmarkJson,\n) async {\n  if (bookmarkJson == null) return [];\n  if (bookmarkJson.isEmpty) return [];\n\n  final List<BookmarkEntity> bookmarkList = [];\n\n  catchVoid(() {\n    final LegacyNativeBookmarkDto bookmark =\n        _parseLegacyNativeBookmarkDtoFromJson(bookmarkJson);\n\n    final DateTime legacyImportTime = DateTime.now();\n    int id = legacyImportTime.millisecondsSinceEpoch;\n\n    final List<LegacyNativeBookmarkFolder> legacyFolders =\n        bookmark.folders ?? [];\n\n    for (final LegacyNativeBookmarkFolder folder in legacyFolders) {\n      final List<LegacyNativeBookmarkHadith> hadithListInFolder =\n          folder.hadiths ?? [];\n\n      for (final LegacyNativeBookmarkHadith legacyHadith\n          in hadithListInFolder) {\n        final DateTime upsertTime = _getUpsertTime(\n          legacyHadith: legacyHadith,\n          legacyImportTime: legacyImportTime,\n        );\n\n        _generateBookmark(\n          id: id++,\n          folderName: folder.name ?? \"\",\n          legacyHadith: legacyHadith,\n          upsertTime: upsertTime,\n          onGenerated: bookmarkList.add,\n        );\n      }\n    }\n  });\n\n  return bookmarkList;\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/legacy_bookmark_mapper.dart", "file_name": "legacy_bookmark_mapper.dart", "line": 70, "line_from": 70, "line_to": 90, "snippet": "  required void Function(BookmarkEntity) onGenerated,\n}) {\n  catchVoid(() {\n    final int legacyHadithId = legacyHadith.hadithId ?? -1;\n    if (legacyHadithId == -1) return;\n\n    final Color bookmarkColor = _generateBookmarkColor(folderName: folderName);\n\n    final BookmarkEntity bookmark = BookmarkEntity(\n      id: id,\n      name: folderName,\n      colour: bookmarkColor,\n      hadithId: legacyHadithId,\n      bookId: legacyHadith.bookId ?? -1,\n      chapterId: legacyHadith.sectionId ?? -1,\n      createdAt: upsertTime,\n      updatedAt: upsertTime,\n    );\n    onGenerated(bookmark);\n  });\n}"}, {"structure_type": "function", "name": "toHadithBookmarkEntities", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/mybookmark_mapper.dart", "file_name": "mybookmark_mapper.dart", "line": 14, "line_from": 14, "line_to": 27, "snippet": "  Future<List<BookmarkEntity>> toHadithBookmarkEntities() async {\n    final List<BookmarkEntity> bookmarkEntities =\n    await compute(_convertMyBookmarkDtoToHadithBookmarkEntities, this);\n    return bookmarkEntities;\n  }\n}\n\nFuture<List<BookmarkEntity>> _convertMyBookmarkDtoToHadithBookmarkEntities(\n    List<MyBookmarkDto> param,\n    ) async {\n  final List<Future<BookmarkEntity>> futures =\n  param.map((dto) async => _convertDtoToHadithBookmarkEntity(dto)).toList();\n  return Future.wait(futures);\n}"}, {"structure_type": "function", "name": "toMap", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/mybookmark_mapper.dart", "file_name": "mybookmark_mapper.dart", "line": 42, "line_from": 42, "line_to": 59, "snippet": "  Future<Map<String, Object?>> toMap() async =>\n      compute(_convertHadithBookmarkToDtoMap, this);\n}\n\nMap<String, Object?> _convertHadithBookmarkToDtoMap(\n    BookmarkEntity bookmark,\n    ) {\n  return {\n    'id': bookmark.id,\n    'hadith_id': bookmark.hadithId,\n    'book_id': bookmark.bookId,\n    'chapter_id': bookmark.chapterId,\n    'color': getHexFromColor(bookmark.colour),\n    'folder_name': bookmark.name,\n    'created_at': bookmark.createdAt.toTimestamp,\n    'updated_at': bookmark.updatedAt.toTimestamp,\n  };\n}"}, {"structure_type": "function", "name": "toMapList", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/mybookmark_mapper.dart", "file_name": "mybookmark_mapper.dart", "line": 62, "line_from": 62, "line_to": 75, "snippet": "  Future<List<Map<String, Object?>>> toMapList() async =>\n      compute(convertHadithBookmarkListToDtoMap, this);\n}\n\nFuture<List<Map<String, Object?>>> convertHadithBookmarkListToDtoMap(\n    List<BookmarkEntity> bookmarks,\n    ) async {\n  final List<Future<Map<String, Object?>>> futures =\n  bookmarks.map((bookmark) async {\n    return _convertHadithBookmarkToDtoMap(bookmark);\n  }).toList();\n  final List<Map<String, Object?>> result = await Future.wait(futures);\n  return result;\n}"}, {"structure_type": "function", "name": "toBookmarks", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/mybookmark_mapper.dart", "file_name": "mybookmark_mapper.dart", "line": 93, "line_from": 93, "line_to": 109, "snippet": "  Future<List<BookmarkEntity>> toBookmarks() async {\n    return compute(_convertMapsToHadithBookmarkList, this);\n  }\n}\n\nFuture<List<BookmarkEntity>> _convertMapsToHadithBookmarkList(\n    List<Map<String, Object?>> bookmarkMaps,\n    ) async {\n  final List<Future<BookmarkEntity>> futures = bookmarkMaps\n      .map(\n        (bookmarkMap) => Future<BookmarkEntity>.value(\n      _convertMapToHadithBookmarkEntity(bookmarkMap),\n    ),\n  )\n      .toList();\n  return Future.wait(futures);\n}"}, {"structure_type": "function", "name": "toLastReads", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/last_read_mapper.dart", "file_name": "last_read_mapper.dart", "line": 46, "line_from": 46, "line_to": 67, "snippet": "  Future<List<LastReadEntity>> toLastReads() async =>\n      compute(_convertStringListToLastReads, this);\n}\n\nFuture<List<LastReadEntity>> _convertStringListToLastReads(\n  List<String> serialisedList,\n) async {\n  // By executing each item in serialisedList concurrently, we can improve\n  // the time complexity of the function from O(n) to O(log n), where n is\n  // the length of serialisedList. This is because we can execute multiple\n  // operations at the same time, reducing the total amount of time required\n  // to complete all the operations.\n  if (serialisedList.isEmpty) return [];\n  final List<Future<LastReadEntity>> futures =\n      serialisedList.map((serialised) async {\n    final Map<String, Object> lastReadMap = _deSerialiseValue(serialised);\n    final LastReadEntity lastRead = _convertMapToLastRead(lastReadMap);\n    return lastRead;\n  }).toList();\n  final List<LastReadEntity> lastReads = await Future.wait(futures);\n  return lastReads;\n}"}, {"structure_type": "function", "name": "toSerializedStrings", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/last_read_mapper.dart", "file_name": "last_read_mapper.dart", "line": 70, "line_from": 70, "line_to": 91, "snippet": "  Future<List<String>> toSerializedStrings() async {\n    return compute(_convertLastReadsToSerialisedStringList, this);\n  }\n}\n\nFuture<List<String>> _convertLastReadsToSerialisedStringList(\n  List<LastReadEntity> lastReads,\n) async {\n  // By executing each item in lastReads concurrently, we can improve the time\n  // complexity of the function from O(n) to O(log n), where n is the length\n  // of lastReads. This is because we can execute multiple operations at the\n  // same time, reducing the total amount of time required to complete all the\n  // operations.\n  if (lastReads.isEmpty) return [];\n  final List<Future<String>> futures = lastReads.map((lastRead) async {\n    final Map<String, Object> lastReadMap = _convertLastReadToMap(lastRead);\n    final String serialised = _serialiseValue(lastReadMap);\n    return serialised;\n  }).toList();\n  final List<String> serialisedList = await Future.wait(futures);\n  return serialisedList;\n}"}, {"structure_type": "function", "name": "toHadithBooks", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/book_entity_mapper.dart", "file_name": "book_entity_mapper.dart", "line": 44, "line_from": 44, "line_to": 67, "snippet": "  Future<List<BookEntity>> toHadithBooks() async {\n    final List<BookDto> dtoList = this;\n    final List<BookEntity> hadithBooks =\n        await compute(_convertBookDtoToHadithBooks, dtoList);\n    return hadithBooks;\n  }\n}\n\nList<BookEntity> _convertBookDtoToHadithBooks(List<BookDto> dtoList) =>\n    dtoList.map(_convertDtoToHadithBookEntity).toList();\n\nBookEntity _convertDtoToHadithBookEntity(BookDto book) {\n  final Color imageColor = getColorFromHex(book.colorCode);\n  return BookEntity(\n    id: book.id,\n    name: book.title,\n    arabicName: book.titleAr,\n    numberOfHadith: translateNumberToBanglaString(book.numberOfHadith ?? 0),\n    bookDescription: book.bookDescription,\n    imageAbvr: book.abvrCode,\n    imageColor: imageColor,\n    collectorName: getCollectorNameByBookTitle(book.title),\n  );\n}"}, {"structure_type": "function", "name": "toArticleEntity", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/article_entity_mapper.dart", "file_name": "article_entity_mapper.dart", "line": 25, "line_from": 25, "line_to": 41, "snippet": "  Future<ArticleEntity> toArticleEntity() async =>\n      compute(_convertJsonToArticle, this);\n}\n\nArticleEntity _convertJsonToArticle(Map<String, dynamic> json) {\n  if (json[\"data\"] == null) return ArticleEntity.empty();\n\n  final Map<String, dynamic> jsonData = json[\"data\"] as Map<String, dynamic>;\n  return ArticleEntity(\n    id: jsonData[\"id\"] as int? ?? -1,\n    title: jsonData[\"title\"] as String? ?? \"\",\n    subtitle: jsonData[\"subtitle\"] as String? ?? \"\",\n    content: jsonData[\"description\"] as String? ?? \"\",\n    imageUrl: jsonData[\"featured_image\"] as String? ?? \"\",\n    sourceUrl: jsonData[\"source_url\"] as String? ?? \"\",\n  );\n}"}, {"structure_type": "function", "name": "toPinEntities", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/pin_entity_mapper.dart", "file_name": "pin_entity_mapper.dart", "line": 14, "line_from": 14, "line_to": 27, "snippet": "  Future<List<PinEntity>> toPinEntities() async {\n    final List<PinEntity> bookmarkEntities =\n        await compute(_convertPinDtoToPinEntities, this);\n    return bookmarkEntities;\n  }\n}\n\nFuture<List<PinEntity>> _convertPinDtoToPinEntities(\n  List<PinDto> param,\n) async {\n  final List<Future<PinEntity>> futures =\n      param.map((dto) async => convertDtoToPinEntity(dto)).toList();\n  return Future.wait(futures);\n}"}, {"structure_type": "function", "name": "toSerialisedString", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/settings_entity_mapper.dart", "file_name": "settings_entity_mapper.dart", "line": 16, "line_from": 16, "line_to": 23, "snippet": "  Future<String> toSerialisedString() async =>\n      compute(_convertSettingsEntityToSerialisedString, this);\n}\n\nextension SerialisedStringToSettingStateEntity on String {\n  Future<SettingsStateEntity> toSettingStateEntity() async =>\n      compute(_convertSerialisedStringToSettingStateEntity, this);\n}"}, {"structure_type": "function", "name": "toHadithBookmarkEntities", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/bookmark_mapper.dart", "file_name": "bookmark_mapper.dart", "line": 14, "line_from": 14, "line_to": 27, "snippet": "  Future<List<BookmarkEntity>> toHadithBookmarkEntities() async {\n    final List<BookmarkEntity> bookmarkEntities =\n        await compute(_convertBookmarkDtoToHadithBookmarkEntities, this);\n    return bookmarkEntities;\n  }\n}\n\nFuture<List<BookmarkEntity>> _convertBookmarkDtoToHadithBookmarkEntities(\n  List<BookmarkDto> param,\n) async {\n  final List<Future<BookmarkEntity>> futures =\n      param.map((dto) async => _convertDtoToHadithBookmarkEntity(dto)).toList();\n  return Future.wait(futures);\n}"}, {"structure_type": "function", "name": "toMap", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/bookmark_mapper.dart", "file_name": "bookmark_mapper.dart", "line": 42, "line_from": 42, "line_to": 59, "snippet": "  Future<Map<String, Object?>> toMap() async =>\n      compute(_convertHadithBookmarkToDtoMap, this);\n}\n\nMap<String, Object?> _convertHadithBookmarkToDtoMap(\n  BookmarkEntity bookmark,\n) {\n  return {\n    'id': bookmark.id,\n    'hadith_id': bookmark.hadithId,\n    'book_id': bookmark.bookId,\n    'chapter_id': bookmark.chapterId,\n    'color': getHexFromColor(bookmark.colour),\n    'folder_name': bookmark.name,\n    'created_at': bookmark.createdAt.toTimestamp,\n    'updated_at': bookmark.updatedAt.toTimestamp,\n  };\n}"}, {"structure_type": "function", "name": "toMapList", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/bookmark_mapper.dart", "file_name": "bookmark_mapper.dart", "line": 62, "line_from": 62, "line_to": 75, "snippet": "  Future<List<Map<String, Object?>>> toMapList() async =>\n      compute(convertHadithBookmarkListToDtoMap, this);\n}\n\nFuture<List<Map<String, Object?>>> convertHadithBookmarkListToDtoMap(\n  List<BookmarkEntity> bookmarks,\n) async {\n  final List<Future<Map<String, Object?>>> futures =\n      bookmarks.map((bookmark) async {\n    return _convertHadithBookmarkToDtoMap(bookmark);\n  }).toList();\n  final List<Map<String, Object?>> result = await Future.wait(futures);\n  return result;\n}"}, {"structure_type": "function", "name": "toBookmarks", "docstring": "", "module": "mappers", "file_path": "al-hadith-flutter/lib/data/mappers/bookmark_mapper.dart", "file_name": "bookmark_mapper.dart", "line": 93, "line_from": 93, "line_to": 109, "snippet": "  Future<List<BookmarkEntity>> toBookmarks() async {\n    return compute(_convertMapsToHadithBookmarkList, this);\n  }\n}\n\nFuture<List<BookmarkEntity>> _convertMapsToHadithBookmarkList(\n  List<Map<String, Object?>> bookmarkMaps,\n) async {\n  final List<Future<BookmarkEntity>> futures = bookmarkMaps\n      .map(\n        (bookmarkMap) => Future<BookmarkEntity>.value(\n          _convertMapToHadithBookmarkEntity(bookmarkMap),\n        ),\n      )\n      .toList();\n  return Future.wait(futures);\n}"}, {"structure_type": "function", "name": "_initAnalytics", "docstring": "", "module": "services", "file_path": "al-hadith-flutter/lib/data/services/backend_as_a_service.dart", "file_name": "backend_as_a_service.dart", "line": 36, "line_from": 36, "line_to": 532, "snippet": "  void _initAnalytics() {\n    _analytics.setAnalyticsCollectionEnabled(true).then((_) => _analytics.logAppOpen());\n  }\n\n  Future<String> signIn() async => _signIn();\n\n  Future<void> signOut() async => _signOut();\n\n  Future<bool> get isAuthenticated async => _checkAuthentication();\n\n  Future<void> listenToDeviceToken({\n    required void Function(String) onTokenFound,\n  }) async =>\n      _listenToDeviceToken(onTokenFound: onTokenFound);\n\n  Future<void> listenToFirebaseNotification() async {\n    FirebaseMessaging.onMessage.listen(onBackgroundPushNotificationReceived);\n    FirebaseMessaging.onBackgroundMessage(onBackgroundPushNotificationReceived);\n  }\n\n  Future<void> logPromotionMessageSeen({required int messageId}) async {\n    await _analytics.logEvent(\n      name: \"home_notification_seen\",\n      parameters: {\n        \"time\": DateTime.now().toIso8601String(),\n        \"user_id\": _auth.currentUser?.uid ?? \"\",\n        \"user_email\": _auth.currentUser?.email ?? \"\",\n        \"device_info\": await getDeviceInfo(),\n        \"message_id\": messageId,\n      },\n    );\n  }\n\n  Future<void> addBookmark({required Map<String, Object?> bookmark}) async =>\n      _addItem(item: bookmark, folderName: _bookmarkFolderName);\n\n  Future<void> addPin({required Map<String, Object?> pin}) async => _addItem(item: pin, folderName: _pinFolderName);\n\n  Future<void> deleteHadithFromBookmarks({required int hadithId}) async => _deleteHadithFromCollection(\n        hadithId: hadithId,\n        folderName: _bookmarkFolderName,\n      );\n\n  Future<void> deleteHadithFromPins({required int hadithId}) async {\n    await _deleteHadithFromPins(hadithId: hadithId);\n  }\n\n  Future<void> deleteBookmarkFolder({required String folderName}) async => _deleteItemsByName(\n        name: folderName,\n        nameKey: \"folder_name\",\n        folderName: _bookmarkFolderName,\n      );\n\n  Future<void> deletePinByName({required String pinName}) async => _deleteItemsByName(\n        name: pinName,\n        nameKey: \"name\",\n        folderName: _pinFolderName,\n      );\n\n  Future<void> saveBookmarks({\n    required List<Map<String, Object?>> bookmarks,\n  }) async =>\n      _saveItems(\n        items: bookmarks,\n        folderName: _bookmarkFolderName,\n        nameKey: \"folder_name\",\n      );\n\n  Future<void> savePins({required List<Map<String, Object?>> pins}) async => _saveItems(\n        items: pins,\n        folderName: _pinFolderName,\n        nameKey: \"name\",\n      );\n\n  Future<List<Map<String, Object?>>> getSavedBookmarks() async => _getSavedItems(folderName: _bookmarkFolderName);\n\n  Future<List<Map<String, Object?>>> getSavedPins() async => _getSavedItems(folderName: _pinFolderName);\n\n  Future<void> updateBookmarkFolderName({\n    required String folderName,\n    required String newFolderName,\n    required Color color,\n  }) async =>\n      _updateCollection(\n        collectionFolderName: _bookmarkFolderName,\n        itemName: folderName,\n        newItemName: newFolderName,\n        nameField: \"folder_name\",\n        itemColor: color,\n      );\n\n  Future<void> updatePin({\n    required String pinName,\n    required String newPinName,\n    required Color color,\n  }) async =>\n      _updateCollection(\n        collectionFolderName: _pinFolderName,\n        itemName: pinName,\n        newItemName: newPinName,\n        nameField: \"name\",\n        itemColor: color,\n      );\n\n  late final GoogleSignIn _googleSignIn = GoogleSignIn();\n  late final FirebaseAuth _auth = FirebaseAuth.instance;\n  late final FirebaseAnalytics _analytics = FirebaseAnalytics.instance;\n  late final FirebaseFirestore _fireStore = FirebaseFirestore.instance;\n  late final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;\n\n  Future<void> getRemoteNotice({\n    required void Function(Map<String, Object?>) onNotification,\n  }) async {\n    _fireStore.collection('remote_notice').doc('notice-bn').snapshots().listen((docSnapshot) {\n      onNotification(docSnapshot.data() ?? {});\n    });\n  }\n\n  Future<Map<String, dynamic>> getAppUpdateInfo() async {\n    Map<String, dynamic>? appUpdateInfo = {};\n    appUpdateInfo = await catchAndReturnFuture(() async {\n      final DocumentSnapshot<Map<String, dynamic>> docSnapshot =\n          await _fireStore.collection(\"remote_notice\").doc(\"app_update\").get();\n      return docSnapshot.data();\n    });\n    return appUpdateInfo ?? {};\n  }\n\n  Future<void> _deleteItemsByName({\n    required String name,\n    required String nameKey,\n    required String folderName,\n  }) async {\n    await _onAuthenticationValidated(() async {\n      final String email = await _currentUserEmail;\n\n      final CollectionReference<Map<String, Object?>> collection =\n          _getFirestoreCollection(email: email, folderName: folderName);\n      final QuerySnapshot<Map<String, Object?>> querySnapshot = await collection.where(nameKey, isEqualTo: name).get();\n      final List<QueryDocumentSnapshot<Map<String, Object?>>> documents = querySnapshot.docs;\n      if (documents.isEmpty) return;\n\n      final WriteBatch batch = _fireStore.batch();\n      for (final QueryDocumentSnapshot<Map<String, Object?>> document in documents) {\n        batch.delete(document.reference);\n      }\n      await batch.commit();\n    });\n  }\n\n  Future<List<Map<String, Object?>>> _getSavedItems({\n    required String folderName,\n  }) async {\n    List<Map<String, Object?>> items = [];\n\n    await _onAuthenticationValidated(() async {\n      final String email = await _currentUserEmail;\n\n      final CollectionReference<Map<String, Object?>> collection =\n          _getFirestoreCollection(email: email, folderName: folderName);\n      final QuerySnapshot<Map<String, Object?>> snapshot = await collection.get();\n\n      items = snapshot.docs.map((doc) => doc.data()).toList();\n    });\n\n    return items;\n  }\n\n  Future<void> _updateCollection({\n    required String collectionFolderName,\n    required String itemName,\n    required String newItemName,\n    required String nameField,\n    required Color itemColor,\n  }) async {\n    await _onAuthenticationValidated(() async {\n      final String email = await _currentUserEmail;\n      final CollectionReference<Map<String, Object?>> collection = _getFirestoreCollection(\n        folderName: collectionFolderName,\n        email: email,\n      );\n\n      final QuerySnapshot<Map<String, Object?>> querySnapshot =\n          await collection.where(nameField, isEqualTo: itemName).get();\n\n      final List<QueryDocumentSnapshot<Map<String, Object?>>> documents = querySnapshot.docs;\n\n      if (documents.isEmpty) return;\n\n      final WriteBatch batch = _fireStore.batch();\n      for (final QueryDocumentSnapshot<Map<String, Object?>> document in documents) {\n        final String hexColor = getHexFromColor(itemColor);\n        final Map<String, Object> data = {\n          nameField: newItemName,\n          'color': hexColor,\n          'updated_at': DateTime.now().millisecondsSinceEpoch,\n        };\n        batch.update(document.reference, data);\n      }\n      await batch.commit();\n    });\n  }\n\n  CollectionReference<Map<String, Object?>> _getFirestoreCollection({\n    required String email,\n    required String folderName,\n  }) =>\n      _fireStore.collection(_collectionRootFolderName).doc(email).collection(folderName);\n\n  Future<void> _saveItems({\n    required List<Map<String, Object?>> items,\n    required String folderName,\n    required String nameKey,\n  }) async {\n    await _onAuthenticationValidated(() async {\n      if (items.isEmpty) return;\n\n      const String idKey = \"id\";\n      const String hadithIdKey = \"hadith_id\";\n\n      final String email = await _currentUserEmail;\n\n      final CollectionReference<Map<String, Object?>> collection =\n          _getFirestoreCollection(email: email, folderName: folderName);\n\n      final QuerySnapshot<Map<String, Object?>> snapshot = await collection.get();\n\n      // Extract existing item IDs from the snapshot\n      final Set<int> existingIds = snapshot.docs.map((doc) => doc.data()[idKey] as int? ?? 0).toSet();\n\n      // Extract existing items with the same content from the snapshot\n      final Set<String> existingItemsWithSameContent = snapshot.docs.map((doc) {\n        final int hadithId = doc.data()[hadithIdKey] as int? ?? -1;\n        final String folderName = doc.data()[nameKey] as String? ?? \"\";\n        return \"$hadithId-$folderName\";\n      }).toSet();\n\n      final WriteBatch batch = _fireStore.batch();\n      for (final Map<String, Object?> item in items) {\n        final bool itemExists = existingIds.contains(item['id'] as int? ?? 0);\n        // Prevent saving the same hadith twice in the same folder\n        final bool itemWithSameContentExists =\n            existingItemsWithSameContent.contains(\"${item[hadithIdKey]}-${item[nameKey]}\");\n        if (itemExists && itemWithSameContentExists) return;\n        batch.set(collection.doc(), item);\n      }\n\n      await batch.commit();\n    });\n  }\n\n  Future<void> _addItem({\n    required Map<String, Object?> item,\n    required String folderName,\n  }) async {\n    await _onAuthenticationValidated(() async {\n      // Retrieve current user's email\n      final String email = await _currentUserEmail;\n\n      // Get the Firestore collection for the specified folder and user email\n      final CollectionReference<Map<String, Object?>> collection =\n          _getFirestoreCollection(email: email, folderName: folderName);\n\n      // Add the item to the collection\n      await collection.add(item);\n    });\n  }\n\n  Future<AuthCredential?> _signInWithGoogle() async {\n    return catchAndReturnFuture(() async {\n      // Sign in with Google\n      final GoogleSignInAccount? currentUser = await _googleSignIn.signIn();\n      if (currentUser == null) throw SignInException();\n\n      // Retrieve Google authentication data\n      final GoogleSignInAuthentication googleSignInAuthentication = await currentUser.authentication;\n      final String? accessToken = googleSignInAuthentication.accessToken;\n      final String? idToken = googleSignInAuthentication.idToken;\n\n      // Create Google AuthCredential using the retrieved data\n      final AuthCredential credential = GoogleAuthProvider.credential(\n        accessToken: accessToken,\n        idToken: idToken,\n      );\n\n      return credential;\n    });\n  }\n\n  Future<void> _purgeCredentialCache() async {\n    _currentUserIdCache = null;\n    _currentUserEmailCache = null;\n  }\n\n  String? _currentUserIdCache;\n\n  Future<String> get _currentUserId async {\n    _currentUserIdCache ??= _auth.currentUser?.uid ?? \"\";\n    return _currentUserIdCache!;\n  }\n\n  String? _currentUserEmailCache;\n\n  Future<String> get _currentUserEmail async {\n    _currentUserEmailCache ??= _auth.currentUser?.email ?? \"\";\n    return _currentUserEmailCache!;\n  }\n\n  static const String _collectionRootFolderName = 'collections';\n  static const String _bookmarkFolderName = 'bookmarks';\n  static const String _pinFolderName = 'pins';\n\n  Future<String> _signIn() async {\n    // Check if the user is already signed in\n    if (_auth.currentUser != null) return _auth.currentUser!.uid;\n\n    // Sign in with Google and retrieve the authentication credential\n    final AuthCredential? credential = await _signInWithGoogle();\n\n    // If the credential is null, throw a SignInException\n    if (credential == null) throw SignInException();\n\n    // Use the credential to sign in the user\n    final UserCredential userCredential = await _auth.signInWithCredential(credential);\n\n    // Retrieve the signed-in user from the UserCredential\n    final User? user = userCredential.user;\n\n    // If the user is null, throw a SignInException\n    if (user == null) throw SignInException();\n\n    // Retrieve the user ID\n    final String userId = user.uid;\n\n    // Cache the current user ID and email\n    _currentUserIdCache = userId;\n    _currentUserEmailCache = user.email;\n\n    // Log the login event to analytics\n    await _analytics.logLogin(loginMethod: \"Google Sign In\");\n\n    return userId;\n  }\n\n  Future<void> _signOut() async {\n    await _onAuthenticationValidated(() async {\n      await _googleSignIn.signOut();\n      await _auth.signOut();\n      await _purgeCredentialCache();\n    });\n  }\n\n  Future<bool> _checkAuthentication() async {\n    final bool? isAuthenticated = await catchAndReturnFuture(\n      () async => (await _currentUserId).isNotEmpty && (await _currentUserEmail).isNotEmpty,\n    );\n    return isAuthenticated ?? false;\n  }\n\n  Future<void> _onAuthenticationValidated(\n    FutureOr<void> Function() onValidated,\n  ) async {\n    final bool isAuthenticated = await _checkAuthentication();\n    isAuthenticated ? await onValidated() : logDebug(\"User is not authenticated\");\n  }\n\n  final Lock _listenToDeviceTokenLock = Lock();\n  String? _inMemoryDeviceToken;\n\n  Future<void> _listenToDeviceToken({\n    required void Function(String) onTokenFound,\n  }) async {\n    // prevents this function to be called multiple times in short period\n    await _listenToDeviceTokenLock.synchronized(() async {\n      _inMemoryDeviceToken ??= await _firebaseMessaging.getToken();\n      logDebug(\"Device token refreshed -> $_inMemoryDeviceToken\");\n      if (_inMemoryDeviceToken != null) onTokenFound(_inMemoryDeviceToken!);\n      _firebaseMessaging.onTokenRefresh.listen((String? token) {\n        logDebug(\"Device token refreshed -> $token\");\n        if (token != null) onTokenFound(token);\n      });\n    });\n  }\n\n  Future<void> _deleteHadithFromCollection({\n    required int hadithId,\n    required String folderName,\n  }) async {\n    // Validate authentication before proceeding\n    await _onAuthenticationValidated(() async {\n      // Define the key for the hadith ID field\n      const String hadithIdKey = \"hadith_id\";\n\n      // Retrieve the current user's email\n      final String email = await _currentUserEmail;\n\n      // Get the Firestore collection for the specified folder and user\n      final CollectionReference<Map<String, Object?>> collection =\n          _getFirestoreCollection(email: email, folderName: folderName);\n\n      // Query the collection for documents with matching hadith ID\n      final QuerySnapshot<Map<String, Object?>> querySnapshot =\n          await collection.where(hadithIdKey, isEqualTo: hadithId).get();\n\n      // Retrieve the list of documents\n      final List<QueryDocumentSnapshot<Map<String, Object?>>> documents = querySnapshot.docs;\n\n      // If no documents match the query, return\n      if (documents.isEmpty) return;\n\n      // Create a WriteBatch to perform the delete operation\n      final WriteBatch batch = _fireStore.batch();\n\n      // Add the delete operation for each document to the batch\n      for (final QueryDocumentSnapshot<Map<String, Object?>> document in documents) {\n        batch.delete(document.reference);\n      }\n\n      // Commit the batch operation to delete the documents\n      await batch.commit();\n    });\n  }\n\n  Future<void> _deleteHadithFromPins({required int hadithId}) async {\n    // When deleting a hadith from pins, we maintain the pins themselves\n    // but replace the associated hadith IDs with an invalid value (-1).\n    // This ensures that pins without a valid hadith are retained in the app,\n    // unless we decide to delete the pin itself.\n    await _onAuthenticationValidated(() async {\n      final String email = await _currentUserEmail;\n\n      // Get the Firestore collection for the specified folder and user\n      final CollectionReference<Map<String, Object?>> collection =\n          _getFirestoreCollection(email: email, folderName: _pinFolderName);\n\n      // Query the collection for documents with matching hadith ID\n      final QuerySnapshot<Map<String, Object?>> querySnapshot =\n          await collection.where(\"hadith_id\", isEqualTo: hadithId).get();\n\n      // Retrieve the list of documents\n      final List<QueryDocumentSnapshot<Map<String, Object?>>> documents = querySnapshot.docs;\n\n      // If no documents match the query, return\n      if (documents.isEmpty) return;\n\n      // Create a WriteBatch to perform the update operation\n      final WriteBatch batch = _fireStore.batch();\n\n      // Update the hadith_id field to -1 for each document in the batch\n      for (final QueryDocumentSnapshot<Map<String, Object?>> document in documents) {\n        final Map<String, Object> data = {\"hadith_id\": -1};\n        batch.update(document.reference, data);\n      }\n\n      // Commit the batch operation to update the documents\n      await batch.commit();\n    });\n  }\n\n  Future<void> deleteHadithFromBookmarkFolder({\n    required int hadithId,\n    required String folderName,\n  }) async {\n    await _onAuthenticationValidated(() async {\n      // Retrieve the current user's email\n      final String email = await _currentUserEmail;\n\n      // Key for the \"hadith_id\" field in Firestore\n      const String hadithIdKey = \"hadith_id\";\n\n      // Get the Firestore collection for bookmarks\n      final CollectionReference<Map<String, Object?>> collection = _getFirestoreCollection(\n        email: email,\n        folderName: _bookmarkFolderName,\n      );\n\n      // Query Firestore for documents with matching folder name and hadith ID\n      final QuerySnapshot<Map<String, Object?>> querySnapshot =\n          await collection.where(\"folder_name\", isEqualTo: folderName).where(hadithIdKey, isEqualTo: hadithId).get();\n      final List<QueryDocumentSnapshot<Map<String, Object?>>> documents = querySnapshot.docs;\n\n      // If no matching documents found, return\n      if (documents.isEmpty) return;\n\n      // Create a batch operation for efficient deletion\n      final WriteBatch batch = _fireStore.batch();\n\n      // Delete each matching document in the batch\n      for (final QueryDocumentSnapshot<Map<String, Object?>> document in documents) {\n        batch.delete(document.reference);\n      }\n\n      // Commit the batch operation to delete the documents\n      await batch.commit();\n    });\n  }\n}"}, {"structure_type": "function", "name": "setUp", "docstring": "", "module": "services", "file_path": "al-hadith-flutter/lib/data/services/local_cache_service.dart", "file_name": "local_cache_service.dart", "line": 10, "line_from": 10, "line_to": 70, "snippet": "  static Future<void> setUp() async {\n    final Directory document = await getApplicationDocumentsDirectory();\n    final String documentPath = document.path;\n    Hive.init(documentPath);\n    await Hive.openBox<Object>(_storageFileName);\n  }\n\n  static String get _storageFileName => \"${_secretVaultName}_239090\";\n\n  /// Saves the provided `value` to the persistent storage using the specified `key`.\n  ///\n  /// The type parameter `T` represents the type of the `value` being saved,\n  /// and it must be a subtype of `Object`.\n  ///\n  ///\n  /// Example usage:\n  ///\n  /// ```dart\n  /// await saveData(key: CacheKeys.userId, value: 'sufi_bhai_28283');\n  /// ```\n  Future<void> saveData<T extends Object>({\n    required String key,\n    required T value,\n  }) async {\n    await catchFutureOrVoid(() async {\n      if (key.isEmpty) return;\n      await _hiveBox.put(key, value);\n    });\n  }\n\n  /// Retrieves data from persistent storage using the specified `key`.\n  ///\n  /// The type parameter `T` represents the type of the data being retrieved,\n  /// and it allows writing type-safe and reusable code that can operate on\n  /// different data types.\n  ///\n  ///\n  /// If an error occurs during the retrieval process, an error message is logged,\n  /// and `null` is returned.\n  ///\n  /// Example usage:\n  ///\n  /// ```dart\n  /// String? userId = getData<String>(key: CacheKeys.userId);\n  /// bool? isFirstTime = getData<bool>(key: CacheKeys.firstTime);\n  /// ```\n  ///\n  /// Note: This function assumes that the `_hiveBox` instance is properly initialized\n  /// and accessible within the scope of this function.\n  T? getData<T>({required String key}) {\n    try {\n      final T? result = _hiveBox.get(key) as T?;\n      return result;\n    } catch (e) {\n      logError(\"getData: key: $key\\nerror: $e\");\n      return null;\n    }\n  }\n\n  late final Box<Object> _hiveBox = Hive.box(_storageFileName);\n}"}, {"structure_type": "function", "name": "getAllHadithBooks", "docstring": "", "module": "repositories", "file_path": "al-hadith-flutter/lib/domain/repositories/book_repository.dart", "file_name": "book_repository.dart", "line": 4, "line_from": 4, "line_to": 7, "snippet": "  Future<List<BookEntity>> getAllHadithBooks();\n\n  Future<int> getMaxHadithIdByBook({required int bookId});\n}"}, {"structure_type": "function", "name": "getHadithAsNotificationPayLoad", "docstring": "", "module": "repositories", "file_path": "al-hadith-flutter/lib/domain/repositories/notification_repository.dart", "file_name": "notification_repository.dart", "line": 5, "line_from": 5, "line_to": 12, "snippet": "  Future<NotificationPayLoadEntity> getHadithAsNotificationPayLoad({\n    DateTime? date,\n  });\n\n  Future<void> setUpPushNotificationListeners();\n\n  Future<ArticleEntity> getArticleById({required int id});\n}"}, {"structure_type": "function", "name": "getPublicationAndTranslatorsInfo", "docstring": "", "module": "repositories", "file_path": "al-hadith-flutter/lib/domain/repositories/info_repository.dart", "file_name": "info_repository.dart", "line": 7, "line_from": 7, "line_to": 42, "snippet": "  Future<String> getPublicationAndTranslatorsInfo();\n\n  Future<List<TahkikEntity>> getTahkikList();\n\n  Future<List<CollectorEntity>> getHadithCollectorList();\n\n  Future<void> getPromotionalMessage({\n    required void Function(PromotionalMessageEntity?) onMessage,\n  });\n\n  Future<void> closePromotionalMessage({required bool userSeen});\n\n  Future<TahkikEntity> getTahkikDetailsById({required int tahkikId});\n\n  Future<String> getDonateMessage();\n\n  Future<String> getHelpUsMessage();\n\n  Future<String> getAboutOrganization();\n\n  Future<String> getContactUsMessage();\n\n  Future<String> getLibraryAddress();\n\n  Future<String> getThanksMessage();\n\n  Future<String> getVolunteerHelp();\n\n  Future<String> getTopTenApps();\n\n  Future<String> getPrivacyPolicy();\n\n  Future<String> getAboutApp();\n\n  Future<List<OurProjectEntity>> getOurProjects();\n}"}, {"structure_type": "function", "name": "initSettings", "docstring": "", "module": "repositories", "file_path": "al-hadith-flutter/lib/domain/repositories/settings_repository.dart", "file_name": "settings_repository.dart", "line": 5, "line_from": 5, "line_to": 21, "snippet": "  Future<void> initSettings();\n\n  Stream<SettingsStateEntity> get settingsStream;\n\n  Future<void> updateSettings({required SettingsStateEntity settingsState});\n\n  Future<SettingsStateEntity> getSettingsState();\n\n  Future<void> dispose();\n\n  Future<void> scheduleNotification({\n    required TimeOfDay time,\n    required bool turnOn,\n  });\n\n  Future<void> scheduleNotificationAutomatically();\n}"}, {"structure_type": "function", "name": "getHadithByBookAndChapterId", "docstring": "", "module": "repositories", "file_path": "al-hadith-flutter/lib/domain/repositories/hadith_repository.dart", "file_name": "hadith_repository.dart", "line": 8, "line_from": 8, "line_to": 60, "snippet": "  Future<List<HadithEntity>> getHadithByBookAndChapterId({\n    required int hadithBookId,\n    required int chapterId,\n    bool withBookmarkIndicator = false,\n  });\n\n  Future<HadithEntity> getHadithById({required int hadithId});\n\n  Future<HadithEntity> getHadithByHadithNumber({\n    required int hadithNumber,\n    required BookEntity selectedBook,\n  });\n\n  Future<List<HadithEntity>> getHadithByCategory({\n    required CategoryEntity category,\n    bool withBookmarkIndicator = true,\n  });\n\n  Future<List<SectionEntity>> getHadithSectionsByBookAndChapterId({\n    required int hadithBookId,\n    required int chapterId,\n  });\n\n  Future<(List<HadithEntity>, int)> searchHadith({\n    required String query,\n    required List<BookEntity> bookList,\n    required SearchType searchType,\n  });\n\n  Future<HadithEntity> getTodaysHadith({DateTime? date});\n\n  Future<List<(int, String)>> getTodaysHadithAsText();\n\n  Future<List<HadithEntity>> getHadithListByHadithIdList({\n    required List<int> hadithIdList,\n  });\n\n  Future<List<(SectionEntity, HadithEntity)>> getHadithSectionPairByEach({\n    required int bookId,\n    required int chapterId,\n    bool refresh = false,\n  });\n\n  Future<List<(SectionEntity, HadithEntity)>> getHadithSectionPairByGroup({\n    required int bookId,\n    required int chapterId,\n    bool refresh = false,\n  });\n\n  Future<int> getHadithCountByBook({required int bookId});\n\n  Future<List<String>> getSearchHistories();\n}"}, {"structure_type": "function", "name": "deleteHadithFromBookmarks", "docstring": "", "module": "repositories", "file_path": "al-hadith-flutter/lib/domain/repositories/user_data_repository.dart", "file_name": "user_data_repository.dart", "line": 11, "line_from": 11, "line_to": 94, "snippet": "  Future<void> deleteHadithFromBookmarks({required HadithEntity hadith});\n\n  Future<void> deleteHadithFromBookmarkFolder({\n    required HadithEntity hadith,\n    required BookmarkFolderEntity folder,\n  });\n\n  Future<void> deleteHadithFromPins({required HadithEntity hadith});\n\n  Future<bool> deleteAndLoadDatabase();\n\n  Future<void> deleteBookmarkFolder({required BookmarkFolderEntity folder});\n\n  Future<UpdateInfoEntity> fetchUpdateInfo();\n\n  Future<void> deletePin({required PinEntity pin});\n\n  Future<List<BookmarkEntity>> getAllBookmarks();\n\n  Future<List<BookmarkFolderEntity>> getAllBookmarkFolders();\n\n  Future<BookmarkFolderEntity?> getBookmarkFolder({required String folderName});\n\n  Future<BookmarkFolderEntity> getBookmarkFolderByHadith({\n    required HadithEntity hadith,\n  });\n\n  Future<void> addHadithToBookmark({\n    required BookmarkEntity bookmark,\n    bool saveToRemote = true,\n  });\n\n  Future<void> addHadithToPin({required PinEntity pin});\n\n  Future<(List<BookmarkFolderEntity>, List<PinEntity>)> syncCollectionsWithRemote();\n\n  Future<void> updateBookmark({\n    required String folderName,\n    required String newFolderName,\n    required Color color,\n  });\n\n  Future<void> updatePin({\n    required String name,\n    required String newName,\n    required Color color,\n  });\n\n  Future<void> saveLastRead({required LastReadEntity lastRead});\n\n  Future<List<LastReadEntity>> getLastReads();\n\n  Future<bool> determineIfFirstTime();\n\n  Future<bool> determineIfItsUpdatedFromv3();\n\n  Future<bool> determineIfItsNewlyUpdated();\n\n  Future<void> retrieveLegacyData();\n\n  Future<bool> askForReviewIfAllowed({\n    required VoidCallback askForReview,\n  });\n\n  Future<List<PinEntity>> getAllPins();\n\n  Future<List<BookmarkFolderEntity>> getBookmarkFoldersByHadith({\n    required HadithEntity hadith,\n  });\n\n  Future<PinEntity?> getPinByHadith({required HadithEntity hadith});\n\n  Future<void> saveBookmarksToHadith({\n    required HadithEntity hadith,\n    required List<BookmarkEntity> bookmarks,\n  });\n\n  Future<void> saveCollections({\n    required List<BookmarkEntity> bookmarks,\n    required List<PinEntity> pins,\n  });\n\n  Future<void> doneFirstTime();\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "chapter", "file_path": "al-hadith-flutter/lib/domain/use_cases/chapter/search_sections.dart", "file_name": "search_sections.dart", "line": 17, "line_from": 17, "line_to": 65, "snippet": "  Future<Either<String, List<SectionEntity>>> execute({\n    required int bookId,\n    required int chapterId,\n    required String query,\n  }) async {\n    return mapResultToEither(() async {\n      return _searchLock.synchronized(\n        () async {\n          if (_allSections[\"$bookId-$chapterId\"] == null ||\n              _allSections[\"$bookId-$chapterId\"]!.isEmpty) {\n            _allSections[\"$bookId-$chapterId\"] =\n                await _chapterRepository.getSectionsByBookChapter(\n              bookId: bookId,\n              chapterId: chapterId,\n            );\n          }\n\n          if (query.isEmpty) {\n            return _allSections[\"$bookId-$chapterId\"] ?? List.empty();\n          }\n\n          final List<SectionEntity> filteredChapters = await _filterSections(\n            sections: _allSections[\"$bookId-$chapterId\"],\n            query: query,\n          );\n          return filteredChapters;\n        },\n      );\n    });\n  }\n\n  Future<List<SectionEntity>> _filterSections({\n    required List<SectionEntity>? sections,\n    required String query,\n  }) async =>\n      compute(_filterSectionsStatic, (sections, query));\n}\n\nList<SectionEntity> _filterSectionsStatic(\n  (List<SectionEntity>?, String) param,\n) {\n  final (allSections, query) = param;\n  if (allSections == null) return List.empty();\n  return allSections\n      .filter(\n        (sn) => sn.titleNumber.contains(query) || sn.title.contains(query),\n      )\n      .toList();\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "chapter", "file_path": "al-hadith-flutter/lib/domain/use_cases/chapter/search_categories.dart", "file_name": "search_categories.dart", "line": 24, "line_from": 24, "line_to": 66, "snippet": "  Future<Either<String, Map<String, List<CategoryEntity>>>> execute({\n    required String query,\n  }) async {\n    return mapResultToEither(() async {\n      return _searchLock.synchronized(() async {\n        if (_allCategories.isEmpty) {\n          _allCategoriesMap = await _hadithChapterRepository.getAllCategories();\n          _allCategories = _allCategoriesMap.values.flattened.toList();\n        }\n\n        if (query.isEmpty) return _allCategoriesMap;\n\n        final List<CategoryEntity> filteredCategories =\n            await _filterCategoriesByQuery(query);\n\n        final Map<String, List<CategoryEntity>> categoriesGroupedByFirstChar =\n            await compute(\n          _groupCategoriesByFirstLetter,\n          filteredCategories,\n        );\n        return categoriesGroupedByFirstChar;\n      });\n    });\n  }\n\n  Future<List<CategoryEntity>> _filterCategoriesByQuery(\n    String query,\n  ) async {\n    return compute(\n      _filterCategoriesByQueryStatic,\n      (_allCategories, query),\n    );\n  }\n}\n\nList<CategoryEntity> _filterCategoriesByQueryStatic(\n  (List<CategoryEntity>, String) param,\n) {\n  final (allCategories, query) = param;\n  return allCategories\n      .filter((category) => category.name.contains(query))\n      .toList();\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "chapter", "file_path": "al-hadith-flutter/lib/domain/use_cases/chapter/search_chapters_by_book.dart", "file_name": "search_chapters_by_book.dart", "line": 21, "line_from": 21, "line_to": 63, "snippet": "  Future<Either<String, List<ChapterEntity>>> execute({\n    required BookEntity book,\n    required String query,\n  }) async {\n    return mapResultToEither(() async {\n      return _searchLock.synchronized(\n        () async {\n          final List<ChapterEntity>? chaptersByBook = _allChapters[book];\n          if (chaptersByBook == null || chaptersByBook.isEmpty) {\n            _allChapters[book] =\n                await _chapterRepository.getChaptersByBook(book: book);\n          }\n\n          if (query == 'empty') {\n            return chaptersByBook ??\n                await _chapterRepository.getChaptersByBook(book: book);\n          }\n\n          final List<ChapterEntity> filteredChapters =\n              await _filterChapters(chapters: chaptersByBook, query: query);\n\n          return filteredChapters;\n        },\n      );\n    });\n  }\n\n  Future<List<ChapterEntity>> _filterChapters({\n    required List<ChapterEntity>? chapters,\n    required String query,\n  }) async =>\n      compute(_filterChaptersStatic, (chapters, query));\n}\n\nList<ChapterEntity> _filterChaptersStatic(\n  (List<ChapterEntity>?, String) param,\n) {\n  final (chapters, query) = param;\n  if (chapters == null || chapters.isEmpty) return List.empty();\n  return chapters\n      .filter((ch) => ch.title.toLowerCase().contains(query.toLowerCase()))\n      .toList();\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "info", "file_path": "al-hadith-flutter/lib/domain/use_cases/info/get_drawer_information.dart", "file_name": "get_drawer_information.dart", "line": 14, "line_from": 14, "line_to": 50, "snippet": "  Future<Either<String, String>> execute({\n    required DrawerInfo info,\n  }) async =>\n      mapResultToEither(() async => _getText(info));\n\n  Future<String> _getText(DrawerInfo info) async {\n    switch (info) {\n      case DrawerInfo.donateUs:\n        return _infoRepository.getDonateMessage();\n      case DrawerInfo.publicationAndTranslatorsInfo:\n        return _infoRepository.getPublicationAndTranslatorsInfo();\n      case DrawerInfo.libraries:\n        return _infoRepository.getLibraryAddress();\n      case DrawerInfo.aboutUs:\n        return _infoRepository.getAboutOrganization();\n      case DrawerInfo.contactUs:\n        return _infoRepository.getContactUsMessage();\n      case DrawerInfo.thanks:\n        return _infoRepository.getThanksMessage();\n      case DrawerInfo.volunteerHelp:\n        return _infoRepository.getVolunteerHelp();\n      case DrawerInfo.privacyPolicy:\n        return _infoRepository.getPrivacyPolicy();\n    }\n  }\n}\n\nenum DrawerInfo {\n  donateUs,\n  publicationAndTranslatorsInfo,\n  libraries,\n  aboutUs,\n  contactUs,\n  thanks,\n  volunteerHelp,\n  privacyPolicy,\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "info", "file_path": "al-hadith-flutter/lib/domain/use_cases/info/search_tahkik_list.dart", "file_name": "search_tahkik_list.dart", "line": 18, "line_from": 18, "line_to": 50, "snippet": "  Future<Either<String, List<TahkikEntity>>> execute({\n    required String query,\n  }) async {\n    return mapResultToEither(() => _searchTahkikList(query));\n  }\n\n  Future<List<TahkikEntity>> _searchTahkikList(String query) async {\n    if (tahkikList.isEmpty) tahkikList = await _infoRepository.getTahkikList();\n    if (query.isEmpty) return tahkikList;\n    final List<TahkikEntity> filteredTahkikList =\n        await _filterTahkikListByQuery(query);\n    return filteredTahkikList;\n  }\n\n  Future<List<TahkikEntity>> _filterTahkikListByQuery(\n    String query,\n  ) async {\n    return compute(\n      _filterTahkikListByQueryStatic,\n      (tahkikList, query),\n    );\n  }\n}\n\nList<TahkikEntity> _filterTahkikListByQueryStatic(\n  (List<TahkikEntity>, String) param,\n) {\n  final (tahkikList, query) = param;\n  final String pureQuery = query.trim().toLowerCase();\n  final List<TahkikEntity> filteredList =\n      tahkikList.where((tahkik) => tahkik.label.contains(pureQuery)).toList();\n  return filteredList;\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "bookmark_pin", "file_path": "al-hadith-flutter/lib/domain/use_cases/user_data/bookmark_pin/search_pin.dart", "file_name": "search_pin.dart", "line": 12, "line_from": 12, "line_to": 40, "snippet": "  Future<Either<String, List<PinEntity>>> execute({\n    required String query,\n    required List<PinEntity> allPins,\n  }) async {\n    return mapResultToEither(() async {\n      return _searchLock.synchronized(() async {\n        if (query.isEmpty) return allPins;\n        final List<PinEntity> filteredFolders =\n            await compute(_filterPinByQuery, (allPins, query));\n        return filteredFolders;\n      });\n    });\n  }\n}\n\nFuture<List<PinEntity>> _filterPinByQuery(\n  (List<PinEntity>, String) param,\n) async {\n  final (allFolders, query) = param;\n  final String normalizedQuery = query.toLowerCase();\n\n  final List<PinEntity> filteredFolders = [];\n  for (final PinEntity pin in allFolders) {\n    if (pin.name.toLowerCase().contains(normalizedQuery)) {\n      filteredFolders.add(pin);\n    }\n  }\n  return filteredFolders;\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "bookmark_pin", "file_path": "al-hadith-flutter/lib/domain/use_cases/user_data/bookmark_pin/sort_pin.dart", "file_name": "sort_pin.dart", "line": 11, "line_from": 11, "line_to": 33, "snippet": "  Future<Either<String, List<PinEntity>>> execute({\n    required SortOptionEntity option,\n    required List<PinEntity> pins,\n  }) async {\n    return mapResultToEither(\n      () async => compute(_sortPins, (option, pins)),\n    );\n  }\n}\n\nList<PinEntity> _sortPins((SortOptionEntity, List<PinEntity>) param) {\n  final (option, pins) = param;\n  switch (option.name) {\n    case \"\u098f \u099f\u09c1 \u099c\u09c7\u09a1\":\n      return _sortByName(pins);\n    case \"\u09af\u09c7 \u09a4\u09be\u09b0\u09bf\u0996\u09c7 \u09ac\u09be\u09a8\u09be\u09a8\u09cb \u09b9\u09df\u09c7\u099b\u09c7\":\n      return _sortByCreatedAt(pins);\n    case \"\u09b8\u09b0\u09cd\u09ac\u09b6\u09c7\u09b7 \u09aa\u09b0\u09bf\u09ac\u09b0\u09cd\u09a4\u09bf\u09a4\":\n      return _sortByUpdatedAt(pins);\n    default:\n      return pins;\n  }\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "bookmark_pin", "file_path": "al-hadith-flutter/lib/domain/use_cases/user_data/bookmark_pin/import_collections.dart", "file_name": "import_collections.dart", "line": 21, "line_from": 21, "line_to": 68, "snippet": "  Future<Either<String, String>> execute(String collectionJsonString) async {\n    return mapResultToEither(() async {\n      _validateFile(collectionJsonString);\n\n      final (bookmarks, pins) =\n          await compute(_mapToCollectionList, collectionJsonString);\n\n      logDebug(bookmarks);\n      logDebug(pins);\n\n      await _userDataRepository.saveCollections(\n        bookmarks: bookmarks,\n        pins: pins,\n      );\n      return \"\u0986\u09aa\u09a8\u09be\u09b0 \u09ac\u09c1\u0995\u09ae\u09be\u09b0\u09cd\u0995 \u098f\u09ac\u0982 \u09aa\u09bf\u09a8\u0997\u09c1\u09b2\u09cb \u0986\u09ac\u09be\u09b0 \u09af\u09c1\u0995\u09cd\u09a4 \u0995\u09b0\u09be \u09b9\u09df\u09c7\u099b\u09c7\u0964\";\n    });\n  }\n\n  void _validateFile(String collectionJsonString) {\n    if (collectionJsonString.isEmpty) throw Exception(\"\u09ab\u09be\u0987\u09b2\u099f\u09bf\u09a4\u09c7 \u0995\u09bf\u099b\u09c1\u0987 \u09a8\u09c7\u0987\u0964\");\n    if (!collectionJsonString.contains(\"bookmarks\") &&\n        !collectionJsonString.contains(\"pins\")) {\n      throw Exception(\"\u09ab\u09be\u0987\u09b2\u099f\u09bf \u09b8\u09ae\u09cd\u09ad\u09ac\u09a4 \u0986\u09b2-\u09b9\u09be\u09a6\u09bf\u09b8 \u0985\u09cd\u09af\u09be\u09aa \u09a5\u09c7\u0995\u09c7 \u098f\u0995\u09cd\u09b8\u09aa\u09cb\u09b0\u09cd\u099f \u0995\u09b0\u09be \u09a8\u09df\u0964\");\n    }\n  }\n}\n\nFuture<(List<BookmarkEntity>, List<PinEntity>)> _mapToCollectionList(\n  String collectionJsonString,\n) async {\n  final Map<String, dynamic> collectionMap =\n      jsonDecode(collectionJsonString) as Map<String, dynamic>;\n\n  final List<Map<String, Object?>> bookmarksMap =\n      (collectionMap[\"bookmarks\"] as List<dynamic>)\n          .map((any) => any as Map<String, Object?>)\n          .toList();\n\n  final List<Map<String, Object?>> pinsMap =\n      (collectionMap[\"pins\"] as List<dynamic>)\n          .map((any) => any as Map<String, Object?>)\n          .toList();\n\n  final List<BookmarkEntity> bookmarks = await bookmarksMap.toBookmarks();\n  final List<PinEntity> pins = await convertMapListToPinList(maps: pinsMap);\n\n  return (bookmarks, pins);\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "bookmark_pin", "file_path": "al-hadith-flutter/lib/domain/use_cases/user_data/bookmark_pin/save_bookmarks_to_hadith.dart", "file_name": "save_bookmarks_to_hadith.dart", "line": 17, "line_from": 17, "line_to": 55, "snippet": "  Future<Either<String, String>> execute({\n    required HadithEntity hadith,\n    required List<BookmarkFolderEntity> savingFolders,\n  }) async {\n    return mapResultToEither(() async {\n      final List<BookmarkEntity> generatedBookmarks =\n          await _mapBookmarkFoldersIntoBookmarks(savingFolders, hadith);\n      await _userDataRepository.saveBookmarksToHadith(\n        hadith: hadith,\n        bookmarks: generatedBookmarks,\n      );\n      return savingFolders.isNotEmpty ? \"\u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8 \u09b8\u09c7\u09ad \u0995\u09b0\u09be \u09b9\u09df\u09c7\u099b\u09c7\" : \"\";\n    });\n  }\n\n  Future<List<BookmarkEntity>> _mapBookmarkFoldersIntoBookmarks(\n    List<BookmarkFolderEntity> folders,\n    HadithEntity hadith,\n  ) async {\n    final List<BookmarkEntity> bookmarks = await compute(\n      _mapBookmarkFoldersIntoBookmarksPure,\n      (folders, hadith),\n    );\n    return bookmarks;\n  }\n}\n\nList<BookmarkEntity> _mapBookmarkFoldersIntoBookmarksPure(\n  (List<BookmarkFolderEntity>, HadithEntity) param,\n) {\n  final (folders, hadith) = param;\n  final List<BookmarkEntity> generatedBookmarks = folders\n      .map(\n        (folder) =>\n            _mapBookmarkFolderToBookmark(hadith: hadith, folder: folder),\n      )\n      .toList();\n  return generatedBookmarks;\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "bookmark_pin", "file_path": "al-hadith-flutter/lib/domain/use_cases/user_data/bookmark_pin/search_bookmark.dart", "file_name": "search_bookmark.dart", "line": 12, "line_from": 12, "line_to": 40, "snippet": "  Future<Either<String, List<BookmarkFolderEntity>>> execute({\n    required String query,\n    required List<BookmarkFolderEntity> allFolders,\n  }) async {\n    return mapResultToEither(() async {\n      return _searchLock.synchronized(() async {\n        if (query.isEmpty) return allFolders;\n        final List<BookmarkFolderEntity> filteredFolders =\n            await compute(_filterFolderByQuery, (allFolders, query));\n        return filteredFolders;\n      });\n    });\n  }\n}\n\nFuture<List<BookmarkFolderEntity>> _filterFolderByQuery(\n  (List<BookmarkFolderEntity>, String) param,\n) async {\n  final (allFolders, query) = param;\n  final String normalizedQuery = query.trim().toLowerCase();\n\n  final List<BookmarkFolderEntity> filteredFolders = [];\n  for (final BookmarkFolderEntity folder in allFolders) {\n    if (folder.name.toLowerCase().contains(normalizedQuery)) {\n      filteredFolders.add(folder);\n    }\n  }\n  return filteredFolders;\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "bookmark_pin", "file_path": "al-hadith-flutter/lib/domain/use_cases/user_data/bookmark_pin/export_collections.dart", "file_name": "export_collections.dart", "line": 20, "line_from": 20, "line_to": 53, "snippet": "  Future<Either<String, String>> execute() async {\n    return mapResultToEither(() async {\n      final List<BookmarkEntity> bookmarks =\n          await _userDataRepository.getAllBookmarks();\n      final List<PinEntity> pins = await _userDataRepository.getAllPins();\n\n      final String collectionJsonString =\n          await compute(_collectionToMapList, (bookmarks, pins));\n\n      return collectionJsonString;\n    });\n  }\n}\n\nFuture<String> _collectionToMapList(\n  (List<BookmarkEntity>, List<PinEntity>) param,\n) async {\n  final (bookmarks, pins) = param;\n\n  final bookmarksAsMapFuture = convertHadithBookmarkListToDtoMap(bookmarks);\n  final pinsAsMapFuture = convertPinListToMapListSync(pins);\n  final tasks = await Future.wait([bookmarksAsMapFuture, pinsAsMapFuture]);\n\n  final List<Map<String, Object?>> bookmarksAsMap =\n      tasks.firstOrNull ?? List.empty();\n  final List<Map<String, Object?>> pinsAsMap = tasks.lastOrNull ?? List.empty();\n\n  final Map<String, List<Map<String, Object?>>> collectionMap = {}\n    ..putIfAbsent(\"bookmarks\", () => bookmarksAsMap)\n    ..putIfAbsent(\"pins\", () => pinsAsMap);\n\n  final String collectionJson = json.encode(collectionMap);\n  return collectionJson;\n}"}, {"structure_type": "function", "name": "execute", "docstring": "", "module": "bookmark_pin", "file_path": "al-hadith-flutter/lib/domain/use_cases/user_data/bookmark_pin/sort_bookmark.dart", "file_name": "sort_bookmark.dart", "line": 11, "line_from": 11, "line_to": 39, "snippet": "  Future<Either<String, List<BookmarkFolderEntity>>> execute({\n    required SortOptionEntity option,\n    required List<BookmarkFolderEntity> folders,\n  }) async {\n    return mapResultToEither(\n      () async {\n        final List<BookmarkFolderEntity> sortedBookmarks =\n            await compute(_sortBookmarks, (option, folders));\n        return sortedBookmarks;\n      },\n    );\n  }\n}\n\nList<BookmarkFolderEntity> _sortBookmarks(\n  (SortOptionEntity, List<BookmarkFolderEntity>) param,\n) {\n  final (option, folders) = param;\n  switch (option.name) {\n    case \"\u098f \u099f\u09c1 \u099c\u09c7\u09a1\":\n      return _sortByName(folders);\n    case \"\u09af\u09c7 \u09a4\u09be\u09b0\u09bf\u0996\u09c7 \u09ac\u09be\u09a8\u09be\u09a8\u09cb \u09b9\u09df\u09c7\u099b\u09c7\":\n      return _sortByCreatedAt(folders);\n    case \"\u09b8\u09b0\u09cd\u09ac\u09b6\u09c7\u09b7 \u09aa\u09b0\u09bf\u09ac\u09b0\u09cd\u09a4\u09bf\u09a4\":\n      return _sortByUpdatedAt(folders);\n    default:\n      return folders;\n  }\n}"}, {"structure_type": "class", "name": "SettingsService", "docstring": "", "module": "service", "file_path": "al-hadith-flutter/lib/domain/service/settings_service.dart", "file_name": "settings_service.dart", "line": 1, "line_from": 1, "line_to": 3, "snippet": "abstract class SettingsService {}\n"}, {"structure_type": "class", "name": "AnnouncementEntity extends Equatable", "docstring": "", "module": "entities", "file_path": "al-hadith-flutter/lib/domain/entities/announcement_entity.dart", "file_name": "announcement_entity.dart", "line": 4, "line_from": 4, "line_to": 33, "snippet": "class AnnouncementEntity extends Equatable {\n  const AnnouncementEntity({\n    required this.hadithList,\n    required this.promotionalMessage,\n    required this.announcementType,\n  });\n\n  factory AnnouncementEntity.empty() => AnnouncementEntity(\n        hadithList: const [],\n        promotionalMessage: PromotionalMessageEntity.empty(),\n        announcementType: AnnouncementType.hadith,\n      );\n\n  final List<(int, String)> hadithList;\n  final PromotionalMessageEntity? promotionalMessage;\n  final AnnouncementType announcementType;\n\n  @override\n  List<Object?> get props => [hadithList, promotionalMessage, announcementType];\n\n  AnnouncementEntity close() => AnnouncementEntity(\n        hadithList: hadithList,\n        promotionalMessage: null,\n        announcementType: AnnouncementType.hadith,\n      );\n}\n\nenum AnnouncementType { hadith, promotionalMessage }\n"}, {"structure_type": "class", "name": "SettingsStateEntity extends Equatable", "docstring": "", "module": "entities", "file_path": "al-hadith-flutter/lib/domain/entities/settings_state_entity.dart", "file_name": "settings_state_entity.dart", "line": 5, "line_from": 5, "line_to": 131, "snippet": "class SettingsStateEntity extends Equatable {\n  const SettingsStateEntity({\n    required this.showChapter,\n    required this.showArabic,\n    required this.showHadithActionButton,\n    required this.arabicFontSize,\n    required this.localFontSize,\n    required this.arabicFontScript,\n    required this.arabicFont,\n    required this.showDailyNotification,\n    required this.dailyNotificationTime,\n    required this.themeState,\n    required this.keepScreenOn,\n    required this.viewMode,\n    required this.showTashkeel,\n  });\n\n  factory SettingsStateEntity.empty() {\n    return const SettingsStateEntity(\n      showChapter: false,\n      showArabic: true,\n      showHadithActionButton: true,\n      arabicFontSize: 22,\n      localFontSize: 17,\n      arabicFontScript: ArabicFontScript.uthmani,\n      arabicFont: ArabicFonts.kfgq,\n      showDailyNotification: true,\n      dailyNotificationTime: TimeOfDay(hour: 9, minute: 0),\n      themeState: ThemeState.light,\n      keepScreenOn: false,\n      viewMode: HadithListViewMode.vertical,\n      showTashkeel: true,\n    );\n  }\n\n  final bool showChapter;\n  final bool showArabic;\n  final bool showHadithActionButton;\n  final double arabicFontSize;\n  final double localFontSize;\n  final ArabicFontScript arabicFontScript;\n  final ArabicFonts arabicFont;\n  final bool showDailyNotification;\n  final TimeOfDay dailyNotificationTime;\n  final ThemeState themeState;\n  final bool keepScreenOn;\n  final HadithListViewMode viewMode;\n  final bool showTashkeel;\n\n  @override\n  List<Object?> get props => [\n        showChapter,\n        showArabic,\n        showHadithActionButton,\n        arabicFontSize,\n        localFontSize,\n        arabicFontScript,\n        arabicFont,\n        showDailyNotification,\n        dailyNotificationTime,\n        themeState,\n        keepScreenOn,\n        viewMode,\n        showTashkeel,\n      ];\n\n  SettingsStateEntity copyWith({\n    bool? showChapter,\n    bool? showArabic,\n    bool? showHadithActionButton,\n    double? arabicFontSize,\n    double? localFontSize,\n    ArabicFontScript? arabicFontScript,\n    ArabicFonts? arabicFont,\n    bool? showDailyNotification,\n    TimeOfDay? dailyNotificationTime,\n    ThemeState? themeState,\n    bool? keepScreenOn,\n    HadithListViewMode? viewMode,\n    bool? showTashkeel,\n  }) {\n    return SettingsStateEntity(\n      showChapter: showChapter ?? this.showChapter,\n      showArabic: showArabic ?? this.showArabic,\n      showHadithActionButton:\n          showHadithActionButton ?? this.showHadithActionButton,\n      arabicFontSize: arabicFontSize ?? this.arabicFontSize,\n      localFontSize: localFontSize ?? this.localFontSize,\n      arabicFontScript: arabicFontScript ?? this.arabicFontScript,\n      arabicFont: arabicFont ?? this.arabicFont,\n      showDailyNotification:\n          showDailyNotification ?? this.showDailyNotification,\n      dailyNotificationTime:\n          dailyNotificationTime ?? this.dailyNotificationTime,\n      themeState: themeState ?? this.themeState,\n      keepScreenOn: keepScreenOn ?? this.keepScreenOn,\n      viewMode: viewMode ?? this.viewMode,\n      showTashkeel: showTashkeel ?? this.showTashkeel,\n    );\n  }\n}\n\nenum ArabicFontScript { uthmani, indoPak }\n\nenum ArabicFonts {\n  kfgq,\n  meQuran,\n}\n\nMap<ArabicFonts, String> arabicFontToFontFamilyMap = {\n  ArabicFonts.kfgq: FontFamily.kfgq,\n  ArabicFonts.meQuran: FontFamily.meQuran,\n};\n\nMap<ArabicFonts, String> arabicFontToNameMap = {\n  ArabicFonts.kfgq: \"\u0995\u09bf\u0982 \u09ab\u09be\u09b9\u09be\u09a6 \u0997\u09cd\u09b2\u09cb\u09b0\u09bf\u09df\u09be\u09b8 \u0995\u09c1\u09b0\u0986\u09a8 \u09ab\u09a8\u09cd\u099f\",\n  ArabicFonts.meQuran: \"\u09ae\u09bf \u0995\u09c1\u09b0\u0986\u09a8\",\n  };\n\nenum ThemeState { light, dark }\n\nenum HadithListViewMode {\n  vertical,\n  horizontal,\n}\n"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "ui", "file_path": "al-hadith-flutter/lib/presentation/settings/ui/hadith_view_mode_option.dart", "file_name": "hadith_view_mode_option.dart", "line": 13, "line_from": 13, "line_to": 141, "snippet": "  final void Function(HadithListViewMode) onViewChange;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedSwitcher(\n      duration: 600.inMilliseconds,\n      child: Container(\n        margin: const EdgeInsets.only(left: 10),\n        padding: const EdgeInsets.all(5),\n        decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(4),\n          color: Theme.of(context).scaffoldBackgroundColor,\n        ),\n        child: Row(\n          children: [\n            ThemeToggleItem(\n              title: \"\u09b2\u09bf\u09b8\u09cd\u099f \u09ad\u09bf\u0989\",\n              onTap: () => onViewChange(HadithListViewMode.vertical),\n              icon: Icons.list_rounded,\n              isSelected: viewState == HadithListViewMode.vertical,\n            ),\n            const SizedBox(width: 6),\n            ThemeToggleItem(\n              onTap: () => onViewChange(HadithListViewMode.horizontal),\n              title: \"\u09b8\u09cd\u09b2\u09be\u0987\u09a1 \u09ad\u09bf\u0989\",\n              icon: Icons.view_carousel_outlined,\n              isSelected: viewState == HadithListViewMode.horizontal,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass ThemeToggleItem extends StatelessWidget {\n  const ThemeToggleItem({\n    super.key,\n    required this.title,\n    required this.icon,\n    required this.isSelected,\n    required this.onTap,\n  });\n\n  final String title;\n  final IconData icon;\n  final bool isSelected;\n  final void Function() onTap;\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n\n    final decorationTween = DecorationTween(\n      begin: BoxDecoration(\n        color: themeData.scaffoldBackgroundColor,\n        borderRadius: BorderRadius.circular(4),\n      ),\n      end: BoxDecoration(\n        color: themeData.primaryColor,\n        borderRadius: BorderRadius.circular(4),\n      ),\n    );\n\n    final matrix4Tween = Matrix4Tween(\n      begin: Matrix4.identity(),\n      end: Matrix4.translationValues(0, 0, 1)..scale(1.01),\n    );\n\n    return Expanded(\n      child: AnimatedSwitcher(\n        duration: 200.inMilliseconds,\n        child: InkWell(\n          onTap: onTap,\n          child: AnimatedContainer(\n            duration: 100.inMilliseconds,\n            decoration: decorationTween\n                .animate(\n                  CurvedAnimation(\n                    curve: Curves.easeInOut,\n                    reverseCurve: Curves.easeInOut,\n                    parent: isSelected\n                        ? const AlwaysStoppedAnimation(1)\n                        : const AlwaysStoppedAnimation(0),\n                  ),\n                )\n                .value,\n            transform: matrix4Tween\n                .animate(\n                  CurvedAnimation(\n                    curve: Curves.easeInOut,\n                    reverseCurve: Curves.easeInOut,\n                    parent: isSelected\n                        ? const AlwaysStoppedAnimation(1)\n                        : const AlwaysStoppedAnimation(0),\n                  ),\n                )\n                .value,\n            padding: const EdgeInsets.all(8),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                Padding(\n                  padding: const EdgeInsets.only(top: 1),\n                  child: Text(\n                    title,\n                    style: TextStyle(\n                      fontSize: 14,\n                      color: isSelected\n                          ? Colors.white\n                          : themeData.textTheme.bodyMedium?.color,\n                    ),\n                  ),\n                ),\n                const SizedBox(width: 10),\n                Icon(\n                  icon,\n                  color: isSelected\n                      ? Colors.white\n                      : themeData.textTheme.bodyMedium?.color,\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/settings/presenter/settings_presenter.dart", "file_name": "settings_presenter.dart", "line": 218, "line_from": 218, "line_to": 229, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = uiState.value.copyWith(errorMessage: \"\", isLoading: false);\n  }\n\n  final CloseAnnouncementUseCase _closeAnnouncement;\n\n  Future<void> closeNoticeBox(PromotionalMessageEntity message) async {\n    final Either<String, Unit> result =\n        await _closeAnnouncement.execute(userSeen: true);\n\n    result.fold(addUserMessage, doNothing);\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "services", "file_path": "al-hadith-flutter/lib/presentation/settings/services/file_service_presentable.dart", "file_name": "file_service_presentable.dart", "line": 55, "line_from": 55, "line_to": 83, "snippet": "    required void Function(String) onContent,\n  }) async {\n    await catchFutureOrVoid(() async {\n      final List<String>? filesPaths =\n          await _fileUtility.filePicker(params: textFilePickerParams);\n\n      if (filesPaths == null || filesPaths.isEmpty) {\n        await showMessage(message: \"\u0986\u09aa\u09a8\u09bf \u0995\u09cb\u09a8 \u09ab\u09be\u0987\u09b2 \u09a8\u09bf\u09b0\u09cd\u09ac\u09be\u099a\u09a8 \u0995\u09b0\u09c7\u09a8\u09a8\u09bf\u0964\");\n        throw Exception(\"No file selected\");\n      }\n\n      final String rightFilePath = filesPaths.first;\n\n      final File file = File(rightFilePath);\n      final bool fileExists = file.existsSync();\n      if (!fileExists) {\n        await showMessage(message: \"\u09ab\u09be\u0987\u09b2\u099f\u09bf \u09b2\u09cb\u09a1 \u0995\u09b0\u09be \u09b8\u09ae\u09cd\u09ad\u09ac \u09b9\u09df\u09a8\u09bf\u0964\");\n        throw Exception(\"File doesn't exist\");\n      }\n\n      final String fileContent = await file.readAsString();\n      if (fileContent.isEmpty) {\n        await showMessage(message: \"\u09ab\u09be\u0981\u0995\u09be \u09ab\u09be\u0987\u09b2\u0964\");\n        throw Exception(\"Empty text file\");\n      }\n\n      onContent(fileContent);\n    });\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "notification", "file_path": "al-hadith-flutter/lib/presentation/settings/services/notification/notification_service_utilities.dart", "file_name": "notification_service_utilities.dart", "line": 19, "line_from": 19, "line_to": 49, "snippet": "      await Future<void>.delayed(manualDelayDuration, run);\n    });\n  }\n\n  static Duration _determineManualDelayDuration(int addedDayCount) =>\n      addedDayCount == 0 ? 3.inSeconds : Duration(seconds: Random().nextInt(3) + addedDayCount);\n\n  static int get notificationScheduleDayCount => Random(DateTime.now().millisecondsSinceEpoch).nextInt(65) + 31;\n\n  static NotificationContent buildNotificationContent({\n    required int notificationId,\n    required String channelKey,\n    required Map<String, String?> payload,\n  }) {\n    final String notificationTitle = payload[\"title\"] ?? \"\";\n    final String notificationBody = payload[\"body\"] ?? \"\";\n    final bool invalidNotification = notificationTitle.isEmpty || notificationBody.isEmpty;\n    if (invalidNotification) throw InvalidNotificationException();\n\n    return NotificationContent(\n      id: notificationId,\n      channelKey: channelKey,\n      title: notificationTitle,\n      body: notificationBody,\n      category: NotificationCategory.Recommendation,\n      backgroundColor: HadithColors.greenEmerald,\n      notificationLayout: NotificationLayout.BigText,\n      payload: payload,\n      \n    );\n  }"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "ui", "file_path": "al-hadith-flutter/lib/presentation/home/ui/hadith_home_page.dart", "file_name": "hadith_home_page.dart", "line": 34, "line_from": 34, "line_to": 198, "snippet": "  void initState() {\n    _onInit();\n    super.initState();\n  }\n\n  void _onInit() {\n    KeyboardService.dismiss(context: AlHadithApp.globalContext);\n    UiHelper.onMessage(_presenter.uiState);\n    UiHelper.doOnPageLoaded(() {\n      _onOpenedFromNotification();\n      _presenter\n        ..askForReview(askForReview: () async => ReviewDialog.show())\n        ..onCheckIfNeedForceUpdate(\n          onForceUpdate: (info) => UpdateDialog.show(context, info),\n        );\n    });\n  }\n\n  late final List<Widget> _homeTabs = [\n    HadithBookListTab(),\n    const HadithCategoryListTab(),\n    const TahkikListTab(),\n    CollectionTab(),\n  ];\n\n  late final HomePresenter _presenter = locate();\n\n  @override\n  Widget build(BuildContext context) {\n    return UpgradeAppDialogContainer(\n      child: PresentableWidgetBuilder(\n        presenter: _presenter,\n        builder: () {\n          return ColoredBox(\n            color: Theme.of(context).secondaryHeaderColor,\n            child: Scaffold(\n              drawerEnableOpenDragGesture: false,\n              key: _presenter.homeScaffoldKey,\n              drawer: HomePageDrawer(\n                onDrawerClose: _presenter.closeDrawer,\n              ),\n              extendBody: true,\n              extendBodyBehindAppBar: true,\n              bottomNavigationBar: HadithBottomNavBar(key: const Key(\"bottomNavigationBar\")),\n              body: WillPopScope(\n                onWillPop: () async => _onClickBack(context),\n                child: LazyLoadIndexedStack(\n                  index: _presenter.currentNavBarIndex.value,\n                  unloadWidget: const Center(child: CircularProgressIndicator()),\n                  children: _homeTabs,\n                ),\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  Completer<SnackBarClosedReason> _closedCompleter = Completer<SnackBarClosedReason>()\n    ..complete(SnackBarClosedReason.remove);\n\n  bool get _isSnackBarVisible => !_closedCompleter.isCompleted;\n\n  bool get _willHandlePopInternally => ModalRoute.of(context)?.willHandlePopInternally ?? false;\n\n  Future<bool> _onClickBack(BuildContext context) async {\n    final bool isDrawerOpen = _presenter.homeScaffoldKey.currentState?.isDrawerOpen ?? false;\n    final int currentNavigationIndex = _presenter.currentNavBarIndex.value;\n    final bool currentlyAtHome = currentNavigationIndex == 0;\n\n    if (isDrawerOpen) {\n      await _presenter.closeDrawer();\n      return false;\n    }\n\n    if (!currentlyAtHome) {\n      await _presenter.setNavBarIndex(0);\n      return false;\n    }\n\n    final bool showWarningToCloseApp = currentlyAtHome && Platform.isAndroid;\n    if (showWarningToCloseApp) return _handleClosingAppWarning(context);\n\n    return true;\n  }\n\n  Future<bool> _handleClosingAppWarning(BuildContext context) async {\n    final ScaffoldMessengerState scaffoldMessenger = ScaffoldMessenger.of(context)..hideCurrentSnackBar();\n    final bool allowedToCloseApp = _isSnackBarVisible || _willHandlePopInternally;\n    if (allowedToCloseApp) {\n      scaffoldMessenger.hideCurrentSnackBar();\n      await Future<void>.delayed(120.inMilliseconds);\n      return true;\n    } else {\n      _closedCompleter = scaffoldMessenger.showSnackBar(_buildBackToCloseSnackBar(context)).closed.wrapInCompleter();\n      return false;\n    }\n  }\n\n  SnackBar _buildBackToCloseSnackBar(BuildContext context) {\n    return SnackBar(\n      content: const Text(\n        \"\u0985\u09cd\u09af\u09be\u09aa \u09a5\u09c7\u0995\u09c7 \u09ac\u09c7\u09b0 \u09b9\u0993\u09df\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u0986\u09ac\u09be\u09b0 \u0995\u09cd\u09b2\u09bf\u0995 \u0995\u09b0\u09c1\u09a8 ...\",\n        textAlign: TextAlign.center,\n        style: TextStyle(\n          color: Colors.white,\n          fontFamily: FontFamily.kalpurush,\n          fontSize: 15,\n        ),\n      ),\n      backgroundColor: Theme.of(context).primaryColor,\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.circular(12),\n      ),\n      margin: const EdgeInsets.all(8),\n      behavior: SnackBarBehavior.floating,\n      duration: 1.inSeconds,\n    );\n  }\n\n  void _onOpenedFromNotification() {\n    locate<NotificationService>().onOpenedFromNotification();\n  }\n}\n\nclass HadithBottomNavBar extends StatelessWidget {\n  HadithBottomNavBar({super.key});\n\n  final HomePresenter _presenter = locate();\n\n  @override\n  Widget build(BuildContext context) {\n    return PresentableWidgetBuilder(\n      presenter: _presenter,\n      builder: () {\n        return FloatingNavbar(\n          key: const ValueKey(\"bottomNavBar\"),\n          items: navBarItems,\n          currentIndex: _presenter.currentNavBarIndex.value,\n          onTap: _presenter.setNavBarIndex,\n        );\n      },\n    );\n  }\n\n  late final List<FloatingNavbarItem> navBarItems = [\n    FloatingNavbarItem(\n      unselectedSvgPath: SvgPath.icHome,\n      selectedSvgPath: SvgPath.icHomeFilled,\n    ),\n    FloatingNavbarItem(\n      unselectedSvgPath: SvgPath.icBook,\n      selectedSvgPath: SvgPath.icBookFilled,\n    ),\n    FloatingNavbarItem(\n      unselectedSvgPath: SvgPath.icList,\n      selectedSvgPath: SvgPath.icListFilled,\n    ),\n    FloatingNavbarItem(\n      unselectedSvgPath: SvgPath.icBookmarkNav,\n      selectedSvgPath: SvgPath.icBookmarkFilledNav,\n    ),\n  ];\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "al-hadith-flutter/lib/presentation/home/ui/drawer/our_projects_page.dart", "file_name": "our_projects_page.dart", "line": 20, "line_from": 20, "line_to": 149, "snippet": "  Widget build(BuildContext context) {\n    return PresentableWidgetBuilder(\n      presenter: _presenter..fetchOurProjects(),\n      builder: () {\n        final List<OurProjectEntity> ourProjects =\n            _presenter.currentUiState.ourProjects;\n        return Scaffold(\n          appBar: const HadithAppBar(\n            title: \"\u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u09aa\u09cd\u09b0\u099c\u09c7\u0995\u09cd\u099f\u09b8 \u09b8\u09ae\u09c2\u09b9\",\n          ),\n          body: RoundedScaffoldBody(\n            child: Padding(\n              padding: EdgeInsets.symmetric(horizontal: fourteenPx),\n              child: ListView.builder(\n                physics: const BouncingScrollPhysics(),\n                padding: EdgeInsets.only(top: fifteenPx),\n                itemCount: ourProjects.length,\n                itemBuilder: (context, index) {\n                  final OurProjectEntity ourProject = ourProjects[index];\n                  return CustomListTitle(\n                    key: ValueKey(ourProject.id),\n                    ourProject: ourProject,\n                  );\n                },\n              ),\n            ),\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass CustomListTitle extends StatelessWidget {\n  const CustomListTitle({\n    super.key,\n    required this.ourProject,\n  });\n\n  final OurProjectEntity ourProject;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      margin: EdgeInsets.only(bottom: fourteenPx),\n      padding:\n          EdgeInsets.symmetric(horizontal: fourteenPx, vertical: fifteenPx),\n      width: HadithScreen.width,\n      decoration: BoxDecoration(\n        color: Theme.of(context).cardColor,\n        borderRadius: BorderRadius.circular(20.px),\n      ),\n      child: Column(\n        children: [\n          Row(\n            children: [\n              Image.asset(\n                ourProject.icon,\n                width: 40.px,\n              ),\n              SizedBox(width: fifteenPx),\n              Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(\n                    ourProject.banglaName,\n                    style: Theme.of(context).textTheme.bodyMedium!.copyWith(\n                          fontWeight: FontWeight.w600,\n                          fontSize: seventeenPx,\n                        ),\n                  ),\n                  Text(\n                    \"IRD Foundation\",\n                    style: Theme.of(context).textTheme.bodyMedium!.copyWith(\n                          fontWeight: FontWeight.w600,\n                          color: Theme.of(context).primaryColor,\n                        ),\n                  ),\n                ],\n              ),\n            ],\n          ),\n          SizedBox(height: fifteenPx),\n          Text(\n            ourProject.banglaDescription,\n            textAlign: TextAlign.justify,\n            style: Theme.of(context).textTheme.bodyMedium!.copyWith(\n                  fontSize: seventeenPx,\n                  color: Theme.of(context).textTheme.bodyMedium!.color,\n                ),\n          ),\n          SizedBox(height: fifteenPx),\n          if (ourProject.appStoreLink == null &&\n              ourProject.playStoreLink == null)\n            CustomButton(\n              width: HadithScreen.width * .85,\n              text: \"\u0993\u09af\u09bc\u09c7\u09ac\u09b8\u09be\u0987\u099f\",\n              onTap: () => launchUrl(\n                Uri.parse(ourProject.websiteLink),\n                mode: LaunchMode.externalApplication,\n              ),\n            )\n          else\n            Row(\n              children: [\n                if (ourProject.appStoreLink != null &&\n                    ourProject.playStoreLink != null)\n                  CustomButton(\n                    text: \"\u09a1\u09be\u0989\u09a8\u09b2\u09cb\u09a1 \u0985\u09cd\u09af\u09be\u09aa\",\n                    onTap: () => openUrl(\n                      url: Platform.isIOS\n                          ? ourProject.appStoreLink!\n                          : ourProject.playStoreLink!,\n                    ),\n                  ),\n                const Spacer(),\n                CustomButton(\n                  text: \"\u0993\u09af\u09bc\u09c7\u09ac\u09b8\u09be\u0987\u099f\",\n                  onTap: () => launchUrl(\n                    Uri.parse(ourProject.websiteLink),\n                    mode: LaunchMode.externalApplication,\n                  ),\n                ),\n              ],\n            ),\n        ],\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "drawer", "file_path": "al-hadith-flutter/lib/presentation/home/ui/drawer/drawer_view_presenter.dart", "file_name": "drawer_view_presenter.dart", "line": 136, "line_from": 136, "line_to": 157, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = _uiState.copyWith(errorMessage: \"\", isLoading: false);\n  }\n\n  DrawerViewUiState get _uiState => uiState.value;\n\n  Future<void> onPromotionInteraction({\n    required void Function(String promotionUrl) onInternet,\n    required VoidCallback onNoInternet,\n  }) async {\n    final bool isNetworkAvailable = await checkInternetConnection();\n    if (!isNetworkAvailable) {\n      onNoInternet();\n      return;\n    }\n    const String appStoreUrl =\n        \"https://apps.apple.com/us/developer/md-saiful-islam-saif/id1238182913\";\n    const String playStoreUrl =\n        \"https://play.google.com/store/apps/dev?id=5689317609893757784\";\n    final String promotionUrl = Platform.isIOS ? appStoreUrl : playStoreUrl;\n    onInternet(promotionUrl);\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "drawer", "file_path": "al-hadith-flutter/lib/presentation/home/ui/drawer/home_page_drawer.dart", "file_name": "home_page_drawer.dart", "line": 32, "line_from": 32, "line_to": 411, "snippet": "  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n    return SafeArea(\n      bottom: false,\n      child: Drawer(\n        elevation: 0,\n        width: 75.percentWidth,\n        backgroundColor: themeData.cardColor,\n        shape: const RoundedRectangleBorder(\n          borderRadius: BorderRadius.only(\n            topRight: Radius.circular(40),\n            bottomRight: Radius.circular(40),\n          ),\n        ),\n        child: ClipRRect(\n          borderRadius: const BorderRadius.only(\n            topRight: Radius.circular(40),\n            bottomRight: Radius.circular(40),\n          ),\n          child: Column(\n            children: [\n              Expanded(\n                child: SingleChildScrollView(\n                  physics: const BouncingScrollPhysics(),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      SizedBox(height: fifteenPx),\n                      SizedBox(\n                        height: HadithScreen.width * .55,\n                        child: Stack(\n                          children: [\n                            Container(\n                              alignment: Alignment.center,\n                              padding: EdgeInsets.all(tenPx),\n                              child: Image.asset(\n                                SvgPath.bgDrawerHeader,\n                                fit: BoxFit.cover,\n                              ),\n                            ),\n                            Align(\n                              alignment: const Alignment(.02, .37),\n                              child: Text(\n                                '\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8',\n                                style: themeData.textTheme.bodyMedium?.copyWith(\n                                  fontWeight: FontWeight.w600,\n                                  fontSize: sixteenPx,\n                                ),\n                              ),\n                            ),\n                            FutureBuilder(\n                              future: currentAppVersion,\n                              builder: (context, snapshot) {\n                                return Align(\n                                  alignment: const Alignment(.02, .6),\n                                  child: Text(\n                                    '\u09ad\u09be\u09b0\u09cd\u09b8\u09a8\u0983 ${snapshot.data == null ? \"\" : translateNumberToBanglaString(snapshot.data!)}',\n                                    style: themeData.textTheme.bodyMedium?.copyWith(\n                                      fontWeight: FontWeight.w600,\n                                      fontSize: twelvePx,\n                                    ),\n                                  ),\n                                );\n                              },\n                            ),\n                          ],\n                        ),\n                      ),\n                      Padding(\n                        padding: EdgeInsets.symmetric(horizontal: 25.px),\n                        child: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            SizedBox(height: twentyTwoPx),\n                            Text(\n                              \"\u09ae\u09c7\u0987\u09a8 \u09ae\u09c7\u09a8\u09c1\",\n                              style: TextStyle(\n                                fontSize: fifteenPx,\n                                color: themeData.textTheme.bodyMedium?.color,\n                              ),\n                            ),\n                             Divider(color: themeData.dividerColor,),\n                            SizedBox(height: fifteenPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icSettingsFill,\n                              title: \"\u09b8\u09c7\u099f\u09bf\u0982\u09b8\",\n                              onTap: () => context.navigatorPush<void>(const SettingsPage()),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icContacts,\n                              title: \"\u09af\u09cb\u0997\u09be\u09af\u09cb\u0997 \u0995\u09b0\u09c1\u09a8\",\n                              onTap: () async => _onClickContactUs(context),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icOtherProjects,\n                              title: \"\u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u09aa\u09cd\u09b0\u099c\u09c7\u0995\u09cd\u099f\u09b8 \u09b8\u09ae\u09c2\u09b9\",\n                              onTap: () async => _onClickOurProjects(context),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icAboutUs,\n                              title: \"\u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09c7\",\n                              onTap: () async => _onClickAboutUs(context),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icSupport,\n                              title: \"\u09b8\u09a6\u09be\u0995\u09cd\u09ac\u09be\u09df \u099c\u09be\u09b0\u09bf\u09df\u09be\u09df \u0985\u0982\u09b6 \u09a8\u09bf\u09a8\",\n                              onTap: () async => _onClickDonate(context),\n                            ),\n                            SizedBox(height: 35.px),\n                            Text(\n                              \"\u0985\u09a8\u09cd\u09af\u09be\u09a8\u09cd\u09af\",\n                              style: TextStyle(\n                                fontSize: fifteenPx,\n                                color: themeData.textTheme.bodyMedium!.color,\n                              ),\n                            ),\n                            Divider(color: themeData.dividerColor,),\n                            SizedBox(height: fifteenPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icTodayHadith,\n                              title: \"\u0986\u099c\u0995\u09c7\u09b0 \u09b9\u09be\u09a6\u09bf\u09b8\",\n                              onTap: () => context.navigatorPush<void>(\n                                const SingleHadithPage(),\n                              ),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icAboutWriters,\n                              title: \"\u09b2\u09c7\u0996\u0995 \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09c7\",\n                              onTap: () => context.navigatorPush<void>(AboutWritersPage()),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icPublications,\n                              title: \"\u09aa\u09cd\u09b0\u0995\u09be\u09b6\u09a8\u09c0 \u0993 \u0985\u09a8\u09c1\u09ac\u09be\u09a6\u0995\",\n                              onTap: () async => _onClickPublisherTranslator(context),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icBookPlace,\n                              title: \"\u09ac\u0987\u0997\u09c1\u09b2\u09cb \u09aa\u09cd\u09b0\u09be\u09aa\u09cd\u09a4\u09bf\u09b0 \u09b8\u09cd\u09a5\u09be\u09a8\",\n                              onTap: () async => _onClickLibrary(context),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icThanks,\n                              title: \"\u0995\u09c3\u09a4\u099c\u09cd\u099e\u09a4\u09be \u09b8\u09cd\u09ac\u09c0\u0995\u09be\u09b0\",\n                              onTap: () async => _onClickThanks(context),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icHelpUS,\n                              title: \"\u09ad\u09b2\u09be\u09a8\u09cd\u099f\u09bf\u09df\u09be\u09b0 \u09b9\u09c7\u09b2\u09cd\u09aa\",\n                              onTap: () => _onClickVolunteerHelp(context),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icBugReport,\n                              title: \"\u09ac\u09be\u0997 \u09b0\u09bf\u09aa\u09cb\u09b0\u09cd\u099f \u0995\u09b0\u09c1\u09a8\",\n                              onTap: () => context.navigatorPush<void>(BugReportPage()),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icPrivacy,\n                              title: \"\u09aa\u09cd\u09b0\u09be\u0987\u09ad\u09c7\u09b8\u09bf \u09aa\u09b2\u09bf\u09b8\u09bf\",\n                              onTap: () => _onClickPrivacyPolicy(context),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icShareFilled,\n                              title: \"\u0985\u09cd\u09af\u09be\u09aa\u099f\u09bf \u09b6\u09c7\u09df\u09be\u09b0 \u0995\u09b0\u09c1\u09a8\",\n                              onTap: () async => _onShareButtonClicked(context),\n                            ),\n                            SizedBox(height: thirtyPx),\n                            HadithDrawerListItem(\n                              iconPath: SvgPath.icRating,\n                              title: \"\u0985\u09cd\u09af\u09be\u09aa\u09c7 \u09b0\u09c7\u099f\u09bf\u0982 \u09a6\u09bf\u09a8\",\n                              onTap: _onRatingClicked,\n                            ),\n                            SizedBox(height: 40.px),\n                          ],\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              Container(\n                margin: EdgeInsets.only(bottom: Platform.isIOS ? fifteenPx : 0),\n                padding: EdgeInsets.all(tenPx),\n                decoration: BoxDecoration(\n                  border: Border(\n                    top: BorderSide(color: themeData.dividerColor),\n                  ),\n                ),\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceAround,\n                  children: [\n                    const DrawerBottomImageButton(\n                      bgColor: Color(0xFF0089EF),\n                      icon: SvgPath.icFacebook,\n                      onPressed: launchFacebookPage,\n                    ),\n                    const DrawerBottomImageButton(\n                      bgColor: Color(0xFF0089EF),\n                      icon: SvgPath.icFabGroup,\n                      onPressed: launchFacebookGroup,\n                    ),\n                    DrawerBottomImageButton(\n                      bgColor: const Color(0xFF1AA483),\n                      icon: SvgPath.icWeb,\n                      onPressed: () => openUrl(url: websiteUrl),\n                    ),\n                    const DrawerBottomImageButton(\n                      bgColor: Color(0xFFE51C19),\n                      icon: SvgPath.icGmail,\n                      onPressed: sendEmail,\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Future<void> _onRatingClicked() {\n    return openUrl(url: Platform.isIOS ? appStoreUrl : playStoreUrl);\n  }\n\n  Future<void> _onClickPrivacyPolicy(BuildContext context) async {\n    await _presenter.fetchPrivacyPolicy();\n    final String privacyPolicy = _presenter.currentUiState.privacyPolicy;\n    if (context.mounted) {\n      await context.navigatorPush<void>(\n        InfoPage(title: \"\u09aa\u09cd\u09b0\u09be\u0987\u09ad\u09c7\u09b8\u09bf \u09aa\u09b2\u09bf\u09b8\u09bf\", information: privacyPolicy),\n      );\n    }\n  }\n\n  Future<void> _onClickPublisherTranslator(BuildContext context) async {\n    await _presenter.fetchPublicationAndTranslatorsInfo();\n\n    final PublishersAndTranslatorsPage publishersAndTranslatorsPage = await Future.microtask(\n      PublishersAndTranslatorsPage.new,\n    );\n\n    if (context.mounted) {\n      await context.navigatorPush<void>(publishersAndTranslatorsPage);\n    }\n  }\n\n  Future<void> _onClickOurProjects(BuildContext context) async {\n    await _presenter.fetchOurProjects();\n    final OurProjectsPage ourProjectsPage = OurProjectsPage();\n\n    if (context.mounted) await context.navigatorPush<void>(ourProjectsPage);\n  }\n\n  Future<void> _onClickDonate(BuildContext context) async {\n    await _presenter.fetchDonationInfo();\n\n    final SupportUsPage supportUsPage = await Future.microtask(\n      () => SupportUsPage(\n        donationInfo: _presenter.currentUiState.donationInfo,\n      ),\n    );\n\n    if (context.mounted) await context.navigatorPush<void>(supportUsPage);\n  }\n\n  Future<void> _onClickLibrary(BuildContext context) async {\n    await _presenter.fetchPublicationAndTranslatorsInfo();\n\n    final String publicationAndTranslatorInfo = _presenter.currentUiState.publishersAndTranslators;\n    final InfoPage infoPage = InfoPage(\n      title: \"\u09ac\u0987 \u09b2\u09be\u0987\u09ac\u09cd\u09b0\u09c7\u09b0\u09bf\",\n      information: publicationAndTranslatorInfo,\n    );\n\n    if (context.mounted) await context.navigatorPush<void>(infoPage);\n  }\n\n  Future<void> _onClickAboutUs(BuildContext context) async {\n    await _presenter.fetchAboutUs();\n    final InfoPage infoPage = await Future.microtask(\n      () => InfoPage(\n        title: \"\u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09c7\",\n        coverPhoto: \"about_us\",\n        information: _presenter.currentUiState.aboutUs,\n      ),\n    );\n\n    if (context.mounted) await context.navigatorPush<void>(infoPage);\n  }\n\n  Future<void> _onClickContactUs(BuildContext context) async {\n    await _presenter.fetchContactUs();\n\n    final ContactUsPage contactUsPage = await Future.microtask(\n      () => ContactUsPage(\n        contactInfo: _presenter.currentUiState.contactUs,\n      ),\n    );\n\n    if (context.mounted) await context.navigatorPush<void>(contactUsPage);\n  }\n\n  Future<void> _onClickVolunteerHelp(BuildContext context) async {\n    await _presenter.fetchVolunteerHelp();\n\n    final InfoPage infoPage = await Future.microtask(\n      () => InfoPage(\n        title: \"\u09ad\u09b2\u09be\u09a8\u09cd\u099f\u09bf\u09df\u09be\u09b0 \u09b9\u09c7\u09b2\u09cd\u09aa\",\n        coverPhoto: \"thanks_credits\",\n        information: _presenter.currentUiState.volunteerHelp,\n      ),\n    );\n\n    if (context.mounted) await context.navigatorPush<void>(infoPage);\n  }\n\n  Future<void> _onClickThanks(BuildContext context) async {\n    await _presenter.fetchThanks();\n    if (context.mounted) {\n      await context.navigatorPush<void>(\n        InfoPage(\n          title: \"\u0995\u09c3\u09a4\u099c\u09cd\u099e\u09a4\u09be \u09b8\u09cd\u09ac\u09c0\u0995\u09be\u09b0\",\n          coverPhoto: \"thanks_credits\",\n          information: _presenter.currentUiState.thanks,\n        ),\n      );\n    }\n  }\n\n  Future<void> _onShareButtonClicked(BuildContext context) async {\n    final String shareableText = \"Al Hadith (\u0986\u09b2 \u09b9\u09be\u09a6\u09bf\u09b8) is an Great Collection of Hadith of \"\n        \"Prophet Muhammad (\ufdfa). The app contains 49000+ hadith from \"\n        \"Most Accepted and Authentic Hadith books.\\n\"\n        \"Please download the app from: $suitableAppStoreUrl.\";\n\n    await shareText(text: shareableText);\n  }\n}\n\nclass DrawerBottomImageButton extends StatelessWidget {\n  const DrawerBottomImageButton({\n    super.key,\n    required this.icon,\n    required this.bgColor,\n    required this.onPressed,\n  });\n\n  final String icon;\n  final Color bgColor;\n  final VoidCallback onPressed;\n\n  @override\n  Widget build(BuildContext context) {\n    return InkWell(\n      onTap: onPressed,\n      child: Container(\n        width: 11.percentWidth,\n        height: 11.percentWidth,\n        padding: EdgeInsets.all(tenPx),\n        decoration: BoxDecoration(\n          shape: BoxShape.circle,\n          color: bgColor.withOpacity(.1),\n        ),\n        child: SvgPicture.asset(icon),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "book_list", "file_path": "al-hadith-flutter/lib/presentation/home/ui/book_list/book_list_fancy_background.dart", "file_name": "book_list_fancy_background.dart", "line": 14, "line_from": 14, "line_to": 58, "snippet": "  Widget build(BuildContext context) {\n    // used vector for improved rendering performance\n    return RepaintBoundary(\n      child: SvgPicture(\n        const AssetBytesLoader(SvgPath.bgHomeVector),\n        height: 40.percentHeight,\n        width: 100.percentWidth,\n        colorFilter: themeService.isDarkMode\n            ? ColorFilter.mode(\n                Theme.of(context).bannerTheme.backgroundColor!,\n                BlendMode.srcATop,\n              )\n            : ColorFilter.mode(\n                Theme.of(context).bannerTheme.backgroundColor!.withOpacity(0),\n                BlendMode.srcATop,\n              ),\n      ),\n    );\n  }\n}\n\nclass BookListFancyBackgroundColor extends StatelessWidget {\n  const BookListFancyBackgroundColor({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      height: 35.percentHeight,\n      decoration: BoxDecoration(\n        gradient: LinearGradient(\n          begin: Alignment.topCenter,\n          end: Alignment.bottomCenter,\n          colors: [\n            Theme.of(context).secondaryHeaderColor,\n            Theme.of(context).bannerTheme.shadowColor!.withOpacity(0.9),\n          ],\n        ),\n        borderRadius: BorderRadius.only(\n          bottomLeft: Radius.circular(twentyPx),\n          bottomRight: Radius.circular(twentyPx),\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "show", "docstring": "", "module": "go_to_hadith", "file_path": "al-hadith-flutter/lib/presentation/home/ui/go_to_hadith/go_to_hadith_dialog.dart", "file_name": "go_to_hadith_dialog.dart", "line": 24, "line_from": 24, "line_to": 191, "snippet": "  static Future<void> show(BuildContext context) async {\n    await showAnimatedDialog<void>(\n      context: context,\n      builder: (_) => const GoToHadithDialog(),\n      animationType: DialogTransitionType.slideFromTop,\n      curve: Curves.fastOutSlowIn,\n      barrierDismissible: true,\n    );\n  }\n\n  @override\n  State<GoToHadithDialog> createState() => _GoToHadithDialogState();\n}\n\nclass _GoToHadithDialogState extends State<GoToHadithDialog> {\n  late final GoToPresenter _presenter = locate();\n\n  late final TextEditingController _editingController = TextEditingController();\n\n  StreamSubscription<GoToUiState>? _subscription;\n\n  @override\n  void initState() {\n    super.initState();\n    _subscription = _presenter.uiState\n        .listen((state) => showMessage(message: state.userMessage));\n  }\n\n  @override\n  void dispose() {\n    _subscription?.cancel();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n    return PresentableWidgetBuilder(\n      presenter: _presenter,\n      builder: () {\n        final GoToUiState uiState = _presenter.uiState.value;\n        return Dialog(\n          shape: RoundedRectangleBorder(\n            borderRadius: BorderRadius.circular(twentyPx),\n          ),\n          insetPadding: EdgeInsets.symmetric(horizontal: twentyPx),\n          child: Container(\n            decoration: BoxDecoration(\n              color: themeData.cardColor,\n              borderRadius: BorderRadius.circular(twentyPx),\n            ),\n            height: 50.percentHeight,\n            child: ClipRRect(\n              borderRadius: BorderRadius.circular(twentyPx),\n              child: Stack(\n                children: [\n                  Align(\n                    alignment: Alignment.bottomCenter,\n                    child: SvgPicture.asset(\n                      SvgPath.dicBG,\n                      fit: BoxFit.cover,\n                      height: 80.percentWidth,\n                      colorFilter: ColorFilter.mode(\n                        Theme.of(context).colorScheme.secondaryContainer,\n                        BlendMode.srcATop,\n                      ),\n                    ),\n                  ),\n                  Align(\n                    alignment: Alignment.topCenter,\n                    child: Padding(\n                      padding: EdgeInsets.only(top: twentyPx),\n                      child: SizedBox(\n                        width: 40.percentWidth,\n                        height: 25.percentWidth,\n                        child: SvgPicture.asset(\n                          SvgPath.dicPlane,\n                          fit: BoxFit.cover,\n                        ),\n                      ),\n                    ),\n                    // .paddingOnly(top: twentyPx),\n                  ),\n                  Container(\n                    margin: EdgeInsets.only(top: 16.percentHeight),\n                    padding: EdgeInsets.symmetric(horizontal: fifteenPx),\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.spaceAround,\n                      children: [\n                        Center(\n                          child: Text(\n                            \"\u09b8\u09b0\u09be\u09b8\u09b0\u09bf \u09b9\u09be\u09a6\u09bf\u09b8\u09c7 \u09af\u09be\u09a8\",\n                            textAlign: TextAlign.center,\n                            style: themeData.textTheme.titleMedium?.copyWith(\n                              fontSize: 5.percentWidth,\n                              fontWeight: FontWeight.w600,\n                            ),\n                          ),\n                        ),\n                        // SizedBox(height: twentyFourPx),\n                        HadithBookOptionDropDown(\n                          availableBooks: uiState.hadithBooks,\n                          selectedBook: uiState.selectedBook,\n                        ),\n                        // SizedBox(height: twentyPx),\n                        HadithInputField(\n                          editingController: _editingController,\n                          isHadithInputEnabled: uiState.isHadithInputEnabled,\n                          onTapValidation: () => _presenter\n                              .addUserMessage(\"\u09aa\u09cd\u09b0\u09a5\u09ae\u09c7 \u09ac\u0987 \u09a8\u09bf\u09b0\u09cd\u09ac\u09be\u099a\u09a8 \u0995\u09b0\u09c1\u09a8\"),\n                          onChangedValidation: _presenter.validateHadithNumber,\n                        ),\n                        // const Spacer(),\n                        GoToActionButtons(\n                          onDoneClick: () => _onDoneClick(context),\n                        ),\n                        // SizedBox(height: twentyPx),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        );\n      },\n    );\n  }\n\n  Future<void> _onDoneClick(BuildContext context) async {\n    if (!_presenter.isHadithNumberValidated) return;\n    Throttle.throttle(\"go_to_hadith_throttle_tag\", 1.inSeconds, () async {\n      closeKeyboard();\n\n      final String hadithNumber = _editingController.text;\n      final HadithEntity? hadith =\n          await _presenter.getHadithByHadithNumber(hadithNumber: hadithNumber);\n\n      if (context.mounted) context.navigatorPop<void>();\n\n      if (hadith == null) return;\n\n      await _presenter.preLoadHadith(\n        bookId: hadith.bookId,\n        chapterId: hadith.chapterId,\n        onLoaded: () => _goToHadithListPage(hadith, context),\n      );\n    });\n  }\n\n  Future<void> _goToHadithListPage(\n    HadithEntity hadith,\n    BuildContext context,\n  ) async {\n    final HadithListArgument args = HadithListArgument(\n      bookName: hadith.book.name,\n      bookId: hadith.bookId,\n      chapterId: hadith.chapterId,\n      sectionId: hadith.sectionId,\n      chapterName: \"\",\n      isFromLastReadOrGoTo: true,\n      hadithId: hadith.id,\n    );\n    final HadithListPage hadithListPage =\n        await Future.microtask(() => HadithListPage(args: args));\n    if (context.mounted) await context.navigatorPush<bool?>(hadithListPage);\n  }\n}"}, {"structure_type": "class", "name": "NoticeDialog extends StatelessWidget", "docstring": "", "module": "notice", "file_path": "al-hadith-flutter/lib/presentation/home/ui/notice/notice_dialog.dart", "file_name": "notice_dialog.dart", "line": 14, "line_from": 14, "line_to": 480, "snippet": "class NoticeDialog extends StatelessWidget {\n  const NoticeDialog({super.key, required this.payload});\n\n  final PromotionalMessageEntity payload;\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n    final TextTheme textTheme = themeData.textTheme;\n\n    final PromotionalMessagePaymentBank paymentBank = payload.paymentBank;\n    final PromotionalMessagePaymentMobile paymentMobile = payload.paymentMobile;\n    final PromotionalMessageOtherContacts otherContacts = payload.otherContacts;\n    final PromotionalMessagePost post = payload.post;\n    return SafeArea(\n      child: AlertDialog(\n        surfaceTintColor: themeData.cardColor,\n        insetPadding: const EdgeInsets.symmetric(horizontal: 14, vertical: 20),\n        contentPadding: EdgeInsets.zero,\n        content: SizedBox(\n          width: HadithScreen.width,\n          child: ClipRRect(\n            borderRadius: BorderRadius.vertical(top: Radius.circular(twelvePx)),\n            child: SingleChildScrollView(\n              physics: const ClampingScrollPhysics(),\n              child: post.posterUrl.isNotEmpty\n                  ? Container(\n                      width: HadithScreen.width,\n                      height: 400,\n                      decoration: BoxDecoration(\n                        image: DecorationImage(\n                          image: NetworkImage(post.posterUrl),\n                          fit: BoxFit.cover,\n                        ),\n                      ),\n                    )\n                  : Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        NoticeDialogHeaderImage(imageUrl: post.headerImageUrl),\n                        const SizedBox(height: 10),\n                        Padding(\n                          padding: const EdgeInsets.symmetric(horizontal: 14),\n                          child: Column(\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              Text(\n                                post.title,\n                                style: textTheme.titleMedium?.copyWith(\n                                  color: themeData.primaryColor,\n                                  fontWeight: FontWeight.bold,\n                                  fontSize: 18,\n                                ),\n                              ),\n                              const SizedBox(height: 20),\n                              Builder(\n                                key: ValueKey<String>(post.body),\n                                builder: (context) {\n                                  return HTML.toRichText(\n                                    context,\n                                    post.body.replaceAll(\"\\\\n\", \"<br><br>\"),\n                                    defaultTextStyle: textTheme.bodyMedium\n                                        ?.copyWith(fontSize: 15),\n                                  );\n                                },\n                              ),\n                              if (paymentMobile.bKashPrimary.isNotEmpty ||\n                                  paymentMobile.bKashSecondary.isNotEmpty ||\n                                  paymentMobile.rocketPrimary.isNotEmpty ||\n                                  paymentMobile.rocketSecondary.isNotEmpty ||\n                                  paymentMobile.nagadPrimary.isNotEmpty ||\n                                  paymentMobile.nagadSecondary.isNotEmpty ||\n                                  paymentMobile.uPayPrimary.isNotEmpty ||\n                                  paymentMobile.uPaySecondary.isNotEmpty ||\n                                  paymentBank.showBankInfo)\n                                Column(\n                                  children: [\n                                    const SizedBox(height: 30),\n                                    _buildSubtitle(\n                                      context,\n                                      \"\u0986\u09aa\u09a8\u09bf \u098f\u0987 \u09a8\u09ae\u09cd\u09ac\u09b0\u0997\u09c1\u09b2\u09bf\u09a4\u09c7 \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u0985\u09a8\u09c1\u09a6\u09be\u09a8 \u09aa\u09be\u09a0\u09be\u09a4\u09c7 \u09aa\u09be\u09b0\u09c7\u09a8:\",\n                                    ),\n                                    const SizedBox(height: 10),\n                                    if (paymentMobile.bKashPrimary.isNotEmpty)\n                                      NoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${paymentMobile.bKashPrimary}bKashPrimary\",\n                                        ),\n                                        color: _bKashButtonColor,\n                                        icon: SvgPath.icBkash,\n                                        title:\n                                            \"\u09ac\u09bf\u0995\u09be\u09b6: ${paymentMobile.bKashPrimary}\",\n                                        actionType: ButtonActionType.copy,\n                                        onPressed: () => _copyNoticeItem(\n                                          _extractNumbers(\n                                            paymentMobile.bKashPrimary,\n                                          ),\n                                          \"\u09ac\u09bf\u0995\u09be\u09b6\",\n                                        ),\n                                      ),\n                                    if (paymentMobile.bKashSecondary.isNotEmpty)\n                                      NoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${paymentMobile.bKashSecondary}bKashSecondary\",\n                                        ),\n                                        color: _bKashButtonColor,\n                                        icon: SvgPath.icBkash,\n                                        title:\n                                            \"\u09ac\u09bf\u0995\u09be\u09b6: ${paymentMobile.bKashSecondary}\",\n                                        actionType: ButtonActionType.copy,\n                                        onPressed: () => _copyNoticeItem(\n                                          _extractNumbers(\n                                            paymentMobile.bKashSecondary,\n                                          ),\n                                          \"\u09ac\u09bf\u0995\u09be\u09b6\",\n                                        ),\n                                      ),\n                                    if (paymentMobile.nagadPrimary.isNotEmpty)\n                                      NoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${paymentMobile.nagadPrimary}nagadPrimary\",\n                                        ),\n                                        color: _nagadButtonColor,\n                                        icon: SvgPath.icNagad,\n                                        title:\n                                            \"\u09a8\u0997\u09a6: ${paymentMobile.nagadPrimary}\",\n                                        actionType: ButtonActionType.copy,\n                                        onPressed: () => _copyNoticeItem(\n                                          _extractNumbers(\n                                            paymentMobile.nagadPrimary,\n                                          ),\n                                          \"\u09a8\u0997\u09a6\",\n                                        ),\n                                      ),\n                                    if (paymentMobile.nagadSecondary.isNotEmpty)\n                                      NoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${paymentMobile.nagadSecondary}nagadSecondary\",\n                                        ),\n                                        color: _nagadButtonColor,\n                                        icon: SvgPath.icNagad,\n                                        title:\n                                            \"\u09a8\u0997\u09a6: ${paymentMobile.nagadSecondary}\",\n                                        actionType: ButtonActionType.copy,\n                                        onPressed: () => _copyNoticeItem(\n                                          _extractNumbers(\n                                            paymentMobile.nagadSecondary,\n                                          ),\n                                          \"\u09a8\u0997\u09a6\",\n                                        ),\n                                      ),\n                                    if (paymentMobile.rocketPrimary.isNotEmpty)\n                                      NoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${paymentMobile.rocketPrimary}rocketPrimary\",\n                                        ),\n                                        color: _rocketButtonColor,\n                                        icon: SvgPath.icRocket,\n                                        title:\n                                            \"\u09b0\u0995\u09c7\u099f: ${paymentMobile.rocketPrimary}\",\n                                        actionType: ButtonActionType.copy,\n                                        onPressed: () => _copyNoticeItem(\n                                          _extractNumbers(\n                                            paymentMobile.rocketPrimary,\n                                          ),\n                                          \"\u09b0\u0995\u09c7\u099f\",\n                                        ),\n                                      ),\n                                    if (paymentMobile\n                                        .rocketSecondary.isNotEmpty)\n                                      NoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${paymentMobile.rocketSecondary}rocketSecondary\",\n                                        ),\n                                        color: _rocketButtonColor,\n                                        icon: SvgPath.icRocket,\n                                        title:\n                                            \"\u09b0\u0995\u09c7\u099f: ${paymentMobile.rocketSecondary}\",\n                                        actionType: ButtonActionType.copy,\n                                        onPressed: () => _copyNoticeItem(\n                                          _extractNumbers(\n                                            paymentMobile.rocketSecondary,\n                                          ),\n                                          \"\u09b0\u0995\u09c7\u099f\",\n                                        ),\n                                      ),\n                                    if (paymentMobile.uPayPrimary.isNotEmpty)\n                                      NoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${paymentMobile.uPayPrimary}uPayPrimary\",\n                                        ),\n                                        color: _uPayButtonColor,\n                                        icon: SvgPath.icUpay,\n                                        title:\n                                            \"\u0989\u09aa\u09be\u09df: ${paymentMobile.uPayPrimary}\",\n                                        actionType: ButtonActionType.copy,\n                                        onPressed: () => _copyNoticeItem(\n                                          _extractNumbers(\n                                            paymentMobile.uPayPrimary,\n                                          ),\n                                          \"\u0989\u09aa\u09be\u09df\",\n                                        ),\n                                      ),\n                                    if (paymentMobile.uPaySecondary.isNotEmpty)\n                                      NoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${paymentMobile.uPaySecondary}uPaySecondary\",\n                                        ),\n                                        color: _uPayButtonColor,\n                                        icon: SvgPath.icUpay,\n                                        title:\n                                            \"\u0989\u09aa\u09be\u09df: ${paymentMobile.uPaySecondary}\",\n                                        actionType: ButtonActionType.copy,\n                                        onPressed: () => _copyNoticeItem(\n                                          _extractNumbers(\n                                            paymentMobile.uPaySecondary,\n                                          ),\n                                          \"\u0989\u09aa\u09be\u09df\",\n                                        ),\n                                      ),\n                                    if (paymentBank.showBankInfo)\n                                      NoticeDialogBankInfoCard(\n                                        key: ValueKey<\n                                            PromotionalMessagePaymentBank>(\n                                          paymentBank,\n                                        ),\n                                        bankInfo: paymentBank,\n                                        onPressed: () => _copyNoticeItem(\n                                          '''AC Name: ${paymentBank.accountName}\\nBank Name: ${paymentBank.bankName}\\nAC Number: ${paymentBank.accountNumber}\\nBranch: ${paymentBank.bankBranch}\\nRouting No: ${paymentBank.routingNumber}\\nSwift No: ${paymentBank.swiftCode}''',\n                                          \"\u09ac\u09cd\u09af\u09be\u0982\u0995 \u09a4\u09a5\u09cd\u09af\",\n                                        ),\n                                      ),\n                                  ],\n                                ),\n                              if (otherContacts.email.isNotEmpty ||\n                                  otherContacts.facebookPageUrl.isNotEmpty ||\n                                  otherContacts.facebookGroupUrl.isNotEmpty ||\n                                  payload.socialMedia.messengerButtonUrl\n                                      .isNotEmpty ||\n                                  payload.socialMedia.telegramButtonUrl\n                                      .isNotEmpty ||\n                                  payload.socialMedia.whatsappButtonUrl\n                                      .isNotEmpty ||\n                                  payload\n                                      .additionalButton.buttonText.isNotEmpty ||\n                                  payload.additionalButton.buttonUrl.isNotEmpty)\n                                Column(\n                                  children: [\n                                    const SizedBox(height: 20),\n                                    _buildSubtitle(\n                                      context,\n                                      \"\u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u09b8\u09be\u09a5\u09c7 \u09af\u09cb\u0997\u09be\u09af\u09cb\u0997 \u0995\u09b0\u09a4\u09c7:\",\n                                    ),\n                                    const SizedBox(height: 10),\n                                    if (otherContacts.email.isNotEmpty)\n                                      NoticeDialogButton(\n                                        color: _gmailButtonColor,\n                                        icon: SvgPath.icGmail,\n                                        title: otherContacts.email,\n                                        actionType: ButtonActionType.send,\n                                        onPressed: () => sendEmail(\n                                          email: otherContacts.email,\n                                        ),\n                                      ),\n                                    if (otherContacts\n                                        .facebookPageUrl.isNotEmpty)\n                                      NoticeDialogButton(\n                                        color: _uPayButtonColor,\n                                        icon: SvgPath.icFb,\n                                        title: otherContacts.facebookPageUrl,\n                                        actionType: ButtonActionType.send,\n                                        onPressed: () => openUrl(\n                                          url: otherContacts.facebookPageUrl,\n                                          fallbackUrl: facebookPageUrl,\n                                        ),\n                                      ),\n                                    const SizedBox(height: 20),\n                                    if (payload.socialMedia.messengerButtonUrl\n                                        .isNotEmpty)\n                                      CustomNoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${payload.socialMedia.messengerButtonUrl}messengerButtonUrl\",\n                                        ),\n                                        url: payload\n                                            .socialMedia.messengerButtonUrl,\n                                        colors: _messengerColorGradients,\n                                        icon: SvgPath.icFbChat,\n                                        title: payload\n                                            .socialMedia.messengerButtonTitle,\n                                        onTap: () => openUrl(\n                                          url: payload\n                                              .socialMedia.messengerButtonUrl,\n                                          fallbackUrl: messengerUrl,\n                                        ),\n                                      ),\n                                    if (payload.socialMedia.telegramButtonUrl\n                                        .isNotEmpty)\n                                      CustomNoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${payload.socialMedia.telegramButtonUrl}telegramButtonUrl\",\n                                        ),\n                                        url: payload\n                                            .socialMedia.telegramButtonUrl,\n                                        colors: const [_telegramButtonColor],\n                                        icon: SvgPath.icTelegram,\n                                        title: payload\n                                            .socialMedia.telegramButtonTitle,\n                                      ),\n                                    if (payload.socialMedia.whatsappButtonUrl\n                                        .isNotEmpty)\n                                      CustomNoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          payload.socialMedia.whatsappButtonUrl,\n                                        ),\n                                        url: payload\n                                            .socialMedia.whatsappButtonUrl,\n                                        colors: const [_whatsAppButtonColor],\n                                        icon: SvgPath.icWhatsApp,\n                                        title: payload\n                                            .socialMedia.whatsappButtonTitle,\n                                      ),\n                                    if (otherContacts\n                                        .facebookGroupUrl.isNotEmpty)\n                                      CustomNoticeDialogButton(\n                                        key: ValueKey<String>(\n                                          \"${otherContacts.facebookGroupUrl}facebookGroupUrl\",\n                                        ),\n                                        url: otherContacts.facebookGroupUrl,\n                                        colors: _facebookColorGradients,\n                                        icon: SvgPath.icWhaiteFb,\n                                        title: \"Join our Facebook Group\",\n                                        onTap: () => openUrl(\n                                          url: otherContacts.facebookGroupUrl,\n                                          fallbackUrl: facebookGroupUrl,\n                                        ),\n                                      ),\n                                  ],\n                                ),\n                              Visibility(\n                                visible: payload.additionalButton.buttonText\n                                        .isNotEmpty &&\n                                    payload\n                                        .additionalButton.buttonUrl.isNotEmpty,\n                                child: CustomNoticeDialogButton(\n                                  key: ValueKey<\n                                      PromotionalMessageAdditionalButton>(\n                                    payload.additionalButton,\n                                  ),\n                                  url: payload.additionalButton.buttonUrl,\n                                  colors: [\n                                    payload.additionalButton.buttonColor,\n                                  ],\n                                  icon: SvgPath.icKabah,\n                                  title: payload.additionalButton.buttonText,\n                                  onTap: () =>\n                                      _onClickAdditionalButton(context),\n                                ),\n                              ),\n                            ],\n                          ),\n                        ),\n                      ],\n                    ),\n            ),\n          ),\n        ),\n        actions: [\n          Center(\n            key: const ValueKey<String>(\"close_button adf\"),\n            child: TextButton(\n              onPressed: () => context.navigatorPop<bool>(result: true),\n              // Get.back<bool>(result: true),\n              child: Text(\n                \"\u09a8\u09cb\u099f\u09bf\u09b6\u09ac\u0995\u09cd\u09b8 \u09ac\u09a8\u09cd\u09a7 \u0995\u09b0\u09c1\u09a8\",\n                style: textTheme.bodyMedium?.copyWith(\n                  fontWeight: FontWeight.w600,\n                  fontSize: 18,\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Future<void> _copyNoticeItem(\n    String item,\n    String itemName,\n  ) async {\n    await copyText(text: item);\n    await showMessage(message: \"$itemName \u0995\u09aa\u09bf \u0995\u09b0\u09be \u09b9\u09df\u09c7\u099b\u09c7\");\n  }\n\n  String _extractNumbers(String text) {\n    final RegExp regex = RegExp(r'\\d+');\n    final Iterable<RegExpMatch> matches = regex.allMatches(text);\n    final List<String?> numbersList =\n        matches.map((match) => match.group(0)).toList();\n    final String numbers = numbersList.join();\n    return numbers;\n  }\n\n  Future<void> _onClickAdditionalButton(BuildContext context) async {\n    final String buttonUrl = payload.additionalButton.buttonUrl;\n    final bool isUrl = buttonUrl.contains(\"http\");\n    final bool isEmail = buttonUrl.contains(\"@\");\n\n    if (isUrl) {\n      await openUrl(url: buttonUrl);\n    } else if (isEmail) {\n      await sendEmail(email: buttonUrl);\n    } else {\n      context.navigatorPop<bool>(result: true);\n    }\n  }\n\n  Text _buildSubtitle(BuildContext context, String text) {\n    final ThemeData themeData = Theme.of(context);\n    return Text(\n      text,\n      style: themeData.textTheme.bodyMedium?.copyWith(\n        fontWeight: FontWeight.w600,\n        fontSize: 15,\n      ),\n    );\n  }\n\n  static const Color _gmailButtonColor = HadithColors.redCinnabar;\n  static const Color _bKashButtonColor = HadithColors.pinkRazzmatazz;\n  static const Color _nagadButtonColor = HadithColors.yellowTreePoppy;\n  static const Color _rocketButtonColor = HadithColors.purpleSeance;\n  static const Color _uPayButtonColor = HadithColors.blueScience;\n  static const Color _telegramButtonColor = HadithColors.bluePicton;\n  static const Color _whatsAppButtonColor = HadithColors.greenJade;\n\n  static const List<Color> _facebookColorGradients = [\n    HadithColors.blueDodger,\n    HadithColors.blueScience,\n  ];\n\n  static const List<Color> _messengerColorGradients = [\n    HadithColors.blueDodger,\n    HadithColors.blueMariner,\n    HadithColors.pinkCerise,\n    HadithColors.orangePersimmon,\n  ];\n\n  static Future<void> show({\n    required BuildContext context,\n    required PromotionalMessageEntity notice,\n    required void Function(PromotionalMessageEntity) onClose,\n  }) async {\n    final bool? isClosed = await showAnimatedDialog<bool>(\n      context: context,\n      barrierDismissible: true,\n      builder: (context) => NoticeDialog(payload: notice),\n      animationType: DialogTransitionType.fadeScale,\n      curve: Curves.fastOutSlowIn,\n    );\n    if (isClosed ?? false) onClose(notice);\n  }\n}\n\nenum ButtonActionType { copy, send }\n"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "components", "file_path": "al-hadith-flutter/lib/presentation/home/ui/notice/components/notice_dialog_header_image.dart", "file_name": "notice_dialog_header_image.dart", "line": 15, "line_from": 15, "line_to": 91, "snippet": "  Widget build(BuildContext context) {\n    final Color primaryColor = context.primaryColor;\n\n    if (imageUrl.isEmpty) {\n      return Container(\n        width: HadithScreen.width,\n        height: 40.percentWidth,\n        color: primaryColor.withAlpha(50),\n        child: Image.asset(\n          SvgPath.bgMosque,\n          height: 30.percentWidth,\n          width: HadithScreen.width,\n          fit: BoxFit.cover,\n        ),\n      );\n    }\n\n    if (!imageUrl.contains(\"http\")) {\n      return Container(\n        width: HadithScreen.width,\n        height: 40.percentWidth,\n        color: primaryColor.withAlpha(50),\n        child: Image.asset(\n          SvgPath.bgMosque,\n          height: 30.percentWidth,\n          width: HadithScreen.width,\n          fit: BoxFit.cover,\n        ),\n      );\n    }\n\n    return Stack(\n      children: [\n        SizedBox(\n          width: HadithScreen.width,\n          height: 40.percentWidth,\n          child: CachedNetworkImage(\n            imageUrl: imageUrl,\n            fit: BoxFit.cover,\n            width: HadithScreen.width,\n            height: 30.percentWidth,\n            progressIndicatorBuilder: (_, __, progress) =>\n                LoadingNoticeDialogHeaderImage(progress: progress.progress),\n            errorWidget: (_, __, ___) => const ErrorNoticeDialogHeaderImage(),\n          ),\n        ),\n        Positioned(\n          top: 0,\n          right: 0,\n          child: IconButton(\n            icon: Icon(CupertinoIcons.clear, size: twentyPx),\n            color: Colors.white.withOpacity(.8),\n            onPressed: () => context.navigatorPop<bool>(result: true),\n          ),\n        ),\n      ],\n    );\n  }\n}\n\nclass LoadingNoticeDialogHeaderImage extends StatelessWidget {\n  const LoadingNoticeDialogHeaderImage({super.key, required this.progress});\n\n  final double? progress;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: HadithScreen.width,\n      height: 30.percentWidth,\n      color: context.primaryColor.withAlpha(50),\n      child: Center(\n        child: CircularProgressIndicator(value: progress ?? 0),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/home/presenter/go_to_presenter.dart", "file_name": "go_to_presenter.dart", "line": 115, "line_from": 115, "line_to": 125, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = uiState.value.copyWith(errorMessage: \"\", isLoading: false);\n  }\n\n  final PreWarmHadithDataUseCase _preWarmHadithDataUseCase;\n\n  Future<void> preLoadHadith({\n    required int bookId,\n    required int chapterId,\n    required void Function() onLoaded,\n  }) async =>"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/home/presenter/home_presenter.dart", "file_name": "home_presenter.dart", "line": 63, "line_from": 63, "line_to": 69, "snippet": "    required void Function(HadithEntity) onHadithFetched,\n  }) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () async => _getHadithById.execute(hadithId: hadithId),\n      onDataLoaded: (hadith) async => onHadithFetched(hadith),\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/home/presenter/home_presenter.dart", "file_name": "home_presenter.dart", "line": 76, "line_from": 76, "line_to": 95, "snippet": "    required void Function() onLoaded,\n  }) async =>\n      _preWarmHadithDataUseCase.execute(\n        bookId: bookId,\n        chapterId: chapterId,\n        onLoaded: onLoaded,\n      );\n\n  final GetChaptersByBookUseCase _getSectionsByBook;\n\n  Future<void> preFetchChapters({\n    required BookEntity book,\n    required VoidCallback onLoaded,\n  }) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () => _getSectionsByBook.execute(book: book),\n      showLoading: true,\n      onDataLoaded: (_) => onLoaded(),\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/home/presenter/home_presenter.dart", "file_name": "home_presenter.dart", "line": 194, "line_from": 194, "line_to": 204, "snippet": "    required void Function(UpdateInfoEntity) onForceUpdate,\n  }) async {\n    await Future<void>.delayed(4.inSeconds);\n    await parseDataFromEitherWithUserMessage(\n      task: () async => _determineIfNeedForceUpdate.execute(),\n      onDataLoaded: (updateInfo) {\n        final bool needForceUpdate = updateInfo.askToUpdate;\n        if (needForceUpdate) onForceUpdate(updateInfo);\n      },\n    );\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/home/presenter/home_presenter.dart", "file_name": "home_presenter.dart", "line": 215, "line_from": 215, "line_to": 225, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = currentUiState.copyWith(errorMessage: \"\", isLoading: false);\n  }\n\n  Obs<int> currentNavBarIndex = Obs(0);\n\n  Future<void> setNavBarIndex(int index) async {\n    KeyboardService.dismiss();\n    currentNavBarIndex.value = index;\n    changingTabObserver.value = index == 3;\n  }"}, {"structure_type": "function", "name": "Future.wait", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/home/presenter/home_presenter.dart", "file_name": "home_presenter.dart", "line": 235, "line_from": 235, "line_to": 256, "snippet": "    final Future<List<void>> fetchPrimaryData = Future.wait([\n      _fetchHadithBooks(),\n    ]);\n    await fetchPrimaryData;\n    await toggleLoading(loading: false);\n    // to avoid showing glitch in transition from loading to home page\n    unawaited(_fetchAnnouncements());\n    await Future<void>.delayed(800.inMilliseconds);\n    await SplashScreen.hide();\n    await ThemeServicePresentable.fixStatusBarManually();\n    await _fetchDataThatCanWait();\n  }\n\n  final SetUpPushNotificationUseCase _setUpPushNotificationUseCase;\n\n  Future<void> _fetchDataThatCanWait() async {\n    final Future<List<void>> fetchSecondaryData = Future.wait([\n      _fetchHadithCategories(),\n      _setUpPushNotification(),\n    ]);\n    await fetchSecondaryData;\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/home/presenter/home_presenter.dart", "file_name": "home_presenter.dart", "line": 261, "line_from": 261, "line_to": 267, "snippet": "    await Future<void>.delayed(5.inSeconds);\n    await _askReviewIfNecessary.execute(askForReview: askForReview);\n  }\n\n  Future<void> _setUpPushNotification() async {\n    await _setUpPushNotificationUseCase.execute();\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/hadith_chapters/presenter/hadith_chapters_presenter.dart", "file_name": "hadith_chapters_presenter.dart", "line": 61, "line_from": 61, "line_to": 73, "snippet": "    required void Function() onLoaded,\n  }) async =>\n      _preWarmHadithDataUseCase.execute(\n        bookId: bookId,\n        chapterId: chapterId,\n        onLoaded: onLoaded,\n      );\n\n  @override\n  void onReady() {\n    super.onReady();\n    _fetchShowChapterState();\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/hadith_chapters/presenter/hadith_chapters_presenter.dart", "file_name": "hadith_chapters_presenter.dart", "line": 79, "line_from": 79, "line_to": 86, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = uiState.value.copyWith(errorMessage: \"\", isLoading: false);\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = uiState.value.copyWith(isLoading: loading);\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/hadith_sections/presenter/hadith_sections_presenter.dart", "file_name": "hadith_sections_presenter.dart", "line": 64, "line_from": 64, "line_to": 74, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = uiState.value.copyWith(userMessage: \"\", isLoading: false);\n  }\n\n  final PreWarmHadithDataUseCase _preWarmHadithDataUseCase;\n\n  Future<void> preLoadHadith({\n    required int bookId,\n    required int chapterId,\n    required void Function() onLoaded,\n  }) async =>"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/last_read/presenter/last_read_presenter.dart", "file_name": "last_read_presenter.dart", "line": 41, "line_from": 41, "line_to": 52, "snippet": "    required void Function() onLoaded,\n  }) async =>\n      _preWarmHadithDataUseCase.execute(\n        bookId: bookId,\n        chapterId: chapterId,\n        onLoaded: onLoaded,\n      );\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = uiState.value.copyWith(isLoading: loading);\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/sub_category_list/presenter/sub_category_list_presenter.dart", "file_name": "sub_category_list_presenter.dart", "line": 38, "line_from": 38, "line_to": 45, "snippet": "    required void Function() onLoaded,\n  }) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () => _getHadithByCategory.execute(category: category),\n      onDataLoaded: (_) => onLoaded(),\n      showLoading: false,\n    );\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/sub_category_list/presenter/sub_category_list_presenter.dart", "file_name": "sub_category_list_presenter.dart", "line": 50, "line_from": 50, "line_to": 57, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = uiState.value.copyWith();\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = uiState.value.copyWith(isLoading: loading);\n  }"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "ui", "file_path": "al-hadith-flutter/lib/presentation/search/ui/search_page_list.dart", "file_name": "search_page_list.dart", "line": 46, "line_from": 46, "line_to": 145, "snippet": "  Widget build(BuildContext context) {\n    return HadithPositionedScrollBar(\n      showScrollBar: hadithSearchResults.length > 10,\n      controller: hadithScrollController,\n      onDragging: ({required bool dragging}) =>\n          _presenter.toggleFullScreen(context, isFullScreen: dragging),\n      listView: ScrollablePositionedList.builder(\n        itemScrollController: hadithScrollController,\n        itemCount: hadithSearchResults.length,\n        padding: _listPadding,\n        physics: const BouncingScrollPhysics(),\n        itemPositionsListener: hadithItemPositionsListener,\n        itemBuilder: (_, index) {\n          final bool doesHadithResultCrossLimit =\n              hadithSearchResults.length >= 1000;\n          final HadithEntity hadith = hadithSearchResults[index];\n\n          if (!doesHadithResultCrossLimit) {\n            return SearchListItem(\n              key: ValueKey(hadith.id),\n              hadith: hadith,\n              isFirst: index == 0,\n              query: query,\n              totalHadithCount: totalHadithCount,\n              showArabic: showArabic,\n              arabicFontSize: arabicFontSize,\n              localFontSize: localFontSize,\n              showTashkeel: showTashkeel,\n              arabicFontFamily: arabicFontFamily,\n              onMoreClick: (hadith, screenshotKey) =>\n                  _onMoreClick(hadith, context, screenshotKey),\n              onTahkikClick: (tahkik) => _onTahkikClick(tahkik, context),\n            );\n          } else {\n            final bool isLastItem = index == hadithSearchResults.length - 1;\n\n            final bool eligibleToShowMoreButton =\n                isLastItem && doesHadithResultCrossLimit;\n            if (eligibleToShowMoreButton) {\n              return GoToWebsiteSearchResultButton(searchQuery: query);\n            }\n          }\n\n          return SearchListItem(\n            key: ValueKey(hadith.id),\n            hadith: hadith,\n            isFirst: index == 0,\n            query: query,\n            totalHadithCount: totalHadithCount,\n            showArabic: showArabic,\n            arabicFontSize: arabicFontSize,\n            localFontSize: localFontSize,\n            showTashkeel: showTashkeel,\n            arabicFontFamily: arabicFontFamily,\n            onMoreClick: (hadith, screenshotKey) => _onMoreClick(\n              hadith,\n              context,\n              screenshotKey,\n            ),\n            onTahkikClick: (tahkik) => _onTahkikClick(tahkik, context),\n          );\n        },\n      ),\n    );\n  }\n\n  Future<void> _onTahkikClick(\n    TahkikEntity tahkik,\n    BuildContext context,\n  ) async {\n    await TahkikDetailsDialog.show(\n      tahkik: tahkik,\n      context: context,\n      onGetTahkikDetails: _presenter.getTahkikDetails,\n    );\n  }\n\n  void _onMoreClick(\n    HadithEntity hadith,\n    BuildContext context,\n    GlobalKey screenshotKey,\n  ) =>\n      MoreOptionBottomSheet.show(\n        hadith: hadith,\n        onBookmarkToggled: (\n          hadith,\n          bookmarkCount, {\n          required bool isBookmarked,\n        }) async {\n          return _presenter.updateHadithListWithBookmark(\n            hadith: hadith,\n            isBookmarked: isBookmarked,\n            isMultiBookmarked: bookmarkCount > 1,\n          );\n        },\n        onPinToggled: (hadith, {required bool toggled}) {},\n        screenshotKey: screenshotKey,\n        context: context,\n      );\n}"}, {"structure_type": "function", "name": "show", "docstring": "", "module": "ui", "file_path": "al-hadith-flutter/lib/presentation/search/ui/search_dialog.dart", "file_name": "search_dialog.dart", "line": 25, "line_from": 25, "line_to": 162, "snippet": "  static Future<void> show(BuildContext context) async {\n    final SearchDialog dialog = await Future.microtask(SearchDialog.new);\n    if (context.mounted) {\n      await showAnimatedDialog(\n        context: context,\n        builder: (_) => dialog,\n        barrierDismissible: true,\n        animationType: DialogTransitionType.slideFromTop,\n        curve: Curves.fastOutSlowIn,\n      );\n    }\n  }\n\n  @override\n  State<SearchDialog> createState() => _SearchDialogState();\n}\n\nclass _SearchDialogState extends State<SearchDialog> {\n  late final SearchPresenter _presenter = locate();\n\n  late final TextEditingController _searchTextController;\n\n  @override\n  Widget build(BuildContext context) {\n    return SafeArea(\n      child: Dialog(\n        insetPadding: EdgeInsets.symmetric(horizontal: fourteenPx),\n        alignment: const Alignment(0, -.5),\n        backgroundColor: Colors.transparent,\n        child: ColoredBox(\n          color: Colors.transparent,\n          child: PresentableWidgetBuilder(\n            key: const ValueKey(\"search_dialog_presentable_widget_builder\"),\n            presenter: _presenter,\n            builder: () {\n              final SearchUiState uiState = _presenter.uiState.value;\n              final SearchType selectedSearchType = uiState.selectedSearchType;\n\n              return Container(\n                width: HadithScreen.width,\n                padding: EdgeInsets.symmetric(\n                  vertical: 27.px,\n                  horizontal: fifteenPx,\n                ),\n                decoration: BoxDecoration(\n                  color: context.theme.cardColor,\n                  borderRadius: BorderRadius.circular(twentyPx),\n                ),\n                child: Wrap(\n                  children: [\n                    Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        SearchEditTextField(\n                          searchTextController: _searchTextController,\n                        ),\n                        SizedBox(height: twentyPx),\n                        const SearchTitleText(title: \"\u09ac\u0987 \u09a8\u09bf\u09b0\u09cd\u09ac\u09be\u099a\u09a8 \u0995\u09b0\u09c1\u09a8\"),\n                        SizedBox(height: tenPx),\n                        BookSelectionButton(),\n                        SizedBox(height: twentyPx),\n                        const SearchTitleText(\n                          title: \"\u09b8\u09be\u09b0\u09cd\u099a\u09c7\u09b0 \u09aa\u09a6\u09cd\u09a7\u09a4\u09bf \u09a8\u09bf\u09b0\u09cd\u09ac\u09be\u099a\u09a8 \u0995\u09b0\u09c1\u09a8\",\n                        ),\n                        SizedBox(height: fifteenPx),\n                        SizedBox(\n                          width: HadithScreen.width * .8,\n                          child: Row(\n                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                            children: [\n                              RadioItem(\n                                title: \"\u09b8\u09cd\u09ac\u09be\u09ad\u09be\u09ac\u09bf\u0995\",\n                                value: SearchType.normal,\n                                groupValue: selectedSearchType,\n                              ),\n                              RadioItem(\n                                title: \"\u09b9\u09c1\u09ac\u09b9\u09c1 \u09ae\u09bf\u09b2\",\n                                value: SearchType.full,\n                                groupValue: selectedSearchType,\n                              ),\n                              RadioItem(\n                                title: \"\u0986\u0982\u09b6\u09bf\u0995 \u09ae\u09bf\u09b2\",\n                                value: SearchType.partial,\n                                groupValue: selectedSearchType,\n                              ),\n                            ],\n                          ),\n                        ),\n                        SizedBox(height: twentyFourPx),\n                        SearchActionButton(\n                          isLoading: uiState.isLoading,\n                          onSearchButtonTap: () =>\n                              _onClickOnSearchButton(context),\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n              );\n            },\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void initState() {\n    _searchTextController = TextEditingController();\n    UiHelper.onMessage(_presenter.uiState);\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _searchTextController.dispose();\n    KeyboardService.dismiss(context: context);\n    super.dispose();\n  }\n\n  Future<void> _onClickOnSearchButton(BuildContext context) async {\n    final String searchText = _searchTextController.text.trim();\n\n    await _presenter.clearSearchResults();\n\n    await _presenter.searchForHadith(\n      query: searchText,\n      onSearchCompleted: () async {\n        context.navigatorPop<void>();\n        final SearchPage searchPage =\n            await Future.microtask(() => SearchPage(query: searchText));\n        if (context.mounted) {\n          await context.navigatorPush<void>(searchPage);\n        }\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "fetchSettingState", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/search/presenter/search_presenter.dart", "file_name": "search_presenter.dart", "line": 41, "line_from": 41, "line_to": 302, "snippet": "  Future<void> fetchSettingState() async {\n    await handleStreamEvents(\n      stream: _listenSettingsChanges.execute(),\n      onData: (settingState) async => _updateSettingsState(settingState),\n      subscription: _settingsChangeSub,\n    );\n  }\n\n  void _updateSettingsState(SettingsStateEntity settingState) {\n    uiState.value = uiState.value.copyWith(\n      arabicFontFamily: arabicFontToFontFamilyMap[settingState.arabicFont],\n      arabicFontSize: settingState.arabicFontSize,\n      localFontSize: settingState.localFontSize,\n      showArabic: settingState.showArabic,\n      showTashkeel: settingState.showTashkeel,\n    );\n  }\n\n  Future<void> toggleHadithSelection({\n    bool? isSelected,\n    required BookEntity book,\n  }) async {\n    final Set<BookEntity> selectedBooks = uiState.value.selectedBooks.toSet();\n    (isSelected ?? false)\n        ? selectedBooks.add(book)\n        : selectedBooks.remove(book);\n    uiState.value = uiState.value\n        .copyWith(selectedBooks: selectedBooks, allBooksSelected: false);\n  }\n\n  bool isBookSelected(BookEntity book) =>\n      uiState.value.selectedBooks.contains(book);\n\n  final GetAllBooksUseCase _getAllHadithBooks;\n\n  Future<void> fetchHadithBooks() async {\n    final Either<String, List<BookEntity>> result =\n        await _getAllHadithBooks.execute();\n    await result.fold(\n      addUserMessage,\n      (hadithBooks) {\n        uiState.value = uiState.value.copyWith(hadithBooks: hadithBooks);\n      },\n    );\n  }\n\n  void selectAllBooks() {\n    selectNoBooks();\n    uiState.value = uiState.value.copyWith(allBooksSelected: true);\n  }\n\n  void selectNoBooks() {\n    uiState.value = uiState.value.copyWith(selectedBooks: <BookEntity>{});\n  }\n\n  final SearchHadithUseCase _searchHadith;\n\n  Future<void> searchForHadith({\n    required String query,\n    required VoidCallback onSearchCompleted,\n  }) async {\n    const String throttleTag = \"searchForHadithThrottleTag\";\n    Throttle.throttle(throttleTag, 1.inSeconds, () async {\n      if (query.isEmpty) {\n        await addUserMessage(\"\u09b8\u09be\u09b0\u09cd\u099a \u0995\u09b0\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u0995\u09bf\u099b\u09c1 \u09b2\u09bf\u0996\u09c1\u09a8\");\n        return;\n      }\n\n      final SearchUiState currentUiState = uiState.value;\n\n      final List<BookEntity> selectedBooks = _getSelectedBooks();\n\n      await parseDataFromEitherWithUserMessage(\n        task: () => _searchHadith.execute(\n          query: query,\n          books: selectedBooks,\n          searchType: currentUiState.selectedSearchType,\n        ),\n        showLoading: true,\n        onDataLoaded: (data) async {\n          _onSearchForHadithData(data);\n          onSearchCompleted();\n          await clearSearchResults(clearSelectedBooks: true);\n        },\n      );\n    });\n  }\n\n  void _onSearchForHadithData(\n    (List<HadithEntity>, int) hadithSearchResultsAndCount,\n  ) {\n    final SearchUiState currentUiState = uiState.value;\n    final (hadithSearchResults, totalResultCount) = hadithSearchResultsAndCount;\n    uiState.value = currentUiState.copyWith(\n      hadithSearchResults: hadithSearchResults,\n      totalResultCount: totalResultCount,\n    );\n  }\n\n  List<BookEntity> _getSelectedBooks() {\n    final SearchUiState searchUiState = uiState.value;\n    final List<BookEntity> selectedBooksList =\n        searchUiState.selectedBooks.toList();\n    final List<BookEntity> allBooksList = searchUiState.hadithBooks;\n    return selectedBooksList.isNotEmpty ? selectedBooksList : allBooksList;\n  }\n\n  Future<void> updateHadithListWithBookmark({\n    required HadithEntity hadith,\n    required bool isBookmarked,\n    required bool isMultiBookmarked,\n  }) async {\n    final List<HadithEntity> updatedHadithList = await compute(\n      _updateHadithListWithBookmarkStatic,\n      (\n        uiState.value.hadithSearchResults,\n        hadith,\n        isBookmarked,\n        isMultiBookmarked,\n      ),\n    );\n    uiState.value =\n        uiState.value.copyWith(hadithSearchResults: updatedHadithList);\n  }\n\n  final GetAllBookmarkFoldersUseCase _getAllBookmarkFolders;\n\n  Future<List<BookmarkFolderEntity>> getBookmarkFolders() async {\n    final Either<String, List<BookmarkFolderEntity>> result =\n        await _getAllBookmarkFolders.execute();\n\n    return result.fold(\n      (error) {\n        addUserMessage(error);\n        return [];\n      },\n      (data) => data,\n    );\n  }\n\n  final GetTahkikDetailsUseCase _getTahkikDetailsUseCase;\n\n  Future<TahkikEntity?> getTahkikDetails(\n    TahkikEntity tahkik,\n  ) async {\n    TahkikEntity? tahkikDetails;\n    final Either<String, TahkikEntity> result =\n        await _getTahkikDetailsUseCase.execute(tahkikEntity: tahkik);\n    result.fold(addUserMessage, (data) => tahkikDetails = data);\n    return tahkikDetails;\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = uiState.value.copyWith(isLoading: loading);\n  }\n\n  @override\n  Future<void> addUserMessage(String message) async {\n    uiState.value =\n        uiState.value.copyWith(userMessage: message, isLoading: false);\n    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = uiState.value.copyWith(userMessage: \"\", isLoading: false);\n  }\n\n  @override\n  Future<void> onInit() async {\n    super.onInit();\n    unawaited(fetchSettingState());\n    await fetchHadithBooks();\n  }\n\n  @override\n  Future<void> onClose() async {\n    await _settingsChangeSub?.cancel();\n    super.onClose();\n  }\n\n  String getWebsiteQueryUrl({required String query}) =>\n      'http://ihadis.com/search?query=$query';\n\n  void setSearchType(SearchType type) {\n    uiState.value = uiState.value.copyWith(selectedSearchType: type);\n  }\n\n  Future<void> clearSearchResults({bool clearSelectedBooks = false}) async {\n    final Set<BookEntity> selectedBooks =\n        clearSelectedBooks ? <BookEntity>{} : uiState.value.selectedBooks;\n\n    uiState.value = uiState.value.copyWith(selectedBooks: selectedBooks);\n  }\n\n  Future<void> copyHadithArabic({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: true,\n      shareWithBanglaText: false,\n    );\n    await copyText(text: shareableText);\n  }\n\n  Future<void> copyHadithTranslation({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: false,\n      shareWithBanglaText: true,\n    );\n    await copyText(text: shareableText);\n  }\n\n  Future<void> shareHadith({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: true,\n      shareWithBanglaText: true,\n    );\n    await shareText(text: shareableText);\n  }\n\n  Future<void> copyFullHadith({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: true,\n      shareWithBanglaText: true,\n    );\n    await copyText(text: shareableText);\n  }\n\n  bool _isFullScreen = false;\n\n  Future<bool> toggleFullScreen(\n    BuildContext context, {\n    required bool isFullScreen,\n  }) async {\n    if (_isFullScreen == isFullScreen) return uiState.value.isFullScreen;\n    _isFullScreen = isFullScreen;\n    uiState.value = uiState.value.copyWith(isFullScreen: isFullScreen);\n\n    SystemChrome.setSystemUIOverlayStyle(\n      SystemUiOverlayStyle(\n        statusBarColor: Theme.of(context).secondaryHeaderColor,\n        statusBarIconBrightness: Brightness.light,\n        systemNavigationBarColor: Theme.of(context).cardColor,\n        systemNavigationBarIconBrightness: Brightness.dark,\n      ),\n    );\n\n    return uiState.value.isFullScreen;\n  }\n\n  final GetSearchHistoryUseCase _getSearchHistoryUseCase;\n\n  Future<List<String>> getSearchSuggestions({required String query}) async {\n    final List<String> histories = await _getSearchHistoryUseCase.execute();\n    if (query.isEmpty) return histories.take(3).toList();\n    final List<String> suggestions = histories\n        .where((history) => history.toLowerCase().contains(query.toLowerCase()))\n        .take(3)\n        .toList();\n    return suggestions;\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "common", "file_path": "al-hadith-flutter/lib/presentation/common/tahkik_details_dialog.dart", "file_name": "tahkik_details_dialog.dart", "line": 71, "line_from": 71, "line_to": 88, "snippet": "    required Future<TahkikEntity?> Function(TahkikEntity) onGetTahkikDetails,\n  }) async {\n    if (!context.mounted) return;\n    final TahkikEntity? tahkikDetails = await onGetTahkikDetails(tahkik);\n    if (tahkikDetails == null) return;\n    final TahkikDetailsDialog tahkikDetailsDialog = await Future.microtask(\n      () => TahkikDetailsDialog(tahkik: tahkikDetails),\n    );\n    if (context.mounted) {\n      await showAnimatedDialog<void>(\n        context: context,\n        builder: (_) => tahkikDetailsDialog,\n        animationType: DialogTransitionType.scale,\n        curve: Curves.fastOutSlowIn,\n        barrierDismissible: true,\n      );\n    }\n  }"}, {"structure_type": "function", "name": "BaseUiState>", "docstring": "", "module": "common", "file_path": "al-hadith-flutter/lib/presentation/common/ui_helper.dart", "file_name": "ui_helper.dart", "line": 19, "line_from": 19, "line_to": 143, "snippet": "  static Future<void> onMessage<T extends BaseUiState>(\n    Obs<T> uiStateStream,\n  ) async {\n    StreamSubscription<T>? subscription;\n    await doOnPageLoaded(() {\n      try {\n        subscription = uiStateStream.listen(\n          (uiState) => showMessage(message: uiState.userMessage),\n          onDone: () => subscription?.cancel(),\n          onError: (e) => subscription?.cancel(),\n          cancelOnError: true,\n        );\n      } catch (e) {\n        logErrorStatic(e, _fileName);\n        subscription?.cancel();\n        subscription = null;\n      }\n    });\n  }\n\n  static bool onScrollNotification({\n    required ScrollNotification scrollNotification,\n    required void Function({required bool toTop}) onScrolled,\n  }) {\n    if (scrollNotification is! ScrollUpdateNotification) return false;\n    final bool reachedAtTop = scrollNotification.metrics.pixels == 0;\n    onScrolled(toTop: reachedAtTop);\n    return false;\n  }\n\n  static Future<void> onNoteClick({\n    required HadithEntity hadith,\n    required Future<List<BookmarkFolderEntity>> Function() onGetFolders,\n    required Future<bool> Function(HadithEntity, BookmarkFolderEntity?)\n        onNoteIconTapped,\n    required BuildContext context,\n  }) async {\n    // If the Hadith is not bookmarked, show a dialog to select the bookmark folder.\n    await AddNoteBottomSheet.show(\n      hadith: hadith,\n      onGetFolders: onGetFolders,\n      onBookmarkAdded: (hadith, folder) => onNoteIconTapped(hadith, folder),\n      context: context,\n    );\n  }\n\n  static Future<void> doOnPageLoaded(void Function() onLoaded) async {\n    // Takes a callback function onLoaded as a parameter. When called, this\n    // method schedules the onLoaded callback to be executed after the current\n    // frame has finished rendering, by adding it to the end of the post-frame\n    // callbacks list using WidgetsBinding.instance.addPostFrameCallback.\n    //\n    // To add a slight delay to the execution of the onLoaded callback, the\n    // method also uses Future.delayed to wait for 64 milliseconds before\n    // invoking the callback. The entire method is wrapped in a\n    // catchFutureOrVoid function which catches any exceptions thrown during the\n    // execution of the callback and handles them appropriately.\n    await catchFutureOrVoid(() async {\n      WidgetsBinding.instance.addPostFrameCallback((timeStamp) async {\n        onLoaded();\n      });\n    });\n  }\n\n  static Future<void> toggleFullScreen({required bool makeFullScreen}) async {\n    await catchFutureOrVoid(() async {\n      await SystemChrome.setEnabledSystemUIMode(\n        SystemUiMode.manual,\n        overlays: makeFullScreen ? [] : SystemUiOverlay.values,\n      );\n    });\n  }\n\n  static Future<void> listenToScroll({\n    required ItemScrollController scrollController,\n    required void Function({required bool toTop}) onScrolled,\n  }) async {\n    await UiHelper.doOnPageLoaded(() async {\n      onScrolled(toTop: false);\n\n      if (!scrollController.isAttached) return;\n      final ScrollController? rootScrollController =\n          scrollController.scrollController;\n      if (rootScrollController == null) return;\n      if (!rootScrollController.hasClients) return;\n\n      rootScrollController.addListener(() {\n        Throttle.throttle(\n          _onListScrollingToTopThrottleTag,\n          480.inMilliseconds,\n          () {\n            final bool scrollingFromBottomToTop =\n                rootScrollController.position.userScrollDirection.name ==\n                    'reverse';\n            onScrolled(toTop: scrollingFromBottomToTop);\n          },\n        );\n      });\n    });\n  }\n\n  static const String _onListScrollingToTopThrottleTag =\n      'onListScrollingToTopThrottleTag';\n}\n\nclass UpgradeAppDialogContainer extends StatelessWidget {\n  const UpgradeAppDialogContainer({\n    super.key,\n    required this.child,\n  });\n\n  final Widget child;\n\n  @override\n  Widget build(BuildContext context) {\n    return UpgradeAlert(\n      upgrader: Upgrader(\n        dialogStyle: Platform.isAndroid\n            ? UpgradeDialogStyle.material\n            : UpgradeDialogStyle.cupertino,\n      ),\n      child: child,\n    );\n  }\n}"}, {"structure_type": "class", "name": "HadithListItem extends StatelessWidget", "docstring": "", "module": "hadith_list_item", "file_path": "al-hadith-flutter/lib/presentation/common/hadith_list_item/hadith_list_item.dart", "file_name": "hadith_list_item.dart", "line": 15, "line_from": 15, "line_to": 130, "snippet": "class HadithListItem extends StatelessWidget {\n  HadithListItem({\n    super.key,\n    required this.hadith,\n    required this.onMoreClick,\n    this.arabicFontFamily = FontFamily.kfgq,\n    this.showArabic = true,\n    this.showBookmarkIcon = true,\n    this.arabicFontSize = 20,\n    this.localFontSize = 14,\n    required this.showTashkeel,\n    this.highlightSearchQuery = false,\n    required this.onTahkikClick,\n  });\n\n  final HadithEntity hadith;\n\n  final void Function(GlobalKey) onMoreClick;\n  final void Function(TahkikEntity) onTahkikClick;\n\n  final String arabicFontFamily;\n\n  final double arabicFontSize;\n  final double localFontSize;\n\n  final bool showTashkeel;\n  final bool showArabic;\n  final bool showBookmarkIcon;\n  final bool highlightSearchQuery;\n\n  late final BookEntity hadithBook = hadith.book;\n\n  final GlobalKey _screenshotKey = GlobalKey();\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n    late final TextTheme textTheme = themeData.textTheme;\n    return ShareableScreen(\n      key: Key(\"screenshot_${hadith.id}\"),\n      globalKey: _screenshotKey,\n      child: Container(\n        width: HadithScreen.width,\n        decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(tenPx),\n          color: themeData.cardColor,\n        ),\n        margin: EdgeInsets.symmetric(horizontal: fourteenPx),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            const SizedBox(height: 5),\n            HadithListItemTopBar(\n              key: ValueKey(\"top_bar-${hadith.id}\"),\n              hadithBook: hadithBook,\n              hadith: hadith,\n              onMoreClick: () => onMoreClick(_screenshotKey),\n              onTahkikClick: onTahkikClick,\n              showBookmarkIcon: showBookmarkIcon,\n            ),\n            Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Directionality(\n                  key: ValueKey(\"arabic-directionality-${hadith.id}\"),\n                  textDirection: TextDirection.rtl,\n                  child: HadithListItemArabic(\n                    key: ValueKey(\"arabic-${hadith.id}\"),\n                    arabicFontFamily: arabicFontFamily,\n                    arabicFontSize: arabicFontSize,\n                    localFontSize: localFontSize,\n                    showTashkeel: showTashkeel,\n                    showArabic: showArabic,\n                    arabicText: hadith.arabicText,\n                    arabicTextWithoutTashkeel: hadith.arabicTextWithoutTashkeel,\n                  ),\n                ),\n                if (showArabic) SizedBox(height: twentyPx),\n                HadithListItemNarrator(\n                  key: ValueKey(\"narrator-${hadith.id}\"),\n                  localFontSize: localFontSize,\n                  narrator: hadith.narrator,\n                ),\n                SizedBox(height: tenPx),\n                MarkUpText(\n                  hadith.banglaText,\n                  key: ValueKey(\"bangla-${hadith.id}\"),\n                  style: textTheme.bodyMedium?.copyWith(\n                    fontSize: localFontSize,\n                    color: textTheme.displayMedium?.color,\n                    fontWeight: FontWeight.w400,\n                  ),\n                  textType: TextType.local,\n                  arabicFontFamily: arabicFontFamily,\n                  arabicFontSize: arabicFontSize,\n                  localFontSize: localFontSize,\n                ),\n                HadithListItemFootNote(\n                  key: ValueKey(\"note-${hadith.id}\"),\n                  hadithNote: hadith.note,\n                  localFontSize: localFontSize,\n                  arabicFontFamily: arabicFontFamily,\n                  arabicFontSize: arabicFontSize,\n                ),\n              ],\n            ).paddingSymmetric(horizontal: 14, vertical: 15),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nenum TextType { arabic, local }\n"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "ui", "file_path": "al-hadith-flutter/lib/presentation/bookmark_details/ui/note_details_page.dart", "file_name": "note_details_page.dart", "line": 33, "line_from": 33, "line_to": 287, "snippet": "  final void Function(BookmarkFolderEntity) onRemoveBookmarkFolder;\n  final Future<bool> Function(BookmarkFolderEntity, String, Color)\n      onEditBookmarkFolder;\n\n  @override\n  State<NoteDetailsPage> createState() => _NoteDetailsPageState();\n}\n\nclass _NoteDetailsPageState extends State<NoteDetailsPage>\n    with SingleTickerProviderStateMixin {\n  late ItemScrollController _hadithScrollController;\n  late final BookmarkDetailsPresenter _presenter = locate();\n\n  late final BookmarkFolderEntity folder = widget.folder;\n  TabController? _tabController;\n\n  @override\n  void initState() {\n    _hadithScrollController = ItemScrollController();\n    super.initState();\n    _presenter.fetchHadithListByBookmark(folder: folder);\n    _tabController = TabController(length: 2, vsync: this);\n  }\n\n  late final GlobalKey<ScaffoldState> _bookmarkScaffoldKey = GlobalKey();\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData themeData = context.theme;\n    final AppBarTheme appBarTheme = themeData.appBarTheme;\n\n    return Scaffold(\n      key: _bookmarkScaffoldKey,\n      backgroundColor: themeData.primaryColor,\n      appBar: HadithAppBar(\n        title: folder.name,\n        subtitle:\n            \"${translateNumberToBanglaString(folder.hadithIds.length)} \u09b9\u09be\u09a6\u09c0\u09b8\",\n        primaryActionIconPath: SvgPath.icSettings,\n        onPrimaryActionButtonTap: _onClickOnSettings,\n      ),\n      endDrawer: const MiniSettingsDrawer(),\n      body: RoundedScaffoldBody(\n        child: Column(\n          children: [\n            const SizedBox(height: 14),\n            Container(\n              width: HadithScreen.width,\n              height: HadithScreen.width * .12,\n              margin: const EdgeInsets.symmetric(horizontal: 14),\n              decoration: BoxDecoration(\n                color: themeData.cardColor,\n                borderRadius: BorderRadius.circular(10),\n              ),\n              child: TabBar(\n                onTap: (value) {\n                  final FocusScopeNode currentFocus = FocusScope.of(context);\n                  if (!currentFocus.hasPrimaryFocus) {\n                    currentFocus.unfocus();\n                  }\n                },\n                indicatorPadding:\n                    const EdgeInsets.symmetric(horizontal: 6, vertical: 5),\n                indicator: BoxDecoration(\n                  color: themeData.primaryColor,\n                  borderRadius: BorderRadius.circular(7),\n                ),\n                unselectedLabelColor: themeData.textTheme.bodyMedium?.color,\n                labelColor: appBarTheme.backgroundColor,\n                indicatorColor: appBarTheme.backgroundColor,\n                labelStyle: themeData.textTheme.bodyMedium\n                    ?.copyWith(fontWeight: FontWeight.w600),\n                labelPadding: const EdgeInsets.only(top: 3),\n                tabs: const [\n                  Tab(text: '\u09b9\u09be\u09a6\u09bf\u09b8'),\n                  Tab(text: '\u09a8\u09cb\u099f'),\n                ],\n                controller: _tabController,\n                indicatorSize: TabBarIndicatorSize.tab,\n              ),\n            ),\n            const SizedBox(height: 12),\n            Expanded(\n              child: TabBarView(\n                controller: _tabController,\n                physics: const NeverScrollableScrollPhysics(),\n                children: [\n                  _hadithTab(),\n                  _noteTab(),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _noteTab() {\n    return SingleChildScrollView(\n      child: Padding(\n        padding: EdgeInsets.only(bottom: 14.px),\n        child: Container(\n          padding: const EdgeInsets.all(16),\n          margin: const EdgeInsets.symmetric(horizontal: 14),\n          decoration: BoxDecoration(\n            color: Theme.of(context).cardColor,\n            borderRadius: BorderRadius.circular(12),\n          ),\n          child: ClipRRect(\n            borderRadius: BorderRadius.circular(12),\n            child: Column(\n              children: [\n                Row(\n                  children: [\n                    InkWell(\n                      onTap: () {},\n                      child: SvgPicture.asset(SvgPath.icNote),\n                    ),\n                    const SizedBox(width: 16),\n                    Text(\n                      '\u09a8\u09cb\u099f \u099f\u09be\u0987\u099f\u09c7\u09b2',\n                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                            fontWeight: FontWeight.w600,\n                            fontSize: 16,\n                          ),\n                    ),\n                    const Spacer(),\n                    InkWell(\n                      onTap: () {\n                        // please, look into how implemented other\n                        // bottom sheets, without coupling them with GetX.\n                        // MoreNoteOptionBottomSheet.show()\n                        // Get.bottomSheet<void>(\n                        //   MoreNoteOptionBottomSheet(\n                        //     bookmarkFolder: folder,\n                        //     onRemoveBookmarkFolder:\n                        //         widget.onRemoveBookmarkFolder,\n                        //     onEditBookmarkFolder: (name, color) => widget\n                        //         .onEditBookmarkFolder(folder, name, color),\n                        //   ),\n                        //   backgroundColor:\n                        //       Theme.of(context).dialogBackgroundColor,\n                        //   shape: const RoundedRectangleBorder(\n                        //     borderRadius: BorderRadius.vertical(\n                        //       top: Radius.circular(20),\n                        //     ),\n                        //   ),\n                        //   enableDrag: false,\n                        // );\n                      },\n                      child: SvgPicture.asset(\n                        SvgPath.icMoreVert,\n                        width: 16,\n                        height: 16,\n                        colorFilter: ColorFilter.mode(\n                          Theme.of(context).iconTheme.color!,\n                          BlendMode.srcIn,\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 25),\n                Text(\n                  'In publishing and graphic design, In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content. In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content.In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content. In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content. In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content. In publishing and graphic design.',\n                  style: Theme.of(context)\n                      .textTheme\n                      .bodyMedium!\n                      .copyWith(fontSize: 15),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _hadithTab() {\n    return PresentableWidgetBuilder(\n      presenter: _presenter,\n      onInit: () => _presenter.fetchSettingState(),\n      builder: () {\n        final BookmarkDetailsUiState uiState = _presenter.uiState.value;\n        final List<HadithEntity> hadithList = uiState.hadithList;\n        return ColoredBox(\n          color: Theme.of(context).scaffoldBackgroundColor,\n          child: uiState.isLoading\n              ? const LoadingIndicator()\n              : HadithPositionedScrollBar(\n                  showScrollBar: hadithList.length > 10,\n                  controller: _hadithScrollController,\n                  listView: ScrollablePositionedList.builder(\n                    physics: const BouncingScrollPhysics(),\n                    padding: const EdgeInsets.only(bottom: 14),\n                    itemScrollController: _hadithScrollController,\n                    itemBuilder: (context, index) {\n                      final HadithEntity hadith = hadithList[index];\n                      return HadithListItem(\n                        key: ValueKey(hadith.id),\n                        hadith: hadith,\n                        onTahkikClick: _onTahkikClick,\n                        onMoreClick: (screenshotKey) =>\n                            MoreOptionBottomSheet.show(\n                          hadith: hadith,\n                          onBookmarkToggled: (\n                            hadith,\n                            _, {\n                            required bool isBookmarked,\n                          }) =>\n                              _onSaveClick(hadith),\n                          onPinToggled: (hadith, {required bool toggled}) {},\n                          showCollectionOption: false,\n                          showNoteOption: false,\n                          screenshotKey: screenshotKey,\n                          context: context,\n                        ),\n                        arabicFontSize: uiState.arabicFontSize,\n                        arabicFontFamily: uiState.arabicFontFamily,\n                        localFontSize: uiState.localFontSize,\n                        showTashkeel: uiState.showTashkeel,\n                        showArabic: uiState.showArabic,\n                        showBookmarkIcon: false,\n                      );\n                    },\n                    itemCount: hadithList.length,\n                  ),\n                ),\n        );\n      },\n    );\n  }\n\n  Future<void> _onClickOnSettings() async {\n    _bookmarkScaffoldKey.currentState?.openEndDrawer();\n  }\n\n  Future<void> _onSaveClick(HadithEntity hadith) async {\n    // await _presenter.updateHadithListWithNewBookmark(hadith: hadith);\n\n    // If there is no hadith in the folder, then close the page\n    final BookmarkDetailsUiState uiState = _presenter.uiState.value;\n    final List<HadithEntity> hadithList = uiState.hadithList;\n    if (hadithList.isEmpty) context.navigatorPop(result: true);\n  }\n\n  Future<void> _onTahkikClick(TahkikEntity tahkik) async {\n    await TahkikDetailsDialog.show(\n      tahkik: tahkik,\n      context: context,\n      onGetTahkikDetails: _presenter.getTahkikDetails,\n    );\n  }\n}"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/bookmark_details/presenter/bookmark_details_presenter.dart", "file_name": "bookmark_details_presenter.dart", "line": 130, "line_from": 130, "line_to": 137, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = _currentUiState.copyWith(errorMessage: \"\", isLoading: false);\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = _currentUiState.copyWith(isLoading: loading);\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "ui", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/ui/more_option_bottom_sheet.dart", "file_name": "more_option_bottom_sheet.dart", "line": 32, "line_from": 32, "line_to": 77, "snippet": "  final void Function(HadithEntity, int, {required bool isBookmarked})?\n      onBookmarkToggle;\n  final void Function(HadithEntity, {required bool toggled})? onPinToggled;\n  final void Function(HadithEntity)? onBookmarkRemoved;\n  final GlobalKey screenshotKey;\n\n  final bool showNoteOption;\n  final bool showCollectionOption;\n  final bool showGoToHadithOption;\n  final bool directlyShowCollectionOption;\n\n  @override\n  State<MoreOptionBottomSheet> createState() => _MoreOptionBottomSheetState();\n\n  static Future<void> show({\n    required HadithEntity hadith,\n    void Function(HadithEntity, int, {required bool isBookmarked})?\n        onBookmarkToggled,\n    void Function(HadithEntity, {required bool toggled})? onPinToggled,\n    bool showCollectionOption = true,\n    bool showNoteOption = true,\n    bool directlyShowCollectionOption = false,\n    bool showGoToHadithOption = true,\n    void Function(HadithEntity)? onBookmarkRemoved,\n    required GlobalKey screenshotKey,\n    required BuildContext context,\n  }) async {\n    final MoreOptionBottomSheet moreOptionBottomSheet = await Future.microtask(\n      () => MoreOptionBottomSheet(\n        hadith: hadith,\n        onBookmarkToggle: onBookmarkToggled,\n        onPinToggled: onPinToggled,\n        showCollectionOption: showCollectionOption,\n        showNoteOption: showNoteOption,\n        directlyShowCollectionOption: directlyShowCollectionOption,\n        showGoToHadithOption: showGoToHadithOption,\n        onBookmarkRemoved: onBookmarkRemoved,\n        screenshotKey: screenshotKey,\n      ),\n    );\n\n    if (context.mounted) {\n      await context.showBottomSheet<void>(moreOptionBottomSheet);\n    }\n  }\n}"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "ui", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/ui/more_option_bottom_sheet.dart", "file_name": "more_option_bottom_sheet.dart", "line": 87, "line_from": 87, "line_to": 182, "snippet": "        await Future<void>.delayed(126.inMilliseconds);\n        if (context.mounted) await _onCollectionClick(context);\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Builder(\n      builder: (context) => Container(\n        padding: const EdgeInsets.only(top: 20, left: 25, right: 25),\n        decoration: BoxDecoration(\n          borderRadius: const BorderRadius.only(\n            topRight: Radius.circular(20),\n            topLeft: Radius.circular(20),\n          ),\n          color: Theme.of(context).cardColor,\n        ),\n        child: Wrap(\n          children: [\n            Column(\n              children: [\n                _buildOptionTopBar(),\n                const SizedBox(height: 17),\n                if (widget.showGoToHadithOption)\n                  MenuListItem(\n                    iconPath: SvgPath.goToHadith,\n                    title: '\u09b8\u09b0\u09be\u09b8\u09b0\u09bf \u09b9\u09be\u09a6\u09bf\u09b8\u09c7 \u09af\u09be\u09a8',\n                    onClicked: () => _onClickOnGoToHadith(\n                      hadith: widget.hadith,\n                      context: context,\n                    ),\n                  ),\n                if (widget.onBookmarkRemoved != null)\n                  MenuListItem(\n                    iconPath: SvgPath.icDelete,\n                    title: '\u09ac\u09c1\u0995\u09ae\u09be\u09b0\u09cd\u0995 \u09a5\u09c7\u0995\u09c7 \u09ae\u09c1\u099b\u09c7 \u09ab\u09c7\u09b2\u09c1\u09a8',\n                    onClicked: _onBookmarkRemove,\n                  ),\n                if (widget.showCollectionOption)\n                  MenuListItem(\n                    iconPath: SvgPath.icBookmark,\n                    title: '\u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8 \u098f\u09a1 \u0995\u09b0\u09c1\u09a8',\n                    onClicked: () => _onCollectionClick(Get.context!),\n                  ),\n                MenuListItem(\n                  iconPath: SvgPath.icCopy,\n                  title: '\u09ac\u09be\u0982\u09b2\u09be \u0995\u09aa\u09bf',\n                  onClicked: () async =>\n                      _presenter.copyHadithTranslation(hadith: widget.hadith),\n                ),\n                MenuListItem(\n                  iconPath: SvgPath.icCopy,\n                  title: '\u0986\u09b0\u09ac\u09bf \u0995\u09aa\u09bf',\n                  onClicked: () =>\n                      _presenter.copyHadithArabic(hadith: widget.hadith),\n                ),\n                MenuListItem(\n                  iconPath: SvgPath.icCopy,\n                  title: \"\u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u09b9\u09be\u09a6\u09bf\u09b8 \u0995\u09aa\u09bf\",\n                  onClicked: () =>\n                      _presenter.copyFullHadith(hadith: widget.hadith),\n                ),\n                // if (widget.showNoteOption)\n                //   MenuListItem(\n                //     iconPath: SvgPath.icNote,\n                //     title: '\u09a8\u09cb\u099f \u098f\u09a1 \u0995\u09b0\u09c1\u09a8',\n                //     onClicked: _onNoteClick,\n                //   ),\n                MenuListItem(\n                  iconPath: SvgPath.icScreenshot,\n                  title: '\u09b8\u09cd\u0995\u09cd\u09b0\u09bf\u09a8\u09b6\u099f \u09b6\u09c7\u09df\u09be\u09b0',\n                  onClicked: () async {\n                    await shareScreenshot(screenshotKey: widget.screenshotKey);\n                  },\n                ),\n                MenuListItem(\n                  iconPath: SvgPath.icShare,\n                  title: '\u099f\u09c7\u0995\u09cd\u09b8\u099f \u09b6\u09c7\u09df\u09be\u09b0',\n                  onClicked: () async =>\n                      _presenter.shareHadith(hadith: widget.hadith),\n                ),\n                MenuListItem(\n                  iconPath: SvgPath.icInfo,\n                  title: '\u09b0\u09bf\u09aa\u09cb\u09b0\u09cd\u099f',\n                  onClicked: () =>\n                      _presenter.reportHadith(hadith: widget.hadith),\n                ),\n                const SizedBox(height: 10),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "hadith_vertical_list", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/ui/hadith_vertical_list/hadith_without_section_vertical_list.dart", "file_name": "hadith_without_section_vertical_list.dart", "line": 26, "line_from": 26, "line_to": 70, "snippet": "  final void Function(HadithEntity, GlobalKey) onMoreClick;\n  final void Function(TahkikEntity) onTahkikClick;\n  final ItemPositionsListener positionsListener;\n  final ItemScrollController scrollController;\n  final double arabicFontSize;\n  final double localFontSize;\n  final String arabicFontFamily;\n  final bool showTashkeel;\n  final bool showArabic;\n  final void Function({required bool dragging})? onDragging;\n\n  @override\n  Widget build(BuildContext context) {\n    return HadithPositionedScrollBar(\n      key: const Key(\"HadithPositionedScrollBar\"),\n      controller: scrollController,\n      onDragging: onDragging,\n      showScrollBar: hadithList.length > 10,\n      listView: ScrollablePositionedList.builder(\n        itemScrollController: scrollController,\n        itemPositionsListener: positionsListener,\n        itemCount: hadithList.length,\n        physics: const BouncingScrollPhysics(),\n        padding: EdgeInsets.only(bottom: eightPx, top: 115),\n        itemBuilder: (_, index) {\n          final HadithEntity hadith = hadithList[index];\n          return Padding(\n            key: ValueKey(hadith.id),\n            padding: EdgeInsets.symmetric(vertical: sevenPx),\n            child: HadithListItem(\n              hadith: hadith,\n              onMoreClick: (screenshotKey) => onMoreClick(hadith, screenshotKey),\n              onTahkikClick: onTahkikClick,\n              arabicFontSize: arabicFontSize,\n              arabicFontFamily: arabicFontFamily,\n              localFontSize: localFontSize,\n              showTashkeel: showTashkeel,\n              showArabic: showArabic,\n            ),\n          );\n        },\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "hadith_vertical_list", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/ui/hadith_vertical_list/hadith_with_section_vertical_list.dart", "file_name": "hadith_with_section_vertical_list.dart", "line": 27, "line_from": 27, "line_to": 71, "snippet": "  final void Function(HadithEntity, GlobalKey) onMoreClick;\n  final void Function(TahkikEntity) onTahkikClick;\n  final ItemPositionsListener positionsListener;\n  final ItemScrollController scrollController;\n  final double arabicFontSize;\n  final double localFontSize;\n  final String arabicFontFamily;\n  final bool showTashkeel;\n  final bool showArabic;\n  final void Function({required bool dragging})? onDragging;\n\n  @override\n  Widget build(BuildContext context) {\n    final int hadithLength = hadithVerticalList.length;\n    return HadithPositionedScrollBar(\n      key: const ValueKey(\"HadithPositionedScrollHadithSectionVerticalList\"),\n      controller: scrollController,\n      showScrollBar: hadithLength > 10,\n      onDragging: onDragging,\n      listView: ScrollablePositionedList.builder(\n        physics: const BouncingScrollPhysics(),\n        itemScrollController: scrollController,\n        itemPositionsListener: positionsListener,\n        itemCount: hadithLength,\n        padding: EdgeInsets.only(bottom: twentyPx, top: 105),\n        itemBuilder: (_, index) {\n          final (section, hadith) = hadithVerticalList[index];\n          return HadithSectionPairListItem(\n            key: ValueKey((section, hadith)),\n            hadithSection: section,\n            hadith: hadith,\n            arabicFontFamily: arabicFontFamily,\n            isFromCategory: false,\n            showTashkeel: showTashkeel,\n            showArabic: showArabic,\n            onMoreClick: onMoreClick,\n            arabicFontSize: arabicFontSize,\n            localFontSize: localFontSize,\n            onTahkikClick: onTahkikClick,\n          );\n        },\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "dialogs", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/ui/dialogs/collection_bottomsheet_persistent_footer.dart", "file_name": "collection_bottomsheet_persistent_footer.dart", "line": 19, "line_from": 19, "line_to": 100, "snippet": "  final void Function(HadithEntity, {required bool toggled}) onPinToggled;\n  final void Function(HadithEntity, int, {required bool isBookmarked})\n      onBookmarkToggled;\n  final VoidCallback onNewCreateBottomSheetClosed;\n\n  @override\n  Widget build(BuildContext context) {\n    late final ThemeData themeData = Theme.of(context);\n    late final TextTheme textTheme = themeData.textTheme;\n    final TextStyle? bodyMediumTextStyle = textTheme.bodyMedium;\n    return Container(\n      height: 14.percentWidth,\n      color: themeData.cardColor,\n      child: Column(\n        children: [\n          const Divider(\n            height: 1,\n            thickness: 1,\n            indent: 16,\n            endIndent: 16,\n          ),\n          Container(\n            margin: const EdgeInsets.symmetric(horizontal: 14),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: [\n                TextButton(\n                  onPressed: () async => _onClickNewCreate(context),\n                  child: Text(\n                    '\u09a8\u09a4\u09c1\u09a8 \u09a4\u09c8\u09b0\u09bf \u0995\u09b0\u09c1\u09a8',\n                    style: bodyMediumTextStyle?.copyWith(\n                      color: themeData.primaryColor,\n                      fontSize: 15,\n                      fontWeight: FontWeight.w600,\n                    ),\n                  ),\n                ),\n                TextButton(\n                  onPressed: () => _onOkButtonClicked(context),\n                  child: Text(\n                    \"\u09a0\u09bf\u0995 \u0986\u099b\u09c7\",\n                    style: bodyMediumTextStyle?.copyWith(\n                      color: themeData.primaryColor,\n                      fontWeight: FontWeight.w600,\n                      fontSize: 15,\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Future<void> _onClickNewCreate(BuildContext context) async {\n    await CreateNewCollectionBottomSheet.show(\n      hadith: hadith,\n      onPinToggled: onPinToggled,\n      onBookmarkToggled: onBookmarkToggled,\n      context: context,\n    );\n    onNewCreateBottomSheetClosed();\n  }\n\n  Future<void> _onOkButtonClicked(BuildContext context) async {\n    final MoreMenuPresenter presenter = locate<MoreMenuPresenter>();\n    await presenter.saveBookmarksForHadith(\n      hadith: hadith,\n      onSaved: (collectionId, {required bool isBookmarked}) {\n        onBookmarkToggled(\n          hadith,\n          collectionId,\n          isBookmarked: isBookmarked,\n        );\n        context.navigatorPop<void>();\n        dislocate<MoreMenuPresenter>();\n      },\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "dialogs", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/ui/dialogs/create_new_collection_bottomsheet.dart", "file_name": "create_new_collection_bottomsheet.dart", "line": 24, "line_from": 24, "line_to": 52, "snippet": "  final void Function(HadithEntity, {required bool toggled}) onPinToggled;\n  final void Function(HadithEntity, int, {required bool isBookmarked})\n      onBookmarkToggled;\n\n  static Future<void> show({\n    required HadithEntity hadith,\n    required void Function(HadithEntity, {required bool toggled}) onPinToggled,\n    required void Function(HadithEntity, int, {required bool isBookmarked})\n        onBookmarkToggled,\n    required BuildContext context,\n  }) async {\n    final CreateNewCollectionBottomSheet createNewCollection =\n        await Future.microtask(\n      () => CreateNewCollectionBottomSheet(\n        key: const Key(\"CreateNewCollectionBottomSheet\"),\n        hadith: hadith,\n        onBookmarkToggled: onBookmarkToggled,\n        onPinToggled: onPinToggled,\n      ),\n    );\n    if (context.mounted) {\n      await context.showBottomSheet<void>(createNewCollection);\n    }\n  }\n\n  @override\n  State<CreateNewCollectionBottomSheet> createState() =>\n      _CreateNewCollectionBottomSheetState();\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "dialogs", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/ui/dialogs/add_note_bottomsheet.dart", "file_name": "add_note_bottomsheet.dart", "line": 21, "line_from": 21, "line_to": 293, "snippet": "  final Future<bool> Function(BookmarkFolderEntity) onBookmarkAdded;\n\n  @override\n  State<AddNoteBottomSheet> createState() => _AddNoteBottomSheetState();\n\n  static Future<void> show({\n    required HadithEntity hadith,\n    required Future<List<BookmarkFolderEntity>> Function() onGetFolders,\n    required Future<bool> Function(HadithEntity, BookmarkFolderEntity)\n        onBookmarkAdded,\n    required BuildContext context,\n  }) async {\n    final List<BookmarkFolderEntity> folders = await onGetFolders();\n    final AddNoteBottomSheet addToBookmarkDialog = await Future.microtask(\n      () => AddNoteBottomSheet(\n        hadith: hadith,\n        folders: folders,\n        onBookmarkAdded: (BookmarkFolderEntity folder) =>\n            onBookmarkAdded(hadith, folder),\n      ),\n    );\n    if (context.mounted) {\n      showBottomSheet(\n        context: context,\n        builder: (_) => addToBookmarkDialog,\n        backgroundColor: Colors.transparent,\n      );\n    }\n  }\n}\n\nclass _AddNoteBottomSheetState extends State<AddNoteBottomSheet> {\n  late AddEditNoteUiState _uiState = AddEditNoteUiState.empty();\n  late TextEditingController _folderNameEditingController;\n\n  @override\n  void initState() {\n    super.initState();\n    _folderNameEditingController = TextEditingController();\n    setState(() {\n      _uiState = _uiState.copyWith(folders: widget.folders);\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      decoration: BoxDecoration(\n        color: Theme.of(context).cardColor,\n        borderRadius: BorderRadius.only(\n          topLeft: Radius.circular(twentyPx),\n          topRight: Radius.circular(twentyPx),\n        ),\n      ),\n      padding: EdgeInsets.symmetric(vertical: twentyPx, horizontal: fourteenPx),\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Text(\n            \"\u09a8\u09cb\u099f \u09a4\u09c8\u09b0\u09bf \u0995\u09b0\u09c1\u09a8\",\n            style: Theme.of(context)\n                .textTheme\n                .bodyMedium!\n                .copyWith(fontWeight: FontWeight.w600, fontSize: twentyPx),\n          ),\n          SizedBox(height: thirtyPx),\n          Align(\n            alignment: Alignment.centerLeft,\n            child: Text(\n              '\u09a8\u09cb\u099f \u09a8\u09be\u09ae',\n              style: Theme.of(context)\n                  .textTheme\n                  .bodyMedium!\n                  .copyWith(fontWeight: FontWeight.w600, fontSize: sixteenPx),\n            ),\n          ),\n          SizedBox(height: tenPx),\n          Container(\n            alignment: Alignment.center,\n            child: TextField(\n              controller: _folderNameEditingController,\n              decoration: _noteTextFieldInputDecoration(\n                context: context,\n                hintText: '\u0989\u09a6\u09be\u09b9\u09b0\u09a3...',\n              ),\n            ),\n          ),\n          SizedBox(height: twentyTwoPx),\n          Align(\n            alignment: Alignment.centerLeft,\n            child: Text(\n              '\u09a8\u09cb\u099f \u09ac\u09bf\u09b8\u09cd\u09a4\u09be\u09b0\u09bf\u09a4',\n              style: Theme.of(context)\n                  .textTheme\n                  .bodyMedium!\n                  .copyWith(fontWeight: FontWeight.w600, fontSize: sixteenPx),\n            ),\n          ),\n          SizedBox(height: tenPx),\n          Container(\n            alignment: Alignment.center,\n            child: TextField(\n              minLines: 4,\n              maxLines: 10,\n              controller: _folderNameEditingController,\n              decoration: _noteTextFieldInputDecoration(\n                context: context,\n                hintText: '\u0989\u09a6\u09be\u09b9\u09b0\u09a3...',\n              ),\n            ),\n          ),\n          SizedBox(height: twentyTwoPx),\n          Align(\n            alignment: Alignment.centerLeft,\n            child: Text(\n              '\u09ab\u09cb\u09b2\u09cd\u09a1\u09be\u09b0 \u09b0\u0999 \u09a8\u09bf\u09b0\u09cd\u09ac\u09be\u099a\u09a8 \u0995\u09b0\u09c1\u09a8',\n              style: Theme.of(context)\n                  .textTheme\n                  .bodyMedium!\n                  .copyWith(fontWeight: FontWeight.w600, fontSize: sixteenPx),\n            ),\n          ),\n          SizedBox(height: tenPx),\n          Container(\n            alignment: Alignment.centerLeft,\n            child: GridView.builder(\n              shrinkWrap: true,\n              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n                crossAxisCount: 8,\n                mainAxisSpacing: fivePx,\n              ),\n              itemCount: _uiState.availableColors.length,\n              itemBuilder: (context, index) => _buildColorSelectableItem(index),\n            ),\n          ),\n          SizedBox(height: twentyPx),\n          Divider(height: 1, thickness: .8, indent: tenPx, endIndent: tenPx),\n          SizedBox(height: tenPx),\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: [\n              ActionButton(\n                buttonText: '\u09ac\u09be\u09a4\u09bf\u09b2',\n                height: 50.px,\n                width: 120.px,\n                onTap: () {\n                  // setState(() {\n                  //   _uiState = AddEditBookmarkUiState.empty();\n                  // });\n                  context.navigatorPop<void>();\n                },\n                isFocused: false,\n              ),\n              SizedBox(width: fifteenPx),\n              ActionButton(\n                buttonText: '\u09a0\u09bf\u0995 \u0986\u099b\u09c7',\n                height: 50.px,\n                width: 120.px,\n                onTap: () async {\n                  bool isBookmarked = false;\n                  if (_folderNameEditingController.text.isEmpty) {\n                    final BookmarkFolderEntity folderEntity =\n                        BookmarkFolderEntity(\n                      id: -1,\n                      name: 'Favorite',\n                      color: _uiState.selectedColor,\n                      hadithIds: const [],\n                      createdAt: DateTime.now(),\n                      updatedAt: DateTime.now(),\n                    );\n                    isBookmarked = await widget.onBookmarkAdded(folderEntity);\n                  } else {\n                    final BookmarkFolderEntity folderEntity =\n                        BookmarkFolderEntity(\n                      id: -1,\n                      name: _folderNameEditingController.text,\n                      color: _uiState.selectedColor,\n                      hadithIds: const [],\n                      createdAt: DateTime.now(),\n                      updatedAt: DateTime.now(),\n                    );\n                    isBookmarked = await widget.onBookmarkAdded(folderEntity);\n                  }\n                  if (isBookmarked && context.mounted) {\n                    context.navigatorPop<void>();\n                  }\n                },\n              ),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildColorSelectableItem(int index) {\n    final Color currentColor = _uiState.availableColors[index];\n    final bool isSelected = _uiState.selectedColor == currentColor;\n    return InkWell(\n      onTap: () {\n        final Color color = currentColor;\n        setState(() {\n          _uiState = _uiState.copyWith(selectedColor: color);\n        });\n      },\n      child: Padding(\n        padding: EdgeInsets.only(right: twelvePx),\n        child: CircleAvatar(\n          backgroundColor: currentColor,\n          radius: fifteenPx,\n          child: isSelected\n              ? BounceInUp(\n                  duration: 62.inMilliseconds,\n                  child: Icon(\n                    Icons.check_circle,\n                    size: sixteenPx,\n                    color: Colors.white,\n                    fill: 0,\n                  ),\n                )\n              : null,\n        ),\n      ),\n    );\n  }\n\n  InputDecoration _noteTextFieldInputDecoration({\n    required BuildContext context,\n    required String hintText,\n    bool enabled = true,\n    String? suffixIconPath,\n    String? prefixIconPath,\n  }) {\n    return InputDecoration(\n      enabled: enabled,\n      border: _outlineInputBorder(context),\n      focusedBorder: _outlineInputBorder(context),\n      enabledBorder: _outlineInputBorder(context),\n      disabledBorder: _outlineInputBorder(context),\n      contentPadding:\n          EdgeInsets.symmetric(horizontal: fourteenPx, vertical: thirteenPx),\n      hintText: hintText,\n      suffixIcon: suffixIconPath != null\n          ? SvgImage(\n              suffixIconPath,\n              fit: BoxFit.scaleDown,\n              color: Theme.of(context).iconTheme.color,\n            )\n          : null,\n      prefixIcon: prefixIconPath != null\n          ? Padding(\n              padding: EdgeInsets.all(eightPx),\n              child: SvgImage(\n                prefixIconPath,\n                fit: BoxFit.scaleDown,\n                color: _uiState.selectedColor,\n              ),\n            )\n          : null,\n    );\n  }\n\n  OutlineInputBorder _outlineInputBorder(BuildContext context) {\n    return OutlineInputBorder(\n      borderRadius: BorderRadius.circular(fivePx),\n      borderSide: BorderSide(\n        width: .8,\n        color: Theme.of(context).dividerColor,\n      ), // BorderSide\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "dialogs", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/ui/dialogs/collection_bottomsheet.dart", "file_name": "collection_bottomsheet.dart", "line": 25, "line_from": 25, "line_to": 55, "snippet": "  final void Function(HadithEntity, {required bool toggled}) onPinAdded;\n  final void Function(HadithEntity, int, {required bool isBookmarked}) onBookmarkAdded;\n  final MoreMenuPresenter presenter = locate();\n\n  @override\n  State<CollectionBottomSheet> createState() => _CollectionBottomSheetState();\n\n  static Future<void> show({\n    required HadithEntity hadith,\n    required Future<void> Function(\n      HadithEntity,\n      int, {\n      required bool isBookmarked,\n    }) onBookmarkToggled,\n    required Future<void> Function(HadithEntity, {required bool toggled}) onPinToggled,\n    required BuildContext context,\n  }) async {\n    final CollectionBottomSheet addToBookmarkDialog = await Future.microtask(\n      () => CollectionBottomSheet(\n        hadith: hadith,\n        onBookmarkAdded: (hadith, count, {required bool isBookmarked}) =>\n            onBookmarkToggled(hadith, count, isBookmarked: isBookmarked),\n        onPinAdded: (hadith, {required bool toggled}) => onPinToggled(hadith, toggled: toggled),\n      ),\n    );\n    if (context.mounted) {\n      await context.showBottomSheetLegacy<void>(addToBookmarkDialog);\n      dislocate<MoreMenuPresenter>();\n    }\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "pages", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/ui/pages/single_hadith_page.dart", "file_name": "single_hadith_page.dart", "line": 38, "line_from": 38, "line_to": 144, "snippet": "  Widget build(BuildContext context) {\n    return PresentableWidgetBuilder(\n      presenter: _presenter..fetchSettingState(),\n      onInit: () async {\n        await _presenter.fetchSettingState();\n      },\n      builder: () {\n        final SingleHadithUiState uiState = _presenter.uiState.value;\n        final bool isLoading = uiState.isLoading || !uiState.hadith.isIdValid;\n\n        return Scaffold(\n          appBar: const HadithAppBar(\n            title: \"\u0986\u099c\u0995\u09c7\u09b0 \u09b9\u09be\u09a6\u09c0\u09b8\",\n          ),\n          body: RoundedScaffoldBody(\n            child: SizedBox(\n              width: HadithScreen.width,\n              height: HadithScreen.height,\n              child: SingleChildScrollView(\n                child: isLoading\n                    ? SizedBox(\n                        height: HadithScreen.height,\n                        width: HadithScreen.width,\n                        child: const Center(child: LoadingIndicator()),\n                      )\n                    : Padding(\n                        padding: EdgeInsets.symmetric(vertical: sixteenPx),\n                        child: HadithListItem(\n                          hadith: uiState.hadith,\n                          onMoreClick: (screenshotKey) => _onMoreClick(\n                            uiState.hadith,\n                            false,\n                            screenshotKey,\n                            context,\n                          ),\n                          onTahkikClick: _onTahkikClick,\n                          arabicFontFamily: uiState.arabicFontFamily,\n                          arabicFontSize: uiState.arabicFontSize,\n                          localFontSize: uiState.localFontSize,\n                          showArabic: uiState.showArabic,\n                          showTashkeel: uiState.showTashkeel,\n                        ),\n                      ),\n              ),\n            ),\n          ),\n        );\n      },\n    );\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _fetchAndManipulateData();\n  }\n\n  Future<void> _fetchAndManipulateData() async {\n    await _presenter.fetchTodaysHadith();\n    await _operateOnDataIfFromNotification(GlobalKey());\n  }\n\n  Future<void> _operateOnDataIfFromNotification(GlobalKey screenshotKey) async {\n    await UiHelper.doOnPageLoaded(() async {\n      await Future<void>.delayed(560.inMilliseconds);\n      if (!widget.isFromNotification) return;\n      final SingleHadithUiState uiState = _presenter.uiState.value;\n      final HadithEntity hadith = uiState.hadith;\n      if (widget.needToBookmark && context.mounted) {\n        _onMoreClick(hadith, true, screenshotKey, context);\n      }\n      if (widget.needToShare) await _presenter.shareHadith(hadith: hadith);\n    });\n  }\n\n  Future<void> _onTahkikClick(TahkikEntity tahkik) async {\n    await TahkikDetailsDialog.show(\n      tahkik: tahkik,\n      context: context,\n      onGetTahkikDetails: _presenter.getTahkikDetails,\n    );\n  }\n\n  void _onMoreClick(\n    HadithEntity hadith,\n    bool directlyShowCollectionOption,\n    GlobalKey screenshotKey,\n    BuildContext context,\n  ) =>\n      MoreOptionBottomSheet.show(\n        hadith: hadith,\n        onBookmarkToggled: (\n          hadith,\n          count, {\n          required bool isBookmarked,\n        }) async =>\n            _presenter.updateHadithWithBookmark(\n          hadith: hadith,\n          isBookmarked: isBookmarked,\n          isMultiBookmarked: count > 1,\n        ),\n        onPinToggled: (hadith, {required bool toggled}) {},\n        directlyShowCollectionOption: directlyShowCollectionOption,\n        screenshotKey: screenshotKey,\n        context: context,\n      );\n}"}, {"structure_type": "function", "name": "onInit", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/presenter/more_menu_presenter.dart", "file_name": "more_menu_presenter.dart", "line": 40, "line_from": 40, "line_to": 437, "snippet": "  void onInit() {\n    _fetchAllBookmarkFolders();\n    _fetchAllPins();\n    super.onInit();\n  }\n\n  final GetAllPinsUseCase _getAllPinsUseCase;\n\n  Set<String> _pinNames = {};\n\n  Future<void> _fetchAllPins() async {\n    await parseDataFromEitherWithUserMessage(\n      task: _getAllPinsUseCase.execute,\n      onDataLoaded: (pins) {\n        _pinNames = pins.map((pin) => pin.name).toSet();\n        uiState.value = currentUiState.copyWith(pins: pins);\n      },\n    );\n  }\n\n  final GetAllBookmarkFoldersUseCase _getAllBookmarkFoldersUseCase;\n\n  Future<void> _fetchAllBookmarkFolders() async {\n    await parseDataFromEitherWithUserMessage(\n      task: _getAllBookmarkFoldersUseCase.execute,\n      onDataLoaded: (folders) {\n        final List<BookmarkFolderEntity> sortedFolders = folders.sortedBy((f) => f.createdAt).reversed.toList();\n        uiState.value = currentUiState.copyWith(bookmarkFolders: sortedFolders);\n      },\n    );\n  }\n\n  Future<void> fetchSelectedCollections({required HadithEntity hadith}) async {\n    await _fetchSelectedBookmarks(hadith: hadith);\n    await _fetchSelectedPin(hadith: hadith);\n  }\n\n  final GetHadithBookmarksUseCase _getHadithBookmarksUseCase;\n\n  Future<void> _fetchSelectedBookmarks({required HadithEntity hadith}) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () async => _getHadithBookmarksUseCase.execute(hadith: hadith),\n      onDataLoaded: (folders) {\n        final Set<String> bookmarkFolderNames = folders.map((f) => f.name).toSet();\n        uiState.value = currentUiState.copyWith(\n          selectedBookmarkFolderNames: bookmarkFolderNames,\n        );\n      },\n    );\n  }\n\n  final GetHadithPinUseCase _getHadithPinUseCase;\n\n  Future<void> _fetchSelectedPin({required HadithEntity hadith}) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () async => _getHadithPinUseCase.execute(hadith: hadith),\n      onDataLoaded: (pin) {\n        uiState.value = currentUiState.copyWith(selectedPinName: pin?.name ?? \"\");\n      },\n    );\n  }\n\n  Future<void> onPinSelected({required String pinName}) async {\n    uiState.value = currentUiState.copyWith(selectedPinName: pinName);\n  }\n\n  final TogglePinHadithUseCase _togglePinHadithUseCase;\n\n  Future<void> _togglePin({\n    required HadithEntity hadith,\n    required String name,\n    required Color color,\n  }) async {\n    await executeMessageOnlyUseCase(\n      () {\n        final String purifiedName = name.trim();\n        final PinEntity? existingPin = currentUiState.pins.firstWhereOrNull((pin) => pin.name.trim() == purifiedName);\n        return _togglePinHadithUseCase.execute(\n          name: purifiedName,\n          hadith: hadith,\n          color: color,\n          existingPin: existingPin,\n        );\n      },\n      onSuccess: () async => _onPinUpdated(name, color, hadith),\n    );\n  }\n\n  Future<void> _onPinUpdated(\n    String name,\n    Color color,\n    HadithEntity hadith,\n  ) async {\n    final String purifiedName = name.trim();\n    uiState.value = currentUiState.copyWith(\n      selectedPinName: purifiedName,\n      isPinChanged: true,\n    );\n    final bool isNewPinCreated = !_pinNames.contains(purifiedName);\n    if (isNewPinCreated) {\n      _onNewPinAdded(name: purifiedName, color: color, hadith: hadith);\n    }\n    // await _fetchAllPins();\n    // await _fetchSelectedPin(hadith: hadith);\n  }\n\n  void _onNewPinAdded({\n    required String name,\n    required Color color,\n    required HadithEntity hadith,\n  }) {\n    List<PinEntity> currentPins = currentUiState.pins;\n    final String purifiedName = name.trim();\n    final PinEntity newPin = PinEntity(\n      name: purifiedName,\n      color: color,\n      hadithId: hadith.id,\n      bookId: hadith.bookId,\n      chapterId: hadith.chapterId,\n      shortInfo: \"\",\n      createdAt: DateTime.now(),\n      updatedAt: DateTime.now(),\n    );\n    _pinNames.add(purifiedName);\n    currentPins\n      ..add(newPin)\n      ..sortBy((pin) => pin.createdAt);\n    currentPins = currentPins.reversed.toList();\n    uiState.value = currentUiState.copyWith(pins: currentPins);\n  }\n\n  final ValidateFolderNameUseCase _validateBookmarkFolderNameUseCase;\n\n  Future<void> addCollectionToHadith({\n    required HadithEntity hadith,\n    required String name,\n    Color? color,\n    VoidCallback? onSaved,\n    CollectionType? collectionType,\n  }) async {\n    final String purifiedName = name.trim();\n\n    uiState.value = currentUiState.copyWith(selectedCollectionType: collectionType);\n    final bool isValid = await _validateFolderName(\n      name: purifiedName,\n      collectionType: collectionType ?? uiState.value.selectedCollectionType,\n    );\n    if (!isValid) return;\n\n    final Color selectedColor = color ?? currentUiState.selectedColor;\n    switch (currentUiState.selectedCollectionType) {\n      case CollectionType.bookmark:\n        await _createBookmarkAndAddToHadith(\n          name: purifiedName,\n          hadith: hadith,\n          color: selectedColor,\n        );\n        onSaved?.call();\n      case CollectionType.pin:\n        await _togglePin(\n          hadith: hadith,\n          name: purifiedName,\n          color: selectedColor,\n        );\n        await onPinSelected(pinName: purifiedName);\n        onSaved?.call();\n    }\n  }\n\n  Future<void> _clearSelection() async {\n    uiState.value = currentUiState.copyWith(\n      selectedBookmarkFolderNames: {},\n      selectedPinName: \"\",\n    );\n  }\n\n  Future<bool> _validateFolderName({\n    required String name,\n    required CollectionType collectionType,\n  }) async {\n    bool isValid = true;\n    final String purifiedName = name.trim();\n    await parseDataFromEitherWithUserMessage(\n      task: () async => _validateBookmarkFolderNameUseCase.execute(\n        folderName: purifiedName,\n        collectionType: collectionType,\n      ),\n      onDataLoaded: (validated) async => isValid = validated,\n      valueOnError: false,\n    );\n    return isValid;\n  }\n\n  final CreateBookmarkFolderUseCase _createBookmarkFolder;\n\n  Future<void> _createBookmarkAndAddToHadith({\n    required String name,\n    required HadithEntity hadith,\n    required Color color,\n  }) async {\n    await executeMessageOnlyUseCase(\n      () async => _createBookmarkFolder.execute(\n        name: name,\n        color: color,\n      ),\n    );\n    await _fetchAllBookmarkFolders();\n    await toggleBookmarkFolderToSelectedByName(name);\n  }\n\n  Future<void> toggleBookmarkFolderToSelectedByName(String name) async {\n    final Set<String> selectedBookmarkFolderNames = Set.from(currentUiState.selectedBookmarkFolderNames);\n    selectedBookmarkFolderNames.contains(name)\n        ? selectedBookmarkFolderNames.remove(name)\n        : selectedBookmarkFolderNames.add(name);\n    uiState.value = currentUiState.copyWith(\n      selectedBookmarkFolderNames: selectedBookmarkFolderNames,\n    );\n  }\n\n  final SaveBookmarksToHadithUseCase _saveBookmarksToHadithUseCase;\n\n  Future<void> saveBookmarksForHadith({\n    required HadithEntity hadith,\n    required void Function(\n      int, {\n      required bool isBookmarked,\n    }) onSaved,\n  }) async {\n    final Set<String> selectedBookmarkFolderNames = currentUiState.selectedBookmarkFolderNames;\n\n    final PinEntity? selectedPin =\n        currentUiState.pins.firstWhereOrNull((pin) => pin.name == currentUiState.selectedPinName);\n    if (selectedPin != null) {\n      await _togglePin(\n        hadith: hadith,\n        name: selectedPin.name,\n        color: selectedPin.color,\n      );\n    }\n\n    uiState.value = uiState.value.copyWith(isBookmarkChanged: selectedBookmarkFolderNames.isNotEmpty);\n\n    final List<BookmarkFolderEntity> bookmarkFolders =\n        currentUiState.bookmarkFolders.filter((f) => selectedBookmarkFolderNames.contains(f.name)).toList();\n\n    final bool isPinChanged = currentUiState.isPinChanged;\n    final bool isBookmarkChanged = currentUiState.isBookmarkChanged;\n\n\n\n    await executeMessageOnlyUseCase(\n      () async => _saveBookmarksToHadithUseCase.execute(\n        hadith: hadith,\n        savingFolders: bookmarkFolders,\n      ),\n      onSuccess: () => onSaved(\n        bookmarkFolders.length,\n        isBookmarked: bookmarkFolders.isNotEmpty,\n      ),\n      showMessage: false,\n    );\n\n    await _clearSelection();\n    if (isPinChanged && isBookmarkChanged) {\n      await addUserMessage(\"\u09ac\u09c1\u0995\u09ae\u09be\u09b0\u09cd\u0995 \u098f\u09ac\u0982 \u09aa\u09bf\u09a8 \u09b8\u09c7\u09ad \u0995\u09b0\u09be \u09b9\u09df\u09c7\u099b\u09c7\");\n    } else if (isPinChanged) {\n      await addUserMessage(\"\u09aa\u09bf\u09a8 \u09b8\u09c7\u09ad \u0995\u09b0\u09be \u09b9\u09df\u09c7\u099b\u09c7\u0964\");\n    } else if (isBookmarkChanged) {\n      await addUserMessage(\"\u09ac\u09c1\u0995\u09ae\u09be\u09b0\u09cd\u0995 \u09b8\u09c7\u09ad \u0995\u09b0\u09be \u09b9\u09df\u09c7\u099b\u09c7\");\n    }\n  }\n\n  Future<void> toggleColor({\n    required Color color,\n  }) async =>\n      uiState.value = currentUiState.copyWith(selectedColor: color);\n\n  Future<void> selectCollectionType(CollectionType collectionType) async =>\n      uiState.value = currentUiState.copyWith(selectedCollectionType: collectionType);\n\n  Future<void> copyHadithArabic({required HadithEntity hadith}) async {\n    if(hadith.arabicText.isEmpty){\n      await showMessage(message: \"\u0986\u09b0\u09ac\u09bf \u09a8\u09c7\u0987\");\n    } else{\n      final String shareableText = await convertHadithToShareableString(\n        hadith: hadith,\n        shareWithArabicText: true,\n        shareWithBanglaText: false,\n      );\n      await copyText(text: shareableText);\n      await showMessage(message: \"\u0986\u09b0\u09ac\u09bf \u0995\u09aa\u09bf \u09b9\u09df\u09c7\u099b\u09c7\");\n\n    }\n\n  }\n\n  Future<void> copyHadithTranslation({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: false,\n      shareWithBanglaText: true,\n    );\n    await copyText(text: shareableText);\n    await showMessage(message: \"\u09ac\u09be\u0982\u09b2\u09be \u0985\u09a8\u09c1\u09ac\u09be\u09a6 \u0995\u09aa\u09bf \u09b9\u09df\u09c7\u099b\u09c7\");\n  }\n\n  Future<void> copyFullHadith({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: true,\n      shareWithBanglaText: true,\n    );\n    await copyText(text: shareableText);\n    await showMessage(message: \"\u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u09b9\u09be\u09a6\u09bf\u09b8 \u0995\u09aa\u09bf \u09b9\u09df\u09c7\u099b\u09c7\");\n  }\n\n  final PreWarmHadithDataUseCase _preWarmHadithDataUseCase;\n\n  Future<void> preLoadHadith({\n    required int bookId,\n    required int chapterId,\n    required void Function() onLoaded,\n  }) async {\n    await _preWarmHadithDataUseCase.execute(\n      bookId: bookId,\n      chapterId: chapterId,\n      onLoaded: () async {\n        await Future<void>.delayed(560.inMilliseconds);\n        onLoaded();\n      },\n    );\n  }\n\n  Future<void> reportHadith({required HadithEntity hadith}) async {\n    final String reportInfo = await getDeviceInfo();\n    final String currentVersion = await currentAppVersion;\n    final String subject = 'Report:\u2004${hadith.book.name.replaceAll(\n      ' ',\n      '\u2004',\n    )},\u2004\u09b9\u09be\u09a6\u09c0\u09b8\u2004\u09a8\u0982:\u2004${hadith.hadithId}\u2004[AlHadith]';\n    final String body = '''\n\u09ac\u0987:\u2004${hadith.book.name.replaceAll(' ', '\u2004')}\n\u09b9\u09be\u09a6\u09c0\u09b8\u2004\u09a8\u0982:\u2004${hadith.hadithId}\n\u09af\u09c7\u2004\u09b8\u09ae\u09b8\u09cd\u09af\u09be\u099f\u09bf\u2004\u09b0\u09bf\u09aa\u09cb\u09b0\u09cd\u099f\u2004\u0995\u09b0\u099b\u09c7\u09a8:\u2004\n\nApp\u2004Version:\u2004$currentVersion\n\u09a1\u09bf\u09ad\u09be\u0987\u09b8\u2004\u0987\u09a8\u09ab\u09b0\u09ae\u09c7\u09b6\u09a8:\n${reportInfo.replaceAll(\" \", '\u2004')}\n''';\n    await sendEmail(subject: subject, body: body);\n  }\n\n  Future<void> shareHadith({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: true,\n      shareWithBanglaText: true,\n    );\n    await shareText(text: shareableText);\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = currentUiState.copyWith(isLoading: loading);\n  }\n\n  @override\n  Future<void> addUserMessage(String message) async {\n    if (message.isEmpty) return;\n    if (message == currentUiState.userMessage) return;\n    uiState.value = currentUiState.copyWith(userMessage: message, isLoading: false);\n    unawaited(\n      Future<void>.delayed(112.inMilliseconds).then((_) {\n        uiState.value = currentUiState.copyWith(userMessage: \"\", isLoading: false);\n      }),\n    );\n  }\n\n  MoreMenuUiState get currentUiState => uiState.value;\n\n  void Function() _onAnimateBottomSheetToTop = () {};\n  void Function() _onAnimateBottomSheetToBottom = () {};\n\n  Future<void> toggleBottomSheetScroll({\n    required bool reachedTop,\n  }) async {\n    reachedTop ? _onAnimateBottomSheetToBottom() : _onAnimateBottomSheetToTop();\n  }\n\n  Future<void> setBottomSheetExpandCallback({\n    required VoidCallback animateToTop,\n    required VoidCallback animateToBottom,\n  }) async {\n    _onAnimateBottomSheetToTop = animateToTop;\n    _onAnimateBottomSheetToBottom = animateToBottom;\n  }\n}"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/presenter/single_hadith_presenter.dart", "file_name": "single_hadith_presenter.dart", "line": 121, "line_from": 121, "line_to": 132, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = uiState.value.copyWith(errorMessage: \"\", isLoading: false);\n  }\n\n  Future<void> copyHadithArabic({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: true,\n      shareWithBanglaText: false,\n    );\n    await copyText(text: shareableText);\n  }"}, {"structure_type": "function", "name": "fetchHadithListData", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/hadith_list/presenter/hadith_list_presenter.dart", "file_name": "hadith_list_presenter.dart", "line": 66, "line_from": 66, "line_to": 521, "snippet": "  Future<void> fetchHadithListData({\n    required HadithListArgument argsParam,\n  }) async {\n    final HadithListArgument args = argsParam;\n    final bool fromCategory = args.category != null;\n    final bool fromChapter = args.chapterId != null && args.bookId != null;\n    if (fromChapter) {\n      final int bookId = args.bookId!;\n      final int chapterId = args.chapterId!;\n\n      await _fetchChapter(\n        bookId: bookId,\n        chapterId: chapterId,\n      );\n\n      await _fetchHadithSectionedList(bookId: bookId, chapterId: chapterId);\n      await _fetchSectionHadithPair(hadithBookId: bookId, chapterId: chapterId);\n    } else if (fromCategory) {\n      final CategoryEntity category = args.category!;\n      await _fetchHadithDataForCategory(category: category);\n    }\n\n    _argsCache = argsParam;\n  }\n\n  final GetChapterByBookAndChapterIdUseCase _getChapterByBookAndChapterIdUseCase;\n\n  Future<void> _fetchChapter({\n    required int bookId,\n    required int chapterId,\n  }) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () => _getChapterByBookAndChapterIdUseCase.execute(\n        bookId: bookId,\n        chapterId: chapterId,\n      ),\n      onDataLoaded: (chapter) => uiState.value = uiState.value.copyWith(chapter: chapter),\n    );\n  }\n\n  Future<void> _fetchSectionHadithPair({\n    required int hadithBookId,\n    required int chapterId,\n  }) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () async => _getSectionHadithPairByBookAndChapterId.execute(\n        bookId: hadithBookId,\n        chapterId: chapterId,\n        refresh: false,\n      ),\n      onDataLoaded: (list) => uiState.value = uiState.value.copyWith(hadithHorizontalList: list),\n      showLoading: true,\n    );\n  }\n\n  Future<void> _fetchHadithSectionedList({\n    required int bookId,\n    required int chapterId,\n  }) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () => _getHadithSectionedListByBookIdAndChapter.execute(\n        bookId: bookId,\n        chapterId: chapterId,\n        refresh: false,\n      ),\n      onDataLoaded: (list) => uiState.value = uiState.value.copyWith(hadithVerticalList: list),\n      showLoading: true,\n    );\n  }\n\n  @override\n  Future<void> onInit() async {\n    super.onInit();\n    await fetchSettingState();\n  }\n\n  StreamSubscription<Either<String, SettingsStateEntity>>? _settingsChangeSub;\n\n  Future<void> fetchSettingState() async {\n    await handleStreamEvents(\n      stream: _listenSettingsChanges.execute(),\n      onData: _updateSettingsState,\n      subscription: _settingsChangeSub,\n    );\n  }\n\n  SettingsStateEntity? _currentSettingsState;\n\n  void _updateSettingsState(SettingsStateEntity settingState) {\n    _currentSettingsState = settingState;\n    uiState.value = uiState.value.copyWith(\n      arabicFontFamily: arabicFontToFontFamilyMap[settingState.arabicFont],\n      arabicFontSize: settingState.arabicFontSize,\n      localFontSize: settingState.localFontSize,\n      showChapter: settingState.showChapter,\n      showArabic: settingState.showArabic,\n      viewMode: settingState.viewMode,\n      showHadithActionButton: settingState.showHadithActionButton,\n      showTashkeel: settingState.showTashkeel,\n    );\n  }\n\n\n\n  void updateArgs(HadithListArgument args){\n    hadithargs = args;\n  }\n\n  Future<void> fetchAndSaveLastHadith(HadithListArgument args) async {\n    await catchFutureOrVoid(() async {\n\n      final HadithListViewMode viewMode = uiState.value.viewMode;\n      final int index = viewMode == HadithListViewMode.vertical\n          ? hadithItemPositionsListener.itemPositions.value.first.index\n          : currentIndexInHorizontalSlider ?? 0;\n      await findAndSaveLastRead(index: index, args: args);\n    });\n  }\n\n\n  Future<void> initialiseAndSetUpControllers(HadithListArgument args, BuildContext context) async {\n    hadithScrollController = ItemScrollController();\n    hadithItemPositionsListener = ItemPositionsListener.create();\n    hadithPageController = PageController();\n\n    await fetchHadithListData(argsParam: args).then((value) {\n      WidgetsBinding.instance.addPostFrameCallback((_) async {\n        await scrollToDesiredLocation(args);\n      });\n    });\n      await UiHelper.listenToScroll(\n        scrollController: hadithScrollController,\n        onScrolled: ({required bool toTop}) => toggleFullScreen(context, isFullScreen: toTop),\n      );\n\n    _listenToSliderHadithScrolling();\n  }\n\n  final Lock _listenToSliderHadithScrollingLock = Lock();\n\n  void _listenToSliderHadithScrolling() {\n    final bool isSliderOn = uiState.value.viewMode != HadithListViewMode.horizontal;\n    if (isSliderOn) return;\n\n    hadithPageController.addListener(() async {\n      await _listenToSliderHadithScrollingLock.synchronized(() {\n        if (!hadithPageController.hasClients) return;\n        currentIndexInHorizontalSlider = hadithPageController.page?.round();\n      });\n    });\n  }\n\n  Future<void> scrollToDesiredLocation(HadithListArgument args) async {\n    await UiHelper.doOnPageLoaded(\n          () async {\n        if (args.isFromLastReadOrGoTo) {\n          await onFindHadithIndex(\n            args: args,\n            onIndexFound: (viewMode, index) => _jumpToDesiredLocation(viewMode: viewMode, index: index, args: args),\n          );\n        } else {\n          if (args.hadithId == -1) return;\n          await _jumpToDesiredLocation(\n            args: args,\n            viewMode: uiState.value.viewMode,\n            index: args.hadithId,\n          );\n        }\n      },\n    );\n  }\n\n  Future<void> _jumpToDesiredLocation({\n    required HadithListViewMode viewMode,\n    required HadithListArgument args,\n    required int index,\n  }) async {\n    await catchFutureOrVoid(() async {\n      switch (viewMode) {\n        case HadithListViewMode.vertical:\n          if (hadithScrollController.isAttached) {\n            hadithScrollController.jumpTo(index: index, alignment: 0.11);\n          }\n        case HadithListViewMode.horizontal:\n          if (hadithPageController.hasClients) {\n            hadithPageController.jumpToPage(index);\n          }\n      }\n      await Future<void>.delayed(560.inMilliseconds);\n      await fetchAndSaveLastHadith(args);\n    });\n  }\n\n  Future<void> toggleViewChange() async {\n    if (_currentSettingsState == null) return;\n    final HadithListViewMode changedViewMode = uiState.value.viewMode == HadithListViewMode.vertical\n        ? HadithListViewMode.horizontal\n        : HadithListViewMode.vertical;\n    uiState.value = uiState.value.copyWith(viewMode: changedViewMode);\n    await _updateSettings.execute(\n      settingsState: _currentSettingsState!.copyWith(viewMode: changedViewMode),\n    );\n  }\n\n  bool _isFullScreen = false;\n\n  Future<bool> toggleFullScreen(\n    BuildContext context, {\n    required bool isFullScreen,\n  }) async {\n    if (_isFullScreen == isFullScreen) return uiState.value.isFullScreen;\n    _isFullScreen = isFullScreen;\n    uiState.value = uiState.value.copyWith(isFullScreen: isFullScreen);\n\n    // try{\n    //   SystemChrome.setSystemUIOverlayStyle(\n    //     SystemUiOverlayStyle(\n    //       statusBarColor: Theme.of(context).secondaryHeaderColor,\n    //       statusBarIconBrightness: Brightness.light,\n    //       systemNavigationBarColor: Theme.of(context).cardColor,\n    //       systemNavigationBarIconBrightness: Brightness.dark,\n    //     ),\n    //   );\n    // } catch (e){}\n\n    return uiState.value.isFullScreen;\n  }\n\n  Future<void> fetchBookmarkFolders() async {\n    await parseDataFromEitherWithUserMessage(\n      task: () async => _getAllBookmarkFolders.execute(),\n      onDataLoaded: (folderList) => uiState.value = uiState.value.copyWith(bookmarkFolders: folderList),\n    );\n  }\n\n  Future<List<BookmarkFolderEntity>> getBookmarkFolders() async {\n    await fetchBookmarkFolders();\n    return uiState.value.bookmarkFolders;\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = uiState.value.copyWith(isLoading: loading);\n  }\n\n  @override\n  Future<void> addUserMessage(String message) async {\n    uiState.value = uiState.value.copyWith(errorMessage: message, isLoading: false);\n    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = uiState.value.copyWith(errorMessage: \"\", isLoading: false);\n  }\n\n  Future<void> _fetchHadithDataForCategory({\n    required CategoryEntity category,\n  }) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () => _getHadithByCategory.execute(category: category),\n      onDataLoaded: (hadithList) => uiState.value = uiState.value.copyWith(hadithList: hadithList, isLoading: false),\n      showLoading: true,\n    );\n  }\n\n  late final Map<int, SectionEntity> _cachedHadithSectionList = {};\n\n  SectionEntity getHadithSectionEntityById({int sectionId = 0}) {\n    final SectionEntity section = _cachedHadithSectionList[sectionId] ?? SectionEntity.empty();\n    return section;\n  }\n\n  final GetTahkikDetailsUseCase _getTahkikDetailsUseCase;\n\n  Future<TahkikEntity?> getTahkikDetails(\n    TahkikEntity tahkik,\n  ) async {\n    final TahkikEntity? tahkikDetails = await mapDataFromEitherWithUserMessage(\n      task: () => _getTahkikDetailsUseCase.execute(tahkikEntity: tahkik),\n    );\n    return tahkikDetails;\n  }\n\n  final FindIndexFromHadithIdUseCase _findIndexFromHadithId;\n  final FindIndexFromHadithSectionUseCase _findIndexFromHadithSection;\n\n  Future<void> onFindHadithIndex({\n    required HadithListArgument args,\n    required void Function(HadithListViewMode, int) onIndexFound,\n  }) async {\n    final HadithListUiState currentUiState = uiState.value;\n    final HadithListViewMode viewMode = currentUiState.viewMode;\n\n    int index = -1;\n\n    if (args.sectionId > 0) {\n      index = await _findIndexFromHadithSection.execute(\n        sectionId: args.sectionId,\n        viewMode: currentUiState.viewMode,\n        hadithVerticalList: currentUiState.hadithVerticalList,\n        hadithHorizontalList: currentUiState.hadithHorizontalList,\n      );\n    }\n\n    if (args.isFromLastReadOrGoTo && args.hadithId > 0) {\n      index = await _findIndexFromHadithId.execute(\n        hadithId: args.hadithId,\n        viewMode: currentUiState.viewMode,\n        hadithVerticalList: currentUiState.hadithVerticalList,\n        hadithHorizontalList: currentUiState.hadithHorizontalList,\n      );\n    }\n\n    if (index > 0) onIndexFound(viewMode, index);\n  }\n\n  Future<void> updateHadithDataWithBookmark({\n    required HadithEntity hadith,\n    required bool isBookmarked,\n    required bool isMultiBookmarked,\n  }) async {\n    final CategoryEntity? categoryEntity = _argsCache?.category;\n    final HadithListUiState currentUiState = uiState.value;\n\n    await fetchBookmarkFolders();\n\n    if (categoryEntity != null) {\n      final List<HadithEntity> hadithList = await compute(\n        _updateHadithListWithBookmark,\n        (\n          currentUiState.hadithList,\n          hadith,\n          isBookmarked,\n          isMultiBookmarked,\n        ),\n      );\n      uiState.value = currentUiState.copyWith(hadithList: hadithList);\n      return;\n    }\n\n    final List<(SectionEntity, HadithEntity)> hadithHorizontalListUpdated = await compute(\n      _updateHadithSectionPairWithBookmark,\n      (\n        currentUiState.hadithHorizontalList,\n        hadith,\n        isBookmarked,\n        isMultiBookmarked,\n      ),\n    );\n    final List<(SectionEntity, HadithEntity)> hadithVerticalListUpdated = await compute(\n      _updateHadithSectionPairWithBookmark,\n      (\n        currentUiState.hadithVerticalList,\n        hadith,\n        isBookmarked,\n        isMultiBookmarked,\n      ),\n    );\n    uiState.value = currentUiState.copyWith(\n      hadithVerticalList: hadithVerticalListUpdated,\n      hadithHorizontalList: hadithHorizontalListUpdated,\n    );\n  }\n\n  Future<void> copyHadithArabic({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: true,\n      shareWithBanglaText: false,\n    );\n    await copyText(text: shareableText);\n    await showMessage(message: \"\u0986\u09b0\u09ac\u09bf \u0995\u09aa\u09bf \u09b9\u09df\u09c7\u099b\u09c7\");\n  }\n\n  Future<void> copyHadithTranslation({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: false,\n      shareWithBanglaText: true,\n    );\n    await copyText(text: shareableText);\n    await showMessage(message: \"\u09ac\u09be\u0982\u09b2\u09be \u0985\u09a8\u09c1\u09ac\u09be\u09a6 \u0995\u09aa\u09bf \u09b9\u09df\u09c7\u099b\u09c7\");\n  }\n\n  Future<void> copyFullHadith({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: true,\n      shareWithBanglaText: true,\n    );\n    await copyText(text: shareableText);\n    await showMessage(message: \"\u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u09b9\u09be\u09a6\u09bf\u09b8 \u0995\u09aa\u09bf \u09b9\u09df\u09c7\u099b\u09c7\");\n  }\n\n  Future<void> shareHadith({required HadithEntity hadith}) async {\n    final String shareableText = await convertHadithToShareableString(\n      hadith: hadith,\n      shareWithArabicText: true,\n      shareWithBanglaText: true,\n    );\n    await shareText(text: shareableText);\n  }\n\n  Future<void> findAndSaveLastRead({\n    required int index,\n    required HadithListArgument args,\n  }) async {\n    final HadithListUiState currentUiState = uiState.value;\n\n    await _saveLastRead.execute(\n      chapterName: args.chapterName,\n      isFromCategory: args.category != null,\n      chapterId: args.chapterId,\n      index: index,\n      hadithHorizontalList: currentUiState.hadithHorizontalList,\n      hadithVerticalList: currentUiState.hadithVerticalList,\n      viewMode: currentUiState.viewMode,\n      bookId: args.bookId,\n      bookName: args.bookName,\n    );\n  }\n\n  Future<void> setVisibilityOfHadithIdOverlay({required bool show}) async {\n    await setCurrentlyViewedSliderHadithLock.synchronized(() {\n      final HadithListUiState currentUiState = uiState.value;\n      uiState.value = currentUiState.copyWith(showHadithIdOverlay: show);\n    });\n  }\n\n  late final Lock setCurrentlyViewedSliderHadithLock = Lock();\n\n  Future<void> setCurrentlyViewedSliderHadith({\n    bool? showOverlay,\n    double? hadithIndex,\n  }) async {\n    await setCurrentlyViewedSliderHadithLock.synchronized(() {\n      try {\n        final HadithListUiState currentUiState = uiState.value;\n        if (!currentUiState.showHadithIdOverlay) return;\n        if (hadithIndex == null) return;\n        final (_, hadith) = currentUiState.hadithHorizontalList[hadithIndex.round()];\n        if (!hadith.isIdValid) return;\n        final bool stillSameHadith = hadith.hadithId == currentUiState.currentlyViewedSliderHadith?.hadithId;\n        if (stillSameHadith) return;\n        uiState.value = currentUiState.copyWith(currentlyViewedSliderHadith: hadith);\n      } catch (e) {\n        logError(e);\n      }\n    });\n  }\n\n  int? currentIndexInHorizontalSlider = 0;\n\n  @override\n  Future<void> onClose() async {\n    await _settingsChangeSub?.cancel();\n    super.onClose();\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "pins", "file_path": "al-hadith-flutter/lib/presentation/collections/ui/pins/more_pin_option_bottom_sheet.dart", "file_name": "more_pin_option_bottom_sheet.dart", "line": 105, "line_from": 105, "line_to": 120, "snippet": "    required void Function(PinEntity) onRemovePin,\n    required Future<bool> Function(String, Color) onEditPin,\n    required BuildContext context,\n  }) async {\n    final MorePinOptionBottomSheet morePinOptionBottomSheet =\n        await Future.microtask(\n      () => MorePinOptionBottomSheet(\n        pin: pin,\n        onRemovePin: onRemovePin,\n        onEditPin: onEditPin,\n      ),\n    );\n    if (context.mounted) {\n      await context.showBottomSheet<void>(morePinOptionBottomSheet);\n    }\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "pins", "file_path": "al-hadith-flutter/lib/presentation/collections/ui/pins/edit_pin_dialog.dart", "file_name": "edit_pin_dialog.dart", "line": 21, "line_from": 21, "line_to": 142, "snippet": "  final Future<bool> Function(String, Color) onEditPin;\n\n  @override\n  State<EditPinDialog> createState() => _EditPinDialogState();\n\n  static Future<void> show({\n    required BuildContext context,\n    required PinEntity pin,\n    required Future<bool> Function(String, Color) onEditPin,\n  }) async {\n    await showAnimatedDialog<void>(\n      context: context,\n      builder: (_) => EditPinDialog(pin: pin, onEditPin: onEditPin),\n      animationType: DialogTransitionType.slideFromTop,\n      curve: Curves.fastOutSlowIn,\n      barrierDismissible: true,\n    );\n  }\n}\n\nclass _EditPinDialogState extends State<EditPinDialog> {\n  late TextEditingController _editingController;\n\n  @override\n  void initState() {\n    super.initState();\n    _editingController = TextEditingController(text: widget.pin.name);\n    setState(() {\n      _selectedColor = widget.pin.color;\n    });\n  }\n\n  @override\n  void dispose() {\n    _editingController.dispose();\n    super.dispose();\n  }\n\n  late Color _selectedColor = widget.pin.color;\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      elevation: 0,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),\n      insetPadding: const EdgeInsets.symmetric(horizontal: 18),\n      child: SingleChildScrollView(\n        child: Container(\n          padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 20),\n          decoration: const BoxDecoration(),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Text(\n                '\u09aa\u09bf\u09a8 \u098f\u09a1\u09bf\u099f \u0995\u09b0\u09c1\u09a8',\n                style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                      fontWeight: FontWeight.w600,\n                      fontSize: 20,\n                    ),\n              ),\n              const SizedBox(height: 24),\n              Align(\n                alignment: Alignment.centerLeft,\n                child: EditText(\n                  text: '\u09aa\u09bf\u09a8 \u09a8\u09be\u09ae \u098f\u09a1\u09bf\u099f \u0995\u09b0\u09c1\u09a8',\n                  fontColor: Theme.of(context).textTheme.bodyMedium?.color,\n                ),\n              ),\n              const SizedBox(height: 10),\n              Container(\n                alignment: Alignment.center,\n                child: TextFormField(\n                  contextMenuBuilder: fixedLightContextMenu,\n                  controller: _editingController,\n                  inputFormatters: [\n                    LengthLimitingTextInputFormatter(40),\n                    FilteringTextInputFormatter.deny(RegExp(r'^[1-9][0-9]*$')),\n                    FilteringTextInputFormatter.deny(RegExp(r'^(0|\\s).*')),\n                  ],\n                  decoration: editInputDecoration(\n                    context: context,\n                    hintText: '\u09ab\u09cb\u09b2\u09cd\u09a1\u09be\u09b0 \u09a8\u09be\u09ae',\n                    prefixIconPath: SvgPath.icPin,\n                    selectedColor: _selectedColor,\n                  ),\n                ),\n              ),\n              const SizedBox(height: 25),\n              Align(\n                alignment: Alignment.centerLeft,\n                child: EditText(\n                  text: '\u09aa\u09bf\u09a8\u09c7\u09b0 \u09b0\u0982 \u09a8\u09bf\u09b0\u09cd\u09ac\u09be\u099a\u09a8 \u0995\u09b0\u09c1\u09a8',\n                  fontColor: Theme.of(context).textTheme.bodyMedium?.color,\n                ),\n              ),\n              const SizedBox(height: 20),\n              EditColorOptions(\n                colors: _folderColors,\n                selectedColor: _selectedColor,\n                onColorSelected: (color) =>\n                    setState(() => _selectedColor = color),\n              ),\n              const SizedBox(height: 20),\n              const Divider(),\n              EditActionButtons(\n                onCancel: () => context.navigatorPop<void>(),\n                onDone: _onSave,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Future<void> _onSave() async {\n    final bool isEdited =\n        await widget.onEditPin(_editingController.text, _selectedColor);\n    if (isEdited && context.mounted) context.navigatorPop<void>();\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "components", "file_path": "al-hadith-flutter/lib/presentation/collections/ui/components/remove_dialog.dart", "file_name": "remove_dialog.dart", "line": 22, "line_from": 22, "line_to": 34, "snippet": "    required Future<void> Function() onRemove,\n  }) async {\n    await showAnimatedDialog<void>(\n      context: context,\n      builder: (_) => RemoveDialog(\n        onRemove: onRemove,\n        title: title,\n      ),\n      animationType: DialogTransitionType.scale,\n      curve: Curves.fastOutSlowIn,\n      barrierDismissible: true,\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "components", "file_path": "al-hadith-flutter/lib/presentation/collections/ui/components/log_out_dialog.dart", "file_name": "log_out_dialog.dart", "line": 23, "line_from": 23, "line_to": 35, "snippet": "    required Future<void> Function() onRemove,\n  }) async {\n    await showAnimatedDialog<void>(\n      context: context,\n      builder: (_) => LogOutDialog(\n        onRemove: onRemove,\n        title: title,\n      ),\n      animationType: DialogTransitionType.scale,\n      curve: Curves.fastOutSlowIn,\n      barrierDismissible: true,\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "notes", "file_path": "al-hadith-flutter/lib/presentation/collections/ui/notes/edit_note_dialog.dart", "file_name": "edit_note_dialog.dart", "line": 20, "line_from": 20, "line_to": 149, "snippet": "  final Future<bool> Function(String, Color) onEditBookmarkFolder;\n\n  @override\n  State<EditNoteDialog> createState() => _EditNoteDialogState();\n}\n\nclass _EditNoteDialogState extends State<EditNoteDialog> {\n  late TextEditingController _editingController;\n\n  @override\n  void initState() {\n    super.initState();\n    _editingController =\n        TextEditingController(text: widget.bookmarkFolder.name);\n    setState(() {\n      _selectedColor = widget.bookmarkFolder.color;\n    });\n  }\n\n  @override\n  void dispose() {\n    _editingController.dispose();\n    super.dispose();\n  }\n\n  late Color _selectedColor = widget.bookmarkFolder.color;\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      elevation: 0,\n      shape:\n          RoundedRectangleBorder(borderRadius: BorderRadius.circular(twentyPx)),\n      insetPadding: EdgeInsets.symmetric(horizontal: eighteenPx),\n      child: SingleChildScrollView(\n        child: Container(\n          padding:\n              EdgeInsets.symmetric(horizontal: fifteenPx, vertical: twentyPx),\n          decoration: const BoxDecoration(),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Text(\n                '\u09a8\u09cb\u099f \u098f\u09a1\u09bf\u099f \u0995\u09b0\u09c1\u09a8',\n                style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                      fontWeight: FontWeight.w600,\n                      fontSize: 20,\n                    ),\n              ),\n              SizedBox(height: twentyFourPx),\n              Align(\n                alignment: Alignment.centerLeft,\n                child: EditText(\n                  text: '\u09a8\u09cb\u099f \u09a8\u09be\u09ae \u098f\u09a1\u09bf\u099f \u0995\u09b0\u09c1\u09a8',\n                  fontSize: fourteenPx,\n                ),\n              ),\n              SizedBox(height: tenPx),\n              Container(\n                alignment: Alignment.center,\n                child: TextField(\n                  controller: _editingController,\n                  decoration: editInputDecoration(\n                    context: context,\n                    hintText: '\u09ab\u09cb\u09b2\u09cd\u09a1\u09be\u09b0 \u09a8\u09be\u09ae',\n                    prefixIconPath: SvgPath.icBookmarkFolder,\n                    selectedColor: _selectedColor,\n                  ),\n                ),\n              ),\n              SizedBox(height: twentyTwoPx),\n              Align(\n                alignment: Alignment.centerLeft,\n                child: EditText(\n                  text: '\u09ac\u09bf\u09b8\u09cd\u09a4\u09be\u09b0\u09bf\u09a4 \u09a8\u09cb\u099f \u098f\u09a1\u09bf\u099f \u0995\u09b0\u09c1\u09a8',\n                  fontSize: sixteenPx,\n                ),\n              ),\n              SizedBox(height: tenPx),\n              Container(\n                alignment: Alignment.center,\n                child: TextField(\n                  minLines: 4,\n                  maxLines: 7,\n                  controller: _editingController,\n                  decoration: editInputDecoration(\n                    context: context,\n                    hintText: '\u09ab\u09cb\u09b2\u09cd\u09a1\u09be\u09b0 \u09a8\u09be\u09ae',\n                    prefixIconPath: SvgPath.icBookmarkFolder,\n                    selectedColor: _selectedColor,\n                  ),\n                ),\n              ),\n              SizedBox(height: 25.px),\n              Align(\n                alignment: Alignment.centerLeft,\n                child: EditText(\n                  text: '\u09ab\u09cb\u09b2\u09cd\u09a1\u09be\u09b0 \u09b0\u0982 \u09a8\u09bf\u09b0\u09cd\u09ac\u09be\u099a\u09a8 \u0995\u09b0\u09c1\u09a8',\n                  fontSize: sixteenPx,\n                ),\n              ),\n              SizedBox(height: twentyPx),\n              EditColorOptions(\n                colors: _folderColors,\n                selectedColor: _selectedColor,\n                onColorSelected: (color) =>\n                    setState(() => _selectedColor = color),\n              ),\n              SizedBox(height: twentyPx),\n              const Divider(),\n              EditActionButtons(\n                onCancel: () => context.navigatorPop<void>(),\n                onDone: _onSave,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Future<void> _onSave() async {\n    final bool isEdited = await widget.onEditBookmarkFolder(\n      _editingController.text,\n      _selectedColor,\n    );\n    if (isEdited && context.mounted) context.navigatorPop<void>();\n  }\n}"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "bookmarks", "file_path": "al-hadith-flutter/lib/presentation/collections/ui/bookmarks/bookmark_sort_filter_selector.dart", "file_name": "bookmark_sort_filter_selector.dart", "line": 19, "line_from": 19, "line_to": 172, "snippet": "  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n\n    return PresentableWidgetBuilder(\n      presenter: _presenter,\n      builder: () {\n        final CollectionUiState uiState = _presenter.uiState.value;\n        final List<SortOptionEntity> sortOptions = uiState.sortOptions;\n        final SortOptionEntity? selectedSortOption = uiState.selectedSort;\n        return Container(\n          padding: const EdgeInsets.symmetric(horizontal: 25, vertical: 20),\n          decoration: BoxDecoration(\n            color: themeData.cardColor,\n            borderRadius: const BorderRadius.only(\n              topLeft: Radius.circular(25),\n              topRight: Radius.circular(25),\n            ),\n          ),\n          child: Wrap(\n            children: [\n              Padding(\n                padding: const EdgeInsets.only(bottom: 8),\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: [\n                    Text(\n                      \"\u09b8\u0982\u0995\u09b2\u09a8\u0997\u09c1\u09b2\u09cb \u09b8\u09be\u099c\u09be\u09a8\",\n                      style: themeData.textTheme.bodyMedium?.copyWith(\n                        fontSize: 20,\n                        fontWeight: FontWeight.w600,\n                      ),\n                    ),\n                    InkWell(\n                      onTap: () => context.navigatorPop<void>(),\n                      child: const Icon(Icons.close, size: 25),\n                    ),\n                  ],\n                ),\n              ),\n              const SizedBox(height: 20),\n              Column(\n                children: List.generate(\n                  sortOptions.length,\n                  (index) {\n                    final SortOptionEntity sortOption = sortOptions[index];\n                    return SortOptionItem(\n                      sortOption: sortOption,\n                      isSelected: sortOption == selectedSortOption,\n                      onOptionSelected: _presenter.sortCollections,\n                    );\n                  },\n                ),\n              ),\n              const SizedBox(height: 10),\n              Divider(\n                color: themeData.dividerColor,\n                thickness: .7,\n              ),\n              Center(\n                child: InkWell(\n                  onTap: () => context.navigatorPop<void>(),\n                  child: Text(\n                    '\u0993\u0995\u09c7',\n                    style: themeData.textTheme.bodyMedium?.copyWith(\n                      fontSize: 20,\n                      color: themeData.primaryColor,\n                      fontWeight: FontWeight.w600,\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n\n  static Future<void> show(BuildContext context) async {\n    final CollectionSortFilterSelector filterBottomSheet =\n        await Future.microtask(\n      () => CollectionSortFilterSelector(\n        key: const Key(\"CollectionSortFilterSelector\"),\n      ),\n    );\n    if (context.mounted) {\n      await context.showBottomSheet<void>(filterBottomSheet);\n      // await Get.bottomSheet<void>(filterBottomSheet);\n    }\n  }\n}\n\nclass SortOptionItem extends StatelessWidget {\n  const SortOptionItem({\n    super.key,\n    required this.sortOption,\n    required this.isSelected,\n    required this.onOptionSelected,\n  });\n\n  final SortOptionEntity sortOption;\n  final bool isSelected;\n  final void Function(SortOptionEntity) onOptionSelected;\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n\n    return InkWell(\n      onTap: () => onOptionSelected(sortOption),\n      child: Padding(\n        padding: const EdgeInsets.symmetric(vertical: 10),\n        child: Row(\n          children: [\n            if (isSelected)\n              CircleAvatar(\n                backgroundColor: themeData.primaryColor,\n                radius: 8,\n                child: BounceInUp(\n                  duration: 122.inMilliseconds,\n                  child: const Icon(\n                    CupertinoIcons.check_mark,\n                    color: Colors.white,\n                    weight: 5,\n                    size: 8,\n                  ),\n                ),\n              )\n            else\n              Container(\n                width: 16,\n                height: 16,\n                decoration: BoxDecoration(\n                  shape: BoxShape.circle,\n                  border: Border.all(\n                    color: themeData.iconTheme.color!,\n                    width: 2,\n                  ),\n                ),\n              ),\n            const SizedBox(width: 20),\n            Text(\n              sortOption.name,\n              style: themeData.textTheme.bodyMedium?.copyWith(\n                fontSize: 16,\n                fontWeight: FontWeight.w600,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "bookmarks", "file_path": "al-hadith-flutter/lib/presentation/collections/ui/bookmarks/edit_bookmark_dialog.dart", "file_name": "edit_bookmark_dialog.dart", "line": 22, "line_from": 22, "line_to": 153, "snippet": "  final Future<bool> Function(String, Color) onEditBookmarkFolder;\n\n  @override\n  State<EditBookmarkDialog> createState() => _EditBookmarkDialogState();\n\n  static Future<void> show({\n    required BuildContext context,\n    required BookmarkFolderEntity bookmarkFolder,\n    required Future<bool> Function(String, Color) onEditBookmarkFolder,\n  }) async {\n    await showAnimatedDialog<void>(\n      context: context,\n      builder: (_) => EditBookmarkDialog(\n        bookmarkFolder: bookmarkFolder,\n        onEditBookmarkFolder: onEditBookmarkFolder,\n      ),\n      animationType: DialogTransitionType.slideFromTop,\n      curve: Curves.fastOutSlowIn,\n      barrierDismissible: true,\n    );\n  }\n}\n\nclass _EditBookmarkDialogState extends State<EditBookmarkDialog> {\n  late TextEditingController _editingController;\n\n  @override\n  void initState() {\n    super.initState();\n    _editingController =\n        TextEditingController(text: widget.bookmarkFolder.name);\n    setState(() {\n      _selectedColor = widget.bookmarkFolder.color;\n    });\n  }\n\n  @override\n  void dispose() {\n    _editingController.dispose();\n    super.dispose();\n  }\n\n  late Color _selectedColor = widget.bookmarkFolder.color;\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      elevation: 0,\n      shape:\n          RoundedRectangleBorder(borderRadius: BorderRadius.circular(twentyPx)),\n      insetPadding: EdgeInsets.symmetric(horizontal: eighteenPx),\n      child: SingleChildScrollView(\n        child: Container(\n          padding:\n              EdgeInsets.symmetric(horizontal: fifteenPx, vertical: twentyPx),\n          decoration: const BoxDecoration(),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Text(\n                '\u09ac\u09c1\u0995\u09ae\u09be\u09b0\u09cd\u0995 \u098f\u09a1\u09bf\u099f \u0995\u09b0\u09c1\u09a8',\n                style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                      fontWeight: FontWeight.w600,\n                      fontSize: 20,\n                    ),\n              ),\n              SizedBox(height: twentyFourPx),\n              Align(\n                alignment: Alignment.centerLeft,\n                child: EditText(\n                  text: '\u09ab\u09cb\u09b2\u09cd\u09a1\u09be\u09b0 \u09a8\u09be\u09ae \u098f\u09a1\u09bf\u099f \u0995\u09b0\u09c1\u09a8',\n                  fontSize: sixteenPx,\n                  fontColor: Theme.of(context).textTheme.bodyMedium?.color,\n                ),\n              ),\n              SizedBox(height: tenPx),\n              Container(\n                alignment: Alignment.center,\n                child: TextFormField(\n                  contextMenuBuilder: fixedLightContextMenu,\n                  controller: _editingController,\n                  inputFormatters: [\n                    LengthLimitingTextInputFormatter(40),\n                    FilteringTextInputFormatter.deny(RegExp(r'^[1-9][0-9]*$')),\n                    FilteringTextInputFormatter.deny(RegExp(r'^(0|\\s).*')),\n                  ],\n                  decoration: editInputDecoration(\n                    context: context,\n                    hintText: '\u09ab\u09cb\u09b2\u09cd\u09a1\u09be\u09b0 \u09a8\u09be\u09ae',\n                    prefixIconPath: SvgPath.icBookmarkFolder,\n                    selectedColor: _selectedColor,\n                  ),\n                ),\n              ),\n              SizedBox(height: 25.px),\n              Align(\n                alignment: Alignment.centerLeft,\n                child: EditText(\n                  text: '\u09ab\u09cb\u09b2\u09cd\u09a1\u09be\u09b0 \u09b0\u0982 \u09a8\u09bf\u09b0\u09cd\u09ac\u09be\u099a\u09a8 \u0995\u09b0\u09c1\u09a8',\n                  fontSize: sixteenPx,\n                  fontColor: Theme.of(context).textTheme.bodyMedium?.color,\n                ),\n              ),\n              SizedBox(height: twentyPx),\n              EditColorOptions(\n                colors: _folderColors,\n                selectedColor: _selectedColor,\n                onColorSelected: (color) =>\n                    setState(() => _selectedColor = color),\n              ),\n              SizedBox(height: twentyPx),\n              const Divider(),\n              EditActionButtons(\n                onCancel: () => context.navigatorPop<void>(),\n                onDone: _onSave,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Future<void> _onSave() async {\n    final bool isEdited = await widget.onEditBookmarkFolder(\n      _editingController.text,\n      _selectedColor,\n    );\n    if (isEdited && context.mounted) context.navigatorPop<void>();\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "bookmarks", "file_path": "al-hadith-flutter/lib/presentation/collections/ui/bookmarks/more_bookmark_option_bottom_sheet.dart", "file_name": "more_bookmark_option_bottom_sheet.dart", "line": 104, "line_from": 104, "line_to": 122, "snippet": "    required void Function(BookmarkFolderEntity) onRemoveBookmarkFolder,\n    required Future<bool> Function(BookmarkFolderEntity, String, Color)\n        onEditBookmarkFolder,\n    required BuildContext context,\n  }) async {\n    final MoreBookmarkOptionBottomSheet moreBookmarkOption =\n        await Future.microtask(\n      () => MoreBookmarkOptionBottomSheet(\n        bookmarkFolder: bookmarkFolder,\n        onRemoveBookmarkFolder: (folder) => onRemoveBookmarkFolder(folder),\n        onEditBookmarkFolder: (newName, color) async =>\n            onEditBookmarkFolder(bookmarkFolder, newName, color),\n      ),\n    );\n\n    if (context.mounted) {\n      await context.showBottomSheet<void>(moreBookmarkOption);\n    }\n  }"}, {"structure_type": "function", "name": "fetchCollections", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/collections/presenter/collection_presenter.dart", "file_name": "collection_presenter.dart", "line": 63, "line_from": 63, "line_to": 408, "snippet": "  Future<void> fetchCollections() async {\n    await fetchHadithBookmarks();\n    await fetchHadithPins();\n  }\n\n  List<BookmarkFolderEntity> _allBookmarkFolders = [];\n\n  Future<void> fetchHadithBookmarks() async {\n    await parseDataFromEitherWithUserMessage(\n      task: _getAllBookmarks.execute,\n      onDataLoaded: (folders) {\n        final List<BookmarkFolderEntity> bookmarkFolders =\n            folders.toList(growable: true);\n        _allBookmarkFolders = bookmarkFolders;\n        uiState.value =\n            currentUiState.copyWith(bookmarkFolders: bookmarkFolders);\n        if (currentUiState.selectedSort != null) {\n          _sortBookmarks(currentUiState.selectedSort!);\n        }\n      },\n    );\n  }\n\n  SortOptionEntity? _lastOption;\n\n  Future<void> sortCollections(SortOptionEntity option) async {\n    if (_lastOption == option) return;\n    _lastOption = option;\n    await _sortBookmarks(option);\n    await _sortPins(option);\n  }\n\n  final SortBookmarkUseCase _sortBookmarkUseCase;\n\n  Future<void> _sortBookmarks(SortOptionEntity option) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () => _sortBookmarkUseCase.execute(\n        folders: _allBookmarkFolders,\n        option: option,\n      ),\n      onDataLoaded: (sortedFolders) {\n        _allBookmarkFolders = sortedFolders;\n        uiState.value = uiState.value.copyWith(\n          selectedSort: option,\n          bookmarkFolders: sortedFolders,\n        );\n      },\n    );\n  }\n\n  final SortPinUseCase _sortPinUseCase;\n\n  Future<void> _sortPins(SortOptionEntity option) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () => _sortPinUseCase.execute(\n        pins: currentUiState.pins,\n        option: option,\n      ),\n      onDataLoaded: (pins) {\n        _allPins = pins;\n        uiState.value = uiState.value.copyWith(\n          pins: pins,\n          selectedSort: option,\n        );\n      },\n    );\n  }\n\n  Future<void> _syncAndFetchPins() async {\n    await _toggleSyncingIndicator();\n    await parseDataFromEitherWithUserMessage(\n      task: _syncCollections.execute,\n      onDataLoaded: (collection) async {\n        final List<BookmarkFolderEntity> bookmarkFolders = collection.$1;\n        final List<PinEntity> pins = collection.$2;\n        _allBookmarkFolders = bookmarkFolders;\n        _allPins = pins;\n        uiState.value = currentUiState.copyWith(\n          pins: pins,\n          bookmarkFolders: bookmarkFolders,\n        );\n        await fetchHadithBookmarks();\n        await fetchHadithPins();\n        await _toggleSyncingIndicator(toggle: false);\n      },\n    );\n  }\n\n  final ExportCollectionsUseCase _exportCollectionsUseCase;\n\n  Future<void> fetchCollectionsForExport({\n    required void Function(String) onFetched,\n  }) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () async => _exportCollectionsUseCase.execute(),\n      onDataLoaded: onFetched,\n    );\n  }\n\n  final ImportCollectionsUseCase _importCollectionsUseCase;\n\n  Future<void> importCollectionsFromText(String text) async {\n    await _toggleSyncingIndicator();\n    await executeMessageOnlyUseCase(\n      () async => _importCollectionsUseCase.execute(text),\n    );\n    await fetchCollections();\n    await _toggleSyncingIndicator(toggle: false);\n  }\n\n  Future<void> _toggleSyncingIndicator({bool toggle = true}) async {\n    uiState.value = uiState.value.copyWith(isSyncing: toggle);\n  }\n\n  Future<void> deleteBookmarkFolder({\n    required BookmarkFolderEntity folder,\n  }) async {\n    await parseDataFromEitherWithUserMessage(\n      task: () => _deleteBookmarkFolder.execute(folder: folder),\n      onDataLoaded: (message) async {\n        final List<BookmarkFolderEntity> bookmarks =\n            currentUiState.bookmarkFolders.toList(growable: true)\n              ..remove(folder);\n        uiState.value = currentUiState.copyWith(bookmarkFolders: bookmarks);\n        await fetchHadithBookmarks();\n        await addUserMessage(message);\n      },\n    );\n  }\n\n  String _lastBookmarkQuery = \"\";\n\n  Future<void> searchBookmarks({required String query}) async {\n    final String trimmedQuery = query.trim();\n    if (trimmedQuery.isEmpty) {\n      uiState.value =\n          currentUiState.copyWith(bookmarkFolders: _allBookmarkFolders);\n    }\n\n    if (trimmedQuery == _lastBookmarkQuery) return;\n    await parseDataFromEitherWithUserMessage(\n      task: () => _searchBookmarkUseCase.execute(\n        query: trimmedQuery,\n        allFolders: _allBookmarkFolders,\n      ),\n      onDataLoaded: (bookmarks) =>\n          uiState.value = currentUiState.copyWith(bookmarkFolders: bookmarks),\n    );\n    _lastBookmarkQuery = trimmedQuery;\n  }\n\n  final SearchPinUseCase _searchPinUseCase;\n\n  String _lastPinQuery = \"\";\n\n  Future<void> searchPins({required String query}) async {\n    final String trimmedQuery = query.trim();\n    if (trimmedQuery.isEmpty) {\n      uiState.value = currentUiState.copyWith(pins: _allPins);\n    }\n    if (trimmedQuery == _lastPinQuery) return;\n\n    await parseDataFromEitherWithUserMessage(\n      task: () => _searchPinUseCase.execute(\n        query: trimmedQuery,\n        allPins: _allPins,\n      ),\n      onDataLoaded: (pins) =>\n          uiState.value = currentUiState.copyWith(pins: pins),\n    );\n    _lastPinQuery = trimmedQuery;\n  }\n\n  Future<bool> updateBookmarkFolder({\n    required BookmarkFolderEntity folder,\n    required String newName,\n    required Color newColor,\n  }) async {\n    final bool isValid = folder.name == newName ||\n        await _validateName(\n          folderName: newName.trim(),\n          collectionType: CollectionType.bookmark,\n        );\n    if (!isValid) return false;\n    await executeMessageOnlyUseCase(\n      () async => _updateBookmarkFolder.execute(\n        folderName: folder.name.trim(),\n        newFolderName: newName.trim(),\n        color: newColor,\n      ),\n    );\n    await fetchHadithBookmarks();\n    return true;\n  }\n\n  void closeBookmarkNotification() {\n    uiState.value = currentUiState.copyWith(bookmarkNoticeShown: false);\n  }\n\n  // ############################################\n  // ################ Pins ######################\n  // ############################################\n\n  final GetAllPinsUseCase _getAllPinsUseCase;\n\n  Set<String> _existingPinNames = {};\n  List<PinEntity> _allPins = [];\n\n  Future<void> fetchHadithPins() async {\n    await parseDataFromEitherWithUserMessage(\n      task: _getAllPinsUseCase.execute,\n      onDataLoaded: (pins) {\n        final List<PinEntity> pinsPurified = pins.toList(growable: true);\n        _allPins = pinsPurified;\n        uiState.value = currentUiState.copyWith(pins: pinsPurified);\n        if (currentUiState.selectedSort != null) {\n          _sortPins(currentUiState.selectedSort!);\n        }\n        _existingPinNames = pinsPurified.map((pin) => pin.name.trim()).toSet();\n      },\n    );\n  }\n\n  final DeletePinUseCase _deletePinUseCase;\n\n  Future<void> deletePin({required PinEntity pin}) async {\n    await executeMessageOnlyUseCase(() => _deletePinUseCase.execute(pin: pin));\n    _allPins.remove(pin);\n    await fetchHadithPins();\n  }\n\n  final UpdatePinUseCase _updatePinUseCase;\n\n  Future<void> updatePin({\n    required String name,\n    required String newName,\n    required Color color,\n    required VoidCallback onUpdated,\n  }) async {\n    final bool isValid = name == newName ||\n        await _validateName(\n          folderName: newName.trim(),\n          collectionType: CollectionType.pin,\n        );\n    if (!isValid) return;\n    await executeMessageOnlyUseCase(\n      () => _updatePinUseCase.execute(\n        name: name.trim(),\n        newName: newName.trim(),\n        color: color,\n      ),\n    );\n    await fetchHadithPins();\n    onUpdated();\n  }\n\n  final GetHadithByIdUseCase _getHadithByIdUseCase;\n\n  Future<void> fetchHadithForHadithId({\n    required int hadithId,\n    required void Function(HadithEntity) onHadithFetched,\n  }) async {\n    final HadithEntity? hadith = await mapDataFromEitherWithUserMessage(\n      task: () => _getHadithByIdUseCase.execute(hadithId: hadithId),\n    );\n    if (hadith != null) onHadithFetched(hadith);\n  }\n\n  final ValidateFolderNameUseCase _validateBookmarkFolderName;\n\n  Future<bool> _validateName({\n    required String folderName,\n    required CollectionType collectionType,\n  }) async {\n    if (_existingPinNames.contains(folderName)) {\n      await addUserMessage(\"\u09a8\u09be\u09ae\u099f\u09bf \u0987\u09a4\u09cb\u09ae\u09a7\u09cd\u09af\u09c7 \u09ac\u09cd\u09af\u09ac\u09b9\u09c3\u09a4 \u09b9\u09af\u09bc\u09c7\u099b\u09c7\");\n      return false;\n    }\n    final Either<String, bool> result =\n        await _validateBookmarkFolderName.execute(\n      folderName: folderName,\n      collectionType: collectionType,\n    );\n    await result.fold(addUserMessage, (isValid) {});\n    return result.isRight();\n  }\n\n  // ############################################\n  // ############# Authentication ###############\n  // ############################################\n\n  final SignInUserUseCase _signInUser;\n  final SignOutUserUseCase _signOutUser;\n  final CheckAuthenticationStatusUseCase _checkAuthenticationStatus;\n\n  Future<void> _fetchAuthentication() async {\n    uiState.value = currentUiState.copyWith(\n      isAuthenticated: await _checkAuthenticationStatus.execute(),\n    );\n  }\n\n  Future<void> toggleSignIn() async {\n    Throttle.throttle(\"toggleSignIn_throttle_tag\", 1.inSeconds, () async {\n      final bool isAuthenticated = currentUiState.isAuthenticated;\n      final Future<Either<String, String>> authenticationTask =\n          isAuthenticated ? _signOutUser.execute() : _signInUser.execute();\n\n      await executeMessageOnlyUseCase(() => authenticationTask);\n      await Future<void>.delayed(560.inMilliseconds);\n\n      await onCheckAuthentication(onAuthenticated: _syncAndFetchPins);\n    });\n  }\n\n  Future<void> onCheckAuthentication({\n    required VoidCallback onAuthenticated,\n    VoidCallback? onUnauthenticated,\n  }) async {\n    final bool isAuthenticated = await _checkAuthenticationStatus.execute();\n    uiState.value = currentUiState.copyWith(isAuthenticated: isAuthenticated);\n    isAuthenticated ? onAuthenticated() : onUnauthenticated?.call();\n  }\n\n  @override\n  Future<void> toggleLoading({required bool loading}) async {\n    uiState.value = currentUiState.copyWith(isLoading: loading);\n  }\n\n  @override\n  Future<void> addUserMessage(String message) async {\n    uiState.value =\n        currentUiState.copyWith(userMessage: message, isLoading: false);\n    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = currentUiState.copyWith(userMessage: \"\", isLoading: false);\n  }\n\n  CollectionUiState get currentUiState => uiState.value;\n\n  @override\n  void onReady() {\n    super.onReady();\n    _fetchAuthentication();\n    fetchHadithBookmarks();\n    _syncAndFetchPins();\n  }\n}"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/on_boarding/presenter/on_boarding_presenter.dart", "file_name": "on_boarding_presenter.dart", "line": 52, "line_from": 52, "line_to": 67, "snippet": "    required void Function() onNotFirstTime,\n  }) async {\n    await toggleLoading(loading: true);\n    final bool isFirstTime = await _determineIfFirstCase.execute();\n    uiState.value = uiState.value.copyWith(isFirstTime: isFirstTime);\n    await toggleLoading(loading: false);\n    await ThemeServicePresentable.loadCurrentTheme(isFirstTime: isFirstTime);\n\n    if (isFirstTime) {\n      await SplashScreen.hide();\n      return;\n    }\n    await determineIfItsUpdatedFromv3();\n    await runAfterEveryUpdate();\n    onNotFirstTime();\n  }"}, {"structure_type": "function", "name": "Future<void>.delayed", "docstring": "", "module": "presenter", "file_path": "al-hadith-flutter/lib/presentation/on_boarding/presenter/on_boarding_presenter.dart", "file_name": "on_boarding_presenter.dart", "line": 134, "line_from": 134, "line_to": 143, "snippet": "    await Future<void>.delayed(112.inMilliseconds);\n    uiState.value = uiState.value.copyWith(userMessage: \"\", isLoading: false);\n  }\n\n  Future<void> onNotificationPermissionGranted() async {\n    uiState.value = uiState.value.copyWith(\n      isNotificationEnabled: true,\n      showNotificationWarning: false,\n    );\n  }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "widgets", "file_path": "al-hadith-flutter/lib/presentation/widgets/hadith_appbar.dart", "file_name": "hadith_appbar.dart", "line": 30, "line_from": 30, "line_to": 206, "snippet": "  final void Function()? onPrimaryActionButtonTap;\n  final String? secondaryActionIconPath;\n  final void Function()? onSecondaryActionButtonTap;\n  final bool showAppBar;\n  final bool isAnimatedAppbar;\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n    final bool hasActionButtons = secondaryActionIconPath != null || primaryActionIconPath != null;\n    final isPlatFormIOS = Theme.of(context).platform == TargetPlatform.iOS;\n\n    return RepaintBoundary(\n      key: const Key('hadith_app_bar_repaint_boundary'),\n      child: SafeArea(\n        top: !isPlatFormIOS,\n        child: AnimatedContainer(\n          curve: Curves.easeInToLinear,\n          height: isPlatFormIOS ? _appBarHeightIOS : _appBarHeightAndroid,\n          duration: const Duration(milliseconds: 500),\n          width: HadithScreen.width,\n          alignment: Alignment.center,\n          color: isAnimatedAppbar ? null : themeData.secondaryHeaderColor,\n          child: Stack(\n            children: [\n              if (isAnimatedAppbar)\n                Align(\n                  alignment: Alignment.topCenter,\n                  child: AnimatedContainer(\n                    curve: Curves.easeInToLinear,\n                    duration: const Duration(milliseconds: 500),\n                    height: showAppBar\n                        ? isPlatFormIOS\n                            ? _appBarHeightIOS\n                            : _appBarHeightAndroid\n                        : 0,\n                    width: HadithScreen.width,\n                    child: SvgPicture.asset(\n                      isPlatFormIOS ? SvgPath.topbarBGIOS : SvgPath.topbarBGAndroid,\n                      fit: BoxFit.cover,\n                      height: showAppBar\n                          ? isPlatFormIOS\n                              ? _appBarHeightIOS\n                              : _appBarHeightAndroid\n                          : 0,\n                      width: HadithScreen.width,\n                      colorFilter: ColorFilter.mode(\n                        themeData.secondaryHeaderColor,\n                        BlendMode.srcATop,\n                      ),\n                    ),\n                  ),\n                ),\n              AnimatedContainer(\n                alignment: Alignment.center,\n                color: isAnimatedAppbar ? null : themeData.secondaryHeaderColor,\n                curve: Curves.easeInToLinear,\n                duration: const Duration(milliseconds: 500),\n                height: showAppBar\n                    ? isPlatFormIOS\n                        ? _appBarHeightIOS\n                        : _appBarHeightAndroid\n                    : 0,\n                width: HadithScreen.width,\n                child: ListTile(\n                  minLeadingWidth: 0,\n                  contentPadding: EdgeInsets.only(\n                    top: isPlatFormIOS ? 35 : 0,\n                    left: 10,\n                    right: 4,\n                    bottom: isAnimatedAppbar ? 10 : 0,\n                  ),\n                  dense: true,\n                  leading: showBackButton ? const AppBarBackButton() : null,\n                  title: Padding(\n                    padding: EdgeInsets.only(\n                      left: !showBackButton && secondaryActionIconPath != null\n                          ? hundredPx\n                          : !showBackButton && primaryActionIconPath != null\n                              ? fiftyFivePx\n                              : 0,\n                    ),\n                    child: Text(\n                      title,\n                      maxLines: 1,\n                      textAlign: showBackButton ? TextAlign.left : TextAlign.center,\n                      overflow: TextOverflow.ellipsis,\n                      style: themeData.textTheme.titleLarge?.copyWith(\n                        fontSize: fontSize ?? 18,\n                        fontWeight: FontWeight.w600,\n                        color: Colors.white,\n                      ),\n                    ),\n                  ),\n                  subtitle: subtitle != null && subtitle!.isNotEmpty\n                      ? Text(\n                          subtitle ?? \"\",\n                          maxLines: 1,\n                          overflow: TextOverflow.ellipsis,\n                          style: themeData.textTheme.titleMedium?.copyWith(\n                            color: Colors.white.withOpacity(0.9),\n                            fontSize: 14,\n                          ),\n                        )\n                      : null,\n                  trailing: hasActionButtons\n                      ? Row(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            if (secondaryActionIconPath != null)\n                              HadithAppBarActionButton(\n                                onPrimaryActionButtonTap: onSecondaryActionButtonTap,\n                                primaryActionIconPath: secondaryActionIconPath,\n                              ),\n                            if (primaryActionIconPath != null)\n                              HadithAppBarActionButton(\n                                onPrimaryActionButtonTap: onPrimaryActionButtonTap,\n                                primaryActionIconPath: primaryActionIconPath,\n                              ),\n                          ],\n                        )\n                      : null,\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  static final Size _preferredSizeFromHeight = Size.fromHeight(Platform.isAndroid ? hundredPx : 150);\n\n  double get _appBarHeightAndroid {\n    if (isAnimatedAppbar) return ninetyPx;\n    if (subtitle != null && subtitle!.isNotEmpty) return seventyPx;\n    if (showAppBar) return sixtyPx;\n    return 0;\n  }\n\n  double get _appBarHeightIOS {\n    if (isAnimatedAppbar) return 120;\n    if (subtitle != null && subtitle!.isNotEmpty) return hundredPx;\n    if (showAppBar) return ninetyPx;\n    return 0;\n  }\n\n  @override\n  Size get preferredSize => _preferredSizeFromHeight;\n}\n\nclass HadithAppBarActionButton extends StatelessWidget {\n  const HadithAppBarActionButton({\n    super.key,\n    required this.onPrimaryActionButtonTap,\n    required this.primaryActionIconPath,\n  });\n\n  final void Function()? onPrimaryActionButtonTap;\n  final String? primaryActionIconPath;\n\n  @override\n  Widget build(BuildContext context) {\n    return InkWell(\n      onTap: onPrimaryActionButtonTap,\n      child: Padding(\n        padding: const EdgeInsets.all(12),\n        child: SvgImage(\n          primaryActionIconPath ?? \"\",\n          height: 22,\n          width: 22,\n          color: Theme.of(context).colorScheme.onBackground,\n        ),\n      ),\n    );\n  }\n}"}, {"structure_type": "class", "name": "FlutterLocalNotificationsPlatformMock extends Mock", "docstring": "", "module": "test", "file_path": "flutter_local_notifications/flutter_local_notifications_platform_interface/test/flutter_local_notifications_platform_interface_test.dart", "file_name": "flutter_local_notifications_platform_interface_test.dart", "line": 6, "line_from": 6, "line_to": 39, "snippet": "class FlutterLocalNotificationsPlatformMock extends Mock\n    with MockPlatformInterfaceMixin\n    implements FlutterLocalNotificationsPlatform {}\n\nclass ImplementsFlutterLocalNotificationsPlatform extends Mock\n    implements FlutterLocalNotificationsPlatform {}\n\nclass ExtendsFlutterLocalNotificationsPlatform\n    extends FlutterLocalNotificationsPlatform {}\n\nvoid main() {\n  TestWidgetsFlutterBinding.ensureInitialized();\n  group('$FlutterLocalNotificationsPlatform', () {\n    test('Cannot be implemented with `implements`', () {\n      expect(() {\n        FlutterLocalNotificationsPlatform.instance =\n            ImplementsFlutterLocalNotificationsPlatform();\n      }, throwsAssertionError);\n    });\n\n    test('Can be mocked with `implements`', () {\n      final FlutterLocalNotificationsPlatformMock mock =\n          FlutterLocalNotificationsPlatformMock();\n      FlutterLocalNotificationsPlatform.instance = mock;\n    });\n\n    test('Can be extended', () {\n      FlutterLocalNotificationsPlatform.instance =\n          ExtendsFlutterLocalNotificationsPlatform();\n    });\n  });\n}\n"}, {"structure_type": "function", "name": "main", "docstring": "", "module": "test", "file_path": "flutter_local_notifications/flutter_local_notifications/test/flutter_local_notifications_test.dart", "file_name": "flutter_local_notifications_test.dart", "line": 8, "line_from": 8, "line_to": 28, "snippet": "void main() {\n  TestWidgetsFlutterBinding.ensureInitialized();\n  final MockFlutterLocalNotificationsPlugin mock =\n      MockFlutterLocalNotificationsPlugin();\n  FlutterLocalNotificationsPlatform.instance = mock;\n\n  test('Creates IOSNotificationAttachment when file path is specified', () {\n    expect(\n        const IOSNotificationAttachment(''), isA<IOSNotificationAttachment>());\n  });\n}\n\nclass MockMethodChannel extends Mock implements MethodChannel {}\n\nclass MockFlutterLocalNotificationsPlugin extends Mock\n    with\n        MockPlatformInterfaceMixin // ignore: prefer_mixin\n    implements\n        FlutterLocalNotificationsPlatform {}\n"}, {"structure_type": "function", "name": "build", "docstring": "", "module": "lib", "file_path": "flutter_local_notifications/flutter_local_notifications/example/lib/main.dart", "file_name": "main.dart", "line": 153, "line_from": 153, "line_to": 177, "snippet": "  Widget build(BuildContext context) => Padding(\n        padding: const EdgeInsets.fromLTRB(0, 0, 0, 8),\n        child: ElevatedButton(\n          onPressed: onPressed,\n          child: Text(buttonText),\n        ),\n      );\n}\n\nclass HomePage extends StatefulWidget {\n  const HomePage(\n    this.notificationAppLaunchDetails, {\n    Key? key,\n  }) : super(key: key);\n\n  static const String routeName = '/';\n\n  final NotificationAppLaunchDetails? notificationAppLaunchDetails;\n\n  bool get didNotificationLaunchApp =>\n      notificationAppLaunchDetails?.didNotificationLaunchApp ?? false;\n\n  @override\n  _HomePageState createState() => _HomePageState();\n}"}, {"structure_type": "function", "name": "initState", "docstring": "", "module": "lib", "file_path": "flutter_local_notifications/flutter_local_notifications/example/lib/main.dart", "file_name": "main.dart", "line": 2430, "line_from": 2430, "line_to": 2449, "snippet": "  void initState() {\n    super.initState();\n    _payload = widget.payload;\n  }\n\n  @override\n  Widget build(BuildContext context) => Scaffold(\n        appBar: AppBar(\n          title: Text('Second Screen with payload: ${_payload ?? ''}'),\n        ),\n        body: Center(\n          child: ElevatedButton(\n            onPressed: () {\n              Navigator.pop(context);\n            },\n            child: const Text('Go back!'),\n          ),\n        ),\n      );\n}"}, {"structure_type": "function", "name": "cancel", "docstring": "", "module": "src", "file_path": "flutter_local_notifications/flutter_local_notifications/lib/src/platform_flutter_local_notifications.dart", "file_name": "platform_flutter_local_notifications.dart", "line": 41, "line_from": 41, "line_to": 535, "snippet": "  Future<void> cancel(int id) {\n    validateId(id);\n    return _channel.invokeMethod('cancel', id);\n  }\n\n  @override\n  Future<void> cancelAll() => _channel.invokeMethod('cancelAll');\n\n  @override\n  Future<NotificationAppLaunchDetails?>\n      getNotificationAppLaunchDetails() async {\n    final Map<dynamic, dynamic>? result =\n        await _channel.invokeMethod('getNotificationAppLaunchDetails');\n    return result != null\n        ? NotificationAppLaunchDetails(result['notificationLaunchedApp'],\n            result.containsKey('payload') ? result['payload'] : null)\n        : null;\n  }\n\n  @override\n  Future<List<PendingNotificationRequest>> pendingNotificationRequests() async {\n    final List<Map<dynamic, dynamic>>? pendingNotifications =\n        await _channel.invokeListMethod('pendingNotificationRequests');\n    return pendingNotifications\n            // ignore: always_specify_types\n            ?.map((p) => PendingNotificationRequest(\n                p['id'], p['title'], p['body'], p['payload']))\n            .toList() ??\n        <PendingNotificationRequest>[];\n  }\n}\n\n/// Android implementation of the local notifications plugin.\nclass AndroidFlutterLocalNotificationsPlugin\n    extends MethodChannelFlutterLocalNotificationsPlugin {\n  SelectNotificationCallback? _onSelectNotification;\n\n  /// Initializes the plugin.\n  ///\n  /// Call this method on application before using the\n  /// plugin further.\n  ///\n  /// To handle when a notification launched an application, use\n  /// [getNotificationAppLaunchDetails].\n  Future<bool?> initialize(\n    AndroidInitializationSettings initializationSettings, {\n    SelectNotificationCallback? onSelectNotification,\n  }) async {\n    _onSelectNotification = onSelectNotification;\n    _channel.setMethodCallHandler(_handleMethod);\n    return await _channel.invokeMethod(\n        'initialize', initializationSettings.toMap());\n  }\n\n  /// Schedules a notification to be shown at the specified date and time.\n  ///\n  /// The [androidAllowWhileIdle] parameter determines if the notification\n  /// should still be shown at the exact time when the device is in a low-power\n  /// idle mode.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> schedule(\n    int id,\n    String? title,\n    String? body,\n    DateTime scheduledDate,\n    AndroidNotificationDetails? notificationDetails, {\n    String? payload,\n    bool androidAllowWhileIdle = false,\n  }) async {\n    validateId(id);\n    final Map<String, Object?> serializedPlatformSpecifics =\n        notificationDetails?.toMap() ?? <String, Object>{};\n    serializedPlatformSpecifics['allowWhileIdle'] = androidAllowWhileIdle;\n    await _channel.invokeMethod('schedule', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'millisecondsSinceEpoch': scheduledDate.millisecondsSinceEpoch,\n      'platformSpecifics': serializedPlatformSpecifics,\n      'payload': payload ?? ''\n    });\n  }\n\n  /// Schedules a notification to be shown at the specified date and time\n  /// relative to a specific time zone.\n  Future<void> zonedSchedule(\n    int id,\n    String? title,\n    String? body,\n    TZDateTime scheduledDate,\n    AndroidNotificationDetails? notificationDetails, {\n    required bool androidAllowWhileIdle,\n    String? payload,\n    DateTimeComponents? matchDateTimeComponents,\n  }) async {\n    validateId(id);\n    validateDateIsInTheFuture(scheduledDate, matchDateTimeComponents);\n    ArgumentError.checkNotNull(androidAllowWhileIdle, 'androidAllowWhileIdle');\n    final Map<String, Object?> serializedPlatformSpecifics =\n        notificationDetails?.toMap() ?? <String, Object>{};\n    serializedPlatformSpecifics['allowWhileIdle'] = androidAllowWhileIdle;\n    await _channel.invokeMethod(\n        'zonedSchedule',\n        <String, Object?>{\n          'id': id,\n          'title': title,\n          'body': body,\n          'platformSpecifics': serializedPlatformSpecifics,\n          'payload': payload ?? ''\n        }\n          ..addAll(scheduledDate.toMap())\n          ..addAll(matchDateTimeComponents == null\n              ? <String, Object>{}\n              : <String, Object>{\n                  'matchDateTimeComponents': matchDateTimeComponents.index\n                }));\n  }\n\n  /// Shows a notification on a daily interval at the specified time.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> showDailyAtTime(\n    int id,\n    String? title,\n    String? body,\n    Time notificationTime,\n    AndroidNotificationDetails? notificationDetails, {\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('showDailyAtTime', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': RepeatInterval.daily.index,\n      'repeatTime': notificationTime.toMap(),\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  /// Shows a notification on weekly interval at the specified day and time.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> showWeeklyAtDayAndTime(\n    int id,\n    String? title,\n    String? body,\n    Day day,\n    Time notificationTime,\n    AndroidNotificationDetails? notificationDetails, {\n    String? payload,\n  }) async {\n    validateId(id);\n\n    await _channel.invokeMethod('showWeeklyAtDayAndTime', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': RepeatInterval.weekly.index,\n      'repeatTime': notificationTime.toMap(),\n      'day': day.value,\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  /// Starts an Android foreground service with the given notification.\n  ///\n  /// The `id` must not be 0, since Android itself does not allow starting\n  /// a foreground service with a notification id of 0.\n  ///\n  /// Since not all users of this plugin need such a service, it was not\n  /// added to this plugins Android manifest. Thie means you have to add\n  /// it if you want to use the foreground service functionality. Add the\n  /// foreground service permission to your apps `AndroidManifest.xml` like\n  /// described in the [official Android documentation](https://developer.android.com/guide/components/foreground-services#request-foreground-service-permissions):\n  /// ```xml\n  /// <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>\n  /// ```\n  /// Furthermore, add the `service` itself to your `AndroidManifest.xml`\n  /// (inside the `<application>` tag):\n  /// ```xml\n  /// <!-- If you want your foreground service to be stopped if\n  ///       your app is stopped, set android:stopWithTask to true.\n  ///       See https://developer.android.com/reference/android/R.attr#stopWithTask -->\n  /// <service\n  ///  android:name=\"com.dexterous.flutterlocalnotifications.ForegroundService\"\n  ///  android:exported=\"false\"\n  ///  android:stopWithTask=\"false\"\n  ///  android:foregroundServiceType=\"As you like\" />\n  /// ```\n  /// While the `android:name` must exactly match this value, you can configure\n  /// the other parameters as you like, although it is recommended to copy the\n  /// value for `android:exported`. Suitable values for\n  /// `foregroundServiceType` can be found [here](https://developer.android.com/reference/android/app/Service#startForeground(int,%20android.app.Notification,%20int)).\n  ///\n  /// The notification of the foreground service can be updated by\n  /// simply calling this method multiple times.\n  ///\n  /// Information on selecting an appropriate `startType` for your app's usecase\n  /// should be taken from the official Android documentation, check [`Service.onStartCommand`](https://developer.android.com/reference/android/app/Service#onStartCommand(android.content.Intent,%20int,%20int)).\n  /// The there mentioned constants can be found in [AndroidServiceStartType].\n  ///\n  /// The notification for the foreground service will not be dismissable\n  /// and automatically removed when using [stopForegroundService].\n  ///\n  /// `foregroundServiceType` is a set of foreground service types to apply to\n  /// the service start. It might be `null` or omitted, but it must never\n  /// be empty!\n  /// If `foregroundServiceType` is set, [`Service.startForeground(int id, Notification notification, int foregroundServiceType)`](https://developer.android.com/reference/android/app/Service#startForeground(int,%20android.app.Notification,%20int))\n  /// will be invoked , else  [`Service.startForeground(int id, Notification notification)`](https://developer.android.com/reference/android/app/Service#startForeground(int,%20android.app.Notification)) is used.\n  /// On devices older than [`Build.VERSION_CODES.Q`](https://developer.android.com/reference/android/os/Build.VERSION_CODES#Q), `foregroundServiceType` will be ignored.\n  /// Note that `foregroundServiceType` (the parameter in this method)\n  /// must be a subset of the `android:foregroundServiceType`\n  /// defined in your `AndroidManifest.xml` (the one from the section above)!\n  Future<void> startForegroundService(int id, String? title, String? body,\n      {AndroidNotificationDetails? notificationDetails,\n      String? payload,\n      AndroidServiceStartType startType = AndroidServiceStartType.startSticky,\n      Set<AndroidServiceForegroundType>? foregroundServiceTypes}) {\n    validateId(id);\n    if (id == 0) {\n      throw ArgumentError.value(id, 'id',\n          'The id of a notification used for an Android foreground service must not be 0!'); // ignore: lines_longer_than_80_chars\n    }\n    if (foregroundServiceTypes?.isEmpty ?? false) {\n      throw ArgumentError.value(foregroundServiceTypes, 'foregroundServiceType',\n          'foregroundServiceType may be null but it must never be empty!');\n    }\n    return _channel.invokeMethod('startForegroundService', <String, Object?>{\n      'notificationData': <String, Object?>{\n        'id': id,\n        'title': title,\n        'body': body,\n        'payload': payload ?? '',\n        'platformSpecifics': notificationDetails?.toMap(),\n      },\n      'startType': startType.value,\n      'foregroundServiceTypes': foregroundServiceTypes\n          ?.map((AndroidServiceForegroundType type) => type.value)\n          .toList()\n    });\n  }\n\n  /// Stops a foreground service.\n  ///\n  /// If the foreground service was not started, this function\n  /// does nothing.\n  ///\n  /// It is sufficient to call this method once to stop the\n  /// foreground service, even if [startForegroundService] was called\n  /// multiple times.\n  Future<void> stopForegroundService() =>\n      _channel.invokeMethod('stopForegroundService');\n\n  @override\n  Future<void> show(\n    int id,\n    String? title,\n    String? body, {\n    AndroidNotificationDetails? notificationDetails,\n    String? payload,\n  }) {\n    validateId(id);\n    return _channel.invokeMethod(\n      'show',\n      <String, Object?>{\n        'id': id,\n        'title': title,\n        'body': body,\n        'payload': payload ?? '',\n        'platformSpecifics': notificationDetails?.toMap(),\n      },\n    );\n  }\n\n  @override\n  Future<void> periodicallyShow(\n    int id,\n    String? title,\n    String? body,\n    RepeatInterval repeatInterval, {\n    AndroidNotificationDetails? notificationDetails,\n    String? payload,\n    bool androidAllowWhileIdle = false,\n  }) async {\n    validateId(id);\n    final Map<String, Object?> serializedPlatformSpecifics =\n        notificationDetails?.toMap() ?? <String, Object>{};\n    serializedPlatformSpecifics['allowWhileIdle'] = androidAllowWhileIdle;\n    await _channel.invokeMethod('periodicallyShow', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': repeatInterval.index,\n      'platformSpecifics': serializedPlatformSpecifics,\n      'payload': payload ?? '',\n    });\n  }\n\n  /// Cancel/remove the notification with the specified id.\n  ///\n  /// This applies to notifications that have been scheduled and those that\n  /// have already been presented.\n  ///\n  /// The `tag` parameter specifies the Android tag. If it is provided,\n  /// then the notification that matches both the id and the tag will\n  /// be canceled. `tag` has no effect on other platforms.\n  @override\n  Future<void> cancel(int id, {String? tag}) async {\n    validateId(id);\n\n    return _channel.invokeMethod('cancel', <String, Object?>{\n      'id': id,\n      'tag': tag,\n    });\n  }\n\n  /// Creates a notification channel group.\n  ///\n  /// This method is only applicable to Android versions 8.0 or newer.\n  Future<void> createNotificationChannelGroup(\n          AndroidNotificationChannelGroup notificationChannelGroup) =>\n      _channel.invokeMethod(\n          'createNotificationChannelGroup', notificationChannelGroup.toMap());\n\n  /// Deletes the notification channel group with the specified [groupId]\n  /// as well as all of the channels belonging to the group.\n  ///\n  /// This method is only applicable to Android versions 8.0 or newer.\n  Future<void> deleteNotificationChannelGroup(String groupId) =>\n      _channel.invokeMethod('deleteNotificationChannelGroup', groupId);\n\n  /// Creates a notification channel.\n  ///\n  /// This method is only applicable to Android versions 8.0 or newer.\n  Future<void> createNotificationChannel(\n          AndroidNotificationChannel notificationChannel) =>\n      _channel.invokeMethod(\n          'createNotificationChannel', notificationChannel.toMap());\n\n  /// Deletes the notification channel with the specified [channelId].\n  ///\n  /// This method is only applicable to Android versions 8.0 or newer.\n  Future<void> deleteNotificationChannel(String channelId) =>\n      _channel.invokeMethod('deleteNotificationChannel', channelId);\n\n  /// Returns the list of active notifications shown by the application that\n  /// haven't been dismissed/removed.\n  ///\n  /// This method is only applicable to Android 6.0 or newer and will throw an\n  /// [PlatformException] when called on a device with an incompatible Android\n  /// version.\n  Future<List<ActiveNotification>?> getActiveNotifications() async {\n    final List<Map<dynamic, dynamic>>? activeNotifications =\n        await _channel.invokeListMethod('getActiveNotifications');\n    return activeNotifications\n        // ignore: always_specify_types\n        ?.map((a) => ActiveNotification(\n              a['id'],\n              a['channelId'],\n              a['title'],\n              a['body'],\n              tag: a['tag'],\n            ))\n        .toList();\n  }\n\n  /// Returns the messaging style information of an active notification shown\n  /// by the application that hasn't been dismissed/removed.\n  ///\n  /// This method is only applicable to Android 6.0 or newer and will throw an\n  /// [PlatformException] when called on a device with an incompatible Android\n  /// version.\n  ///\n  /// Only [DrawableResourceAndroidIcon] and [ContentUriAndroidIcon] are\n  /// supported for [AndroidIcon] fields.\n  Future<MessagingStyleInformation?> getActiveNotificationMessagingStyle(\n    int id, {\n    String? tag,\n  }) async {\n    final Map<dynamic, dynamic>? m = await _channel\n        .invokeMethod('getActiveNotificationMessagingStyle', <String, Object?>{\n      'id': id,\n      'tag': tag,\n    });\n    if (m == null) {\n      return null;\n    }\n\n    return MessagingStyleInformation(\n      _personFromMap(m['person'])!,\n      conversationTitle: m['conversationTitle'],\n      groupConversation: m['groupConversation'],\n      messages:\n          // ignore: always_specify_types\n          m['messages']?.map<Message>((m) => _messageFromMap(m))?.toList(),\n    );\n  }\n\n  Person? _personFromMap(Map<dynamic, dynamic>? m) {\n    if (m == null) {\n      return null;\n    }\n    return Person(\n      bot: m['bot'],\n      icon: _iconFromMap(m['icon']),\n      important: m['important'],\n      key: m['key'],\n      name: m['name'],\n      uri: m['uri'],\n    );\n  }\n\n  Message _messageFromMap(Map<dynamic, dynamic> m) => Message(\n        m['text'],\n        DateTime.fromMillisecondsSinceEpoch(m['timestamp']),\n        _personFromMap(m['person']),\n      );\n\n  AndroidIcon<Object>? _iconFromMap(Map<dynamic, dynamic>? m) {\n    if (m == null) {\n      return null;\n    }\n    switch (AndroidIconSource.values[m['source']]) {\n      case AndroidIconSource.drawableResource:\n        return DrawableResourceAndroidIcon(m['data']);\n      case AndroidIconSource.contentUri:\n        return ContentUriAndroidIcon(m['data']);\n      default:\n        return null;\n    }\n  }\n\n  /// Returns the list of all notification channels.\n  ///\n  /// This method is only applicable on Android 8.0 or newer. On older versions,\n  /// it will return an empty list.\n  Future<List<AndroidNotificationChannel>?> getNotificationChannels() async {\n    final List<Map<dynamic, dynamic>>? notificationChannels =\n        await _channel.invokeListMethod('getNotificationChannels');\n\n    return notificationChannels\n        // ignore: always_specify_types\n        ?.map((a) => AndroidNotificationChannel(\n              a['id'],\n              a['name'],\n              description: a['description'],\n              groupId: a['groupId'],\n              showBadge: a['showBadge'],\n              importance: Importance(a['importance']),\n              playSound: a['playSound'],\n              sound: _getNotificationChannelSound(a),\n              enableLights: a['enableLights'],\n              enableVibration: a['enableVibration'],\n              vibrationPattern: a['vibrationPattern'],\n              ledColor: Color(a['ledColor']),\n            ))\n        .toList();\n  }\n\n  /// Returns whether notifications from the calling package are not blocked.\n  Future<bool?> areNotificationsEnabled() async =>\n      await _channel.invokeMethod<bool>('areNotificationsEnabled');\n\n  AndroidNotificationSound? _getNotificationChannelSound(\n      Map<dynamic, dynamic> channelMap) {\n    final int? soundSourceIndex = channelMap['soundSource'];\n    AndroidNotificationSound? sound;\n    if (soundSourceIndex != null) {\n      if (soundSourceIndex ==\n          AndroidNotificationSoundSource.rawResource.index) {\n        sound = RawResourceAndroidNotificationSound(channelMap['sound']);\n      } else if (soundSourceIndex == AndroidNotificationSoundSource.uri.index) {\n        sound = UriAndroidNotificationSound(channelMap['sound']);\n      }\n    }\n    return sound;\n  }\n\n  Future<void> _handleMethod(MethodCall call) async {\n    switch (call.method) {\n      case 'selectNotification':\n        _onSelectNotification?.call(call.arguments);\n        break;\n      default:\n        return await Future<void>.error('Method not defined');\n    }\n  }\n}"}, {"structure_type": "function", "name": "initialize", "docstring": "Initializes the plugin.\n\nCall this method on application before using the plugin further.\n\nInitialisation may also request notification permissions where users will\nsee a permissions prompt. This may be fine in cases where it's acceptable\nto do this when the application runs for the first time. However, if your\napplicationn needs to do this at a later point in time, set the\n[IOSInitializationSettings.requestAlertPermission],\n[IOSInitializationSettings.requestBadgePermission] and\n[IOSInitializationSettings.requestSoundPermission] values to false.\n[requestPermissions] can then be called to request permissions when\nneeded.\n\nTo handle when a notification launched an application, use\n[getNotificationAppLaunchDetails].", "module": "src", "file_path": "flutter_local_notifications/flutter_local_notifications/lib/src/platform_flutter_local_notifications.dart", "file_name": "platform_flutter_local_notifications.dart", "line": 560, "line_from": 560, "line_to": 897, "snippet": "  Future<bool?> initialize(\n    IOSInitializationSettings initializationSettings, {\n    SelectNotificationCallback? onSelectNotification,\n  }) async {\n    _onSelectNotification = onSelectNotification;\n    _onDidReceiveLocalNotification =\n        initializationSettings.onDidReceiveLocalNotification;\n    _channel.setMethodCallHandler(_handleMethod);\n    return await _channel.invokeMethod(\n        'initialize', initializationSettings.toMap());\n  }\n\n  /// Requests the specified permission(s) from user and returns current\n  /// permission status.\n  Future<bool?> requestPermissions({\n    bool sound = false,\n    bool alert = false,\n    bool badge = false,\n  }) =>\n      _channel.invokeMethod<bool?>('requestPermissions', <String, bool>{\n        'sound': sound,\n        'alert': alert,\n        'badge': badge,\n      });\n\n  /// Schedules a notification to be shown at the specified date and time with\n  /// an optional payload that is passed through when a notification is tapped.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> schedule(\n    int id,\n    String? title,\n    String? body,\n    DateTime scheduledDate,\n    IOSNotificationDetails? notificationDetails, {\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('schedule', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'millisecondsSinceEpoch': scheduledDate.millisecondsSinceEpoch,\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  /// Schedules a notification to be shown at the specified time in the\n  /// future in a specific time zone.\n  ///\n  /// Due to the limited support for time zones provided the UILocalNotification\n  /// APIs used on devices using iOS versions older than 10, the\n  /// [uiLocalNotificationDateInterpretation] is needed to control how\n  /// [scheduledDate] is interpreted. See official docs at\n  /// https://developer.apple.com/documentation/uikit/uilocalnotification/1616659-timezone\n  /// for more details. Note that due to this limited support, it's likely that\n  /// on older iOS devices, there will still be issues with daylight saving time\n  /// except for when the time zone used in the [scheduledDate] matches the\n  /// device's time zone and [uiLocalNotificationDateInterpretation] is set to\n  /// [UILocalNotificationDateInterpretation.wallClockTime].\n  Future<void> zonedSchedule(\n    int id,\n    String? title,\n    String? body,\n    TZDateTime scheduledDate,\n    IOSNotificationDetails? notificationDetails, {\n    required UILocalNotificationDateInterpretation\n        uiLocalNotificationDateInterpretation,\n    String? payload,\n    DateTimeComponents? matchDateTimeComponents,\n  }) async {\n    validateId(id);\n    validateDateIsInTheFuture(scheduledDate, matchDateTimeComponents);\n    ArgumentError.checkNotNull(uiLocalNotificationDateInterpretation,\n        'uiLocalNotificationDateInterpretation');\n    final Map<String, Object?> serializedPlatformSpecifics =\n        notificationDetails?.toMap() ?? <String, Object>{};\n    await _channel.invokeMethod(\n        'zonedSchedule',\n        <String, Object?>{\n          'id': id,\n          'title': title,\n          'body': body,\n          'platformSpecifics': serializedPlatformSpecifics,\n          'payload': payload ?? '',\n          'uiLocalNotificationDateInterpretation':\n              uiLocalNotificationDateInterpretation.index,\n        }\n          ..addAll(scheduledDate.toMap())\n          ..addAll(matchDateTimeComponents == null\n              ? <String, Object>{}\n              : <String, Object>{\n                  'matchDateTimeComponents': matchDateTimeComponents.index\n                }));\n  }\n\n  /// Shows a notification on a daily interval at the specified time.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> showDailyAtTime(\n    int id,\n    String? title,\n    String? body,\n    Time notificationTime,\n    IOSNotificationDetails? notificationDetails, {\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('showDailyAtTime', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': RepeatInterval.daily.index,\n      'repeatTime': notificationTime.toMap(),\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  /// Shows a notification on weekly interval at the specified day and time.\n  @Deprecated(\n      'Deprecated due to problems with time zones. Use zonedSchedule instead.')\n  Future<void> showWeeklyAtDayAndTime(\n    int id,\n    String? title,\n    String? body,\n    Day day,\n    Time notificationTime,\n    IOSNotificationDetails? notificationDetails, {\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('showWeeklyAtDayAndTime', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': RepeatInterval.weekly.index,\n      'repeatTime': notificationTime.toMap(),\n      'day': day.value,\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  @override\n  Future<void> show(\n    int id,\n    String? title,\n    String? body, {\n    IOSNotificationDetails? notificationDetails,\n    String? payload,\n  }) {\n    validateId(id);\n    return _channel.invokeMethod(\n      'show',\n      <String, Object?>{\n        'id': id,\n        'title': title,\n        'body': body,\n        'payload': payload ?? '',\n        'platformSpecifics': notificationDetails?.toMap(),\n      },\n    );\n  }\n\n  @override\n  Future<void> periodicallyShow(\n    int id,\n    String? title,\n    String? body,\n    RepeatInterval repeatInterval, {\n    IOSNotificationDetails? notificationDetails,\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('periodicallyShow', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': repeatInterval.index,\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  Future<void> _handleMethod(MethodCall call) async {\n    switch (call.method) {\n      case 'selectNotification':\n        _onSelectNotification?.call(call.arguments);\n        break;\n      case 'didReceiveLocalNotification':\n        _onDidReceiveLocalNotification!(\n            call.arguments['id'],\n            call.arguments['title'],\n            call.arguments['body'],\n            call.arguments['payload']);\n        break;\n      default:\n        return await Future<void>.error('Method not defined');\n    }\n  }\n}\n\n/// macOS implementation of the local notifications plugin.\nclass MacOSFlutterLocalNotificationsPlugin\n    extends MethodChannelFlutterLocalNotificationsPlugin {\n  SelectNotificationCallback? _onSelectNotification;\n\n  /// Initializes the plugin.\n  ///\n  /// Call this method on application before using the plugin further.\n  /// This should only be done once. When a notification created by this plugin\n  /// was used to launch the app, calling `initialize` is what will trigger to\n  /// the `onSelectNotification` callback to be fire.\n  ///\n  /// Initialisation may also request notification permissions where users will\n  /// see a permissions prompt. This may be fine in cases where it's acceptable\n  /// to do this when the application runs for the first time. However, if your\n  /// applicationn needs to do this at a later point in time, set the\n  /// [MacOSInitializationSettings.requestAlertPermission],\n  /// [MacOSInitializationSettings.requestBadgePermission] and\n  /// [MacOSInitializationSettings.requestSoundPermission] values to false.\n  /// [requestPermissions] can then be called to request permissions when\n  /// needed.\n  ///\n  /// To handle when a notification launched an application, use\n  /// [getNotificationAppLaunchDetails].\n  Future<bool?> initialize(\n    MacOSInitializationSettings initializationSettings, {\n    SelectNotificationCallback? onSelectNotification,\n  }) async {\n    _onSelectNotification = onSelectNotification;\n    _channel.setMethodCallHandler(_handleMethod);\n    return await _channel.invokeMethod(\n        'initialize', initializationSettings.toMap());\n  }\n\n  /// Requests the specified permission(s) from user and returns current\n  /// permission status.\n  Future<bool?> requestPermissions({\n    bool? sound,\n    bool? alert,\n    bool? badge,\n  }) =>\n      _channel.invokeMethod<bool>('requestPermissions', <String, bool?>{\n        'sound': sound,\n        'alert': alert,\n        'badge': badge,\n      });\n\n  /// Schedules a notification to be shown at the specified date and time\n  /// relative to a specific time zone.\n  Future<void> zonedSchedule(\n    int id,\n    String? title,\n    String? body,\n    TZDateTime scheduledDate,\n    MacOSNotificationDetails? notificationDetails, {\n    String? payload,\n    DateTimeComponents? matchDateTimeComponents,\n  }) async {\n    validateId(id);\n    validateDateIsInTheFuture(scheduledDate, matchDateTimeComponents);\n    final Map<String, Object?> serializedPlatformSpecifics =\n        notificationDetails?.toMap() ?? <String, Object>{};\n    await _channel.invokeMethod(\n        'zonedSchedule',\n        <String, Object?>{\n          'id': id,\n          'title': title,\n          'body': body,\n          'platformSpecifics': serializedPlatformSpecifics,\n          'payload': payload ?? '',\n        }\n          ..addAll(scheduledDate.toMap())\n          ..addAll(matchDateTimeComponents == null\n              ? <String, Object>{}\n              : <String, Object>{\n                  'matchDateTimeComponents': matchDateTimeComponents.index\n                }));\n  }\n\n  @override\n  Future<void> show(\n    int id,\n    String? title,\n    String? body, {\n    MacOSNotificationDetails? notificationDetails,\n    String? payload,\n  }) {\n    validateId(id);\n    return _channel.invokeMethod(\n      'show',\n      <String, Object?>{\n        'id': id,\n        'title': title,\n        'body': body,\n        'payload': payload ?? '',\n        'platformSpecifics': notificationDetails?.toMap(),\n      },\n    );\n  }\n\n  @override\n  Future<void> periodicallyShow(\n    int id,\n    String? title,\n    String? body,\n    RepeatInterval repeatInterval, {\n    MacOSNotificationDetails? notificationDetails,\n    String? payload,\n  }) async {\n    validateId(id);\n    await _channel.invokeMethod('periodicallyShow', <String, Object?>{\n      'id': id,\n      'title': title,\n      'body': body,\n      'calledAt': clock.now().millisecondsSinceEpoch,\n      'repeatInterval': repeatInterval.index,\n      'platformSpecifics': notificationDetails?.toMap(),\n      'payload': payload ?? ''\n    });\n  }\n\n  Future<void> _handleMethod(MethodCall call) async {\n    switch (call.method) {\n      case 'selectNotification':\n        _onSelectNotification?.call(call.arguments);\n        break;\n      default:\n        return await Future<void>.error('Method not defined');\n    }\n  }\n}"}, {"structure_type": "class", "name": "of '", "docstring": "", "module": "src", "file_path": "flutter_local_notifications/flutter_local_notifications/lib/src/flutter_local_notifications_plugin.dart", "file_name": "flutter_local_notifications_plugin.dart", "line": 61, "line_from": 61, "line_to": 66, "snippet": "          'The type argument must be a concrete subclass of '\n          'FlutterLocalNotificationsPlatform');\n    }\n    if (kIsWeb) {\n      return null;\n    }"}, {"structure_type": "class", "name": "source type", "docstring": "", "module": "android", "file_path": "flutter_local_notifications/flutter_local_notifications/lib/src/platform_specifics/android/icon.dart", "file_name": "icon.dart", "line": 11, "line_from": 11, "line_to": 31, "snippet": "  /// The subclass source type\n  AndroidIconSource get source;\n}\n\n/// Represents a drawable resource belonging to the Android application that\n/// should be used as an icon on Android.\nclass DrawableResourceAndroidIcon implements AndroidIcon<String> {\n  /// Constructs an instance of [DrawableResourceAndroidIcon].\n  const DrawableResourceAndroidIcon(this._icon);\n\n  final String _icon;\n\n  /// The name of the drawable resource.\n  ///\n  /// For example if the drawable resource is located at `res/drawable/app_icon.png`, the icon should be `app_icon`\n  @override\n  String get data => _icon;\n\n  @override\n  AndroidIconSource get source => AndroidIconSource.drawableResource;\n}"}, {"structure_type": "class", "name": "source type", "docstring": "", "module": "android", "file_path": "flutter_local_notifications/flutter_local_notifications/lib/src/platform_specifics/android/bitmap.dart", "file_name": "bitmap.dart", "line": 11, "line_from": 11, "line_to": 31, "snippet": "  /// The subclass source type\n  AndroidBitmapSource get source;\n}\n\n/// Represents a drawable resource belonging to the Android application that\n/// should be used as a bitmap on Android.\nclass DrawableResourceAndroidBitmap implements AndroidBitmap<String> {\n  /// Constructs an instance of [DrawableResourceAndroidBitmap].\n  const DrawableResourceAndroidBitmap(this._bitmap);\n\n  final String _bitmap;\n\n  /// The name of the drawable resource.\n  ///\n  /// For example if the drawable resource is located at `res/drawable/app_icon.png`, the bitmap should be `app_icon`\n  @override\n  String get data => _bitmap;\n\n  @override\n  AndroidBitmapSource get source => AndroidBitmapSource.drawable;\n}"}, {"structure_type": "class", "name": "for defining an Android notification style", "docstring": "", "module": "styles", "file_path": "flutter_local_notifications/flutter_local_notifications/lib/src/platform_specifics/android/styles/style_information.dart", "file_name": "style_information.dart", "line": 1, "line_from": 1, "line_to": 4, "snippet": "/// Abstract class for defining an Android notification style\nabstract class StyleInformation {}\n"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "test", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/test/notifications_manager_test.dart", "file_name": "notifications_manager_test.dart", "line": 1036, "line_from": 1036, "line_to": 1071, "snippet": "        final Future<void> Function(DBusSignal) callback =\n            invocation.positionalArguments.single;\n        for (final LinuxNotificationInfo notify in notifications) {\n          callback(\n            DBusSignal(\n              sender: '',\n              path: DBusObjectPath('/org/freedesktop/Notifications'),\n              interface: 'org.freedesktop.Notifications',\n              name: 'NotificationClosed',\n              values: <DBusValue>[\n                DBusUint32(notify.systemId),\n                DBusUint32(1),\n              ],\n            ),\n          ).then((_) {\n            for (final Completer<void> completer in completers) {\n              if (!completer.isCompleted) {\n                completer.complete();\n              }\n            }\n          });\n        }\n        return FakeStreamSubscription<DBusSignal>();\n      });\n\n      await manager.initialize(initSettings);\n      await Future.forEach(\n        completers,\n        (Completer<void> completer) => completer.future,\n      );\n\n      for (final LinuxNotificationInfo notify in notifications) {\n        verify(\n          () => mockStorage.removeBySystemId(notify.systemId),\n        ).called(1);\n      }"}, {"structure_type": "function", "name": "Function", "docstring": "", "module": "test", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/test/notifications_manager_test.dart", "file_name": "notifications_manager_test.dart", "line": 1103, "line_from": 1103, "line_to": 1144, "snippet": "        final Future<void> Function(DBusSignal) callback =\n            invocation.positionalArguments.single;\n        for (final LinuxNotificationInfo notify in notifications) {\n          callback(\n            DBusSignal(\n              sender: '',\n              path: DBusObjectPath('/org/freedesktop/Notifications'),\n              interface: 'org.freedesktop.Notifications',\n              name: 'ActionInvoked',\n              values: <DBusValue>[\n                DBusUint32(notify.systemId),\n                const DBusString('default'),\n              ],\n            ),\n          ).then((_) {\n            for (final Completer<void> completer in completers) {\n              if (!completer.isCompleted) {\n                completer.complete();\n              }\n            }\n          });\n        }\n        return FakeStreamSubscription<DBusSignal>();\n      });\n\n      await manager.initialize(\n        initSettings,\n        onSelectNotification: mockSelectNotificationCallback,\n      );\n      await Future.forEach(\n        completers,\n        (Completer<void> completer) => completer.future,\n      );\n\n      for (final LinuxNotificationInfo notify in notifications) {\n        verify(\n          () => mockStorage.getBySystemId(notify.systemId),\n        ).called(1);\n        verify(\n          () => mockSelectNotificationCallback.call(notify.payload),\n        ).called(1);\n      }"}, {"structure_type": "class", "name": "MockDBusWrapper extends Mock implements DBusWrapper", "docstring": "", "module": "mock", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/test/mock/mock_dbus_wrapper.dart", "file_name": "mock_dbus_wrapper.dart", "line": 5, "line_from": 5, "line_to": 12, "snippet": "class MockDBusWrapper extends Mock implements DBusWrapper {}\n\nclass MockDBusRemoteObject extends Mock implements DBusRemoteObject {}\n\nclass MockDBusRemoteObjectSignalStream extends Mock\n    implements DBusRemoteObjectSignalStream {}\n"}, {"structure_type": "class", "name": "_SelectNotificationCallback", "docstring": "", "module": "mock", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/test/mock/mock_select_notification_callback.dart", "file_name": "mock_select_notification_callback.dart", "line": 4, "line_from": 4, "line_to": 11, "snippet": "abstract class _SelectNotificationCallback {\n  Future<dynamic> call(String? payload);\n}\n\nclass MockSelectNotificationCallback extends Mock\n    implements _SelectNotificationCallback {}\n"}, {"structure_type": "class", "name": "MockFileSystem extends Mock implements FileSystem", "docstring": "", "module": "mock", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/test/mock/mock_file_system.dart", "file_name": "mock_file_system.dart", "line": 4, "line_from": 4, "line_to": 6, "snippet": "class MockFileSystem extends Mock implements FileSystem {}\n"}, {"structure_type": "class", "name": "MockNotificationStorage extends Mock implements NotificationStorage", "docstring": "", "module": "mock", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/test/mock/mock_storage.dart", "file_name": "mock_storage.dart", "line": 4, "line_from": 4, "line_to": 6, "snippet": "class MockNotificationStorage extends Mock implements NotificationStorage {}\n"}, {"structure_type": "class", "name": "MockFile extends Mock implements File", "docstring": "", "module": "mock", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/test/mock/mock_file.dart", "file_name": "mock_file.dart", "line": 5, "line_from": 5, "line_to": 7, "snippet": "class MockFile extends Mock implements File {}\n"}, {"structure_type": "class", "name": "MockLinuxPlatformInfo extends Mock implements LinuxPlatformInfo", "docstring": "", "module": "mock", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/test/mock/mock_platform_info.dart", "file_name": "mock_platform_info.dart", "line": 4, "line_from": 4, "line_to": 6, "snippet": "class MockLinuxPlatformInfo extends Mock implements LinuxPlatformInfo {}\n"}, {"structure_type": "class", "name": "FakeStreamSubscription<T> extends Fake implements StreamSubscription<T>", "docstring": "", "module": "mock", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/test/mock/fake_stream_subscription.dart", "file_name": "fake_stream_subscription.dart", "line": 5, "line_from": 5, "line_to": 7, "snippet": "class FakeStreamSubscription<T> extends Fake implements StreamSubscription<T> {}\n"}, {"structure_type": "function", "name": "getAll", "docstring": "Returns all platform-specific info", "module": "src", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/lib/src/platform_info.dart", "file_name": "platform_info.dart", "line": 14, "line_from": 14, "line_to": 80, "snippet": "  Future<LinuxPlatformInfoData> getAll() async {\n    try {\n      final String exePath =\n          await File('/proc/self/exe').resolveSymbolicLinks();\n      final String processName = path.basenameWithoutExtension(exePath);\n      final String appPath = path.dirname(exePath);\n      final String assetPath = path.join(appPath, 'data', 'flutter_assets');\n      final String versionPath = path.join(assetPath, 'version.json');\n      final Map<String, dynamic> json = jsonDecode(\n        await File(versionPath).readAsString(),\n      );\n      late final Directory runtimeDir;\n      if (xdg.runtimeDir == null) {\n        final int pid = _posix.getpid();\n        final int userId = _posix.getuid();\n        final int sessionId = _posix.getsid(pid);\n        final Map<String, String> env = Platform.environment;\n        final String? tmpdir = env['TMPDIR'];\n        runtimeDir = Directory(\n          path.join(\n            tmpdir == null || tmpdir.isEmpty ? '/tmp' : tmpdir,\n            processName,\n            '$userId',\n            '$sessionId',\n          ),\n        );\n      } else {\n        runtimeDir = Directory(path.join(xdg.runtimeDir!.path, processName));\n      }\n      if (!runtimeDir.existsSync()) {\n        await runtimeDir.create(recursive: true);\n      }\n\n      return LinuxPlatformInfoData(\n        appName: json['app_name'] ?? '',\n        assetsPath: assetPath,\n        runtimePath: runtimeDir.path,\n      );\n      // ignore: avoid_catches_without_on_clauses\n    } catch (e) {\n      return const LinuxPlatformInfoData();\n    }\n  }\n}\n\n/// Represents Linux platform-specific info\nclass LinuxPlatformInfoData {\n  /// Constructs an instance of [LinuxPlatformInfoData].\n  const LinuxPlatformInfoData({\n    this.appName,\n    this.assetsPath,\n    this.runtimePath,\n  });\n\n  /// Application name\n  final String? appName;\n\n  /// Path to the Flutter Assets directory\n  final String? assetsPath;\n\n  /// The base directory relative to which user-specific runtime files and\n  /// other file objects should be placed\n  /// (Corresponds to `$XDG_RUNTIME_DIR` environment variable).\n  /// Please see XDG Base Directory Specification https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n  /// If `$XDG_RUNTIME_DIR` is not set, the following directory structure is used: `/[$TMPDIR|tmp]/APP_NAME/USER_ID/SESSION_ID`\n  final String? runtimePath;\n}"}, {"structure_type": "function", "name": "getAll", "docstring": "Get all notifications.", "module": "src", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/lib/src/storage.dart", "file_name": "storage.dart", "line": 30, "line_from": 30, "line_to": 178, "snippet": "  Future<List<LinuxNotificationInfo>> getAll() async {\n    final _Cache cache = await _readInfoMap();\n    return cache.toImmutableMap().values.toList();\n  }\n\n  /// Get notification by [LinuxNotificationInfo.id].\n  Future<LinuxNotificationInfo?> getBySystemId(int systemId) async {\n    final _Cache cache = await _readInfoMap();\n    return cache.getBySystemId(systemId);\n  }\n\n  /// Get notification by [LinuxNotificationInfo.systemId].\n  Future<LinuxNotificationInfo?> getById(int id) async {\n    final _Cache cache = await _readInfoMap();\n    return cache.getById(id);\n  }\n\n  /// Insert notification to the storage.\n  /// Returns `true` if the operation succeeded.\n  Future<bool> insert(LinuxNotificationInfo notification) async {\n    final _Cache cache = await _readInfoMap();\n    cache.insert(notification);\n    return _writeInfoList(cache.values.toList());\n  }\n\n  /// Remove notification from the storage by [LinuxNotificationInfo.id].\n  /// Returns `true` if the operation succeeded.\n  Future<bool> removeById(int id) async {\n    final _Cache cache = await _readInfoMap();\n    cache.removeById(id);\n    return _writeInfoList(cache.values.toList());\n  }\n\n  /// Remove notification from the storage by [LinuxNotificationInfo.systemId].\n  /// Returns `true` if the operation succeeded.\n  Future<bool> removeBySystemId(int systemId) async {\n    final _Cache cache = await _readInfoMap();\n    final LinuxNotificationInfo? info = cache.getBySystemId(systemId);\n    if (info != null) {\n      cache.removeById(info.id);\n    }\n    return _writeInfoList(cache.values.toList());\n  }\n\n  /// Remove notification from the storage by [idList].\n  /// Returns `true` if the operation succeeded.\n  Future<bool> removeByIdList(List<int> idList) async {\n    final _Cache cache = await _readInfoMap();\n    // ignore: prefer_foreach\n    for (final int id in idList) {\n      cache.removeById(id);\n    }\n    return _writeInfoList(cache.values.toList());\n  }\n\n  /// Force read info from the disk to the cache.\n  Future<void> forceReloadCache() async {\n    _cachedInfo = await _readFromCache();\n  }\n\n  Future<File?> _getStorageFile() async {\n    final LinuxPlatformInfoData data = await _platformInfo.getAll();\n    final String? dir = data.runtimePath;\n    if (dir == null) {\n      return null;\n    }\n    return _fs.open(path.join(dir, _kFileName));\n  }\n\n  /// Gets a [LinuxNotificationInfo] from the stored file.\n  /// Once read, the data are maintained in memory.\n  Future<_Cache> _readInfoMap() async {\n    if (_cachedInfo != null) {\n      return _cachedInfo!;\n    }\n    return _cachedInfo = await _readFromCache();\n  }\n\n  Future<_Cache> _readFromCache() async {\n    final _Cache cache = _Cache();\n    final File? storageFile = await _getStorageFile();\n    if (storageFile != null && storageFile.existsSync()) {\n      final String jsonStr = storageFile.readAsStringSync();\n      if (jsonStr.isNotEmpty) {\n        final dynamic json = jsonDecode(jsonStr);\n        if (json is List) {\n          for (final dynamic j in json) {\n            final LinuxNotificationInfo info =\n                LinuxNotificationInfo.fromJson(j);\n            cache.insert(info);\n          }\n        } else {\n          cache.insert(LinuxNotificationInfo.fromJson(json));\n        }\n      }\n    }\n    return cache;\n  }\n\n  /// Writes info list to disk. Returns [true] if the operation succeeded.\n  Future<bool> _writeInfoList(List<LinuxNotificationInfo> infoList) async {\n    try {\n      final File? storageFile = await _getStorageFile();\n      if (storageFile == null) {\n        return false;\n      }\n      if (!storageFile.existsSync()) {\n        storageFile.createSync(recursive: true);\n      }\n      final String jsonStr = jsonEncode(infoList);\n      storageFile.writeAsStringSync(jsonStr);\n    } on IOException catch (e) {\n      // ignore: avoid_print\n      print('Error saving preferences to disk: $e');\n      return false;\n    }\n    return true;\n  }\n}\n\nclass _Cache {\n  _Cache()\n      : _infoMap = <int, LinuxNotificationInfo>{},\n        _systemIdMap = <int, int>{};\n\n  final Map<int, LinuxNotificationInfo> _infoMap;\n\n  /// System ID to ID map.\n  final Map<int, int> _systemIdMap;\n\n  LinuxNotificationInfo? getById(int? id) => _infoMap[id];\n\n  LinuxNotificationInfo? getBySystemId(int? id) => _infoMap[_systemIdMap[id]];\n\n  void insert(LinuxNotificationInfo info) {\n    _infoMap[info.id] = info;\n    _systemIdMap[info.systemId] = info.id;\n  }\n\n  void removeById(int id) {\n    final LinuxNotificationInfo? info = _infoMap.remove(id);\n    _systemIdMap.remove(info?.systemId);\n  }\n\n  Iterable<LinuxNotificationInfo> get values => _infoMap.values;\n\n  Map<int, LinuxNotificationInfo> toImmutableMap() =>\n      UnmodifiableMapView<int, LinuxNotificationInfo>(_infoMap);\n}"}, {"structure_type": "class", "name": "dependencies.", "docstring": "Constructs an instance of of [LinuxNotificationManager]", "module": "src", "file_path": "flutter_local_notifications/flutter_local_notifications_linux/lib/src/notifications_manager.dart", "file_name": "notifications_manager.dart", "line": 32, "line_from": 32, "line_to": 339, "snippet": "  /// with the given class dependencies.\n  @visibleForTesting\n  LinuxNotificationManager.private({\n    DBusWrapper? dbus,\n    LinuxPlatformInfo? platformInfo,\n    NotificationStorage? storage,\n  })  : _dbus = dbus ?? DBusWrapper(),\n        _platformInfo = platformInfo ?? LinuxPlatformInfo(),\n        _storage = storage ?? NotificationStorage();\n\n  final DBusWrapper _dbus;\n  final LinuxPlatformInfo _platformInfo;\n  final NotificationStorage _storage;\n\n  late final LinuxInitializationSettings _initializationSettings;\n  late final SelectNotificationCallback? _onSelectNotification;\n  late final LinuxPlatformInfoData _platformData;\n\n  bool _initialized = false;\n\n  /// Initializes the manager.\n  /// Call this method on application before using the manager further.\n  Future<bool> initialize(\n    LinuxInitializationSettings initializationSettings, {\n    SelectNotificationCallback? onSelectNotification,\n  }) async {\n    if (_initialized) {\n      return _initialized;\n    }\n    _initialized = true;\n    _initializationSettings = initializationSettings;\n    _onSelectNotification = onSelectNotification;\n    _dbus.build(\n      destination: _DBusInterfaceSpec.destination,\n      path: _DBusInterfaceSpec.path,\n    );\n    _platformData = await _platformInfo.getAll();\n\n    await _storage.forceReloadCache();\n    _subscribeSignals();\n    return _initialized;\n  }\n\n  /// Show notification\n  Future<void> show(\n    int id,\n    String? title,\n    String? body, {\n    LinuxNotificationDetails? details,\n    String? payload,\n  }) async {\n    final LinuxNotificationInfo? prevNotify = await _storage.getById(id);\n    final LinuxNotificationIcon? defaultIcon =\n        _initializationSettings.defaultIcon;\n\n    final DBusMethodSuccessResponse result = await _dbus.callMethod(\n      _DBusInterfaceSpec.destination,\n      _DBusMethodsSpec.notify,\n      <DBusValue>[\n        // app_name\n        DBusString(_platformData.appName ?? ''),\n        // replaces_id\n        DBusUint32(prevNotify?.systemId ?? 0),\n        // app_icon\n        DBusString(_getAppIcon(details?.icon ?? defaultIcon) ?? ''),\n        // summary\n        DBusString(title ?? ''),\n        // body\n        DBusString(body ?? ''),\n        // actions\n        DBusArray.string(_buildActions(details, _initializationSettings)),\n        // hints\n        DBusDict.stringVariant(_buildHints(details, _initializationSettings)),\n        // expire_timeout\n        DBusInt32(\n          details?.timeout.value ??\n              const LinuxNotificationTimeout.systemDefault().value,\n        ),\n      ],\n      replySignature: DBusSignature('u'),\n    );\n\n    final int systemId = (result.returnValues[0] as DBusUint32).value;\n    final LinuxNotificationInfo notify = prevNotify?.copyWith(\n          systemId: systemId,\n          payload: payload,\n        ) ??\n        LinuxNotificationInfo(\n          id: id,\n          systemId: systemId,\n          payload: payload,\n        );\n    await _storage.insert(notify);\n  }\n\n  Map<String, DBusValue> _buildHints(\n    LinuxNotificationDetails? details,\n    LinuxInitializationSettings initSettings,\n  ) {\n    final Map<String, DBusValue> hints = <String, DBusValue>{};\n    final LinuxNotificationIcon? icon =\n        details?.icon ?? initSettings.defaultIcon;\n    if (icon?.type == LinuxIconType.byteData) {\n      final LinuxRawIconData data = icon!.content as LinuxRawIconData;\n      hints['image-data'] = DBusStruct(\n        <DBusValue>[\n          DBusInt32(data.width),\n          DBusInt32(data.height),\n          DBusInt32(data.rowStride),\n          DBusBoolean(data.hasAlpha),\n          DBusInt32(data.bitsPerSample),\n          DBusInt32(data.channels),\n          DBusArray.byte(data.data),\n        ],\n      );\n    }\n    final LinuxNotificationSound? sound =\n        details?.sound ?? initSettings.defaultSound;\n    if (sound != null) {\n      switch (sound.type) {\n        case LinuxSoundType.assets:\n          hints['sound-file'] = DBusString(\n            path.join(\n              _platformData.assetsPath!,\n              sound.content as String,\n            ),\n          );\n          break;\n        case LinuxSoundType.theme:\n          hints['sound-name'] = DBusString(sound.content as String);\n          break;\n      }\n    }\n    if (details?.category != null) {\n      hints['category'] = DBusString(details!.category!.name);\n    }\n    if (details?.urgency != null) {\n      hints['urgency'] = DBusByte(details!.urgency!.value);\n    }\n    if (details?.resident ?? false) {\n      hints['resident'] = const DBusBoolean(true);\n    }\n    final bool? suppressSound =\n        details?.suppressSound ?? initSettings.defaultSuppressSound;\n    if (suppressSound ?? false) {\n      hints['suppress-sound'] = const DBusBoolean(true);\n    }\n    if (details?.transient ?? false) {\n      hints['transient'] = const DBusBoolean(true);\n    }\n    if (details?.location != null) {\n      final LinuxNotificationLocation location = details!.location!;\n      hints['x'] = DBusByte(location.x);\n      hints['y'] = DBusByte(location.y);\n    }\n    if (details?.customHints != null) {\n      hints.addAll(_buildCustomHints(details!.customHints!));\n    }\n\n    return hints;\n  }\n\n  Map<String, DBusValue> _buildCustomHints(\n    List<LinuxNotificationCustomHint> hints,\n  ) =>\n      Map<String, DBusValue>.fromEntries(\n        hints.map(\n          (LinuxNotificationCustomHint hint) => MapEntry<String, DBusValue>(\n            hint.name,\n            hint.value.toDBusValue(),\n          ),\n        ),\n      );\n\n  // TODO(proninyaroslav): add actions\n  List<String> _buildActions(\n    LinuxNotificationDetails? details,\n    LinuxInitializationSettings initSettings,\n  ) =>\n      // Add default action, which is triggered when the notification is clicked\n      <String>[\n        _kDefaultActionName,\n        details?.defaultActionName ?? initSettings.defaultActionName,\n      ];\n\n  /// Cancel notification with the given [id].\n  Future<void> cancel(int id) async {\n    final LinuxNotificationInfo? notify = await _storage.getById(id);\n    await _storage.removeById(id);\n    if (notify != null) {\n      await _dbusCancel(notify.systemId);\n    }\n  }\n\n  /// Cancel all notifications.\n  Future<void> cancelAll() async {\n    final List<LinuxNotificationInfo> notifyList = await _storage.getAll();\n    final List<int> idList = <int>[];\n    for (final LinuxNotificationInfo notify in notifyList) {\n      idList.add(notify.id);\n      await _dbusCancel(notify.systemId);\n    }\n    await _storage.removeByIdList(idList);\n  }\n\n  /// Returns the system notification server capabilities.\n  Future<LinuxServerCapabilities> getCapabilities() async {\n    final DBusMethodSuccessResponse result = await _dbus.callMethod(\n      _DBusInterfaceSpec.destination,\n      _DBusMethodsSpec.getCapabilities,\n      <DBusValue>[],\n      replySignature: DBusSignature('as'),\n    );\n    final Set<String> capsSet = (result.returnValues[0] as DBusArray)\n        .children\n        .map((DBusValue c) => (c as DBusString).value)\n        .toSet();\n\n    final LinuxServerCapabilities capabilities = LinuxServerCapabilities(\n      otherCapabilities: const <String>{},\n      body: capsSet.remove('body'),\n      bodyHyperlinks: capsSet.remove('body-hyperlinks'),\n      bodyImages: capsSet.remove('body-images'),\n      bodyMarkup: capsSet.remove('body-markup'),\n      iconMulti: capsSet.remove('icon-multi'),\n      iconStatic: capsSet.remove('icon-static'),\n      persistence: capsSet.remove('persistence'),\n      sound: capsSet.remove('sound'),\n    );\n    return capabilities.copyWith(otherCapabilities: capsSet);\n  }\n\n  /// Returns a [Map] with the specified notification id as the key\n  /// and the id, assigned by the system, as the value.\n  Future<Map<int, int>> getSystemIdMap() async =>\n      Map<int, int>.fromEntries(await _storage.getAll().then(\n            (List<LinuxNotificationInfo> list) => list.map(\n              (LinuxNotificationInfo notify) => MapEntry<int, int>(\n                notify.id,\n                notify.systemId,\n              ),\n            ),\n          ));\n\n  Future<void> _dbusCancel(int systemId) => _dbus.callMethod(\n        _DBusInterfaceSpec.destination,\n        _DBusMethodsSpec.closeNotification,\n        <DBusValue>[DBusUint32(systemId)],\n        replySignature: DBusSignature(''),\n      );\n\n  String? _getAppIcon(LinuxNotificationIcon? icon) {\n    if (icon == null) {\n      return null;\n    }\n    switch (icon.type) {\n      case LinuxIconType.assets:\n        if (_platformData.assetsPath == null) {\n          return null;\n        } else {\n          final String relativePath = icon.content as String;\n          return path.join(_platformData.assetsPath!, relativePath);\n        }\n      case LinuxIconType.byteData:\n        return null;\n      case LinuxIconType.theme:\n        return icon.content as String;\n    }\n  }\n\n  /// Subscribe to the signals for actions and closing notifications.\n  void _subscribeSignals() {\n    _dbus.subscribeSignal(_DBusMethodsSpec.actionInvoked).listen(\n      (DBusSignal s) async {\n        if (s.signature != DBusSignature('us')) {\n          return;\n        }\n\n        final int systemId = (s.values[0] as DBusUint32).value;\n        final String actionKey = (s.values[1] as DBusString).value;\n        // TODO(proninyaroslav): add actions\n        if (actionKey == _kDefaultActionName) {\n          final LinuxNotificationInfo? notify =\n              await _storage.getBySystemId(systemId);\n          _onSelectNotification?.call(notify?.payload);\n        }\n      },\n    );\n\n    _dbus.subscribeSignal(_DBusMethodsSpec.notificationClosed).listen(\n      (DBusSignal s) async {\n        if (s.signature != DBusSignature('uu')) {\n          return;\n        }\n\n        final int systemId = (s.values[0] as DBusUint32).value;\n        await _storage.removeBySystemId(systemId);\n      },\n    );\n  }\n}\n\nconst String _kDefaultActionName = 'default';\n\nclass _DBusInterfaceSpec {\n  static const String destination = 'org.freedesktop.Notifications';\n  static const String path = '/org/freedesktop/Notifications';\n}"}]